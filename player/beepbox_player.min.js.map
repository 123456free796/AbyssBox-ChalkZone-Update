{"version":3,"names":["TypePresets","sampleLoadingState","constructor","this","statusTable","urlTable","totalSamples","samplesLoaded","SampleLoadedEvent","Event","super","SampleLoadEvents","EventTarget","sampleLoadEvents","startLoadingSample","url","chipWaveIndex","presetSettings","rawLoopOptions","customSampleRate","sampleLoaderAudioContext","AudioContext","sampleRate","closedSampleLoaderAudioContext","chipWave","Config","chipWaves","rawChipWave","rawChipWaves","rawRawChipWave","rawRawChipWaves","fetch","then","response","ok","arrayBuffer","Promise","reject","Error","decodeAudioData","audioBuffer","samples","centerWave","Array","from","getChannelData","integratedSamples","performIntegral","length","dispatchEvent","close","catch","error","alert","loadScript","resolve","willReloadForCustomSamples","script","document","createElement","src","head","appendChild","addEventListener","event","loadBuiltInSamples","set","defaultIntegratedSamples","defaultSamples","name","expression","isSampled","isPercussion","extraSampleDetune","startIndex","index","integratedChipWave","dictionary","chipWaveSamples","kicksample","snaresample","pianosample","WOWsample","overdrivesample","trumpetsample","saxophonesample","orchhitsample","detatchedviolinsample","synthsample","sonic3snaresample","comeonsample","choirsample","overdrivensample","flutesample","legatoviolinsample","tremoloviolinsample","amenbreaksample","pizzicatoviolinsample","timallengruntsample","tubasample","loopingcymbalsample","kickdrumsample","snaredrumsample","closedhihatsample","foothihatsample","openhihatsample","crashsample","pianoC4sample","liverpadsample","marimbasample","susdotwavsample","wackyboxttssample","peppersteak1","peppersteak2","vinyl","slapbass","hdeboverdrive","sunsoftbass","masculinechoir","femininechoir","southtololoche","harp","panflute","krumhorn","timpani","crowdhey","warioland4brass","warioland4organ","warioland4daow","warioland4hourchime","warioland4tick","kirbykick","kirbysnare","kirbybongo","kirbyclick","funkkick","funksnare","funksnareleft","funksnareright","funktomhigh","funktomlow","funkhihatclosed","funkhihathalfopen","funkhihatopen","funkhihatopentip","funkhihatfoot","funkcrash","funkcrashtip","funkride","chipWaveIndexOffset","chipWaveSample","chronoperc1finalsample","synthkickfmsample","woodclicksample","acousticsnaresample","catpaintboxsample","gameboypaintboxsample","mariopaintboxsample","drumpaintboxsample","yoshipaintboxsample","starpaintboxsample","fireflowerpaintboxsample","dogpaintbox","oinkpaintbox","swanpaintboxsample","facepaintboxsample","console","log","wave","sum","i","average","push","Float32Array","centerAndNormalizeWave","magn","Math","abs","magnAvg","cumulative","newWave","getPulseWidthRatio","pulseWidth","pulseWidthRange","getDrumWave","inverseRealFourierTransform","scaleElementsByFactor","chipNoises","chipNoiseLength","drumBuffer","newBuffer","random","drawNoiseSpectrum","sqrt","round","ultraboxnewchipnoiserand","pow","clz32","b3","b4","b5","b6","b0","b1","b2","white","lastOut","waveLength","lowOctave","highOctave","lowPower","highPower","overallSlope","lowIndex","highIndex","min","retroWave","combinedAmplitude","lerped","log2","amplitude","radians","PI","cos","sin","generateSquareWave","phaseWidth","sineWaveLength","centerPoint","generateSawWave","inverse","getArpeggioPitchIndex","pitchCount","useFastTwoNoteArp","arpeggio","arpeggioPattern","arpeggioPatterns","toNameMap","array","value","result","effectsIncludeTransition","effects","effectsIncludeChord","effectsIncludePitchShift","effectsIncludeDetune","effectsIncludeVibrato","effectsIncludeNoteFilter","effectsIncludeDistortion","effectsIncludeBitcrusher","effectsIncludePanning","effectsIncludeChorus","effectsIncludeEcho","effectsIncludeReverb","thresholdVal","kneeVal","ratioVal","attackVal","releaseVal","scales","realName","flags","keys","isWhiteKey","basePitch","blackKeyNameParents","tempoMin","tempoMax","octaveMin","octaveMax","echoDelayRange","echoDelayStepTicks","echoSustainRange","echoShelfHz","echoShelfGain","reverbShelfHz","reverbShelfGain","reverbRange","reverbDelayBufferSize","reverbDelayBufferMask","beatsPerBarMin","beatsPerBarMax","barCountMin","barCountMax","instrumentCountMin","layeredInstrumentCountMax","patternInstrumentCountMax","partsPerBeat","ticksPerPart","ticksPerArpeggio","rhythms","stepsPerBeat","roundUpThresholds","instrumentTypeNames","instrumentTypeHasSpecialInterval","chipBaseExpression","fmBaseExpression","noiseBaseExpression","spectrumBaseExpression","drumsetBaseExpression","harmonicsBaseExpression","pwmBaseExpression","supersawBaseExpression","pickedStringBaseExpression","distortionBaseVolume","bitcrusherBaseVolume","raw","newArray","Object","assign","key","rawChipToIntegrated","firstIndexForSamplesInChipWaveList","pitchFilterMult","isSoft","filterFreqStep","filterFreqRange","filterFreqReferenceSetting","filterFreqReferenceHz","filterFreqMaxHz","filterFreqMinHz","filterGainRange","filterGainCenter","filterGainStep","filterMaxPoints","filterTypeNames","filterMorphCount","filterSimpleCutRange","filterSimplePeakRange","fadeInRange","fadeOutTicks","fadeOutNeutral","drumsetFadeOutTicks","transitions","isSeamless","continues","slides","slideTicks","includeAdjacentPatterns","vibratos","type","delayTicks","vibratoTypes","periodsSeconds","period","arpSpeedScale","unisons","voices","spread","offset","sign","effectNames","effectOrder","noteSizeMax","volumeRange","volumeLogScale","panCenter","panMax","panDelaySecondsMax","chorusRange","chorusPeriodSeconds","chorusDelayRange","chorusDelayOffsets","chorusPhaseOffsets","chorusMaxDelay","concat","reduce","x","y","max","chords","customInterval","arpeggiates","strumParts","singleTone","maxChordSize","operatorCount","maxPitchOrOperatorCount","algorithms","carrierCount","associatedCarrier","modulatedBy","algorithms6Op","operatorCarrierInterval","operatorAmplitudeMax","operatorFrequencies","mult","hzOffset","amplitudeSign","envelopes","speed","feedbacks","indices","feedbacks6Op","spectrumNoiseLength","spectrumBasePitch","spectrumControlPoints","spectrumControlPointsPerOctave","spectrumControlPointBits","spectrumMax","harmonicsControlPoints","harmonicsRendered","harmonicsRenderedForPickedString","harmonicsControlPointBits","harmonicsMax","harmonicsWavelength","pulseWidthStepPower","supersawVoiceCount","supersawDynamismMax","supersawSpreadMax","supersawShapeMax","pitchChannelCountMin","pitchChannelCountMax","noiseChannelCountMin","noiseChannelCountMax","modChannelCountMin","modChannelCountMax","noiseInterval","pitchesPerOctave","drumCount","pitchOctaves","modCount","maxPitch","maximumTonesPerChannel","justIntonationSemitones","map","pitchShiftRange","pitchShiftCenter","detuneCenter","detuneMax","detuneMin","songDetuneMin","songDetuneMax","sineWaveMask","sineWave","generateSineWave","pickedStringDispersionCenterFreq","pickedStringDispersionFreqScale","pickedStringDispersionFreqMult","pickedStringShelfHz","distortionRange","stringSustainRange","stringDecayRate","bitcrusherFreqRange","bitcrusherOctaveStep","bitcrusherQuantizationRange","maxEnvelopeCount","defaultAutomationRange","instrumentAutomationTargets","computeIndex","displayName","interleave","isFilter","maxCount","effect","compatibleInstruments","operatorWaves","asin","generateTriWave","drive","generateTrapezoidWave","generateRoundedSineWave","pwmOperatorWaves","barEditorHeight","modulators","pianoName","maxRawVol","newNoteVol","forSong","convertRealFactor","associatedEffect","promptName","promptDesc","ceil","optionalModify","applyElementArgs","element","args","args_1","__values","args_1_1","next","done","arg","Node","createTextNode","isArray","Symbol","iterator","__spread","Element","_d","e_2","_e","setAttribute","join","warn","tagName","_f","e_3","_g","styleKey","style","setProperty","removeAttribute","svgNS","HTML","_i","arguments","createRange","createContextualFragment","SVG","fragment","createDocumentFragment","svgParser","DOMParser","parseFromString","documentElement","firstChild","importNode","name_1","_c","split","name_2","createElementNS","test","snakeCaseName","replace","ColorConfig","resetColors","colorLookup","clear","getArbitaryChannelColor","channel","getComputedStyle","_styleElement","getPropertyValue","trim","base","getComputed","noiseChannels","Number","modChannels","pitchChannels","regex","secondaryChannel","exec","primaryChannel","secondaryNote","primaryNote","noiseSecondaryChannelHue","noiseSecondaryChannelHueScale","noiseSecondaryChannelSat","noiseSecondaryChannelSatScale","noiseSecondaryChannelLum","noiseSecondaryChannelLumScale","noisePrimaryChannelHue","noisePrimaryChannelHueScale","noisePrimaryChannelSat","noisePrimaryChannelSatScale","noisePrimaryChannelLum","noisePrimaryChannelLumScale","noiseSecondaryNoteHue","noiseSecondaryNoteHueScale","noiseSecondaryNoteSat","noiseSecondaryNoteSatScale","noiseSecondaryNoteLum","noiseSecondaryNoteLumScale","noisePrimaryNoteHue","noisePrimaryNoteHueScale","noisePrimaryNoteSat","noisePrimaryNoteSatScale","noisePrimaryNoteLum","noisePrimaryNoteLumScale","newChannelColors","modSecondaryChannelHue","modSecondaryChannelHueScale","modSecondaryChannelSat","modSecondaryChannelSatScale","modSecondaryChannelLum","modSecondaryChannelLumScale","modPrimaryChannelHue","modPrimaryChannelHueScale","modPrimaryChannelSat","modPrimaryChannelSatScale","modPrimaryChannelLum","modPrimaryChannelLumScale","modSecondaryNoteHue","modSecondaryNoteHueScale","modSecondaryNoteSat","modSecondaryNoteSatScale","modSecondaryNoteLum","modSecondaryNoteLumScale","modPrimaryNoteHue","modPrimaryNoteHueScale","modPrimaryNoteSat","modPrimaryNoteSatScale","modPrimaryNoteLum","modPrimaryNoteLumScale","pitchSecondaryChannelHue","pitchSecondaryChannelHueScale","pitchSecondaryChannelSat","pitchSecondaryChannelSatScale","pitchSecondaryChannelLum","pitchSecondaryChannelLumScale","pitchPrimaryChannelHue","pitchPrimaryChannelHueScale","pitchPrimaryChannelSat","pitchPrimaryChannelSatScale","pitchPrimaryChannelLum","pitchPrimaryChannelLumScale","pitchSecondaryNoteHue","pitchSecondaryNoteHueScale","pitchSecondaryNoteSat","pitchSecondaryNoteSatScale","pitchSecondaryNoteLum","pitchSecondaryNoteLumScale","pitchPrimaryNoteHue","pitchPrimaryNoteHueScale","pitchPrimaryNoteSat","pitchPrimaryNoteSatScale","pitchPrimaryNoteLum","pitchPrimaryNoteLumScale","floor","getComputedChannelColor","song","getChannelColor","pitchChannelCount","noiseChannelCount","has","get","setTheme","theme","themes","undefined","textContent","themeColor","querySelector","Map","forest","canyon","midnight","beachcombing","roe","moonlight","autumn","fruit","sunset","toxic","portal","fusion","nebula","energized","neapolitan","mono","zefbox","harrybox","brucebox","nerdbox","fogbox","foxbox","wackybox","microbox","paandorasbox","slushie","midbox","dogebox2","custom","localStorage","getItem","pageMargin","editorBackground","hoverPreview","playhead","primaryText","secondaryText","invertedText","textSelection","boxSelectionFill","loopAccent","linkAccent","uiWidgetBackground","uiWidgetFocus","pitchBackground","tonic","fifthNote","whitePianoKey","blackPianoKey","whitePianoKeyText","blackPianoKeyText","oscilloscopeLineL","oscilloscopeLineR","modTitle","useColorFormula","trackEditorBgPitch","trackEditorBgPitchDim","trackEditorBgNoise","trackEditorBgNoiseDim","trackEditorBgMod","trackEditorBgModDim","multiplicativeModSlider","overwritingModSlider","indicatorPrimary","indicatorSecondary","select2OptGroup","inputBoxOutline","muteButtonNormal","muteButtonMod","modLabelPrimary","modLabelSecondaryText","modLabelPrimaryText","disabledNotePrimary","disabledNoteSecondary","navigator","userAgent","EditorConfig","valueToPreset","presetValue","categoryIndex","presetIndex","presetCategories","presets","midiProgramToPresetValue","program","category","preset","generalMidi","midiProgram","nameToPresetValue","presetName","instrumentToPreset","instrument","_a","factor","countBits","n","isPowerOf2","fullArrayLength","totalPasses","pass","subStride","midSubStride","stride","radiansIncrement","cosIncrement","sinIncrement","oscillatorMultiplier","startIndexA","midIndexA","startIndexB","midIndexB","stopIndex","realStartA","imagStartB","c","s","cPrev","sPrev","indexA0","indexA1","indexB0","indexB1","real0","real1","imag0","imag1","tempA","tempB","cTemp","sTemp","index1","index2","index3","imag2","imag3","bitCount","finalShift","j","temp","reverseIndexBits","version","versionDisplayName","releaseNotesURL","isOnMac","platform","ctrlSymbol","ctrlName","customType","settings","eqFilter","transition","fadeInSeconds","chord","unison","cutoffHz","linearGain","vibrato","isNoise","filterCutoffHz","filterResonance","filterEnvelope","algorithm","feedbackType","feedbackAmplitude","operators","frequency","target","envelope","customChipWave","feedbackEnvelope","noteFilter","reverb","harmonics","stringSustain","midiSubharmonicOctaves","interval","bitcrusherOctave","bitcrusherQuantization","distortion","chorus","spectrum","pulseEnvelope","drums","pitchShiftSemitones","volume","eqFilterType","eqSimpleCut","eqSimplePeak","eqSubFilters0","clicklessTransition","fastTwoNoteArp","arpeggioSpeed","detuneCents","vibratoDepth","vibratoDelay","vibratoSpeed","vibratoType","pan","panDelay","customChipWaveIntegral","eqSubFilters1","noteFilterType","noteSimpleCut","noteSimplePeak","noteSubFilters0","echoSustain","echoDelayBeats","waveform","noteSubFilters1","aliases","isUsingAdvancedLoopControls","chipWaveLoopStart","chipWaveLoopEnd","chipWaveLoopMode","chipWavePlayBackwards","chipWaveStartOffset","Deque","_capacity","_buffer","_mask","_offset","_count","pushFront","_expandCapacity","pushBack","popFront","popBack","peakFront","peakBack","count","remove","oldBuffer","size","events","activeEvents","listeners","raise","eventType","eventData","extraEventData","pop","listen","callback","unlisten","lisen","indexOf","splice","unlistenAll","FilterCoefficients","a","b","order","linearGain0thOrder","lowPass1stOrderButterworth","cornerRadiansPerSample","g","tan","a0","lowPass1stOrderSimplified","highPass1stOrderButterworth","highShelf1stOrder","shelfLinearGain","sqrtGain","allPass1stOrderInvertPhaseAbove","allPass1stOrderFractionalDelay","delay","lowPass2ndOrderButterworth","peakLinearGain","alpha","lowPass2ndOrderSimplified","feedback","highPass2ndOrderButterworth","peak2ndOrder","bandWidthScale","bandWidth","FrequencyResponse","real","imag","denom","analyze","filter","radiansPerSample","analyzeComplex","realZ1","imagZ1","realNum","imagNum","realDenom","imagDenom","realZ","imagZ","imagTemp","magnitude","angle","atan2","DynamicBiquadFilter","a1","a2","a1Delta","a2Delta","b0Delta","b1Delta","b2Delta","output1","output2","useMultiplicativeInputCoefficients","resetOutput","loadCoefficientsWithGradient","start","end","deltaRate","epsilon","clamp","val","validateRange","parseFloatWithDefault","defaultValue","parseFloat","isNaN","parseIntWithDefault","parseInt","encode32BitNumber","buffer","base64IntToCharCode","decode32BitNumber","compressed","charIndex","base64CharCodeToInt","charCodeAt","encodeUnisonSettings","v","o","e","cleanS","cleanSDivided","cleanO","cleanODivided","cleanE","cleanI","convertLegacyKeyToKeyAndOctave","rawKeyIndex","octave","BitFieldReader","source","_bits","_readIndex","read","readLongTail","minValue","minBits","numBits","readPartDuration","readLegacyPartDuration","readPinCount","readPitchInterval","BitFieldWriter","_index","write","writeLongTail","writePartDuration","writePinCount","writePitchInterval","other","encodeBase64","lengthBase64","makeNotePin","time","Note","pitch","fadeout","pitches","pins","continuesLastPattern","pickMainInterval","longestFlatIntervalDuration","mainInterval","pinIndex","pinA","pinB","duration","loudestSize","pin","clone","newNote","getEndPinIndex","part","endPinIndex","Pattern","notes","instruments","cloneNotes","note","reset","toJsonObject","isModChannel","noteArray","mod","volumeCap","getVolumeCapForSetting","modFilterTypes","pointArray","useVol","tick","rhythm","pitchBend","forMod","noteObject","points","patternObject","patternInstruments","fromJsonObject","importedPartsPerBeat","isNoiseChannel","instrumentCount","getMaxInstrumentsPerPatternForChannel","maxNoteCount","beatsPerBar","k","startInterval","pointObject","lowestPitch","highestPitch","Operator","copy","CustomAlgorithm","fromPreset","carriers","modulation","CustomFeedBack","inIndices","SpectrumWave","hash","isHarmonic","markCustomWaveDirty","hashMult","Synth","fittingPowerOfTwo","point","SpectrumWaveState","_hash","getCustomWave","lowestOctave","pitchTweak","controlPointToOctave","value1","value2","octave1","octave2","HarmonicsWave","HarmonicsWaveState","instrumentType","_generatedForType","combinedControlPointAmplitude","harmonicIndex","harmonicFreq","controlValue","normalizedValue","performIntegralOld","FilterControlPoint","freq","gain","freqSetting","gainSetting","getHz","getHzFromSettingValue","getSettingValueFromHz","hz","getRoundedSettingValueFromHz","getLinearGain","peakMult","power","neutral","interpolatedPower","getRoundedSettingValueFromLinearGain","toCoefficients","freqMult","getVolumeCompensationMult","gainPow","freqRelativeTo8khz","warpedFreq","warpedOctave","distanceFromCenter","freqLoudness","FilterSettings","controlPoints","controlPointCount","addPoint","controlPoint","filterArray","filterObject","filtersCanMorph","filterA","filterB","lerpFilters","pos","lerpedFilter","convertLegacySettings","legacyCutoffSetting","legacyResonanceSetting","legacyEnv","legacyFilterMaxRadians","legacyFilterMax","resonant","firstOrder","cutoffAtMax","legacyFilterCutoffRange","envDecays","standardSampleRate","legacyHz","legacyRadians","extraOctaves","targetRadians","curvedHz","finalHz","finalRadians","legacyFilter","legacyFilterGainAtNewRadians","logGain","convertedGain","intendedGain","invertedGain","curvedRadians","legacyFilterGain","convertLegacySettingsForSynth","allowFirstOrder","EnvelopeSettings","envelopeObject","Instrument","chipNoise","eqFilterSimpleCut","eqFilterSimplePeak","noteFilterSimpleCut","noteFilterSimplePeak","eqSubFilters","noteSubFilters","fadeIn","fadeOut","envelopeCount","pitchShift","detune","unisonVoices","unisonSpread","unisonOffset","unisonExpression","unisonSign","legacyTieOver","supersawDynamism","supersawSpread","supersawShape","decimalOffset","bitcrusherFreq","echoDelay","algorithm6Op","feedbackType6Op","customAlgorithm","customFeedbackType","LFOtime","nextLFOtime","arpTime","harmonicsWave","drumsetEnvelopes","drumsetSpectrumWaves","modInstruments","invalidModulators","spectrumWave","wavePrev","setTypeAndReset","legacySettings","forceSimpleFilter","filterCutoff","legacyFilterEnv","legacyPulseEnv","legacyOperatorEnvelopes","operatorEnvelopes","legacyFeedbackEnv","noCarriersControlledByNoteSize","allCarriersControlledByNoteSize","noteSizeControlsSomethingElse","addEnvelope","instrumentObject","getChord","detuneToCents","fadeInSettingToSeconds","fadeOutSettingToTicks","getDrumsetEnvelope","operatorArray","operator","customFeedback","Float64Array","useSlowerRhythm","legacyGlobalReverb","legacyEffectsNames","transitionProperty","binary","seamless","sudden","hard","smooth","soft","slide","secondsToFadeInSetting","ticksToFadeOutSetting","chordProperty","legacyChordNames","harmony","unisonProperty","legacyChorusNames","union","fifths","octaves","centsToDetune","vibratoProperty","legacyVibratoNames","findIndex","legacyEnvelopeNames","steady","getEnvelope","drum","legacyWaveNames","triangle","square","sawtooth","spiky","plateau","modboxWaveNames","sax","guitar","viola","brass","lyre","piccolo","squaretooth","flatline","sandboxWaveNames","euphonium","recorder","contrabass","zefboxWaveNames","squaretal","sawtal","pulse","miscWaveNames","test1","intense","paandorasboxWaveNames","kick","snare","piano1","WOW","overdrive","trumpet","saxophone","orchestrahit","synth","sonic3snare","choir","overdriveguitar","flute","tuba","loopingcymbal","standardkick","standardsnare","closedhihat","foothihat","openhihat","crashcymbal","pianoC4","marimba","susdotwav","wackyboxtts","rawName","table","potentialChipWaveIndex","feedback6Op","operatorObject","filterCutoffMaxHz","filterCutoffRange","filterResonanceRange","LN2","legacyToCutoff","legacyToEnvelope","filterNames","oldFilterNames","envelopeArray","tempEnvelope","frequencyFromPitch","makeEmpty","supportsEnvelopeTarget","envelopeSettings","automationTarget","useControlPointCount","clearInvalidEnvelopeTargets","envelopeIndex","getTransition","getFadeInSeconds","getFadeOutTicks","Channel","patterns","bars","muted","Song","string","scaleCustom","channels","limitDecay","limitRise","compressionThreshold","limitThreshold","compressionRatio","limitRatio","masterGain","inVolumeCap","outVolumeCap","getNewNoteVolume","isMod","modChannel","modInstrument","vol","tempoIndex","tempo","getVolumeCap","modulator","cap","modSetting","filterType","fromBase64String","initToDefault","getChannelCount","modChannelCount","getMaxInstrumentsPerChannel","layeredInstruments","getMaxInstrumentsPerPattern","channelIndex","getChannelIsNoise","getChannelIsMod","andResetChannels","scale","loopStart","loopLength","barCount","patternsPerChannel","title","pattern","bar","toBase64String","bits","_variant","_latestUltraBoxVersion","encodedSongTitle","encodeURIComponent","encodedChannelName","usingSubFilterBitfield","harmonicsBits","encodedLoopMode","encodedReleaseMode","spectrumBits","neededBits","shapeBits","bitsPerNoteSize","getNeededBits","maxInstrumentsPerPattern","neededInstrumentCountBits","neededInstrumentIndexBits","neededModInstrumentIndexBits","instrumentIndex","modFilter","status","octaveOffset","lastPitch","recentPitches","recentShapes","curPart","shapePart","startPitch","currentPitch","pitchBends","nextPitch","shapeString","String","fromCharCode","apply","shapeIndex","unshift","allPitches","pitchIndex","pitchIter","stringLength","digits","prototype","maxApplyArgs","customSamplesStr","customSamples","slice","_envelopeFromLegacyIndex","legacyIndex","_clearSamples","JSON","parse","substring","variantTest","fromBeepBox","fromJummBox","fromGoldBox","fromUltraBox","_latestBeepboxVersion","_oldestBeepboxVersion","_latestJummBoxVersion","_oldestJummBoxVersion","_latestGoldBoxVersion","_oldestGoldBoxVersion","_oldestUltraBoxVersion","beforeTwo","beforeThree","beforeFour","beforeFive","beforeSix","beforeSeven","beforeEight","beforeNine","willLoadLegacySamplesForOldSongs","compressed_array","replaceAll","shift","_restoreChipWaveListToDefault","willLoadLegacySamples","willLoadNintariboxSamples","willLoadMarioPaintboxSamples","customSampleUrls","customSamplePresets","toLowerCase","parseOldSyntax","_parseAndConfigureCustomSample","customSamplePresetsMap","legacySettingsCache","command","instrumentChannelIterator","instrumentIndexIterator","useSlowerArpSpeed","songNameLength","decodeURIComponent","channelCount","instrumentsPerChannel","instrumentsFlagBits","newRhythm","legacyWaves","chipWaveReal","chipWaveCounter","typeCheck","originalControlPointCount","originalSubfilterControlPointCount","sampleLoopInfoEncodedLength","sampleLoopInfoEncoded","sampleLoopInfo","atob","entry","info","Boolean","URL","pregoldToEnvelope","aa","legacyEffects","legacyEnvelopes","originalValue","unisonSpreadNegative","unisonOffsetNegative","unisonExpressionNegative","unisonSignNegative","nextValue","restoreLimiterDefaults","channelNameLength","carrierCountTemp","tempModArray","freqToGold3","freqToUltraBox","pre3To3g","old","jummToG","byteCount","subStringLength","bitStringLength","largerChords","recentPitchBitLength","recentPitchLength","bitStringLengthLength","songReverbChannel","songReverbInstrument","songReverbIndex","jumfive","forNoteFilter","detuneScaleNotes","newPattern","newNotes","noteCount","useOldShape","shape","pinCount","initialSize","bendCount","pinObj","intervalIter","isBackwards","restLength","patternIndex","lowestPart","chn","window","location","setTimeout","reload","_isProperUrl","customSampleUrlIndex","urlSliced","isCustomPercussive","customRootKey","presetIsUsingAdvancedLoopControls","presetChipWaveLoopStart","presetChipWaveLoopEnd","presetChipWaveStartOffset","presetChipWaveLoopMode","presetChipWavePlayBackwards","parsedSampleOptions","optionsStartIndex","optionsEndIndex","rawOptions","rawOption","optionCode","charAt","optionData","parsedUrl","sliceForSampleRate","sliceForRootKey","urlWithNamedOptions","namedOptions","pathname","isCustomSampled","rootKey","customSamplePresetSettings","customSamplePreset","enableIntro","loopCount","enableOutro","channelArray","instrumentArray","patternArray","sequenceArray","l","channelObject","sequence","format","_format","customScale","keyOctave","introBars","loopBars","ticksPerBeat","beatsPerMinute","jsonObject","shouldLoadLegacySamples","instrumentObjects","waveName","names","oldNames","veryOldNames","includes","oldScaleNames","enigma","scaleName","letter","toUpperCase","symbol","C","D","E","F","G","A","B","maxInstruments","maxPatterns","maxBars","newPitchChannels","newNoiseChannels","newModChannels","getPattern","getBeatsPerMinute","maxValue","PickedString","delayLine","allPassG","allPassGDelta","shelfA1","shelfA1Delta","shelfB0","shelfB0Delta","shelfB1","shelfB1Delta","delayIndex","allPassSample","allPassPrevInput","shelfSample","shelfPrevInput","fractionalDelaySample","prevDelayLength","delayResetOffset","update","instrumentState","tone","stringIndex","roundedSamplesPerTick","stringDecayStart","stringDecayEnd","allPassCenter","samplesPerSecond","shelfRadians","decayCurveStart","decayCurveEnd","phaseDeltaStart","phaseDeltas","phaseDeltaScale","phaseDeltaScales","phaseDeltaEnd","radiansPerSampleStart","radiansPerSampleEnd","centerHarmonicStart","centerHarmonicEnd","allPassRadiansStart","allPassRadiansEnd","decayRateStart","decayRateEnd","shelfGainStart","shelfGainEnd","expressionDecayStart","expressionDecayEnd","tempFilterStartCoefficients","tempFrequencyResponse","allPassGStart","allPassPhaseDelayStart","tempFilterEndCoefficients","allPassGEnd","allPassPhaseDelayEnd","shelfA1Start","shelfB0Start","shelfB1Start","shelfPhaseDelayStart","shelfA1End","shelfB0End","shelfB1End","shelfPhaseDelayEnd","periodLengthStart","periodLengthEnd","minBufferLength","delayLength","delayLengthEnd","delayLengthDelta","pitchChanged","reinitializeImpulse","likelyMaximumLength","newDelayLine","oldDelayBufferMask","startCopyingFromIndex","delayBufferMask","startImpulseFrom","startZerosFrom","stopZerosAt","impulseWave","impulseWaveLength","impulsePhaseDelta","fadeDuration","startImpulseFromSample","stopImpulseAt","stopImpulseAtSample","impulsePhase","prevWaveIntegral","impulsePhaseInt","nextWaveIntegral","phaseRatio","sample","combinedFade","curvedFade","EnvelopeComputer","noteSecondsStart","noteSecondsEnd","noteTicksStart","noteTicksEnd","noteSizeStart","noteSizeEnd","prevNoteSize","nextNoteSize","_noteSizeFinal","prevNoteSecondsStart","prevNoteSecondsEnd","prevNoteTicksStart","prevNoteTicksEnd","_prevNoteSizeFinal","prevSlideStart","prevSlideEnd","nextSlideStart","nextSlideEnd","prevSlideRatioStart","prevSlideRatioEnd","nextSlideRatioStart","nextSlideRatioEnd","envelopeStarts","envelopeEnds","_modifiedEnvelopeIndices","_modifiedEnvelopeCount","lowpassCutoffDecayVolumeCompensation","computeEnvelopes","currentPart","tickTimeStart","secondsPerTick","atNoteStart","forceContinueAtStart","tickTimeEnd","beatsPerTick","beatTimeStart","beatTimeEnd","passedEndOfNote","startPin","endPin","startPinTick","endPinTick","ratioStart","ratioEnd","noteStartTick","noteStartPart","noteEndTick","noteEndPart","maximumSlideTicks","prevNote","nextNote","forceContinueAtEnd","usedNoteSize","targetIndex","envelopeStart","computeEnvelope","envelopeEnd","filterSettings","tmpNoteFilterStart","getLowpassCutoffDecayVolumeCompensation","clearEnvelopes","beats","noteSize","noteSizeToVolumeMult","attack","lin","Tone","fill","chordSize","drumsetPitch","prevNotePitchIndex","nextNotePitchIndex","freshlyAllocated","isOnLastTick","ticksSinceReleased","liveInputSamplesHeld","lastInterval","noiseSample","stringSustainStart","stringSustainEnd","phases","directions","chipWaveCompletions","chipWavePrevWaves","chipWaveCompletionsLastWave","expressionDelta","operatorExpressions","operatorExpressionDeltas","prevPitchExpressions","prevVibrato","prevStringDecay","pulseWidthDelta","supersawDynamismDelta","supersawUnisonDetunes","supersawShapeDelta","supersawDelayLength","supersawDelayLengthDelta","supersawDelayLine","supersawDelayIndex","supersawPrevPhaseDelta","pickedStrings","noteFilters","noteFilterCount","initialNoteFilterInput1","initialNoteFilterInput2","specialIntervalExpressionMult","feedbackOutputs","feedbackMult","feedbackDelta","stereoVolumeLStart","stereoVolumeRStart","stereoVolumeLDelta","stereoVolumeRDelta","stereoDelayStart","stereoDelayEnd","stereoDelayDelta","customVolumeStart","customVolumeEnd","filterResonanceStart","filterResonanceDelta","isFirstOrder","envelopeComputer","pickedString","InstrumentState","awake","computed","tonesAddedInThisTick","flushingDelayLines","deactivateAfterThisTick","attentuationProgress","flushedSamples","activeTones","activeModTones","releasedTones","liveInputTones","synthesizer","noisePitchFilterMult","volumeScale","eqFilterVolume","eqFilterVolumeDelta","mixVolume","mixVolumeDelta","delayInputMult","delayInputMultDelta","distortionDelta","distortionDrive","distortionDriveDelta","distortionFractionalInput1","distortionFractionalInput2","distortionFractionalInput3","distortionPrevInput","distortionNextOutput","bitcrusherPrevInput","bitcrusherCurrentOutput","bitcrusherPhase","bitcrusherPhaseDelta","bitcrusherPhaseDeltaScale","bitcrusherScale","bitcrusherScaleScale","bitcrusherFoldLevel","bitcrusherFoldLevelScale","eqFilters","eqFilterCount","initialEqFilterInput1","initialEqFilterInput2","panningDelayLine","panningDelayPos","panningVolumeL","panningVolumeR","panningVolumeDeltaL","panningVolumeDeltaR","panningOffsetL","panningOffsetR","panningOffsetDeltaL","panningOffsetDeltaR","chorusDelayLineL","chorusDelayLineR","chorusDelayLineDirty","chorusDelayPos","chorusPhase","chorusVoiceMult","chorusVoiceMultDelta","chorusCombinedMult","chorusCombinedMultDelta","echoDelayLineL","echoDelayLineR","echoDelayLineDirty","echoDelayPos","echoDelayOffsetStart","echoDelayOffsetEnd","echoDelayOffsetRatio","echoDelayOffsetRatioDelta","echoMult","echoMultDelta","echoShelfA1","echoShelfB0","echoShelfB1","echoShelfSampleL","echoShelfSampleR","echoShelfPrevInputL","echoShelfPrevInputR","reverbDelayLine","reverbDelayLineDirty","reverbDelayPos","reverbMult","reverbMultDelta","reverbShelfA1","reverbShelfB0","reverbShelfB1","reverbShelfSample0","reverbShelfSample1","reverbShelfSample2","reverbShelfSample3","reverbShelfPrevInput0","reverbShelfPrevInput1","reverbShelfPrevInput2","reverbShelfPrevInput3","allocateNecessaryBuffers","samplesPerTick","panningDelayBufferSize","chorusDelayBufferSize","safeEchoDelaySteps","safeEchoDelayBufferSize","newDelayLineL","newDelayLineR","oldMask","deactivate","resetAllEffects","compute","getInstrumentSynthFunction","updateWaves","usesDistortion","usesBitcrusher","usesPanning","usesChorus","usesEcho","usesReverb","useDistortionStart","useDistortionEnd","isModActive","getModValue","distortionSliderStart","distortionSliderEnd","distortionStart","distortionEnd","distortionDriveStart","distortionDriveEnd","freqSettingStart","freqSettingEnd","quantizationSettingStart","quantizationSettingEnd","freqStart","freqEnd","scaleStart","scaleEnd","foldLevelStart","foldLevelEnd","eqFilterSettingsStart","eqFilterSettingsEnd","startPoint","startSimpleFreq","startSimpleGain","endSimpleFreq","endSimpleGain","filterChanges","endPoint","eqFilterSettings","tmpEqFilterStart","tmpEqFilterEnd","mainInstrumentVolume","instrumentVolumeToVolumeMult","mixVolumeEnd","startVal","endVal","eqFilterVolumeStart","eqFilterVolumeEnd","delayInputMultStart","delayInputMultEnd","usePanStart","usePanEnd","panStart","panEnd","volumeStartL","volumeStartR","volumeEndL","volumeEndR","maxDelaySamples","usePanDelayStart","usePanDelayEnd","delayStart","delayEnd","delayStartL","delayStartR","delayEndL","delayEndR","useChorusStart","useChorusEnd","chorusStart","chorusEnd","chorusCombinedMultStart","chorusCombinedMultEnd","maxEchoMult","averageEchoDelaySeconds","useEchoSustainStart","useEchoSustainEnd","echoMultStart","echoMultEnd","useEchoDelayStart","useEchoDelayEnd","ignoreTicks","tmpEchoDelayOffsetStart","tmpEchoDelayOffsetEnd","maxReverbMult","useReverbStart","useReverbEnd","reverbStart","reverbEnd","totalDelaySamples","attenuationThreshold","halfLifeMult","delayDuration","attenuationPerSecond","averageMult","averageReverbDelaySeconds","progressInTick","progressAtEndOfTick","_drumsetIndexToSpectrumOctave","getDrumsetWave","drumsetIndexReferenceDelta","ChannelState","singleSeamlessInstrument","syncSongState","channelState","warmUpSynthesizer","getSamplesPerTick","tmpNoteFilterEnd","dummyArray","isPlayingSong","synthesize","computeLatestModValues","latestModTimes","latestModInsTimes","modValues","nextModValues","modInsValues","nextModInsValues","beat","currentBar","instrumentIdx","latestPinParts","latestPinValues","partsInBar","findPartsInBar","pinIdx","transitionLength","toNextBarLength","deltaVolume","setModValue","usedInstruments","tgtPattern","eqFilterParam","noteFilterParam","modulatorAdjust","tgtInstrument","determineInvalidModulators","tgtInstrumentList","str","operatorAmplitudeCurve","playing","recording","isRecording","playheadInternal","remainder","tickSampleCountdown","isAtStartOfTick","prevBar","getSamplesPerBar","getTicksIntoBar","getCurrentPart","getTotalSamples","loop","startBar","endBar","hasTempoMods","hasNextBarMods","prevTempo","latestTempoPin","latestTempoValue","ended","foundMod","find","sort","getSamplesPerTickSpecificBPM","tickLength","prevPinTempo","currPinTempo","bpmScalar","getTotalBars","useLoopCount","loopRepeatCount","preferLowerLatency","anticipatePoorPerformance","liveInputDuration","liveInputStarted","liveInputPitches","liveInputChannel","liveInputInstruments","oscRefreshEventTimer","oscEnabled","enableMetronome","countInMetronome","renderingSong","wantToSkip","nextBar","isAtEndOfTick","liveInputEndTime","browserAutomaticallyClearsAudioBuffer","tempDrumSetControlPoint","tonePool","tempMatchedPitchTones","startedMetronome","metronomeSamplesRemaining","metronomeAmplitude","metronomePrevAmplitude","metronomeFilter","limit","tempMonoInstrumentSampleBuffer","audioCtx","scriptNode","audioProcessCallback","audioProcessingEvent","outputBuffer","outputDataL","outputDataR","performance","now","deactivateAudio","computeDelayBufferSizes","setSong","panningDelayBufferMask","chorusDelayBufferMask","activateAudio","bufferSize","latencyHint","webkitAudioContext","createScriptProcessor","createJavaScriptNode","onaudioprocess","channelCountMode","channelInterpretation","connect","destination","resume","disconnect","maintainLiveInput","play","pause","startRecording","resetEffects","freeAllTones","volumeStart","volumeEnd","setting","nextVal","isAnyModActive","unsetMod","isFilterModActive","channelIdx","snapToStart","snapToBar","goToBar","jumpIntoLoop","oldBar","goToNextBar","goToPrevBar","getNextBar","skipBar","outputBufferLength","playSong","skippedBars","firstSkippedBufferIndex","bufferIndex","samplesLeftInBuffer","samplesLeftInTick","runLength","runEnd","determineCurrentActiveTones","playModTone","barVisited","determineLiveInputTones","tonesPlayedInThisInstrument","freeReleasedTone","shouldFadeOutFast","computeTone","playTone","effectsSynth","startRatio","endRatio","ticksIntoBar","partTimeTickStart","partTimeTickEnd","partTimeStart","partTimeEnd","useVibratoSpeed","midBeat","periods","samplesPerPeriod","tempAmplitude","sampleL","sampleR","absL","absR","limitRange","limitTarget","limitedVolume","useArpeggioSpeed","isInteger","isFinite","freeTone","newTone","releaseTone","toneIndex","toneList","toneCount","moveTonesIntoOrderedTempMatchedList","clearTempMatchedPitchTones","adjacentPatternHasCompatibleInstrumentTransition","otherPattern","otherNote","forceContinue","otherInstrument","otherTransition","adjacentNotesHaveMatchingPitches","firstNote","secondNote","firstNoteInterval","notePitches","currentTick","prevNotes","nextNotes","fillCount","modToneCount","newInstrumentIndex","sourceInstrumentState","destInstrumentState","prevNoteForThisInstrument","nextNoteForThisInstrument","oldTone","partsPerBar","tonesInPrevNote","tonesInNextNote","prevPattern","lastNote","patternForcesContinueAtStart","chordOfCompatibleInstrument","nextPattern","nextPatternForcesContinueAtStart","strumOffsetParts","prevNoteForThisTone","noteForThisTone","nextNoteForThisTone","released","modSynth","computeChordExpression","chordExpression","intervalScale","secondsPerPart","sampleTime","beatsPerPart","specialIntervalMult","toneIsOnLastTick","intervalStart","intervalEnd","fadeExpressionStart","fadeExpressionEnd","chordExpressionStart","chordExpressionEnd","expressionReferencePitch","baseExpression","pitchDamping","chipWaveLength","firstOffset","lastOffset","getOperatorWave","startTicksSinceReleased","endTicksSinceReleased","pinStart","pinEnd","noteTicksPassedTickStart","noteTicksPassedTickEnd","pinRatioStart","pinRatioEnd","noteLengthTicks","tmpNoteFilter","noteFilterSettingsStart","noteFilterSettingsEnd","intervalDiff","chordSizeDiff","pitchShiftScalarStart","pitchShiftScalarEnd","modDetuneStart","modDetuneEnd","vibratoAmplitudeStart","vibratoAmplitudeEnd","vibratoStart","POSITIVE_INFINITY","getLFOAmplitude","ticksUntilVibratoStart","lfoEnd","vibratoDepthEnvelopeEnd","vibratoEnd","ticksUntilVibratoEnd","noteFilterExpression","noteAllFreqsEnvelopeStart","noteAllFreqsEnvelopeEnd","noteFreqEnvelopeStart","noteFreqEnvelopeEnd","notePeakEnvelopeStart","notePeakEnvelopeEnd","noteFilterSettings","drumsetFilterEnvelope","drumsetFilterEnvelopeStart","drumsetFilterEnvelopeEnd","sineExpressionBoost","totalCarrierExpression","arpeggioInterval","associatedCarrierIndex","pitchStart","pitchEnd","baseFreqStart","baseFreqEnd","targetFreqStart","targetFreqEnd","freqEnvelopeStart","freqEnvelopeEnd","amplitudeStart","amplitudeEnd","amplitudeCurveStart","amplitudeCurveEnd","expressionStart","expressionEnd","pitchExpressionStart","pitchExpressionEnd","useFeedbackAmplitudeStart","useFeedbackAmplitudeEnd","feedbackAmplitudeStart","feedbackAmplitudeEnd","feedbackStart","feedbackEnd","freqEndRatio","basePhaseDeltaScale","intervalOffset","endPitch","settingsExpressionMult","basePulseWidth","pulseWidthModStart","pulseWidthModEnd","pulseWidthStart","pulseWidthEnd","decimalOffsetModStart","decimalOffsetStart","useSustainStart","useSustainEnd","startFreq","unisonEnvelopeStart","unisonEnvelopeEnd","unisonAStart","unisonAEnd","unisonBStart","unisonBEnd","supersawExpressionStart","supersawExpressionEnd","minFirstVoiceAmplitude","baseDynamismSliderStart","baseDynamismSliderEnd","curvedDynamismStart","curvedDynamismEnd","firstVoiceAmplitudeStart","firstVoiceAmplitudeEnd","dynamismStart","dynamismEnd","initializeSupersaw","accumulator","slope","normalizedPhase","zeroCrossingPhase","prevDrop","nextDrop","phaseDelta","distanceToZeroCrossing","swappedIndex","baseSpreadSlider","spreadSliderStart","spreadSliderEnd","averageSpreadSlider","curvedSpread","baseShape","shapeStart","shapeEnd","delayLengthStart","pulseExpressionRatio","sustainEnvelopeStart","sustainEnvelopeEnd","secondsIntoBar","vibratoPeriodSeconds","fingerprint","fmSynthFunctionCache","synthSource","line","fmSourceTemplate","outputs","operatorLine","operatorSourceTemplate","modulatorNumber","feedbackIndices","Function","loopableChipSynth","chipSynth","harmonicsSynth","pulseWidthSynth","supersawSynth","pickedStringSynth","noiseSynth","spectrumSynth","drumsetSynth","fm6SynthFunctionCache","wrap","data","chipWaveLoopLength","phaseDeltaA","phaseDeltaB","directionA","directionB","chipWaveCompletionA","chipWaveCompletionB","lastWaveA","lastWaveB","chipWaveCompletionFadeLength","phaseDeltaScaleA","phaseDeltaScaleB","phaseA","phaseB","prevWaveIntegralA","prevWaveIntegralB","phaseAInt","phaseBInt","indexA","indexB","phaseRatioA","phaseRatioB","filters","filterCount","initialFilterInput1","initialFilterInput2","applyFilters","prevWaveA","prevWaveB","sampleIndex","wrapped","waveA","waveB","inputSample","completionFadeA","completionFadeB","nextWaveIntegralA","nextWaveIntegralB","pwia","pwib","phaseA_","phaseB_","output","sanitizeFilters","voiceCount","pickedStringFunction","pickedStringFunctionCache","pickedStringSource","sampleList","voice","lines","usesEqFilter","signature","effectsFunction","effectsFunctionCache","effectsSource","usesDelays","phase","sawPhaseA","sawPhaseB","pulseWave","t","dynamism","dynamismDelta","unisonDetunes","shapeDelta","supersawSample","detunedPhaseDelta","delaySampleTime","lowerIndex","upperIndex","delayRatio","prevDelaySample","phaseMask","pitchRelativefilter","findRandomZeroCrossing","phaseInt","waveSample","referenceDelta","stereoBufferIndex","dotTarget","lerpEndRatio","indexPrev","attemptsRemaining","indexNext","waveNext","innerIndexNext","innerWaveNext","instrumentVolume","volumeMultToInstrumentVolume","volumeMult","volumeMultToNoteSize","seconds","ticks","lower","upper","cents","beatsPerSecond","partsPerSecond","tickPerSecond","sanitizeDelayLine","lastIndex","mask","input1","input2","button","div","h1","input","canvas","svg","circle","rect","path","isMobile","colorTheme","getLocalStorage","animationRequest","prevHash","id","toString","pauseButtonDisplayed","zoomEnabled","timelineWidth","outVolumeHistoricTimer","outVolumeHistoricCap","oscilascope","_EventUpdateCanvas","directlinkL","directlinkR","ctx","getContext","fillStyle","fillRect","width","height","yl","yr","display","titleText","editLink","copyLink","href","shareLink","fullscreenLink","draggingPlayhead","playButton","playButtonContainer","loopIcon","d","loopButton","viewBox","volumeIcon","volumeSlider","step","zoomIcon","cx","cy","r","stroke","zoomButton","timeline","timelineContainer","visualizationContainer","outVolumeBarBg","outVolumeBar","stop1","stop","stop2","stop3","gradient","linearGradient","gradientUnits","defs","volumeBarContainer","preserveAspectRatio","setLocalStorage","setItem","loadSong","songString","reuseParams","updatedSongString","hashUpdatedExternally","myHash","parameter","equalsIndex","paramName","renderLoopIcon","renderTimeline","body","pauseIfAnotherPlayerStartsHandle","pauseIfAnotherPlayerStarts","clearInterval","storedPlayerId","onTogglePlay","renderPlayhead","animate","requestAnimationFrame","volumeUpdate","renderPlayButton","useOutVolumeCap","historicOutCap","cancelAnimationFrame","setInterval","onTimelineMouseMove","preventDefault","onTimelineCursorMove","clientX","pageX","onTimelineTouchMove","touches","mouseX","boundingRect","getBoundingClientRect","left","right","onTimelineCursorUp","setSynthVolume","scrollLeft","innerHTML","timelineHeight","windowOctaves","windowPitchCount","semitoneHeight","targetBeatWidth","targetSemitoneHeight","barWidth","partWidth","wavePitchHeight","drumPitchHeight","color","opacity","pitchHeight","configuredOctaveScroll","offsetY","offsetX","drawNote","noteElement","radius","classList","add","renderZoomIcon","top","self","keyCode","nav","clipboard","writeText","prompt","textField","select","succeeded","execCommand","share"],"sources":["../../synth/SynthConfig.ts","../../node_modules/imperative-html/src/elements-base.ts","../../node_modules/imperative-html/src/elements-strict.ts","../../editor/ColorConfig.ts","../../editor/EditorConfig.ts","../../synth/FFT.ts","../../synth/Deque.ts","../../global/Events.ts","../../synth/filtering.ts","../../synth/synth.ts","../../player/main.ts","../../global/Oscilascope.ts"],"sourcesContent":["/*!\nCopyright (c) 2012-2022 John Nesky and contributing authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in \nthe Software without restriction, including without limitation the rights to \nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \nof the Software, and to permit persons to whom the Software is furnished to do \nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \nSOFTWARE.\n*/\n\nexport interface Dictionary<T> {\n    [K: string]: T;\n}\n\n// @TODO: Not ideal to make this writable like this.\n// export interface DictionaryArray<T> extends ReadonlyArray<T> {\nexport interface DictionaryArray<T> extends Array<T> {\n    dictionary: Dictionary<T>;\n}\n\nexport const enum FilterType {\n    lowPass,\n    highPass,\n    peak,\n    length,\n}\n\nexport const enum EnvelopeType {\n\tnoteSize,\n    none,\n\tpunch,\n\tflare,\n\ttwang,\n\tswell,\n\ttremolo,\n\ttremolo2,\n    decay,\n    wibble,\n    hard,\n    linear,\n    rise,\n}\n\nexport const enum InstrumentType {\n    chip,\n    fm,\n    noise,\n    spectrum,\n    drumset,\n    harmonics,\n    pwm,\n    pickedString,\n    customChipWave,\n    mod,\n\tfm6op,\n    supersaw,\n    length,\n}\n\nexport const TypePresets: ReadonlyArray<string> = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"pulse width\", \"picked string\", \"chip (custom)\", \"mod\", \"FM (6-op)\",\"supersaw\"];\n\nexport const enum DropdownID {\n    Vibrato = 0,\n    Pan = 1,\n    Chord = 2,\n    Transition = 3,\n    FM = 4,\n    PulseWidth = 5,\n    Unison = 6,\n\n}\n\nexport const enum EffectType {\n    reverb,\n    chorus,\n    panning,\n    distortion,\n    bitcrusher,\n    noteFilter,\n    echo,\n    pitchShift,\n    detune,\n    vibrato,\n    transition,\n    chord,\n    // If you add more, you'll also have to extend the bitfield used in Base64 which currently uses two six-bit characters.\n    length,\n}\n\nexport const enum EnvelopeComputeIndex {\n    noteVolume,\n    noteFilterAllFreqs,\n    pulseWidth,\n    stringSustain,\n    unison,\n    operatorFrequency0, operatorFrequency1, operatorFrequency2, operatorFrequency3, operatorFrequency4, operatorFrequency5,\n    operatorAmplitude0, operatorAmplitude1, operatorAmplitude2, operatorAmplitude3, operatorAmplitude4, operatorAmplitude5,\n    feedbackAmplitude,\n    pitchShift,\n    detune,\n    vibratoDepth,\n    noteFilterFreq0, noteFilterFreq1, noteFilterFreq2, noteFilterFreq3, noteFilterFreq4, noteFilterFreq5, noteFilterFreq6, noteFilterFreq7,\n    noteFilterGain0, noteFilterGain1, noteFilterGain2, noteFilterGain3, noteFilterGain4, noteFilterGain5, noteFilterGain6, noteFilterGain7,\n    decimalOffset,\n    supersawDynamism,\n    supersawSpread,\n    supersawShape,\n    length,\n}\n\n/*\nexport const enum InstrumentAutomationIndex {\n    mixVolume,\n    eqFilterAllFreqs,\n    eqFilterFreq0, eqFilterFreq1, eqFilterFreq2, eqFilterFreq3, eqFilterFreq4, eqFilterFreq5, eqFilterFreq6, eqFilterFreq7,\n    eqFilterGain0, eqFilterGain1, eqFilterGain2, eqFilterGain3, eqFilterGain4, eqFilterGain5, eqFilterGain6, eqFilterGain7,\n    distortion,\n    bitcrusherQuantization,\n    bitcrusherFrequency,\n    panning,\n    chorus,\n    echoSustain,\n    //echoDelay, // Wait until tick settings can be computed once for multiple run lengths.\n    reverb,\n    length,\n}\n*/\n\nexport interface BeepBoxOption {\n    readonly index: number;\n    readonly name: string;\n}\n\nexport interface Scale extends BeepBoxOption {\n    readonly flags: ReadonlyArray<boolean>;\n    readonly realName: string;\n}\n\nexport interface Key extends BeepBoxOption {\n    readonly isWhiteKey: boolean;\n    readonly basePitch: number;\n}\n\nexport interface Rhythm extends BeepBoxOption {\n    readonly stepsPerBeat: number;\n    readonly roundUpThresholds: number[] | null;\n}\n\nexport interface ChipWave extends BeepBoxOption {\n    readonly expression: number;\n    samples: Float32Array;\n    isPercussion?: boolean;\n    isCustomSampled?: boolean;\n    isSampled?: boolean;\n    extraSampleDetune?: number;\n    rootKey?: number;\n    sampleRate?: number;\n}\n\nexport interface OperatorWave extends BeepBoxOption {\n    samples: Float32Array;\n}\n\nexport interface ChipNoise extends BeepBoxOption {\n    readonly expression: number;\n    readonly basePitch: number;\n    readonly pitchFilterMult: number;\n    readonly isSoft: boolean;\n    samples: Float32Array | null;\n}\n\nexport interface Transition extends BeepBoxOption {\n    readonly isSeamless: boolean;\n    readonly continues: boolean;\n    readonly slides: boolean;\n    readonly slideTicks: number;\n    readonly includeAdjacentPatterns: boolean;\n}\n\nexport interface Vibrato extends BeepBoxOption {\n    readonly amplitude: number;\n    readonly type: number;\n    readonly delayTicks: number;\n}\n\nexport interface VibratoType extends BeepBoxOption {\n    readonly periodsSeconds: number[];\n    readonly period: number;\n}\n\nexport interface Unison extends BeepBoxOption {\n    readonly voices: number;\n    readonly spread: number;\n    readonly offset: number;\n    readonly expression: number;\n    readonly sign: number;\n}\n\nexport interface Modulator extends BeepBoxOption {\n    readonly name: string; // name that shows up in song editor UI\n    readonly pianoName: string; // short name that shows up in mod piano UI\n    readonly maxRawVol: number; // raw\n    readonly newNoteVol: number; // raw\n    readonly forSong: boolean; // true - setting is song scope\n    convertRealFactor: number; // offset that needs to be applied to get a \"real\" number display of value, for UI purposes\n    readonly associatedEffect: EffectType; // effect that should be enabled for this modulator to work properly. If unused, set to EffectType.length.\n    readonly promptName: string; // long-as-needed name that shows up in tip prompt\n    readonly promptDesc: string[]; // paragraph(s) describing how to use this mod\n    optionalModify?: string;\n\n}\n\nexport interface Chord extends BeepBoxOption {\n    readonly customInterval: boolean;\n    readonly arpeggiates: boolean;\n    readonly strumParts: number;\n    readonly singleTone: boolean;\n}\n\nexport interface Algorithm extends BeepBoxOption {\n    readonly carrierCount: number;\n    readonly associatedCarrier: ReadonlyArray<number>;\n    readonly modulatedBy: ReadonlyArray<ReadonlyArray<number>>;\n}\n\nexport interface OperatorFrequency extends BeepBoxOption {\n    readonly mult: number;\n    readonly hzOffset: number;\n    readonly amplitudeSign: number;\n}\n\nexport interface Feedback extends BeepBoxOption {\n    readonly indices: ReadonlyArray<ReadonlyArray<number>>;\n}\n\nexport interface Envelope extends BeepBoxOption {\n    readonly type: EnvelopeType;\n    readonly speed: number;\n}\n\nexport interface AutomationTarget extends BeepBoxOption {\n    readonly computeIndex: EnvelopeComputeIndex /*| InstrumentAutomationIndex*/ | null;\n    readonly displayName: string;\n    //readonly perNote: boolean; // Whether to compute envelopes on a per-note basis.\n    readonly interleave: boolean; // Whether to interleave this target with the next one in the menu.\n    readonly isFilter: boolean; // Filters have a variable maxCount in practice.\n    //readonly range: number | null; // set if automation is allowed.\n    readonly maxCount: number;\n    readonly effect: EffectType | null;\n    readonly compatibleInstruments: InstrumentType[] | null;\n}\n\nexport const enum SampleLoadingStatus {\n    loading,\n    loaded,\n    error,\n}\n\nexport function getSampleLoadingStatusName(status: SampleLoadingStatus): string {\n    switch (status) {\n\tcase SampleLoadingStatus.loading: return \"loading\";\n\tcase SampleLoadingStatus.loaded: return \"loaded\";\n\tcase SampleLoadingStatus.error: return \"error\";\n    }\n}\n\nexport class SampleLoadingState {\n    public statusTable: Dictionary<SampleLoadingStatus>;\n    public urlTable: Dictionary<string>;\n    public totalSamples: number;\n    public samplesLoaded: number;\n\n    constructor() {\n\tthis.statusTable = {};\n\tthis.urlTable = {};\n\tthis.totalSamples = 0;\n\tthis.samplesLoaded = 0;\n    }\n}\n\nexport const sampleLoadingState: SampleLoadingState = new SampleLoadingState();\n\nexport class SampleLoadedEvent extends Event {\n    public readonly totalSamples: number;\n    public readonly samplesLoaded: number;\n\n    constructor(totalSamples: number, samplesLoaded: number) {\n\tsuper(\"sampleloaded\");\n\tthis.totalSamples = totalSamples;\n\tthis.samplesLoaded = samplesLoaded;\n    }\n}\n\nexport interface SampleLoadEventMap {\n    \"sampleloaded\": SampleLoadedEvent;\n}\n\nexport class SampleLoadEvents extends EventTarget {\n    constructor() {\n\tsuper();\n    }\n}\n\nexport const sampleLoadEvents: SampleLoadEvents = new SampleLoadEvents();\n\nexport function startLoadingSample(url: string, chipWaveIndex: number, presetSettings: Dictionary<any>, rawLoopOptions: any, customSampleRate: number): void {\n    // @TODO: Make parts of the code that expect everything to already be\n    // in memory work correctly.\n    // It would be easy to only instantiate `SongEditor` and company after\n    // everything is loaded, but if dynamic sample loading without a reload\n    // is deemed necessary, anything that involves chip waves has to be\n    // revisited so as to be able to work with a changing list of chip\n    // waves that may or may not be ready to be used.\n    const sampleLoaderAudioContext = new AudioContext({ sampleRate: customSampleRate });\n    let closedSampleLoaderAudioContext: boolean = false;\n    const chipWave = Config.chipWaves[chipWaveIndex];\n    const rawChipWave = Config.rawChipWaves[chipWaveIndex];\n    const rawRawChipWave = Config.rawRawChipWaves[chipWaveIndex];\n    fetch(url).then((response) => {\n\tif (!response.ok) {\n\t    // @TODO: Be specific with the error handling.\n\t    sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.error;\n\t    return Promise.reject(new Error(\"Couldn't load sample\"));\n\t}\n\treturn response.arrayBuffer();\n    }).then((arrayBuffer) => {\n\treturn sampleLoaderAudioContext.decodeAudioData(arrayBuffer);\n    }).then((audioBuffer) => {\n\t// @TODO: Downmix.\n\tconst samples = centerWave(Array.from(audioBuffer.getChannelData(0)));\n\tconst integratedSamples = performIntegral(samples);\n\tchipWave.samples = integratedSamples;\n\trawChipWave.samples = samples;\n\trawRawChipWave.samples = samples;\n\tif (rawLoopOptions[\"isUsingAdvancedLoopControls\"]) {\n\t    presetSettings[\"chipWaveLoopStart\"] = rawLoopOptions[\"chipWaveLoopStart\"] != null ? rawLoopOptions[\"chipWaveLoopStart\"] : 0;\n\t    presetSettings[\"chipWaveLoopEnd\"] = rawLoopOptions[\"chipWaveLoopEnd\"] != null ? rawLoopOptions[\"chipWaveLoopEnd\"] : samples.length - 1;\n\t    presetSettings[\"chipWaveLoopMode\"] = rawLoopOptions[\"chipWaveLoopMode\"] != null ? rawLoopOptions[\"chipWaveLoopMode\"] : 0;\n\t    presetSettings[\"chipWavePlayBackwards\"] = rawLoopOptions[\"chipWavePlayBackwards\"];\n\t    presetSettings[\"chipWaveStartOffset\"] = rawLoopOptions[\"chipWaveStartOffset\"] != null ? rawLoopOptions[\"chipWaveStartOffset\"] : 0;\n\t}\n\tsampleLoadingState.samplesLoaded++;\n\tsampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loaded;\n\tsampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\n\t    sampleLoadingState.totalSamples,\n\t    sampleLoadingState.samplesLoaded\n\t));\n\tif (!closedSampleLoaderAudioContext) {\n\t    closedSampleLoaderAudioContext = true;\n\t    sampleLoaderAudioContext.close();\n\t}\n    }).catch((error) => {\n\t//console.error(error);\n\tsampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.error;\n\talert(\"Failed to load \" + url + \":\\n\" + error);\n\tif (!closedSampleLoaderAudioContext) {\n\t    closedSampleLoaderAudioContext = true;\n\t    sampleLoaderAudioContext.close();\n\t}\n    });\n}\n\nexport function getLocalStorageItem<T>(key: string, defaultValue: T): T | string {\n    let value: T | string | null = localStorage.getItem(key);\n    if (value == null || value === \"null\" || value === \"undefined\") {\n        value = defaultValue;\n    }\n    return value;\n}\n\n// @HACK: This just assumes these exist, regardless of whether they actually do\n// or not.\ndeclare global {\n    const kicksample: number[];\n    const snaresample: number[];\n    const pianosample: number[];\n    const WOWsample: number[];\n    const overdrivesample: number[];\n    const trumpetsample: number[];\n    const saxophonesample: number[];\n    const orchhitsample: number[];\n    const detatchedviolinsample: number[];\n    const synthsample: number[];\n    const sonic3snaresample: number[];\n    const comeonsample: number[];\n    const choirsample: number[];\n    const overdrivensample: number[];\n    const flutesample: number[];\n    const legatoviolinsample: number[];\n    const tremoloviolinsample: number[];\n    const amenbreaksample: number[];\n    const pizzicatoviolinsample: number[];\n    const timallengruntsample: number[];\n    const tubasample: number[];\n    const loopingcymbalsample: number[];\n    const kickdrumsample: number[];\n    const snaredrumsample: number[];\n    const closedhihatsample: number[];\n    const foothihatsample: number[];\n    const openhihatsample: number[];\n    const crashsample: number[];\n    const pianoC4sample: number[];\n    const liverpadsample: number[];\n    const marimbasample: number[];\n    const susdotwavsample: number[];\n    const wackyboxttssample: number[];\n    const peppersteak1: number[];\n    const peppersteak2: number[];\n    const vinyl: number[];\n    const slapbass: number[];\n    const hdeboverdrive: number[];\n    const sunsoftbass: number[];\n    const masculinechoir: number[];\n    const femininechoir: number[];\n    const southtololoche: number[];\n    const harp: number[];\n    const panflute: number[];\n    const krumhorn: number[];\n    const timpani: number[];\n    const crowdhey: number[];\n    const warioland4brass: number[];\n    const warioland4organ: number[];\n    const warioland4daow: number[];\n    const warioland4hourchime: number[];\n    const warioland4tick: number[];\n    const kirbykick: number[];\n    const kirbysnare: number[];\n    const kirbybongo: number[];\n    const kirbyclick: number[];\n    const funkkick: number[];\n    const funksnare: number[];\n    const funksnareleft: number[];\n    const funksnareright: number[];\n    const funktomhigh: number[];\n    const funktomlow: number[];\n    const funkhihatclosed: number[];\n    const funkhihathalfopen: number[];\n    const funkhihatopen: number[];\n    const funkhihatopentip: number[];\n    const funkhihatfoot: number[];\n    const funkcrash: number[];\n    const funkcrashtip: number[];\n    const funkride: number[];\n    const chronoperc1finalsample: number[];\n    const synthkickfmsample: number[];\n    const woodclicksample: number[];\n    const acousticsnaresample: number[];\n    const catpaintboxsample: number[];\n    const gameboypaintboxsample: number[];\n    const mariopaintboxsample: number[];\n    const drumpaintboxsample: number[];\n    const yoshipaintboxsample: number[];\n    const starpaintboxsample: number[];\n    const fireflowerpaintboxsample: number[];\n    const dogpaintbox: number[];\n    const oinkpaintbox: number[];\n    const swanpaintboxsample: number[];\n    const facepaintboxsample: number[];\n}\n\nfunction loadScript(url: string): Promise<void> {\n    const result: Promise<void> = new Promise((resolve, reject) => {\n\tif (!Config.willReloadForCustomSamples) {\n\t    const script = document.createElement(\"script\");\n\t    script.src = url;\n\t    document.head.appendChild(script);\n\t    script.addEventListener(\"load\", (event) => {\n\t\tresolve();\n\t    });\n\t} else {\n\t    // There's not really any errors that show up if the loading for\n\t    // this script is stopped early, but it won't really do anything\n\t    // particularly useful either in that case.\n\t}\n    });\n    return result;\n}\n\nexport function loadBuiltInSamples(set: number): void {\n    const defaultIndex: number = 0;\n    const defaultIntegratedSamples: Float32Array = Config.chipWaves[defaultIndex].samples;\n    const defaultSamples: Float32Array = Config.rawRawChipWaves[defaultIndex].samples;\n\n    if (set == 0) {\n\t// Create chip waves with the wrong sound.\n\tconst chipWaves = [\n\t    { name: \"paandorasbox kick\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n\t    { name: \"paandorasbox snare\", expression: 3.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n\t    { name: \"paandorasbox piano1\", expression: 3.0, isSampled: true, isPercussion: false, extraSampleDetune: 2 },\n\t    { name: \"paandorasbox WOW\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\n\t    { name: \"paandorasbox overdrive\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -2 },\n\t    { name: \"paandorasbox trumpet\", expression: 3.0, isSampled: true, isPercussion: false, extraSampleDetune: 1.2 },\n\t    { name: \"paandorasbox saxophone\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -5 },\n\t    { name: \"paandorasbox orchestrahit\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 4.2 },\n\t    { name: \"paandorasbox detatched violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 4.2 },\n\t    { name: \"paandorasbox synth\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -0.8 },\n\t    { name: \"paandorasbox sonic3snare\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n\t    { name: \"paandorasbox come on\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\n\t    { name: \"paandorasbox choir\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -3 },\n\t    { name: \"paandorasbox overdriveguitar\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -6.2 },\n\t    { name: \"paandorasbox flute\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -6 },\n\t    { name: \"paandorasbox legato violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -28 },\n\t    { name: \"paandorasbox tremolo violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -33 },\n\t    { name: \"paandorasbox amen break\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -55 },\n\t    { name: \"paandorasbox pizzicato violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -11 },\n\t    { name: \"paandorasbox tim allen grunt\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -20 },\n\t    { name: \"paandorasbox tuba\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 44 },\n\t    { name: \"paandorasbox loopingcymbal\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -17 },\n\t    { name: \"paandorasbox standardkick\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -7 },\n\t    { name: \"paandorasbox standardsnare\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n\t    { name: \"paandorasbox closedhihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 5 },\n\t    { name: \"paandorasbox foothihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 4 },\n\t    { name: \"paandorasbox openhihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -31 },\n\t    { name: \"paandorasbox crashcymbal\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -43 },\n\t    { name: \"paandorasbox pianoC4\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -42.5 },\n\t    { name: \"paandorasbox liver pad\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -22.5 },\n\t    { name: \"paandorasbox marimba\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -15.5 },\n\t    { name: \"paandorasbox susdotwav\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -24.5 },\n\t    { name: \"paandorasbox wackyboxtts\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -17.5 },\n\t    { name: \"paandorasbox peppersteak_1\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -42.2 },\n\t    { name: \"paandorasbox peppersteak_2\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -47 },\n\t    { name: \"paandorasbox vinyl_noise\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -50 },\n\t    { name: \"paandorasbeta slap bass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -56 },\n\t    { name: \"paandorasbeta HD EB overdrive guitar\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -60 },\n\t    { name: \"paandorasbeta sunsoft bass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -18.5 },\n\t    { name: \"paandorasbeta masculine choir\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -50 },\n\t    { name: \"paandorasbeta feminine choir\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -60.5 },\n\t    { name: \"paandorasbeta tololoche\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -29.5 },\n\t    { name: \"paandorasbeta harp\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -54 },\n\t    { name: \"paandorasbeta pan flute\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -58 },\n\t    { name: \"paandorasbeta krumhorn\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -46 },\n\t    { name: \"paandorasbeta timpani\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -50 },\n\t    { name: \"paandorasbeta crowd hey\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -29 },\n\t    { name: \"paandorasbeta wario land 4 brass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -68 },\n\t    { name: \"paandorasbeta wario land 4 rock organ\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -63 },\n\t    { name: \"paandorasbeta wario land 4 DAOW\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -35 },\n\t    { name: \"paandorasbeta wario land 4 hour chime\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -47.5 },\n\t    { name: \"paandorasbeta wario land 4 tick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -12.5 },\n\t    { name: \"paandorasbeta kirby kick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n\t    { name: \"paandorasbeta kirby snare\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n\t    { name: \"paandorasbeta kirby bongo\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n\t    { name: \"paandorasbeta kirby click\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n\t    { name: \"paandorasbeta sonor kick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28.5 },\n\t    { name: \"paandorasbeta sonor snare\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28.5 },\n\t    { name: \"paandorasbeta sonor snare (left hand)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -22.5 },\n\t    { name: \"paandorasbeta sonor snare (right hand)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -22.5 },\n\t    { name: \"paandorasbeta sonor high tom\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -41.5 },\n\t    { name: \"paandorasbeta sonor low tom\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -41.5 },\n\t    { name: \"paandorasbeta sonor hihat (closed)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -17 },\n\t    { name: \"paandorasbeta sonor hihat (half opened)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -21 },\n\t    { name: \"paandorasbeta sonor hihat (open)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -54.5 },\n\t    { name: \"paandorasbeta sonor hihat (open tip)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -43.5 },\n\t    { name: \"paandorasbeta sonor hihat (pedal)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28 },\n\t    { name: \"paandorasbeta sonor crash\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -51 },\n\t    { name: \"paandorasbeta sonor crash (tip)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -50.5 },\n\t    { name: \"paandorasbeta sonor ride\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46 }\n\t];\n\n\tsampleLoadingState.totalSamples += chipWaves.length;\n\n\t// This assumes that Config.rawRawChipWaves and Config.chipWaves have\n\t// the same number of elements.\n\tconst startIndex: number = Config.rawRawChipWaves.length;\n\tfor (const chipWave of chipWaves) {\n\t    const chipWaveIndex: number = Config.rawRawChipWaves.length;\n\t    const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n\t    const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n\t    const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\n\t    Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\n\t    Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\n\t    Config.rawChipWaves[chipWaveIndex] = rawChipWave;\n\t    Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\n\t    Config.chipWaves[chipWaveIndex] = integratedChipWave;\n\t    Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\n\t    sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loading;\n\t    sampleLoadingState.urlTable[chipWaveIndex] = \"legacySamples\";\n\t}\n\n\tloadScript(\"samples.js\")\n\t.then(() => loadScript(\"samples2.js\"))\n\t.then(() => loadScript(\"samples3.js\"))\n\t.then(() => loadScript(\"drumsamples.js\"))\n\t.then(() => loadScript(\"wario_samples.js\"))\n\t.then(() => loadScript(\"kirby_samples.js\"))\n\t.then(() => {\n\t    // Now put the right sounds in there after everything\n\t    // got loaded.\n\t    const chipWaveSamples: Float32Array[] = [\n\t\tcenterWave(kicksample),\n\t\tcenterWave(snaresample),\n\t\tcenterWave(pianosample),\n\t\tcenterWave(WOWsample),\n\t\tcenterWave(overdrivesample),\n\t\tcenterWave(trumpetsample),\n\t\tcenterWave(saxophonesample),\n\t\tcenterWave(orchhitsample),\n\t\tcenterWave(detatchedviolinsample),\n\t\tcenterWave(synthsample),\n\t\tcenterWave(sonic3snaresample),\n\t\tcenterWave(comeonsample),\n\t\tcenterWave(choirsample),\n\t\tcenterWave(overdrivensample),\n\t\tcenterWave(flutesample),\n\t\tcenterWave(legatoviolinsample),\n\t\tcenterWave(tremoloviolinsample),\n\t\tcenterWave(amenbreaksample),\n\t\tcenterWave(pizzicatoviolinsample),\n\t\tcenterWave(timallengruntsample),\n\t\tcenterWave(tubasample),\n\t\tcenterWave(loopingcymbalsample),\n\t\tcenterWave(kickdrumsample),\n\t\tcenterWave(snaredrumsample),\n\t\tcenterWave(closedhihatsample),\n\t\tcenterWave(foothihatsample),\n\t\tcenterWave(openhihatsample),\n\t\tcenterWave(crashsample),\n\t\tcenterWave(pianoC4sample),\n\t\tcenterWave(liverpadsample),\n\t\tcenterWave(marimbasample),\n\t\tcenterWave(susdotwavsample),\n\t\tcenterWave(wackyboxttssample),\n\t\tcenterWave(peppersteak1),\n\t\tcenterWave(peppersteak2),\n\t\tcenterWave(vinyl),\n\t\tcenterWave(slapbass),\n\t\tcenterWave(hdeboverdrive),\n\t\tcenterWave(sunsoftbass),\n\t\tcenterWave(masculinechoir),\n\t\tcenterWave(femininechoir),\n\t\tcenterWave(southtololoche),\n\t\tcenterWave(harp),\n\t\tcenterWave(panflute),\n\t\tcenterWave(krumhorn),\n\t\tcenterWave(timpani),\n\t\tcenterWave(crowdhey),\n\t\tcenterWave(warioland4brass),\n\t\tcenterWave(warioland4organ),\n\t\tcenterWave(warioland4daow),\n\t\tcenterWave(warioland4hourchime),\n\t\tcenterWave(warioland4tick),\n\t\tcenterWave(kirbykick),\n\t\tcenterWave(kirbysnare),\n\t\tcenterWave(kirbybongo),\n\t\tcenterWave(kirbyclick),\n\t\tcenterWave(funkkick),\n\t\tcenterWave(funksnare),\n\t\tcenterWave(funksnareleft),\n\t\tcenterWave(funksnareright),\n\t\tcenterWave(funktomhigh),\n\t\tcenterWave(funktomlow),\n\t\tcenterWave(funkhihatclosed),\n\t\tcenterWave(funkhihathalfopen),\n\t\tcenterWave(funkhihatopen),\n\t\tcenterWave(funkhihatopentip),\n\t\tcenterWave(funkhihatfoot),\n\t\tcenterWave(funkcrash),\n\t\tcenterWave(funkcrashtip),\n\t\tcenterWave(funkride)\n\t    ];\n\t    let chipWaveIndexOffset: number = 0;\n\t    for (const chipWaveSample of chipWaveSamples) {\n\t\tconst chipWaveIndex: number = startIndex + chipWaveIndexOffset;\n\t\tConfig.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\n\t\tConfig.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\n\t\tConfig.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\n\t\tsampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loaded;\n\t\tsampleLoadingState.samplesLoaded++;\n\t\tsampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\n\t\t    sampleLoadingState.totalSamples,\n\t\t    sampleLoadingState.samplesLoaded\n\t\t));\n\t\tchipWaveIndexOffset++;\n\t    }\n\t});\n\t//EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {name: \"Legacy Sample Presets\", presets:  { name: \"Earthbound O. Guitar\", midiProgram: 80, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"paandorasbox overdrive\", \"unison\": \"none\", \"envelopes\": [] } }, index: EditorConfig.presetCategories.length,};\n    }\n    else if (set == 1) {\n\t// Create chip waves with the wrong sound.\n\tconst chipWaves = [\n\t    { name: \"chronoperc1final\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n\t    { name: \"synthkickfm\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n\t    { name: \"mcwoodclick1\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n\t    { name: \"acoustic snare\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 }\n\t];\n\n\tsampleLoadingState.totalSamples += chipWaves.length;\n\n\t// This assumes that Config.rawRawChipWaves and Config.chipWaves have\n\t// the same number of elements.\n\tconst startIndex: number = Config.rawRawChipWaves.length;\n\tfor (const chipWave of chipWaves) {\n\t    const chipWaveIndex: number = Config.rawRawChipWaves.length;\n\t    const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n\t    const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n\t    const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\n\t    Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\n\t    Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\n\t    Config.rawChipWaves[chipWaveIndex] = rawChipWave;\n\t    Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\n\t    Config.chipWaves[chipWaveIndex] = integratedChipWave;\n\t    Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\n\t    sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loading;\n\t    sampleLoadingState.urlTable[chipWaveIndex] = \"nintariboxSamples\";\n\t}\n\n\tloadScript(\"nintaribox_samples.js\")\n\t.then(() => {\n\t    // Now put the right sounds in there after everything\n\t    // got loaded.\n\t    const chipWaveSamples: Float32Array[] = [\n\t\tcenterWave(chronoperc1finalsample),\n\t\tcenterWave(synthkickfmsample),\n\t\tcenterWave(woodclicksample),\n\t\tcenterWave(acousticsnaresample)\n\t    ];\n\t    let chipWaveIndexOffset: number = 0;\n\t    for (const chipWaveSample of chipWaveSamples) {\n\t\tconst chipWaveIndex: number = startIndex + chipWaveIndexOffset;\n\t\tConfig.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\n\t\tConfig.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\n\t\tConfig.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\n\t\tsampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loaded;\n\t\tsampleLoadingState.samplesLoaded++;\n\t\tsampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\n\t\t    sampleLoadingState.totalSamples,\n\t\t    sampleLoadingState.samplesLoaded\n\t\t));\n\t\tchipWaveIndexOffset++;\n\t    }\n\t});\n    }\n    else if (set == 2) {\n\t// Create chip waves with the wrong sound.\n\tconst chipWaves = [\n\t    { name: \"cat\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -3 },\n\t    { name: \"gameboy\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 7 },\n\t    { name: \"mario\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\n\t    { name: \"drum\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 4 },\n\t    { name: \"yoshi\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -16 },\n\t    { name: \"star\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -16 },\n\t    { name: \"fire flower\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -1 },\n\t    { name: \"dog\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -1 },\n\t    { name: \"oink\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 3 },\n\t    { name: \"swan\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 1 },\n\t    { name: \"face\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -12 }\n\t];\n\n\tsampleLoadingState.totalSamples += chipWaves.length;\n\n\t// This assumes that Config.rawRawChipWaves and Config.chipWaves have\n\t// the same number of elements.\n\tconst startIndex: number = Config.rawRawChipWaves.length;\n\tfor (const chipWave of chipWaves) {\n\t    const chipWaveIndex: number = Config.rawRawChipWaves.length;\n\t    const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n\t    const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n\t    const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\n\t    Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\n\t    Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\n\t    Config.rawChipWaves[chipWaveIndex] = rawChipWave;\n\t    Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\n\t    Config.chipWaves[chipWaveIndex] = integratedChipWave;\n\t    Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\n\t    sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loading;\n\t    sampleLoadingState.urlTable[chipWaveIndex] = \"marioPaintboxSamples\";\n\t}\n\n\tloadScript(\"mario_paintbox_samples.js\")\n\t.then(() => {\n\t    // Now put the right sounds in there after everything\n\t    // got loaded.\n\t    const chipWaveSamples: Float32Array[] = [\n\t\tcenterWave(catpaintboxsample),\n\t\tcenterWave(gameboypaintboxsample),\n\t\tcenterWave(mariopaintboxsample),\n\t\tcenterWave(drumpaintboxsample),\n\t\tcenterWave(yoshipaintboxsample),\n\t\tcenterWave(starpaintboxsample),\n\t\tcenterWave(fireflowerpaintboxsample),\n\t\tcenterWave(dogpaintbox),\n\t\tcenterWave(oinkpaintbox),\n\t\tcenterWave(swanpaintboxsample),\n\t\tcenterWave(facepaintboxsample)\n\t    ];\n\t    let chipWaveIndexOffset: number = 0;\n\t    for (const chipWaveSample of chipWaveSamples) {\n\t\tconst chipWaveIndex: number = startIndex + chipWaveIndexOffset;\n\t\tConfig.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\n\t\tConfig.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\n\t\tConfig.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\n\t\tsampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loaded;\n\t\tsampleLoadingState.samplesLoaded++;\n\t\tsampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\n\t\t    sampleLoadingState.totalSamples,\n\t\t    sampleLoadingState.samplesLoaded\n\t\t));\n\t\tchipWaveIndexOffset++;\n\t    }\n\t});\n    }\n    else {\n        console.log(\"invalid set of built-in samples\");\n    }\n}\n\nexport class Config {\n    // Params for post-processing compressor\n    public static thresholdVal: number = -10;\n    public static kneeVal: number = 40;\n    public static ratioVal: number = 12;\n    public static attackVal: number = 0;\n    public static releaseVal: number = 0.25;\n\n    public static willReloadForCustomSamples: boolean = false;\n\n    public static readonly scales: DictionaryArray<Scale> = toNameMap([\n\n\t\t//   C     Db      D     Eb      E      F     F#      G     Ab      A     Bb      B      C\n\t\t{ name: \"Free\", realName: \"chromatic\", flags: [true, true, true, true, true, true, true, true, true, true, true, true] }, // Free\n        { name: \"Major\", realName: \"ionian\", flags: [true, false, true, false, true, true, false, true, false, true, false, true] }, // Major\n        { name: \"Minor\", realName: \"aeolian\", flags: [true, false, true, true, false, true, false, true, true, false, true, false] }, // Minor\n        { name: \"Mixolydian\", realName: \"mixolydian\", flags: [true, false, true, false, true, true, false, true, false, true, true, false] }, // Mixolydian\n        { name: \"Lydian\", realName: \"lydian\", flags: [true, false, true, false, true, false, true, true, false, true, false, true] }, // Lydian\n        { name: \"Dorian\", realName: \"dorian\", flags: [true, false, true, true, false, true, false, true, false, true, true, false] }, // Dorian\n        { name: \"Phrygian\", realName: \"phrygian\", flags: [true, true, false, true, false, true, false, true, true, false, true, false] }, // Phrygian\n        { name: \"Locrian\", realName: \"locrian\", flags: [true, true, false, true, false, true, true, false, true, false, true, false] }, // Locrian\n        { name: \"Lydian Dominant\", realName: \"lydian dominant\", flags: [true, false, true, false, true, false, true, true, false, true, true, false] }, // Lydian Dominant\n        { name: \"Phrygian Dominant\", realName: \"phrygian dominant\", flags: [true, true, false, false, true, true, false, true, true, false, true, false] }, // Phrygian Dominant\n        { name: \"Harmonic Major\", realName: \"harmonic major\", flags: [true, false, true, false, true, true, false, true, true, false, false, true] }, // Harmonic Major\n        { name: \"Harmonic Minor\", realName: \"harmonic minor\", flags: [true, false, true, true, false, true, false, true, true, false, false, true] }, // Harmonic Minor\n        { name: \"Melodic Minor\", realName: \"melodic minor\", flags: [true, false, true, true, false, true, false, true, false, true, false, true] }, // Melodic Minor\n        { name: \"Blues\", realName: \"blues\", flags: [true, false, false, true, false, true, true, true, false, false, true, false] }, // Blues\n        { name: \"Altered\", realName: \"altered\", flags: [true, true, false, true, true, false, true, false, true, false, true, false] }, // Altered\n        { name: \"Major Pentatonic\", realName: \"major pentatonic\", flags: [true, false, true, false, true, false, false, true, false, true, false, false] }, // Major Pentatonic\n        { name: \"Minor Pentatonic\", realName: \"minor pentatonic\", flags: [true, false, false, true, false, true, false, true, false, false, true, false] }, // Minor Pentatonic\n        { name: \"Whole Tone\", realName: \"whole tone\", flags: [true, false, true, false, true, false, true, false, true, false, true, false] }, // Whole Tone\n        { name: \"Octatonic\", realName: \"octatonic\", flags: [true, false, true, true, false, true, true, false, true, true, false, true] }, // Octatonic\n        { name: \"Hexatonic\", realName: \"hexatonic\", flags: [true, false, false, true, true, false, false, true, true, false, false, true] }, // Hexatonic\n        { name: \"No Dabbing\", realName: \"no dabbing\", flags:[true, true, false, true, true, true, true, true, true, false, true, false] },\n\t//modbox\n\t{ name: \"Jacked Toad\", realName: \"jacked toad\", flags: [true, false, true, true, false, true, true, true, true, false, true, true] },\n\t{ name: \"Dumb\", realName: \"Originally named, currently named, and will always be named 'dumb.'\", flags: [true, false, false, false, false, true, true, true, true, false, false, true] },\n        { name: \"Test Scale\", realName: \"**t\", flags: [true, true, false, false, false, true, true, false, false, true, true, false] },\n\t// todbox\n\t{ name: \"die\", realName: \"death\", flags: [true, false, false, false, false, false, false, false, true, false, false, false] },\n\t//wackybox\n        // { name: \"Rythmic\", realName: \"Pretty straightforward.\", flags: [true, false, false, false, false, false, false, false, false, false, false, false] },\n        //todbox\n\t{ name: \"Custom\", realName: \"custom\", flags: [true, false, true, true, false, false, false, true, true, false, true, true] }, // Custom? considering allowing this one to be be completely configurable\n\t]);\n\tpublic static readonly keys: DictionaryArray<Key> = toNameMap([\n\t\t{ name: \"C\", isWhiteKey: true, basePitch: 12 }, // C0 has index 12 on the MIDI scale. C7 is 96, and C9 is 120. C10 is barely in the audible range.\n\t\t{ name: \"C♯\", isWhiteKey: false, basePitch: 13 },\n\t\t{ name: \"D\", isWhiteKey: true, basePitch: 14 },\n\t\t{ name: \"D♯\", isWhiteKey: false, basePitch: 15 },\n\t\t{ name: \"E\", isWhiteKey: true, basePitch: 16 },\n\t\t{ name: \"F\", isWhiteKey: true, basePitch: 17 },\n\t\t{ name: \"F♯\", isWhiteKey: false, basePitch: 18 },\n\t\t{ name: \"G\", isWhiteKey: true, basePitch: 19 },\n\t\t{ name: \"G♯\", isWhiteKey: false, basePitch: 20 },\n\t\t{ name: \"A\", isWhiteKey: true, basePitch: 21 },\n\t\t{ name: \"A♯\", isWhiteKey: false, basePitch: 22 },\n        { name: \"B\", isWhiteKey: true, basePitch: 23 },\n\t\t\t\t// { name: \"C+\", isWhiteKey: false, basePitch: 24 },\n\t\t//taken from todbox, called \"B#\" for some reason lol\n\t\t// { name: \"G- (actually F#-)\", isWhiteKey: false, basePitch: 6 },\n        // { name: \"C-\", isWhiteKey: true, basePitch: 0 },\n\t    //brucebox\n\t\t//g- isn't actually g-???\n\t\t// { name: \"oh no (F-)\", isWhiteKey: true, basePitch: 5 },\n\t\t//shitbox\n\t]);\n\tpublic static readonly blackKeyNameParents: ReadonlyArray<number> = [-1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1];\n\tpublic static readonly tempoMin: number = 1;\n\tpublic static readonly tempoMax: number = 500;\n\tpublic static readonly octaveMin: number = -2;\n\tpublic static readonly octaveMax: number = 2;\n    public static readonly echoDelayRange: number = 24;\n    public static readonly echoDelayStepTicks: number = 4;\n    public static readonly echoSustainRange: number = 8;\n    public static readonly echoShelfHz: number = 4000.0; // The cutoff freq of the shelf filter that is used to decay echoes.\n    public static readonly echoShelfGain: number = Math.pow(2.0, -0.5);\n    public static readonly reverbShelfHz: number = 8000.0; // The cutoff freq of the shelf filter that is used to decay reverb.\n    public static readonly reverbShelfGain: number = Math.pow(2.0, -1.5);\n\tpublic static readonly reverbRange: number = 32;\n    public static readonly reverbDelayBufferSize: number = 16384; // TODO: Compute a buffer size based on sample rate.\n    public static readonly reverbDelayBufferMask: number = Config.reverbDelayBufferSize - 1; // TODO: Compute a buffer size based on sample rate.\n    public static readonly beatsPerBarMin: number = 1;\n\tpublic static readonly beatsPerBarMax: number = 64;\n\tpublic static readonly barCountMin: number = 1;\n\tpublic static readonly barCountMax: number = 1024;\n    public static readonly instrumentCountMin: number = 1;\n    public static readonly layeredInstrumentCountMax: number = 10;\n\t//this still hasn't been properly tested...\n    public static readonly patternInstrumentCountMax: number = 10;\n\tpublic static readonly partsPerBeat: number = 24;\n\tpublic static readonly ticksPerPart: number = 2;\n\tpublic static readonly ticksPerArpeggio: number = 3;\n\tpublic static readonly arpeggioPatterns: ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7] ];\n\tpublic static readonly rhythms: DictionaryArray<Rhythm> = toNameMap([\n\t\t{ name: \"÷1 (whole notes)\", stepsPerBeat: 1, /*ticksPerArpeggio: 6, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1]],*/ roundUpThresholds: [3] },\n\t\t{ name: \"÷2 (half notes)\", stepsPerBeat: 2, /*ticksPerArpeggio: 5, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1]],*/ roundUpThresholds: [3, 9] },\n\t\t{ name: \"÷3 (triplets)\", stepsPerBeat: 3, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 5, /*8*/ 12, /*16*/ 18 /*24*/] },\n\t\t{ name: \"÷4 (standard)\", stepsPerBeat: 4, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 3, /*6*/ 9, /*12*/ 17, /*18*/ 21 /*24*/] },\n\t\t{ name: \"÷6 (sextuplets)\", stepsPerBeat: 6, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\n\t\t{ name: \"÷8 (eighth notes)\", stepsPerBeat: 8, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\n\t\t{ name: \"÷12 (twelfth notes)\", stepsPerBeat: 12, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1]]*/ roundUpThresholds: null },\n\t\t{ name: \"freehand\", stepsPerBeat: 24, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\n\t]);\n\n    public static readonly instrumentTypeNames: ReadonlyArray<string> = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"PWM\", \"Picked String\", \"custom chip\", \"mod\", \"FM6op\", \"supersaw\"];\n\tpublic static readonly instrumentTypeHasSpecialInterval: ReadonlyArray<boolean> = [true, true, false, false, false, true, false, false, false, false];\n    public static readonly chipBaseExpression: number = 0.03375; // Doubled by unison feature, but affected by expression adjustments per unison setting and wave shape.\n    public static readonly fmBaseExpression: number = 0.03;\n    public static readonly noiseBaseExpression: number = 0.19;\n    public static readonly spectrumBaseExpression: number = 0.3; // Spectrum can be in pitch or noise channels, the expression is doubled for noise.\n    public static readonly drumsetBaseExpression: number = 0.45; // Drums tend to be loud but brief!\n    public static readonly harmonicsBaseExpression: number = 0.025;\n    public static readonly pwmBaseExpression: number = 0.04725; // It's actually closer to half of this, the synthesized pulse amplitude range is only .5 to -.5, but also note that the fundamental sine partial amplitude of a square wave is 4/π times the measured square wave amplitude.\n    public static readonly supersawBaseExpression:  number = 0.061425; // It's actually closer to half of this, the synthesized sawtooth amplitude range is only .5 to -.5.\n    public static readonly pickedStringBaseExpression: number = 0.025; // Same as harmonics.\n    public static readonly distortionBaseVolume: number = 0.011; // Distortion is not affected by pitchDamping, which otherwise approximately halves expression for notes around the middle of the range.\n    public static readonly bitcrusherBaseVolume: number = 0.010; // Also not affected by pitchDamping, used when bit crushing is maxed out (aka \"1-bit\" output).\n\tpublic static rawChipWaves: DictionaryArray<ChipWave> = toNameMap([\n        { name: \"rounded\", expression: 0.94, samples: centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2]) },\n        { name: \"triangle\", expression: 1.0, samples: centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 7.0 / 15.0, 9.0 / 15.0, 11.0 / 15.0, 13.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 13.0 / 15.0, 11.0 / 15.0, 9.0 / 15.0, 7.0 / 15.0, 5.0 / 15.0, 3.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -3.0 / 15.0, -5.0 / 15.0, -7.0 / 15.0, -9.0 / 15.0, -11.0 / 15.0, -13.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -13.0 / 15.0, -11.0 / 15.0, -9.0 / 15.0, -7.0 / 15.0, -5.0 / 15.0, -3.0 / 15.0, -1.0 / 15.0]) },\n        { name: \"square\", expression: 0.5, samples: centerWave([1.0, -1.0]) },\n        { name: \"1/4 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0]) },\n        { name: \"1/8 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n        { name: \"sawtooth\", expression: 0.65, samples: centerWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]) },\n        { name: \"double saw\", expression: 0.5, samples: centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]) },\n        { name: \"double pulse\", expression: 0.4, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]) },\n        { name: \"spiky\", expression: 0.4, samples: centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0]) },\n        { name: \"sine\", expression: 0.88, samples: centerAndNormalizeWave([8.0, 9.0, 11.0, 12.0, 13.0, 14.0, 15.0, 15.0, 15.0, 15.0, 14.0, 14.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 4.0, 5.0, 6.0]) },\n        { name: \"flute\", expression: 0.8, samples: centerAndNormalizeWave([3.0, 4.0, 6.0, 8.0, 10.0, 11.0, 13.0, 14.0, 15.0, 15.0, 14.0, 13.0, 11.0, 8.0, 5.0, 3.0]) },\n        { name: \"harp\", expression: 0.8, samples: centerAndNormalizeWave([0.0, 3.0, 3.0, 3.0, 4.0, 5.0, 5.0, 6.0, 7.0, 8.0, 9.0, 11.0, 11.0, 13.0, 13.0, 15.0, 15.0, 14.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 7.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0]) },\n        { name: \"sharp clarinet\", expression: 0.38, samples: centerAndNormalizeWave([0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 8.0, 9.0, 9.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 7.0, 9.0, 9.0, 10.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) },\n        { name: \"soft clarinet\", expression: 0.45, samples: centerAndNormalizeWave([0.0, 1.0, 5.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.0, 11.0, 12.0, 13.0, 12.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\n        { name: \"alto sax\", expression: 0.3, samples: centerAndNormalizeWave([5.0, 5.0, 6.0, 4.0, 3.0, 6.0, 8.0, 7.0, 2.0, 1.0, 5.0, 6.0, 5.0, 4.0, 5.0, 7.0, 9.0, 11.0, 13.0, 14.0, 14.0, 14.0, 14.0, 13.0, 10.0, 8.0, 7.0, 7.0, 4.0, 3.0, 4.0, 2.0]) },\n        { name: \"bassoon\", expression: 0.35, samples: centerAndNormalizeWave([9.0, 9.0, 7.0, 6.0, 5.0, 4.0, 4.0, 4.0, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0, 11.0, 13.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 5.0, 11.0, 14.0]) },\n        { name: \"trumpet\", expression: 0.22, samples: centerAndNormalizeWave([10.0, 11.0, 8.0, 6.0, 5.0, 5.0, 5.0, 6.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 11.0, 14.0]) },\n        { name: \"electric guitar\", expression: 0.2, samples: centerAndNormalizeWave([11.0, 12.0, 12.0, 10.0, 6.0, 6.0, 8.0, 0.0, 2.0, 4.0, 8.0, 10.0, 9.0, 10.0, 1.0, 7.0, 11.0, 3.0, 6.0, 6.0, 8.0, 13.0, 14.0, 2.0, 0.0, 12.0, 8.0, 4.0, 13.0, 11.0, 10.0, 13.0]) },\n        { name: \"organ\", expression: 0.2, samples: centerAndNormalizeWave([11.0, 10.0, 12.0, 11.0, 14.0, 7.0, 5.0, 5.0, 12.0, 10.0, 10.0, 9.0, 12.0, 6.0, 4.0, 5.0, 13.0, 12.0, 12.0, 10.0, 12.0, 5.0, 2.0, 2.0, 8.0, 6.0, 6.0, 5.0, 8.0, 3.0, 2.0, 1.0]) },\n        { name: \"pan flute\", expression: 0.35, samples: centerAndNormalizeWave([1.0, 4.0, 7.0, 6.0, 7.0, 9.0, 7.0, 7.0, 11.0, 12.0, 13.0, 15.0, 13.0, 11.0, 11.0, 12.0, 13.0, 10.0, 7.0, 5.0, 3.0, 6.0, 10.0, 7.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0]) },\n        { name: \"glitch\", expression: 0.5, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0]) },\n        { name: \"trapezoid\", expression: 1.0, samples: centerWave([1.0 / 15.0, 6.0 / 15.0, 10.0 / 15.0, 14.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 14.0 / 15.0, 10.0 / 15.0, 6.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -6.0 / 15.0, -10.0 / 15.0, -14.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -14.0 / 15.0, -10.0 / 15.0, -6.0 / 15.0, -1.0 / 15.0,])},\n   \t//normal\n{ name: \"modbox 10% pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n\t{ name: \"modbox sunsoft bass\", expression: 1.0, samples: centerAndNormalizeWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, 1.0, 0.6875, 0.5, 0.625, 0.625, 0.5, 0.375, 0.5625, 0.4375, 0.5625, 0.4375, 0.4375, 0.3125, 0.1875, 0.1875, 0.375, 0.5625, 0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]) },\n\t{ name: \"modbox loud pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.7, 0.1, 0.1, 0, 0, 0, 0, 0, 0.1, 0.2, 0.15, 0.25, 0.125, 0.215, 0.345, 4.0]) },\n\t   { name: \"modbox sax\", expression: 0.5, samples: centerAndNormalizeWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 9.0, 0.06]) },\n\t    { name: \"modbox guitar\", expression: 0.5, samples: centerAndNormalizeWave([-0.5, 3.5, 3.0, -0.5, -0.25, -1.0]) },\n\t  { name: \"modbox sine\", expression: 0.5, samples: centerAndNormalizeWave([0.0, 0.05, 0.125, 0.2, 0.25, 0.3, 0.425, 0.475, 0.525, 0.625, 0.675, 0.725, 0.775, 0.8, 0.825, 0.875, 0.9, 0.925, 0.95, 0.975, 0.98, 0.99, 0.995, 1, 0.995, 0.99, 0.98, 0.975, 0.95, 0.925, 0.9, 0.875, 0.825, 0.8, 0.775, 0.725, 0.675, 0.625, 0.525, 0.475, 0.425, 0.3, 0.25, 0.2, 0.125, 0.05, 0.0, -0.05, -0.125, -0.2, -0.25, -0.3, -0.425, -0.475, -0.525, -0.625, -0.675, -0.725, -0.775, -0.8, -0.825, -0.875, -0.9, -0.925, -0.95, -0.975, -0.98, -0.99, -0.995, -1, -0.995, -0.99, -0.98, -0.975, -0.95, -0.925, -0.9, -0.875, -0.825, -0.8, -0.775, -0.725, -0.675, -0.625, -0.525, -0.475, -0.425, -0.3, -0.25, -0.2, -0.125, -0.05]) },\n\t   { name: \"modbox atari bass\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]) },\n\t    { name: \"modbox atari pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\n\t  { name: \"modbox 1% pulse\", expression: 0.5, samples: centerAndNormalizeWave},\n\t   { name: \"modbox curved sawtooth\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0 / 4.0]) },\n\t { name: \"modbox viola\", expression: 0.45, samples: centerAndNormalizeWave([-0.9, -1.0, -0.85, -0.775, -0.7, -0.6, -0.5, -0.4, -0.325, -0.225, -0.2, -0.125, -0.1, -0.11, -0.125, -0.15, -0.175, -0.18, -0.2, -0.21, -0.22, -0.21, -0.2, -0.175, -0.15, -0.1, -0.5, 0.75, 0.11, 0.175, 0.2, 0.25, 0.26, 0.275, 0.26, 0.25, 0.225, 0.2, 0.19, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.275, 0.28, 0.29, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.225, 0.2, 0.175, 0.15, 0.1, 0.075, 0.0, -0.01, -0.025, 0.025, 0.075, 0.2, 0.3, 0.475, 0.6, 0.75, 0.85, 0.85, 1.0, 0.99, 0.95, 0.8, 0.675, 0.475, 0.275, 0.01, -0.15, -0.3, -0.475, -0.5, -0.6, -0.71, -0.81, -0.9, -1.0, -0.9]) },\n        { name: \"modbox brass\", expression: 0.45, samples: centerAndNormalizeWave([-1.0, -0.95, -0.975, -0.9, -0.85, -0.8, -0.775, -0.65, -0.6, -0.5, -0.475, -0.35, -0.275, -0.2, -0.125, -0.05, 0.0, 0.075, 0.125, 0.15, 0.20, 0.21, 0.225, 0.25, 0.225, 0.21, 0.20, 0.19, 0.175, 0.125, 0.10, 0.075, 0.06, 0.05, 0.04, 0.025, 0.04, 0.05, 0.10, 0.15, 0.225, 0.325, 0.425, 0.575, 0.70, 0.85, 0.95, 1.0, 0.9, 0.675, 0.375, 0.2, 0.275, 0.4, 0.5, 0.55, 0.6, 0.625, 0.65, 0.65, 0.65, 0.65, 0.64, 0.6, 0.55, 0.5, 0.4, 0.325, 0.25, 0.15, 0.05, -0.05, -0.15, -0.275, -0.35, -0.45, -0.55, -0.65, -0.7, -0.78, -0.825, -0.9, -0.925, -0.95, -0.975]) },\n      { name: \"modbox acoustic bass\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.0, 0.1, -0.1, -0.2, -0.4, -0.3, -1.0]) },\n\t   { name: \"modbox lyre\", expression: 0.45, samples: centerAndNormalizeWave([1.0, -1.0, 4.0, 2.15, 4.13, 5.15, 0.0, -0.05, 1.0]) },\n\t { name: \"modbox ramp pulse\", expression: 0.5, samples: centerAndNormalizeWave([6.1, -2.9, 1.4, -2.9]) },  \n\t  { name: \"modbox piccolo\", expression: 0.5, samples: centerAndNormalizeWave([1, 4, 2, 1, -0.1, -1, -0.12]) },\n     { name: \"modbox squaretooth\", expression: 0.5, samples: centerAndNormalizeWave([0.2, 1.0, 2.6, 1.0, 0.0, -2.4]) },\n\t  { name: \"modbox flatline\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]) },\n\t  { name: \"modbox pnryshk a (u5)\", expression: 0.4, samples: centerAndNormalizeWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]) },\n\t  { name: \"modbox pnryshk b (riff)\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -0.9, 0.8, -0.7, 0.6, -0.5, 0.4, -0.3, 0.2, -0.1, 0.0, -0.1, 0.2, -0.3, 0.4, -0.5, 0.6, -0.7, 0.8, -0.9, 1.0]) },\n\t//modbox\n\t{ name: \"sandbox shrill lute\", expression: 0.94, samples: centerAndNormalizeWave([1.0, 1.5, 1.25, 1.2, 1.3, 1.5]) },\n        { name: \"sandbox bassoon\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]) },\n        { name: \"sandbox shrill bass\", expression: 0.5, samples: centerAndNormalizeWave([0, 1, 0, 0, 1, 0, 1, 0, 0, 0]) },\n      { name: \"sandbox nes pulse\", expression: 0.4, samples: centerAndNormalizeWave([2.1, -2.2, 1.2, 3]) },\n     { name: \"sandbox saw bass\", expression: 0.25, samples: centerAndNormalizeWave([1, 1, 1, 1, 0, 2, 1, 2, 3, 1, -2, 1, 4, 1, 4, 2, 1, 6, -3, 4, 2, 1, 5, 1, 4, 1, 5, 6, 7, 1, 6, 1, 4, 1, 9]) },\n        { name: \"sandbox euphonium\", expression: 0.3, samples: centerAndNormalizeWave([0, 1, 2, 1, 2, 1, 4, 2, 5, 0, -2, 1, 5, 1, 2, 1, 2, 4, 5, 1, 5, -2, 5, 10, 1]) },\n      { name: \"sandbox shrill pulse\", expression: 0.3, samples: centerAndNormalizeWave([4 -2, 0, 4, 1, 4, 6, 7, 3]) },\n      { name: \"sandbox r-sawtooth\", expression: 0.2, samples: centerAndNormalizeWave([6.1, -2.9, 1.4, -2.9]) },\n        { name: \"sandbox recorder\", expression: 0.2, samples: centerAndNormalizeWave([5.0, -5.1, 4.0, -4.1, 3.0, -3.1, 2.0, -2.1, 1.0, -1.1, 6.0]) },\n        { name: \"sandbox narrow saw\", expression: 1.2, samples: centerAndNormalizeWave([0.1, 0.13 / -0.1 ,0.13 / -0.3 ,0.13 / -0.5 ,0.13 / -0.7 ,0.13 / -0.9 ,0.13 / -0.11 ,0.13 / -0.31 ,0.13 / -0.51 ,0.13 / -0.71 ,0.13 / -0.91 ,0.13 / -0.12 ,0.13 / -0.32 ,0.13 / -0.52 ,0.13 / -0.72 ,0.13 / -0.92 ,0.13 / -0.13 ,0.13 / 0.13 ,0.13 / 0.92 ,0.13 / 0.72 ,0.13 / 0.52 ,0.13 / 0.32 ,0.13 / 0.12 ,0.13 / 0.91 ,0.13 / 0.71 ,0.13 / 0.51 ,0.13 / 0.31 ,0.13 / 0.11 ,0.13 / 0.9 ,0.13 / 0.7 ,0.13 / 0.5 ,0.13 / 0.3 ,0.13]) },\n        { name: \"sandbox deep square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 2.25, 1.0, -1.0, -2.25, -1.0]) },\n      //cut\n\t  { name: \"sandbox ring pulse\", expression: 1.0, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n      { name: \"sandbox double sine\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.0, -1.0, -1.1, -1.2, -1.3, -1.4, -1.5, -1.6, -1.7, -1.8, -1.9, -1.8, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1.0]) },\n        { name: \"sandbox contrabass\", expression: 0.5, samples: centerAndNormalizeWave([4.20, 6.9, 1.337, 6.66]) },\n       { name: \"sandbox double bass\", expression: 0.4, samples: centerAndNormalizeWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, -1.0, -0.6875, -0.5, -0.625, -0.625, -0.5, -0.375, -0.5625, -0.4375, -0.5625, -0.4375, -0.4375, -0.3125, -0.1875, 0.1875, 0.375, 0.5625, -0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]) },\n     //   { name: \"sandbox triple pulse\", expression: 0.4, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.5, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.5]) },     \n\t//from sandbox, are these correct????\n\t  { name: \"haileybox test1\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.5, -1.0]) },\n\t  { name: \"brucebox pokey 4bit lfsr\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0]) },\n\t{ name: \"brucebox pokey 5step bass\", expression: 0.5,samples: centerAndNormalizeWave([1.0, -1.0, 1.0, -1.0, 1.0]) },\n\t{ name: \"brucebox isolated spiky\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1.0, -1.0, 1.0, -1.0]) },\n\t//brucebox\n\t{ name: \"nerdbox unnamed 1\", expression: 0.5, samples: centerAndNormalizeWave([0.2 , 0.8 / 0.2, 0.7, -0.4, -1.0, 0.5, -0.5 / 0.6]) },\n\t{ name: \"nerdbox unnamed 2\", expression: 0.5, samples: centerAndNormalizeWave([2.0 , 5.0 / 55.0 , -9.0 , 6.5 / 6.5 , -55.0, 18.5 / -26.0]) },\n//nerdbox\n\t { name: \"zefbox semi-square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 1.5, 2.0, 2.5, 2.5, 2.5, 2.0, 1.5, 1.0]) },\n\t{ name: \"zefbox deep square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 2.25, 1.0, -1.0, -2.25, -1.0]) },\n { name: \"zefbox squaretal\", expression: 0.7, samples: centerAndNormalizeWave([1.5, 1.0, 1.5, -1.5, -1.0, -1.5]) },\n//\t{ name: \"zefbox sawtooth\", expression: 0.65, samples: centerAndNormalizeWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]) },\n\t { name: \"zefbox saw wide\", expression: 0.65, samples: centerAndNormalizeWave([0.0, -0.4, -0.8, -1.2, -1.6 , -2.0, 0.0, -0.4, -0.8, -1.2, -1.6]) },\n\t{ name: \"zefbox saw narrow\", expression: 0.65,samples: centerAndNormalizeWave([1, 0.5, 1, 0.5, 1, 0.5, 1, 2, 1, 2 ,1]) },\n\t { name: \"zefbox deep sawtooth\", expression: 0.5, samples: centerAndNormalizeWave([0, 2, 3, 4, 4.5, 5, 5.5, 6, 6.25, 6.5, 6.75, 7, 6.75, 6.5, 6.25, 6, 5.5, 5, 4.5, 4, 3, 2, 1]) },\n\t//{ name: \"zefbox double saw\", expression: 0.5, samples: centerAndNormalizeWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]) },\n\t { name: \"zefbox sawtal\", expression: 0.3, samples: centerAndNormalizeWave([1.5, 1.0, 1.25, -0.5, 1.5, -0.5, 0.0, -1.5, 1.5, 0.0, 0.5, -1.5, 0.5, 1.25, -1.0, -1.5]) },\n\t{ name: \"zefbox deep sawtal\", expression: 0.7, samples: centerAndNormalizeWave([0.75, 0.25, 0.5, -0.5, 0.5, -0.5, -0.25, -0.75]) },\n//\t { name: \"zefbox squaretooth\", expression: 0.25, samples: centerAndNormalizeWave([0.2, 1.0, 2.6, 1.0, 0.0, -2.4]) },\n\t//identical to the modbox squaretooth, just louder - this was pre-2.0 ultrabox, but I've added backwards compatibility stuff related to it so yeah\n\t{ name: \"zefbox pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -2.0, -2.0, -1.5, -1.5, -1.25, -1.25, -1.0, -1.0]) },\n//{ name: \"zefbox double pulse\", expression: 0.4, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]) },\n{ name: \"zefbox triple pulse\", expression: 0.4, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.5, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.5]) },\n{ name: \"zefbox high pulse\", expression: 0.2, samples: centerAndNormalizeWave([1, -2, 2, -3, 3, -4, 5, -4, 3, -3, 2, -2, 1]) },\n{ name: \"zefbox deep pulse\", expression: 0.2, samples: centerAndNormalizeWave([1, 2, 2, -2, -2, -3, -4, -4, -5, -5, -5, -5, 0, -1, -2]) },\n//from zefbox, are these correct????\n\t //\"triangle\", \"square\", \"semi-square\", \"deep square\", \"squaretal\", \"sawtooth\", \"saw wide\", \"saw narrow\",  \"deep sawtooth\", \"double saw\", \"sawtal\", \"deep sawtal\", \"squaretooth\", \"pulse\", \"pulse wide\", \"pulse narrow\", \"double pulse\", \"triple pulse\", \"high pulse\", \"deep pulse\",  \"nes pulse\", \"spiky\", \"plateau\", \"sinusoid\"\n\t { name: \"wackybox guitar string\", expression: 0.6, samples: centerAndNormalizeWave([0, 63, 63, 63, 63, 19, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 11, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 27, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 34, 63, 63, 63, 63]) },\n\t\t{ name: \"wackybox intense\", expression: 0.6, samples: centerAndNormalizeWave([36, 25, 33, 35, 18, 51, 22, 40, 27, 37, 31, 33, 25, 29, 41, 23, 31, 31, 45, 20, 37, 23, 29, 26, 42, 29, 33, 26, 31, 27, 40, 25, 40, 26, 37, 24, 41, 32, 0, 32, 33, 29, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31]) },\n\t\t{ name: \"wackybox buzz wave\", expression: 0.6, samples: centerAndNormalizeWave([0, 1, 1, 2, 4, 4, 4, 4, 5, 5, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 8, 8, 11, 15, 23, 62, 61, 60, 58, 56, 56, 54, 53, 52, 50, 49, 48, 47, 47, 45, 45, 45, 44, 44, 43, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 53]) },\n        //wackybox\n\t\t        { name: \"todbox 1/3 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0]) },\n        { name: \"todbox 1/5 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0]) },\n\t\t//these WEREN'T in pre-2.0 ultrabox, but I've added backwards compatibility stuff related to it so yeah\n\t\t{ name: \"todbox slap bass\", expression: 0.5, samples: centerAndNormalizeWave([1, 0.5, 0, 0.5, 1.25, 0.5, -0.25, 0.1, -0.1, 0.1, 1.1, 2.1, 3, 3.5, 2.9, 3.3, 2.7, 2.9, 2.3, 2, 1.9, 1.8, 1, 0.7, 0.9, 0.8, 0.4, 0.1, 0.0, 0.2, 0.4, 0.6, 0.5, 0.8]) },\n\t{ name: \"todbox harsh wave\", expression: 0.45, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, 0.5, 0.5, 0.5, 0.7, 0.39, 1.3, 0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n\t{ name: \"todbox accordian\", expression: 0.5, samples: centerAndNormalizeWave([0, 1, 1, 2, 2, 1.5, 1.5, 0.8, 0, -2, -3.25, -4, -4.5, -5.5, -6, -5.75, -5.5, -5, -5, -5, -6, -6, -6, -5, -4, -3, -2, -1, 0.75, 1, 2, 3, 4, 5, 6, 6.5, 7.5, 8, 7.75, 6, 5.25, 5, 5, 5, 5, 5, 4.25, 3.75, 3.25, 2.75, 1.25, -0.75, -2, -0.75, 1.25, 1.25, 2, 2, 2, 2, 1.5, -1, -2, -1, 1.5, 2,  2.75, 2.75, 2.75, 3, 2.75, -1, -2, -2.5, -2, -1, -2.25, -2.75, -2, -3, -1.75, 1, 2, 3.5, 4, 5.25, 6, 8, 9.75, 10, 9.5, 9, 8.5, 7.5, 6.5, 5.25, 5, 4.5, 4, 4, 4, 3.25, 2.5, 2, 1, -0.5, -2, -3.5, -4, -4, -4, -3.75, -3, -2, -1]) },\n    //from todbox\n\t{ name: \"todbox beta banana wave\", expression: 0.8, samples: centerAndNormalizeWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0]) },\n\t{ name: \"todbox beta test wave\", expression: 0.5, samples: centerAndNormalizeWave([56, 0, -52, 16, 3, 3, 2, -35, 20, 147, -53, 0, 0, 5, -6]) },\n\t//I don't like this one.\n\t{ name: \"todbox beta real snare\", expression: 1.0, samples: centerAndNormalizeWave([0.00000,-0.01208,-0.02997,-0.04382,-0.06042,-0.07529,-0.09116,-0.10654,-0.12189,-0.13751,-0.15289,-0.16849,-0.18387,-0.19974,-0.21484,-0.23071,-0.24557,-0.26144,-0.27731,-0.29141,-0.30350,-0.32416,-0.34406,-0.32947,-0.31158,-0.33725,-0.37579,-0.39746,-0.40201,-0.40906,-0.44180,-0.47229,-0.47379,-0.47733,-0.45239,-0.33954,-0.22894,-0.22443,-0.32138,-0.46371,-0.57178,-0.61081,-0.59998,-0.61459,-0.62189,-0.43979,-0.19217,-0.12643,-0.17252,-0.20956,-0.20981,-0.19217,-0.22845,-0.34332,-0.50629,-0.64307,-0.72922,-0.81384,-0.87857,-0.90149,-0.88687,-0.86169,-0.87781,-0.80478,-0.52493,-0.31308,-0.33249,-0.39395,-0.39017,-0.30301,-0.19949,-0.13071,-0.02493,0.14307,0.34961,0.52542,0.63223,0.68613,0.74710,0.87305,0.98184,0.98889,0.97052,0.99066,0.99747,0.99344,0.99469,0.99393,0.99570,0.99393,0.99521,0.99469,0.99420,0.99521,0.99420,0.99521,0.99469,0.99469,0.99521,0.99420,0.99545,0.99445,0.99469,0.99493,0.99420,0.99521,0.99393,0.99493,0.99469,0.99445,0.99570,0.99445,0.99521,0.99469,0.99469,0.99521,0.99420,0.99545,0.99445,0.99445,0.99493,0.99420,0.99545,0.99420,0.99493,0.99493,0.99420,0.99545,0.99445,0.99521,0.99469,0.99445,0.99545,0.99368,0.99393,0.99445,0.99268,0.97983,0.97229,0.95944,0.88486,0.76773,0.64481,0.53098,0.39847,0.19318,-0.03827,-0.20325,-0.39319,-0.68765,-0.88461,-0.93448,-0.96069,-0.97681,-0.98715,-0.99042,-0.99142,-0.99091,-0.99142,-0.99219,-0.99091,-0.99219,-0.99066,-0.99142,-0.99142,-0.99118,-0.99191,-0.99066,-0.99191,-0.99142,-0.99142,-0.99191,-0.99091,-0.99219,-0.99118,-0.99142,-0.99167,-0.99091,-0.99219,-0.99091,-0.99167,-0.99142,-0.99091,-0.99191,-0.99091,-0.99191,-0.99142,-0.99118,-0.99191,-0.99066,-0.99191,-0.99118,-0.99142,-0.99191,-0.99066,-0.99191,-0.99091,-0.99167,-0.99191,-0.99118,-0.99219,-0.99091,-0.99191,-0.99142,-0.99142,-0.99243,-0.98865,-0.98764,-0.99219,-0.98083,-0.92517,-0.92770,-0.91486,-0.59042,-0.15189,0.02945,0.05667,0.06195,0.00629,-0.18008,-0.56497,-0.88010,-0.92770,-0.92871,-0.97705,-0.99167,-0.98663,-0.99118,-0.99042,-0.99219,-0.99142,-0.99118,-0.98941,-0.99219,-1.00000,-0.97580,-0.95993,-0.99948,-0.98236,-0.84659,-0.74860,-0.70679,-0.59747,-0.48035,-0.41687,-0.36826,-0.29745,-0.18185,-0.06219,0.02164,0.07907,0.13123,0.18033,0.19620,0.15692,0.14053,0.20251,0.27530,0.30905,0.29092,0.27252,0.30402,0.32416,0.32214,0.35239,0.39670,0.43198,0.49420,0.58487,0.64154,0.65967,0.67050,0.67026,0.66522,0.65540,0.66119,0.70627,0.75842,0.78738,0.78940,0.78763,0.80402,0.85944,0.94559,0.98990,0.98160,0.98007,0.99368,0.99393,0.98538,0.97580,0.97101,0.93802,0.81812,0.64633,0.46649,0.28613,0.14685,0.08966,0.12543,0.20325,0.24557,0.18866,0.02795,-0.20175,-0.44205,-0.58713,-0.57629,-0.41385,-0.14255,0.18033,0.47882,0.68311,0.72314,0.62064,0.48309,0.43073,0.53577,0.72794,0.90250,0.97354,0.97000,0.98083,0.99191,0.99319,0.99493,0.99393,0.99521,0.99393,0.99545,0.99420,0.99493,0.99493,0.99445,0.99545,0.99420,0.99545,0.99243,0.98917,0.98386,0.97781,0.95844,0.89066,0.81561,0.78134,0.77277,0.75995,0.73022,0.67126,0.57178,0.47000,0.38361,0.29419,0.20703,0.14734,0.15866,0.25162,0.35818,0.45062,0.56750,0.69748,0.81232,0.89697,0.95062,0.97656,0.98615,0.99191,0.99219,0.99243,0.99368,0.99368,0.97028,0.95566,0.94559,0.82617,0.59973,0.38361,0.23901,0.15338,0.12921,0.11206,0.04382,-0.12946,-0.43552,-0.72644,-0.89847,-0.95465,-0.95541,-0.97229,-0.99268,-0.99319,-0.98840,-0.99142,-0.99167,-0.99091,-0.98840,-0.98965,-0.99368,-0.97455,-0.95010,-0.94684,-0.96219,-0.98514,-0.99243,-0.98889,-0.98917,-0.99142,-0.99219,-0.99091,-0.99191,-0.99142,-0.99142,-0.99191,-0.99066,-0.99167,-0.99091,-0.99142,-0.99191,-0.99091,-0.99191,-0.99091,-0.99167,-0.99167,-0.99091,-0.99219,-0.99091,-0.99191,-0.99142,-0.99118,-0.99191,-0.99066,-0.99191,-0.99091,-0.99118,-0.99243,-0.98941,-0.98462,-0.96976,-0.96320,-0.96194,-0.87305,-0.66196,-0.44809,-0.29495,-0.18085,-0.11813,-0.11334,-0.18564,-0.34885,-0.58237,-0.80450,-0.93726,-0.97806,-0.97354,-0.97531,-0.98990,-0.99368,-0.98941,-0.99219,-0.99091,-0.99142,-0.99167,-0.99091,-0.99191,-0.99118,-0.99219,-0.98236,-0.97781,-0.97656,-0.95135,-0.87204,-0.71335,-0.52139,-0.34232,-0.17783,-0.00906,0.14886,0.30450,0.48889,0.67404,0.84030,0.94128,0.97681,0.98462,0.98337,0.99142,0.99521,0.99493,0.99420,0.99445,0.99521,0.99393,0.99545,0.99445,0.99521,0.99521,0.99445,0.99570,0.99445,0.99521,0.99469,0.99445,0.99521,0.99420,0.99521,0.99445,0.99445,0.99521,0.99445,0.99545,0.99445,0.99469,0.99493,0.99393,0.99493,0.99445,0.99393,0.98285,0.97781,0.97479,0.92844,0.82114,0.66095,0.52417,0.46826,0.46722,0.47934,0.47379,0.47076,0.48209,0.42014,0.25439,0.10074,-0.00302,-0.08966,-0.16068,-0.21436,-0.22040,-0.15137,-0.00476,0.18536,0.37631,0.52292,0.62164,0.70425,0.74835,0.72366,0.63928,0.52567,0.40805,0.35666,0.42896,0.60175,0.80200,0.92743,0.96548,0.97632,0.98337,0.99066,0.99521,0.99420,0.99368,0.99292,0.98840,0.98083,0.96774,0.93323,0.85440,0.69470,0.47202,0.20425,-0.08890,-0.36423,-0.60025,-0.77481,-0.90173,-0.96017,-0.97028,-0.98108,-0.98840,-0.99219,-0.98990,-0.99219,-0.99142,-0.99142,-0.99219,-0.99091,-0.99243,-0.99066,-0.99142,-0.99142,-0.99118,-0.99191,-0.99066,-0.99167,-0.99142,-0.99142,-0.99219,-0.99091,-0.99191,-0.99118,-0.99142,-0.99191,-0.99091,-0.99191,-0.99091,-0.99167,-0.99191,-0.99118,-0.99219,-0.99091,-0.99167,-0.99142,-0.99142,-0.99219,-0.99091,-0.99191,-0.99142,-0.99118,-0.98917,-0.99042,-0.99445,-0.97330,-0.95590,-0.96219,-0.89670,-0.72241,-0.55112,-0.44809,-0.39319,-0.37833,-0.35641,-0.26270,-0.14230,-0.11282,-0.13525,-0.11536,-0.09671,-0.11511,-0.18060,-0.26874,-0.33374,-0.42215,-0.51358,-0.44785,-0.30450,-0.28613,-0.30527,-0.25037,-0.15390,-0.08286,-0.11157,-0.12592,-0.00327,0.13803,0.19141,0.12820,0.01788,-0.03952,-0.12592,-0.26773,-0.34634,-0.31384,-0.18060,-0.01080,0.13574,0.26120,0.36975,0.46573,0.55087,0.63626,0.73022,0.83072,0.92014,0.97177,0.98587,0.98413,0.99167,0.99445,0.99292,0.99219,0.98740,0.98007,0.96472,0.92239,0.82166,0.69067,0.57959,0.54962,0.59695,0.64255,0.64633,0.60629,0.55942,0.54910,0.58966,0.61887,0.56952,0.54181,0.59518,0.63248,0.63876,0.65463,0.73398,0.88312,0.96927,0.97101,0.97958,0.99344,0.99420,0.99268,0.99493,0.99469,0.99445,0.99521,0.99445,0.99545,0.99420,0.99493,0.99493,0.99420,0.99545,0.99420,0.99493,0.99420,0.99393,0.99420,0.98840,0.98309,0.98309,0.96069,0.88461,0.79370,0.72064,0.65765,0.59998,0.53247,0.49268,0.48615,0.44205,0.38034,0.36447,0.38715,0.39294,0.32645,0.19595,0.07782,-0.05893,-0.27832,-0.48309,-0.62619,-0.72995,-0.79999,-0.84583,-0.82166,-0.73575,-0.67227,-0.65491,-0.64960,-0.66397,-0.70175,-0.72894,-0.74658,-0.76724,-0.79520,-0.82846,-0.86523,-0.90527,-0.94382,-0.89948,-0.69849,-0.47479,-0.31662,-0.15414,-0.00729,0.07077,0.08237,0.04431,-0.02292,-0.11761,-0.24307,-0.36926,-0.45087,-0.46170,-0.40250,-0.30679,-0.17529,0.00000,0.14331,0.24179,0.36774,0.49545,0.56522,0.57907,0.56775,0.53851,0.51132,0.48688,0.41913,0.26044,0.00955,-0.26297,-0.46396,-0.62341,-0.82214,-0.94684,-0.96774,-0.97531,-0.98413,-0.99017,-0.98990,-0.99219,-0.99066,-0.99142,-0.99167,-0.99118,-0.99219,-0.98990,-0.99118,-0.99368,-0.99142,-0.97757,-0.97403,-0.98007,-0.96170,-0.86826,-0.67783,-0.52719,-0.48788,-0.45490,-0.43146,-0.47681,-0.54105,-0.57983,-0.60904,-0.62317,-0.59949,-0.55566,-0.52063,-0.52115,-0.55112,-0.56244,-0.58337,-0.65540,-0.73373,-0.77228,-0.74759,-0.68890,-0.64609,-0.61887,-0.58060,-0.50351,-0.40729,-0.33929,-0.35110,-0.42944,-0.47028,-0.42267,-0.32718,-0.20224,-0.05640,0.04556,0.10529,0.17630,0.26169,0.33197,0.32138,0.23776,0.20956,0.23148,0.20352,0.23325,0.39267,0.52719,0.58438,0.62289,0.66345,0.70023,0.66296,0.54330,0.42618,0.33475,0.24533,0.14105,0.03851,0.01358,0.09143,0.22845,0.34961,0.41711,0.48740,0.58914,0.69519,0.78186,0.84357,0.89822,0.95389,0.98135,0.98615,0.99167,0.99243,0.99445,0.99420,0.99469,0.99493,0.99393,0.99545,0.99445,0.99521,0.99469,0.99445,0.99521,0.99420,0.99469,0.98965,0.98715,0.98563,0.96295,0.91736,0.86624,0.82367,0.77554,0.68411,0.53549,0.38916,0.26120,0.11435,-0.04053,-0.18161,-0.23172,-0.19394,-0.15237,-0.10730,-0.02997,0.08588,0.22620,0.34305,0.44104,0.55740,0.65765,0.71259,0.69217,0.65363,0.69748,0.79572,0.89368,0.95514,0.97733,0.98413,0.98816,0.99243,0.99445,0.99243,0.97302,0.96674,0.97983,0.90378,0.71005,0.51056,0.40451,0.40982,0.41559,0.32996,0.24356,0.18866,0.11411,0.05365,0.01157,-0.03247,-0.09216,-0.16095,-0.23248,-0.31662,-0.39771,-0.48663,-0.59647,-0.71536,-0.82013,-0.85287,-0.82947,-0.84937,-0.92215,-0.97177,-0.98663,-0.98816,-0.98438,-0.99091,-0.99219,-0.99091,-0.99191,-0.99042,-0.99191,-0.99091,-0.99142,-0.99191,-0.99091,-0.99191,-0.99091,-0.99167,-0.99142]) },\n\t//from todbox beta (obviously)\n\t\n\t//{ name: \"ultrabox nes 12.5%\", expression: 0.5, isSampled: false, samples: centerAndNormalizeWave([0, 1, 0, 0, 0, 0, 0, 0]) },\n\t//{ name: \"ultrabox nes 25%\", expression: 0.5, isSampled: false, samples: centerAndNormalizeWave([0, 1, 1, 0, 0, 0, 0, 0]) },\n//\t{ name: \"ultrabox nes 50%\", expression: 0.5, isSampled: false, samples: centerAndNormalizeWave([0, 1, 1, 1, 1, 0, 0, 0]) },\n//\t{ name: \"ultrabox nes 25% negated\", expression: 0.5, isSampled: false, samples: centerAndNormalizeWave([1, 0, 0, 1, 1, 1, 1, 1]) },\n\t//{ name: \"ultrabox nes triangle\", expression: 0.5, isSampled: true, isPercussion: false, extraSampleDetune: 63.28, samples: centerAndNormalizeWave([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) },\n\t//{ name: \"ultrabox gameboy kirby triangle\", expression: 1.0, isSampled: false, samples: centerAndNormalizeWave([2,5,7,1,0,2,2,3,2,5,5,9,3,4,8,9,5,4,8,1,3,1,3,5,9,8,9,2,1,6,9,0,7,9,6,8,1,6]) },\n\t//{ name: \"ultrabox gameboy kirby bass\", expression: 1.0, isSampled: false, samples: centerAndNormalizeWave([4,5,7,2,6,8,3,3,0,8,1,4,2,1,1,4,8,6,7,3,7,8,3,8,7,7,7,5,7,4,3,9,8,7,8,7,0,7]) },\n\t\n\t\n\t{ name: \"ultrabox shortened od guitar\", expression: 0.5, samples: centerAndNormalizeWave([-0.82785,-0.67621,-0.40268,-0.43817,-0.45468,-0.22531,-0.18329,0.24750,0.71246,0.52155,0.56082,0.48395,0.33990,0.46957,0.27744,0.42313,0.47104,0.18796,0.12930,-0.13901,-0.07431,-0.16348,-0.74857,-0.73206,-0.35181,-0.26227,-0.41882,-0.27786,-0.19806,-0.19867,0.18643,0.24808,0.08847,-0.06964,0.06912,0.20474,-0.05304,0.29416,0.31967,0.14243,0.27521,-0.23932,-0.14752,0.12360,-0.26123,-0.26111,0.06616,0.26520,0.08090,0.15240,0.16254,-0.12061,0.04562,0.00131,0.04050,0.08182,-0.21729,-0.17041,-0.16312,-0.08563,0.06390,0.05099,0.05627,0.02728,0.00726,-0.13028,-0.05673,-0.14969,-0.17645,0.35492,0.16766,-0.00897,0.24326,-0.00461,-0.04456,0.01776,-0.04950,-0.01221,0.02039,0.07684,0.13397,0.39850,0.35962,0.13754,0.42310,0.27161,-0.17609,0.03659,0.10635,-0.21909,-0.22046,-0.20258,-0.40973,-0.40280,-0.40521,-0.66284]) },\n\t//based off an old mp3 in #modded-beepbox where someone tried to shorten the overdrive guitar into the size of other chip waves \n\t//search \"normie alert\" in beepcord\n]); \n\tpublic static chipWaves: DictionaryArray<ChipWave> = rawChipToIntegrated(Config.rawChipWaves);\n\tpublic static rawRawChipWaves: DictionaryArray<ChipWave> = Config.rawChipWaves;\n\n\tpublic static firstIndexForSamplesInChipWaveList: number = Config.chipWaves.length;\n  \n\t// Noise waves have too many samples to write by hand, they're generated on-demand by getDrumWave instead.\n\tpublic static readonly chipNoises: DictionaryArray<ChipNoise> = toNameMap([\n\t\t{ name: \"retro\", expression: 0.25, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n\t\t{ name: \"white\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\n\t\t// The \"clang\" and \"buzz\" noises are based on similar noises in the modded beepbox! :D\n\t\t{ name: \"clang\", expression: 0.4, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n\t\t{ name: \"buzz\", expression: 0.3, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n\t\t{ name: \"hollow\", expression: 1.5, basePitch: 96, pitchFilterMult: 1.0, isSoft: true, samples: null },\n\t\t{ name: \"shine\", expression: 1.0, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n\t\t{ name: \"deep\", expression: 1.5, basePitch: 120, pitchFilterMult: 1024.0, isSoft: true, samples: null },\n\t\t{ name: \"cutter\", expression: 0.005, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        { name: \"metallic\", expression: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        { name: \"static\", expression: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n\t\t// technically these are from the pandorasbox beta but whatever\n\t\t{ name: \"1-bit white\", expression: 0.5, basePitch: 74.41, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n\t\t{ name: \"1-bit metallic\", expression: 0.5, basePitch: 86.41, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n\t\t// ultrabox noises\n\t\t{ name: \"crackling\", expression: 0.9, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n\t\t{ name: \"pink\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\n\t\t{ name: \"brownian\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\n\t\t//{ name: \"doom random\", expression: 1.0, basePitch: 84, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n\t]);\n\t\n    public static readonly filterFreqStep: number = 1.0 / 4.0;\n    public static readonly filterFreqRange: number = 34;\n    public static readonly filterFreqReferenceSetting: number = 28;\n    public static readonly filterFreqReferenceHz: number = 8000.0;\n    public static readonly filterFreqMaxHz: number = Config.filterFreqReferenceHz * Math.pow(2.0, Config.filterFreqStep * (Config.filterFreqRange - 1 - Config.filterFreqReferenceSetting)); // ~19khz\n    public static readonly filterFreqMinHz: number = 8.0;\n    public static readonly filterGainRange: number = 15;\n    public static readonly filterGainCenter: number = 7;\n    public static readonly filterGainStep: number = 1.0 / 2.0;\n    public static readonly filterMaxPoints: number = 8;\n    public static readonly filterTypeNames: ReadonlyArray<string> = [\"low-pass\", \"high-pass\", \"peak\"]; // See FilterType enum above.\n    public static readonly filterMorphCount: number = 10; // Number of filter shapes allowed for modulating between. Counts the 0/default position.\n\n    public static readonly filterSimpleCutRange: number = 11;\n    public static readonly filterSimplePeakRange: number = 8;\n\n    public static readonly fadeInRange: number = 10;\n    public static readonly fadeOutTicks: ReadonlyArray<number> = [-24, -12, -6, -3, -1, 6, 12, 24, 48, 72, 96];\n    public static readonly fadeOutNeutral: number = 4;\n    public static readonly drumsetFadeOutTicks: number = 48;\n\tpublic static readonly transitions: DictionaryArray<Transition> = toNameMap([\n        { name: \"normal\", isSeamless: false, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: false },\n        { name: \"interrupt\", isSeamless: true, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: true },\n        { name: \"continue\", isSeamless: true, continues: true, slides: false, slideTicks: 3, includeAdjacentPatterns: true },\n        { name: \"slide\", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: true },\n        { name: \"slide in pattern\", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: false }\n\t]);\n\tpublic static readonly vibratos: DictionaryArray<Vibrato> = toNameMap([\n        { name: \"none\", amplitude: 0.0, type: 0, delayTicks: 0 },\n        { name: \"light\", amplitude: 0.15, type: 0, delayTicks: 0 },\n        { name: \"delayed\", amplitude: 0.3, type: 0, delayTicks: 37 }, // It will fade in over the previous two ticks.\n        { name: \"heavy\", amplitude: 0.45, type: 0, delayTicks: 0 },\n        { name: \"shaky\", amplitude: 0.1, type: 1, delayTicks: 0 },\n\t\t\t//    { name: \"very shaky\", amplitude: 1, type: 0, delayTicks: 0 },\n\t//{ name: \"insane\", amplitude: 10, type: 1, delayTicks: 0 },\n\t    //todbox vibratos\n\t//\t{ name: \"super insane\", amplitude: 30, type: 1, delayTicks: 1 },\n\t\t//wackybox\n\t//\t { name: \"quiver\", amplitude: 0.001, type: 0, delayTicks: 0 },\n      //  { name: \"wub-wub\", amplitude: 10.0, type: 0, delayTicks: 0 },\n   //     { name: \"quiver delayed\", amplitude: 0.001, type: 0, delayTicks: 18 },\n      //  { name: \"vibrate\", amplitude: 0.08, type: 0, delayTicks: 0 },\n    //    { name: \"too much wub\", amplitude: 30.0, type: 0, delayTicks: 18 },\n\t //too much wub breaks things just a little bit at it's original amplitude\n\t\t//sandbox\n\t]);\n\tpublic static readonly vibratoTypes: DictionaryArray<VibratoType> = toNameMap([\n\t\t{ name: \"normal\", periodsSeconds: [0.14], period: 0.14 },\n\t\t{ name: \"shaky\", periodsSeconds: [0.11, 1.618 * 0.11, 3 * 0.11], period: 266.97 }, // LCM of all periods\n\t]);\n\t// This array is more or less a linear step by 0.1 but there's a bit of range added at the start to hit specific ratios, and the end starts to grow faster.\n\t//                                                             0       1      2    3     4      5    6    7      8     9   10   11 12   13   14   15   16   17   18   19   20   21 22   23   24   25   26   27   28   29   30   31 32   33   34   35   36   37   38    39  40   41 42    43   44   45   46 47   48 49 50\n\tpublic static readonly arpSpeedScale: ReadonlyArray<number> = [0, 0.0625, 0.125, 0.2, 0.25, 1 / 3, 0.4, 0.5, 2 / 3, 0.75, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.15, 4.3, 4.5, 4.8, 5, 5.5, 6, 8];\n\tpublic static readonly unisons: DictionaryArray<Unison> = toNameMap([\n        { name: \"none\", voices: 1, spread: 0.0, offset: 0.0, expression: 1.4, sign: 1.0 },\n        { name: \"shimmer\", voices: 2, spread: 0.018, offset: 0.0, expression: 0.8, sign: 1.0 },\n        { name: \"hum\", voices: 2, spread: 0.045, offset: 0.0, expression: 1.0, sign: 1.0 },\n        { name: \"honky tonk\", voices: 2, spread: 0.09, offset: 0.0, expression: 1.0, sign: 1.0 },\n        { name: \"dissonant\", voices: 2, spread: 0.25, offset: 0.0, expression: 0.9, sign: 1.0 },\n        { name: \"fifth\", voices: 2, spread: 3.5, offset: 3.5, expression: 0.9, sign: 1.0 },\n        { name: \"octave\", voices: 2, spread: 6.0, offset: 6.0, expression: 0.8, sign: 1.0 },\n        { name: \"bowed\", voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign: -1.0 },\n        { name: \"piano\", voices: 2, spread: 0.01, offset: 0.0, expression: 1.0, sign: 0.7 },\n        { name: \"warbled\", voices: 2, spread: 0.25, offset: 0.05, expression: 0.9, sign: -0.8 },\n        { name: \"hecking gosh\", voices: 2, spread: 6.25, offset: -6.0, expression: 0.8, sign: -0.7 },\n\t\t{ name: \"spinner\", voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign: 1.0 },\n\t\t{ name: \"detune\", voices: 1, spread: 0.0, offset: 0.25, expression: 1.0, sign: 1.0 },\n\t\t{ name: \"rising\", voices: 2, spread: 1.0, offset: 0.7, expression: 0.95, sign: 1.0 },\n\t\t{ name: \"vibrate\", voices: 2, spread: 3.5, offset: 7, expression: 0.975, sign: 1.0 },\n\t\t{ name: \"fourths\", voices: 2, spread: 4, offset: 4, expression: 0.95, sign: 1.0 },\n\t\t{ name: \"bass\", voices: 1, spread: 0, offset: -7, expression: 1.0, sign: 1.0 },\n\t\t{ name: \"dirty\", voices: 2, spread: 0, offset: 0.1, expression: 0.975, sign: 1.0 },\n\t\t{ name: \"stationary\", voices: 2, spread: 3.5, offset: 0.0, expression: 0.9, sign: 1.0 },\n\t\t{ name: \"recurve\", voices: 2, spread: 0.005, offset: 0.0, expression: 1.0, sign: 1.0 },\n\t\t{ name: \"voiced\", voices: 2, spread: 9.5, offset: 0.0, expression: 1.0, sign: 1.0 },\n\t\t{ name: \"fluctuate\", voices: 2, spread: 12, offset: 0.0, expression: 1.0, sign: 1.0 },\n\t\t{ name: \"thin\", voices: 1, spread: 0.0, offset: 50.0, expression: 1.0, sign: 1.0 },\n\t\t{ name: \"inject\", voices: 2, spread: 6.0, offset: 0.4, expression: 1.0, sign: 1.0 },\n\t    { name: \"askewed\", voices: 2, spread: 0.0, offset: 0.42, expression: 0.7, sign: 1.0 },\n        { name: \"resonance\", voices: 2, spread: 0.0025, offset: 0.1, expression: 0.8, sign: -1.5 },\n\t\t{ name: \"FART\", voices: 2, spread: 13, offset: -5, expression: 1.0, sign: -3 },\n\t\t\n\t //for modbox; voices = riffapp, spread = intervals, offset = offsets, expression = volume, and sign = signs\n\t]);\n    public static readonly effectNames: ReadonlyArray<string> = [\"reverb\", \"chorus\", \"panning\", \"distortion\", \"bitcrusher\", \"note filter\", \"echo\", \"pitch shift\", \"detune\", \"vibrato\", \"transition type\", \"chord type\"];\n    public static readonly effectOrder: ReadonlyArray<EffectType> = [EffectType.panning, EffectType.transition, EffectType.chord, EffectType.pitchShift, EffectType.detune, EffectType.vibrato, EffectType.noteFilter, EffectType.distortion, EffectType.bitcrusher, EffectType.chorus, EffectType.echo, EffectType.reverb];\n    public static readonly noteSizeMax: number = 6;\n\tpublic static readonly volumeRange: number = 50;\n\t// Beepbox's old volume scale used factor -0.5 and was [0~7] had roughly value 6 = 0.125 power. This new value is chosen to have -21 be the same,\n\t// given that the new scale is [-25~25]. This is such that conversion between the scales is roughly equivalent by satisfying (0.5*6 = 0.1428*21)\n\tpublic static readonly volumeLogScale: number = 0.1428;\n\tpublic static readonly panCenter: number = 50;\n\tpublic static readonly panMax: number = Config.panCenter * 2;\n\tpublic static readonly panDelaySecondsMax: number = 0.001;\n    public static readonly chorusRange: number = 8;\n    public static readonly chorusPeriodSeconds: number = 2.0;\n    public static readonly chorusDelayRange: number = 0.0034;\n    public static readonly chorusDelayOffsets: ReadonlyArray<ReadonlyArray<number>> = [[1.51, 2.10, 3.35], [1.47, 2.15, 3.25]];\n    public static readonly chorusPhaseOffsets: ReadonlyArray<ReadonlyArray<number>> = [[0.0, 2.1, 4.2], [3.2, 5.3, 1.0]];\n    public static readonly chorusMaxDelay: number = Config.chorusDelayRange * (1.0 + Config.chorusDelayOffsets[0].concat(Config.chorusDelayOffsets[1]).reduce((x, y) => Math.max(x, y)));\n\tpublic static readonly chords: DictionaryArray<Chord> = toNameMap([\n        { name: \"simultaneous\", customInterval: false, arpeggiates: false, strumParts: 0, singleTone: false },\n        { name: \"strum\", customInterval: false, arpeggiates: false, strumParts: 1, singleTone: false },\n        { name: \"arpeggio\", customInterval: false, arpeggiates: true, strumParts: 0, singleTone: true },\n        { name: \"custom interval\", customInterval: true, arpeggiates: false, strumParts: 0, singleTone: true },\n    ]);\n    public static readonly maxChordSize: number = 9;\n    public static readonly operatorCount: number = 4;\n\tpublic static readonly maxPitchOrOperatorCount: number = Math.max(Config.maxChordSize, Config.operatorCount+2);\n    public static readonly algorithms: DictionaryArray<Algorithm> = toNameMap([\n        { name: \"1←(2 3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], []] },\n        { name: \"1←(2 3←4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [], [4], []] },\n        { name: \"1←2←(3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3, 4], [], []] },\n        { name: \"1←(2 3)←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [4], [4], []] },\n        { name: \"1←2←3←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3], [4], []] },\n        { name: \"1←3 2←4\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[3], [4], [], []] },\n        { name: \"1 2←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3, 4], [], []] },\n        { name: \"1 2←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3], [4], []] },\n        { name: \"(1 2)←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3], [3], [4], []] },\n        { name: \"(1 2)←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3, 4], [3, 4], [], []] },\n        { name: \"1 2 3←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[], [], [4], []] },\n        { name: \"(1 2 3)←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[4], [4], [4], []] },\n        { name: \"1 2 3 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4], modulatedBy: [[], [], [], []] },\n        { name: \"1←(2 3) 2←4\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[2, 3], [4], [], []] },\n        { name: \"1←(2 (3 (4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[2, 3, 4], [3, 4], [4], []] },\n    ]);\n    public static readonly algorithms6Op: DictionaryArray<Algorithm> = toNameMap([\n        //placeholder makes life easier for later\n        { name: \"Custom\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [], [], [], [], []] },\n        //yoinked from SynthBox\n        //algortihm Section 1\n        { name: \"1←2←3←4←5←6\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2], [3], [4], [5], [6], []] },\n        { name: \"1←3 2←4←5←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4], [], [5], [6], []] },\n        { name: \"1←3←4 2←5←6\", carrierCount: 2, associatedCarrier: [1, 1, 1, 2, 2, 2], modulatedBy: [[3], [5], [4], [], [6], []] },\n        { name: \"1←4 2←5 3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [5], [6], [], [], []] },\n        //Algorithm Section 2\n        { name: \"1←3 2←(4 5←6)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5], [], [], [6], []] },\n        { name: \"1←(3 4) 2←5←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3, 4], [5], [], [], [6], []] },\n        { name: \"1←3 2←(4 5 6)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5, 6], [], [], [], []] },\n        { name: \"1←3 2←(4 5)←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5], [], [6], [6], []] },\n        { name: \"1←3 2←4←(5 6)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4], [], [5, 6], [], []] },\n        { name: \"1←(2 3 4 5 6)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [], [], [], [], []] },\n        { name: \"1←(2 3←5 4←6)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [5], [6], [], []] },\n        { name: \"1←(2 3 4←5←6)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], [5], [6], []] },\n        //Algorithm Section 3\n        { name: \"1←4←5 (2 3)←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [6], [6], [5], [], []] },\n        { name: \"1←(3 4)←5 2←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3, 4], [6], [5], [5], [], []] },\n        { name: \"(1 2)←4 3←(5 6)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [4], [5, 6], [], [], []] },\n        { name: \"(1 2)←5 (3 4)←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[5], [5], [6], [6], [], []] },\n        { name: \"(1 2 3)←(4 5 6)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4, 5, 6], [4, 5, 6], [4, 5, 6], [], [], []] },\n        { name: \"1←5 (2 3 4)←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[5], [6], [6], [6], [], []] },\n        { name: \"1 2←5 (3 4)←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [5], [6], [6], [], []] },\n        { name: \"1 2 (3 4 5)←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [6], [6], [6], []] },\n        { name: \"1 2 3 (4 5)←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [], [6], [6], []] },\n        //Algorithm Section 3\n        { name: \"1 2←4 3←(5 6)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3, 3, 3], modulatedBy: [[], [4], [5, 6], [], [], []] },\n        { name: \"1←4 2←(5 6) 3\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3, 3, 3,], modulatedBy: [[4], [5, 6], [], [], [], []] },\n        { name: \"1 2 3←5 4←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [], [5], [6], [], []] },\n        { name: \"1 (2 3)←5←6 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4,], modulatedBy: [[], [5], [5], [], [6], []] },\n        { name: \"1 2 3←5←6 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [], [5, 6], [], [], []] },\n        { name: \"(1 2 3 4 5)←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[6], [6], [6], [6], [6], []] },\n        { name: \"1 2 3 4 5←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [], [], [6], []] },\n        { name: \"1 2 3 4 5 6\", carrierCount: 6, associatedCarrier: [1, 2, 3, 4, 5, 6], modulatedBy: [[], [], [], [], [], []] },\n        //Section 4 where we take our own previous ones for 4op and it gets weird\n        { name: \"1←(2 (3 (4 (5 (6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[2, 3, 4, 5, 6], [3, 4, 5, 6], [4, 5, 6], [5, 6], [6], []] },\n        { name: \"1←(2(3(4(5(6\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [3, 4, 5, 6], [4, 5, 6], [5, 6], [6], []] },\n        { name: \"1←4(2←5(3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [3, 5], [6], [], [], []] },\n        { name: \"1←4(2←5 3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [5], [6], [], [], []] },\n    ]);\n    public static readonly operatorCarrierInterval: ReadonlyArray<number> = [0.0, 0.04, -0.073, 0.091, 0.061, 0.024];\n\tpublic static readonly operatorAmplitudeMax: number = 15;\n    public static readonly operatorFrequencies: DictionaryArray<OperatorFrequency> = toNameMap([\n        { name: \"0.12×\", mult: 0.125, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"0.25×\", mult: 0.25, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"0.5×\", mult: 0.5, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"0.75×\", mult: 0.75, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"1×\", mult: 1.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"~1×\", mult: 1.0, hzOffset: 1.5, amplitudeSign: -1.0 },\n        { name: \"2×\", mult: 2.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"~2×\", mult: 2.0, hzOffset: -1.3, amplitudeSign: -1.0 },\n        { name: \"3×\", mult: 3.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"3.5×\", mult: 3.5, hzOffset: -0.05, amplitudeSign: 1.0 },\n        { name: \"4×\", mult: 4.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"~4×\", mult: 4.0, hzOffset: -2.4, amplitudeSign: -1.0 },\n        { name: \"5×\", mult: 5.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"6×\", mult: 6.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"7×\", mult: 7.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"8×\", mult: 8.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"9×\", mult: 9.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"10×\", mult: 10.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"11×\", mult: 11.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"12×\", mult: 12.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"13×\", mult: 13.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"14×\", mult: 14.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n\t    \t\t{ name: \"15×\", mult: 15.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n\t\t//ultrabox\n        { name: \"16×\", mult: 16.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n\t    \t\t{ name: \"17×\", mult: 17.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n\t\t//ultrabox\n        { name: \"18×\", mult: 18.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n\t    \t\t{ name: \"19×\", mult: 19.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n\t\t//ultrabox\n        { name: \"20×\", mult: 20.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n\t    \t{ name: \"~20×\", mult: 20.0, hzOffset: -5.0, amplitudeSign: -1.0 },\n\t    // dogebox (maybe another mod also adds this? I got it from dogebox)\n\t\t{ name: \"25×\", mult: 25.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n\t{ name: \"50×\", mult: 50.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n\t{ name: \"75×\", mult: 75.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n\t{ name: \"100×\", mult: 100.0, hzOffset: 0.0, amplitudeSign: 1.0 }\n\t    //50 and 100 are from dogebox\n    ]);\n\n    public static readonly envelopes: DictionaryArray<Envelope> = toNameMap([\n        { name: \"none\", type: EnvelopeType.none, speed: 0.0 },\n        { name: \"note size\", type: EnvelopeType.noteSize, speed: 0.0 },\n        { name: \"punch\", type: EnvelopeType.punch, speed: 0.0 },\n        { name: \"flare -1\", type: EnvelopeType.flare, speed: 128.0 },\n        { name: \"flare 1\", type: EnvelopeType.flare, speed: 32.0 },\n        { name: \"flare 2\", type: EnvelopeType.flare, speed: 8.0 },\n        { name: \"flare 3\", type: EnvelopeType.flare, speed: 2.0 },\n        { name: \"twang -1\", type: EnvelopeType.twang, speed: 128.0 },\n        { name: \"twang 1\", type: EnvelopeType.twang, speed: 32.0 },\n        { name: \"twang 2\", type: EnvelopeType.twang, speed: 8.0 },\n        { name: \"twang 3\", type: EnvelopeType.twang, speed: 2.0 },\n        { name: \"swell -1\", type: EnvelopeType.swell, speed: 128.0 },\n        { name: \"swell 1\", type: EnvelopeType.swell, speed: 32.0 },\n        { name: \"swell 2\", type: EnvelopeType.swell, speed: 8.0 },\n        { name: \"swell 3\", type: EnvelopeType.swell, speed: 2.0 },\n        { name: \"tremolo0\", type: EnvelopeType.tremolo, speed: 8.0 },\n        { name: \"tremolo1\", type: EnvelopeType.tremolo, speed: 4.0 },\n        { name: \"tremolo2\", type: EnvelopeType.tremolo, speed: 2.0 },\n        { name: \"tremolo3\", type: EnvelopeType.tremolo, speed: 1.0 },\n        { name: \"tremolo4\", type: EnvelopeType.tremolo2, speed: 4.0 },\n        { name: \"tremolo5\", type: EnvelopeType.tremolo2, speed: 2.0 },\n        { name: \"tremolo6\", type: EnvelopeType.tremolo2, speed: 1.0 },\n        { name: \"decay -1\", type: EnvelopeType.decay, speed: 40.0 },\n        { name: \"decay 1\", type: EnvelopeType.decay, speed: 10.0 },\n        { name: \"decay 2\", type: EnvelopeType.decay, speed: 7.0 },\n        { name: \"decay 3\", type: EnvelopeType.decay, speed: 4.0 },\n        { name: \"wibble-1\", type: EnvelopeType.wibble, speed: 96.0 },\n        { name: \"wibble 1\", type: EnvelopeType.wibble, speed: 24.0 },\n        { name: \"wibble 2\", type: EnvelopeType.wibble, speed: 12.0 },\n        { name: \"wibble 3\", type: EnvelopeType.wibble, speed: 4.0 },\n        { name: \"linear-2\", type: EnvelopeType.linear, speed: 256.0 },\n        { name: \"linear-1\", type: EnvelopeType.linear, speed: 128.0 },\n        { name: \"linear 1\", type: EnvelopeType.linear, speed: 32.0 },\n        { name: \"linear 2\", type: EnvelopeType.linear, speed: 8.0 },\n        { name: \"linear 3\", type: EnvelopeType.linear, speed: 2.0 },\n        { name: \"rise -2\", type: EnvelopeType.rise, speed: 256.0 },\n        { name: \"rise -1\", type: EnvelopeType.rise, speed: 128.0 },\n        { name: \"rise 1\", type: EnvelopeType.rise, speed: 32.0 },\n        { name: \"rise 2\", type: EnvelopeType.rise, speed: 8.0 },\n        { name: \"rise 3\", type: EnvelopeType.rise, speed: 2.0 },\n\t    \t\t{ name: \"flute 1\", type: 9, speed: 16.0 },\n\t\t{ name: \"flute 2\", type: 9, speed: 8.0 },\n\t\t{ name: \"flute 3\", type: 9, speed: 4.0 },\n\t\t//modbox\n\t\t{ name: \"tripolo1\", type: 6, speed: 9.0 },\n        { name: \"tripolo2\", type: 6, speed: 6.0 },\n        { name: \"tripolo3\", type: 6, speed: 3.0 },\n        { name: \"tripolo4\", type: 7, speed: 9.0 },\n        { name: \"tripolo5\", type: 7, speed: 6.0 },\n        { name: \"tripolo6\", type: 7, speed: 3.0 },\n        { name: \"pentolo1\", type: 6, speed: 10.0 },\n        { name: \"pentolo2\", type: 6, speed: 5.0 },\n        { name: \"pentolo3\", type: 6, speed: 2.5 },\n        { name: \"pentolo4\", type: 7, speed: 10.0 },\n        { name: \"pentolo5\", type: 7, speed: 5.0 },\n        { name: \"pentolo6\", type: 7, speed: 2.5 },\t\n\t\t//sandbox\n\t    { name: \"flutter 1\", type: 6, speed: 14.0 },\n        { name: \"flutter 2\", type: 7, speed: 11.0 },\n        { name: \"water-y flutter\", type: 6, speed: 9.0 },\n\t    //todbox\n    ]);\n\tpublic static readonly feedbacks: DictionaryArray<Feedback> = toNameMap([\n\t\t{ name: \"1⟲\", indices: [[1], [], [], []] },\n\t\t{ name: \"2⟲\", indices: [[], [2], [], []] },\n\t\t{ name: \"3⟲\", indices: [[], [], [3], []] },\n\t\t{ name: \"4⟲\", indices: [[], [], [], [4]] },\n\t\t{ name: \"1⟲ 2⟲\", indices: [[1], [2], [], []] },\n\t\t{ name: \"3⟲ 4⟲\", indices: [[], [], [3], [4]] },\n\t\t{ name: \"1⟲ 2⟲ 3⟲\", indices: [[1], [2], [3], []] },\n\t\t{ name: \"2⟲ 3⟲ 4⟲\", indices: [[], [2], [3], [4]] },\n\t\t{ name: \"1⟲ 2⟲ 3⟲ 4⟲\", indices: [[1], [2], [3], [4]] },\n\t\t{ name: \"1→2\", indices: [[], [1], [], []] },\n\t\t{ name: \"1→3\", indices: [[], [], [1], []] },\n\t\t{ name: \"1→4\", indices: [[], [], [], [1]] },\n\t\t{ name: \"2→3\", indices: [[], [], [2], []] },\n\t\t{ name: \"2→4\", indices: [[], [], [], [2]] },\n\t\t{ name: \"3→4\", indices: [[], [], [], [3]] },\n\t\t{ name: \"1→3 2→4\", indices: [[], [], [1], [2]] },\n\t\t{ name: \"1→4 2→3\", indices: [[], [], [2], [1]] },\n        { name: \"1→2→3→4\", indices: [[], [1], [2], [3]] },\n        { name: \"1↔2 3↔4\", indices: [[2], [1], [4], [3]] },\n        { name: \"1↔4 2↔3\", indices: [[4], [3], [2], [1]] },\n        { name: \"2→1→4→3→2\", indices: [[2], [3], [4], [1]] },\n        { name: \"1→2→3→4→1\", indices: [[4], [1], [2], [3]] },\n        { name: \"(1 2 3)→4\", indices: [[], [], [], [1, 2, 3]] },\n        { name: \"ALL\", indices: [[1,2,3,4], [1,2,3,4], [1,2,3,4], [1, 2, 3,4]] },\n    ]);\n    public static readonly feedbacks6Op: DictionaryArray<Feedback> = toNameMap([\n        //placeholder makes life easier for later\n        { name: \"Custom\", indices: [[2, 3, 4, 5, 6], [], [], [], [], []] },\n\n        { name: \"1⟲\", indices: [[1], [], [], [], [], []] },\n        { name: \"2⟲\", indices: [[], [2], [], [], [], []] },\n        { name: \"3⟲\", indices: [[], [], [3], [], [], []] },\n        { name: \"4⟲\", indices: [[], [], [], [4], [], []] },\n        { name: \"5⟲\", indices: [[], [], [], [], [5], []] },\n        { name: \"6⟲\", indices: [[], [], [], [], [], [6]] },\n        { name: \"1⟲ 2⟲\", indices: [[1], [2], [], [], [], []] },\n        { name: \"3⟲ 4⟲\", indices: [[], [], [3], [4], [], []] },\n        { name: \"1⟲ 2⟲ 3⟲\", indices: [[1], [2], [3], [], [], []] },\n        { name: \"2⟲ 3⟲ 4⟲\", indices: [[], [2], [3], [4], [], []] },\n        { name: \"1⟲ 2⟲ 3⟲ 4⟲\", indices: [[1], [2], [3], [4], [], []] },\n        { name: \"1⟲ 2⟲ 3⟲ 4⟲ 5⟲\", indices: [[1], [2], [3], [4], [5], []] },\n        { name: \"1⟲ 2⟲ 3⟲ 4⟲ 5⟲ 6⟲\", indices: [[1], [2], [3], [4], [5], [6]] },\n        { name: \"1→2\", indices: [[], [1], [], [], [], []] },\n        { name: \"1→3\", indices: [[], [], [1], [], [], []] },\n        { name: \"1→4\", indices: [[], [], [], [1], [], []] },\n        { name: \"1→5\", indices: [[], [], [], [], [1], []] },\n        { name: \"1→6\", indices: [[], [], [], [], [], [1]] },\n        { name: \"2→3\", indices: [[], [], [2], [], [], []] },\n        { name: \"2→4\", indices: [[], [], [], [2], [], []] },\n        { name: \"3→4\", indices: [[], [], [], [3], [], []] },\n        { name: \"4→5\", indices: [[], [], [], [], [4], []] },\n        { name: \"1→4 2→5 3→6\", indices: [[], [], [], [1], [2], [3]] },\n        { name: \"1→5 2→6 3→4\", indices: [[], [], [], [3], [1], [2]] },\n        { name: \"1→2→3→4→5→6\", indices: [[], [1], [2], [3], [4], [5]] },\n        { name: \"2→1→6→5→4→3→2\", indices: [[2], [3], [4], [5], [6], [1]] },\n        { name: \"1→2→3→4→5→6→1\", indices: [[6], [1], [2], [3], [4], [5]] },\n        { name: \"1↔2 3↔4 5↔6\", indices: [[2], [1], [4], [3], [6], [5]] },\n        { name: \"1↔4 2↔5 3↔6\", indices: [[4], [5], [6], [1], [2], [3]] },\n        { name: \"(1,2,3,4,5)→6\", indices: [[], [], [], [], [], [1, 2, 3, 4, 5]] },\n        { name: \"ALL\", indices: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]] },\n    ]);\n    public static readonly chipNoiseLength: number = 1 << 15; // 32768\n    public static readonly spectrumNoiseLength: number = 1 << 15; // 32768\n    public static readonly spectrumBasePitch: number = 24;\n    public static readonly spectrumControlPoints: number = 30;\n    public static readonly spectrumControlPointsPerOctave: number = 7;\n    public static readonly spectrumControlPointBits: number = 3;\n    public static readonly spectrumMax: number = (1 << Config.spectrumControlPointBits) - 1;\n    public static readonly harmonicsControlPoints: number = 28;\n    public static readonly harmonicsRendered: number = 64;\n    public static readonly harmonicsRenderedForPickedString: number = 1 << 8; // 256\n    public static readonly harmonicsControlPointBits: number = 3;\n    public static readonly harmonicsMax: number = (1 << Config.harmonicsControlPointBits) - 1;\n    public static readonly harmonicsWavelength: number = 1 << 11; // 2048\n    public static readonly pulseWidthRange: number = 50;\n    public static readonly pulseWidthStepPower: number = 0.5;\n    public static readonly supersawVoiceCount: number = 7;\n    public static readonly supersawDynamismMax: number = 6;\n    public static readonly supersawSpreadMax: number = 12;\n    public static readonly supersawShapeMax: number = 6;\n    public static readonly pitchChannelCountMin: number = 1;\n    public static readonly pitchChannelCountMax: number = 60;\n    public static readonly noiseChannelCountMin: number = 0;\n    public static readonly noiseChannelCountMax: number = 32;\n    public static readonly modChannelCountMin: number = 0;\n    public static readonly modChannelCountMax: number = 24;\n    public static readonly noiseInterval: number = 6;\n    public static readonly pitchesPerOctave: number = 12; // TODO: Use this for converting pitch to frequency.\n    public static readonly drumCount: number = 12;\n    public static readonly pitchOctaves: number = 8;\n    public static readonly modCount: number = 6;\n    public static readonly maxPitch: number = Config.pitchOctaves * Config.pitchesPerOctave;\n    public static readonly maximumTonesPerChannel: number = Config.maxChordSize * 2;\n    public static readonly justIntonationSemitones: number[] = [1.0 / 2.0, 8.0 / 15.0, 9.0 / 16.0, 3.0 / 5.0, 5.0 / 8.0, 2.0 / 3.0, 32.0 / 45.0, 3.0 / 4.0, 4.0 / 5.0, 5.0 / 6.0, 8.0 / 9.0, 15.0 / 16.0, 1.0, 16.0 / 15.0, 9.0 / 8.0, 6.0 / 5.0, 5.0 / 4.0, 4.0 / 3.0, 45.0 / 32.0, 3.0 / 2.0, 8.0 / 5.0, 5.0 / 3.0, 16.0 / 9.0, 15.0 / 8.0, 2.0].map(x => Math.log2(x) * Config.pitchesPerOctave);\n    public static readonly pitchShiftRange: number = Config.justIntonationSemitones.length;\n    public static readonly pitchShiftCenter: number = Config.pitchShiftRange >> 1;\n    public static readonly detuneCenter: number = 200;\n    public static readonly detuneMax: number = 400;\n    public static readonly detuneMin: number = 0;\n    public static readonly songDetuneMin: number = 0;\n    public static readonly songDetuneMax: number = 500;\n    public static readonly sineWaveLength: number = 1 << 8; // 256\n    public static readonly sineWaveMask: number = Config.sineWaveLength - 1;\n    public static readonly sineWave: Float32Array = generateSineWave();\n\n    // Picked strings have an all-pass filter with a corner frequency based on the tone fundamental frequency, in order to add a slight inharmonicity. (Which is important for distortion.)\n    public static readonly pickedStringDispersionCenterFreq: number = 6000.0; // The tone fundamental freq is pulled toward this freq for computing the all-pass corner freq.\n    public static readonly pickedStringDispersionFreqScale: number = 0.3; // The tone fundamental freq freq moves this much toward the center freq for computing the all-pass corner freq.\n    public static readonly pickedStringDispersionFreqMult: number = 4.0; // The all-pass corner freq is based on this times the adjusted tone fundamental freq.\n    public static readonly pickedStringShelfHz: number = 4000.0; // The cutoff freq of the shelf filter that is used to decay the high frequency energy in the picked string.\n\n    public static readonly distortionRange: number = 8;\n    public static readonly stringSustainRange: number = 15;\n    public static readonly stringDecayRate: number = 0.12;\n    public static readonly bitcrusherFreqRange: number = 14;\n    public static readonly bitcrusherOctaveStep: number = 0.5;\n    public static readonly bitcrusherQuantizationRange: number = 8;\n\n    public static readonly maxEnvelopeCount: number = 12;\n    public static readonly defaultAutomationRange: number = 13;\n    public static readonly instrumentAutomationTargets: DictionaryArray<AutomationTarget> = toNameMap([\n        { name: \"none\", computeIndex: null, displayName: \"none\",             /*perNote: false,*/ interleave: false, isFilter: false, /*range: 0,                              */    maxCount: 1, effect: null, compatibleInstruments: null },\n        { name: \"noteVolume\", computeIndex: EnvelopeComputeIndex.noteVolume, displayName: \"note volume\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.volumeRange,             */    maxCount: 1, effect: null, compatibleInstruments: null },\n        { name: \"pulseWidth\", computeIndex: EnvelopeComputeIndex.pulseWidth, displayName: \"pulse width\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.pulseWidthRange,         */    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.pwm, InstrumentType.supersaw] },\n        { name: \"stringSustain\", computeIndex: EnvelopeComputeIndex.stringSustain, displayName: \"sustain\",          /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.stringSustainRange,      */    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.pickedString] },\n        { name: \"unison\", computeIndex: EnvelopeComputeIndex.unison, displayName: \"unison\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.chip, InstrumentType.harmonics, InstrumentType.pickedString, InstrumentType.customChipWave] },\n        { name: \"operatorFrequency\", computeIndex: EnvelopeComputeIndex.operatorFrequency0, displayName: \"fm# freq\",         /*perNote:  true,*/ interleave: true, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: Config.operatorCount+2, effect: null, compatibleInstruments: [InstrumentType.fm, InstrumentType.fm6op] },\n        { name: \"operatorAmplitude\", computeIndex: EnvelopeComputeIndex.operatorAmplitude0, displayName: \"fm# volume\",       /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.operatorAmplitudeMax + 1,*/    maxCount: Config.operatorCount+2, effect: null, compatibleInstruments: [InstrumentType.fm, InstrumentType.fm6op] },\n        { name: \"feedbackAmplitude\", computeIndex: EnvelopeComputeIndex.feedbackAmplitude, displayName: \"fm feedback\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.operatorAmplitudeMax + 1,*/    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.fm, InstrumentType.fm6op] },\n        { name: \"pitchShift\", computeIndex: EnvelopeComputeIndex.pitchShift, displayName: \"pitch shift\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.pitchShiftRange,         */    maxCount: 1, effect: EffectType.pitchShift, compatibleInstruments: null },\n        { name: \"detune\", computeIndex: EnvelopeComputeIndex.detune, displayName: \"detune\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.detuneMax + 1,           */    maxCount: 1, effect: EffectType.detune, compatibleInstruments: null },\n        { name: \"vibratoDepth\", computeIndex: EnvelopeComputeIndex.vibratoDepth, displayName: \"vibrato range\",    /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1, effect: EffectType.vibrato, compatibleInstruments: null },\n        { name: \"noteFilterAllFreqs\", computeIndex: EnvelopeComputeIndex.noteFilterAllFreqs, displayName: \"n. filter freqs\",  /*perNote:  true,*/ interleave: false, isFilter: true, /*range: null,                           */    maxCount: 1, effect: EffectType.noteFilter, compatibleInstruments: null },\n        { name: \"noteFilterFreq\", computeIndex: EnvelopeComputeIndex.noteFilterFreq0, displayName: \"n. filter # freq\", /*perNote:  true,*/ interleave: false/*true*/, isFilter: true, /*range: Config.filterFreqRange,     */        maxCount: Config.filterMaxPoints, effect: EffectType.noteFilter, compatibleInstruments: null },\n        { name: \"decimalOffset\", computeIndex: EnvelopeComputeIndex.decimalOffset, displayName: \"decimal offset\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.pulseWidthRange,         */    maxCount: 1, effect: null, compatibleInstruments: [InstrumentType.pwm] },\n\t{name: \"supersawDynamism\", computeIndex: EnvelopeComputeIndex.supersawDynamism, displayName: \"dynamism\",       /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.supersawDynamismMax + 1, */    maxCount: 1,    effect: null, compatibleInstruments: [InstrumentType.supersaw]},\n\t{name: \"supersawSpread\", computeIndex: EnvelopeComputeIndex.supersawSpread, displayName: \"spread\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.supersawSpreadMax + 1,   */    maxCount: 1,    effect: null, compatibleInstruments: [InstrumentType.supersaw]},\n\t{name: \"supersawShape\", computeIndex: EnvelopeComputeIndex.supersawShape, displayName: \"saw↔pulse\",        /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.supersawShapeMax + 1,    */    maxCount: 1,    effect: null, compatibleInstruments: [InstrumentType.supersaw]},\n        // Controlling filter gain is less obvious and intuitive than controlling filter freq, so to avoid confusion I've disabled it for now...\n        //{name: \"noteFilterGain\",         computeIndex:       EnvelopeComputeIndex.noteFilterGain0,        displayName: \"n. filter # vol\",  /*perNote:  true,*/ interleave: false, isFilter:  true, range: Config.filterGainRange,             maxCount: Config.filterMaxPoints, effect: EffectType.noteFilter, compatibleInstruments: null},\n\n\n\n        /*\n        {name: \"distortion\",             computeIndex: InstrumentAutomationIndex.distortion,             displayName: \"distortion\",       perNote: false, interleave: false, isFilter: false, range: Config.distortionRange,             maxCount: 1,    effect: EffectType.distortion,   compatibleInstruments: null},\n        {name: \"bitcrusherQuantization\", computeIndex: InstrumentAutomationIndex.bitcrusherQuantization, displayName: \"bit crush\",        perNote: false, interleave: false, isFilter: false, range: Config.bitcrusherQuantizationRange, maxCount: 1,    effect: EffectType.bitcrusher,   compatibleInstruments: null},\n        {name: \"bitcrusherFrequency\",    computeIndex: InstrumentAutomationIndex.bitcrusherFrequency,    displayName: \"freq crush\",       perNote: false, interleave: false, isFilter: false, range: Config.bitcrusherFreqRange,         maxCount: 1,    effect: EffectType.bitcrusher,   compatibleInstruments: null},\n        {name: \"eqFilterAllFreqs\",       computeIndex: InstrumentAutomationIndex.eqFilterAllFreqs,       displayName: \"eq filter freqs\",  perNote: false, interleave: false, isFilter:  true, range: null,                               maxCount: 1,    effect: null,                    compatibleInstruments: null},\n        {name: \"eqFilterFreq\",           computeIndex: InstrumentAutomationIndex.eqFilterFreq0,          displayName: \"eq filter # freq\", perNote: false, interleave:  true, isFilter:  true, range: Config.filterFreqRange,             maxCount: Config.filterMaxPoints, effect: null,  compatibleInstruments: null},\n        {name: \"eqFilterGain\",           computeIndex: InstrumentAutomationIndex.eqFilterGain0,          displayName: \"eq filter # vol\",  perNote: false, interleave: false, isFilter:  true, range: Config.filterGainRange,             maxCount: Config.filterMaxPoints, effect: null,  compatibleInstruments: null},\n        {name: \"panning\",                computeIndex: InstrumentAutomationIndex.panning,                displayName: \"panning\",          perNote: false, interleave: false, isFilter: false, range: Config.panMax + 1,                  maxCount: 1,    effect: EffectType.panning,      compatibleInstruments: null},\n        {name: \"chorus\",                 computeIndex: InstrumentAutomationIndex.chorus,                 displayName: \"chorus\",           perNote: false, interleave: false, isFilter: false, range: Config.chorusRange,                 maxCount: 1,    effect: EffectType.chorus,       compatibleInstruments: null},\n        {name: \"echoSustain\",            computeIndex: InstrumentAutomationIndex.echoSustain,            displayName: \"echo\",             perNote: false, interleave: false, isFilter: false, range: Config.echoSustainRange,            maxCount: 1,    effect: EffectType.echo,         compatibleInstruments: null},\n        {name: \"echoDelay\",              computeIndex: InstrumentAutomationIndex.echoDelay,              displayName: \"echo delay\",       perNote: false, interleave: false, isFilter: false, range: Config.echoDelayRange,              maxCount: 1,    effect: EffectType.echo,         compatibleInstruments: null}, // wait until after we're computing a tick's settings for multiple run lengths.\n        {name: \"reverb\",                 computeIndex: InstrumentAutomationIndex.reverb,                 displayName: \"reverb\",           perNote: false, interleave: false, isFilter: false, range: Config.reverbRange,                 maxCount: 1,    effect: EffectType.reverb,       compatibleInstruments: null},\n        {name: \"mixVolume\",              computeIndex: InstrumentAutomationIndex.mixVolume,              displayName: \"mix volume\",       perNote: false, interleave: false, isFilter: false, range: Config.volumeRange,                 maxCount: 1,    effect: null,                    compatibleInstruments: null},\n        {name: \"envelope#\",              computeIndex: null,                                             displayName: \"envelope\",         perNote: false, interleave: false, isFilter: false, range: Config.defaultAutomationRange,      maxCount: Config.maxEnvelopeCount, effect: null, compatibleInstruments: null}, // maxCount special case for envelopes to be allowed to target earlier ones.\n        */\n    ]);\n    public static readonly operatorWaves: DictionaryArray<OperatorWave> = toNameMap([\n\t\t{ name: \"sine\", samples: Config.sineWave },\n\t\t{ name: \"triangle\", samples: generateTriWave() },\n\t\t{ name: \"pulse width\", samples: generateSquareWave() },\n\t\t{ name: \"sawtooth\", samples: generateSawWave() },\n\t\t{ name: \"ramp\", samples: generateSawWave(true) },\n\t\t{ name: \"trapezoid\", samples: generateTrapezoidWave(2) },\n\t    { name: \"rounded\", samples: generateRoundedSineWave() },\n\t\t//{ name: \"white noise\", samples: generateWhiteNoiseFmWave() },\n\t\t//{ name: \"1-bit white noise\", samples: generateOneBitWhiteNoiseFmWave() },\n    ]);\n    public static readonly pwmOperatorWaves: DictionaryArray<OperatorWave> = toNameMap([\n        { name: \"1%\", samples: generateSquareWave(0.01) },\n        { name: \"5%\", samples: generateSquareWave(0.05) },\n        { name: \"12.5%\", samples: generateSquareWave(0.125) },\n        { name: \"25%\", samples: generateSquareWave(0.25) },\n        { name: \"33%\", samples: generateSquareWave(1 / 3) },\n        { name: \"50%\", samples: generateSquareWave(0.5) },\n        { name: \"66%\", samples: generateSquareWave(2 / 3) },\n        { name: \"75%\", samples: generateSquareWave(0.75) },\n        { name: \"87.5%\", samples: generateSquareWave(0.875) },\n        { name: \"95%\", samples: generateSquareWave(0.95) },\n        { name: \"99%\", samples: generateSquareWave(0.99) },\n    ]);\n\n\n    // Height of the small editor column for inserting/deleting rows, in pixels.\n    public static readonly barEditorHeight: number = 10;\n\n    // Careful about changing index ordering for this. Index is stored in URL/JSON etc.\n    public static readonly modulators: DictionaryArray<Modulator> = toNameMap([\n        { name: \"none\", pianoName: \"None\", maxRawVol: 6, newNoteVol: 6, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"No Mod Setting\", promptDesc: [ \"No setting has been chosen yet, so this modulator will have no effect. Try choosing a setting with the dropdown, then click this '?' again for more info.\", \"[$LO - $HI]\" ] },\n        { name: \"song volume\", pianoName: \"Volume\", maxRawVol: 100, newNoteVol: 100, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"Song Volume\", promptDesc: [ \"This setting affects the overall volume of the song, just like the main volume slider.\", \"At $HI, the volume will be unchanged from default, and it will get gradually quieter down to $LO.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\" ] },\n        { name: \"tempo\", pianoName: \"Tempo\", maxRawVol: Config.tempoMax - Config.tempoMin, newNoteVol: Math.ceil((Config.tempoMax - Config.tempoMin) / 2), forSong: true, convertRealFactor: Config.tempoMin, associatedEffect: EffectType.length,\n            promptName: \"Song Tempo\", promptDesc: [ \"This setting controls the speed your song plays at, just like the tempo slider.\", \"When you first make a note for this setting, it will default to your current tempo. Raising it speeds up the song, up to $HI BPM, and lowering it slows it down, to a minimum of $LO BPM.\", \"Note that you can make a 'swing' effect by rapidly changing between two tempo values.\", \"[OVERWRITING] [$LO - $HI] [BPM]\" ] },\n        { name: \"song reverb\", pianoName: \"Reverb\", maxRawVol: Config.reverbRange * 2, newNoteVol: Config.reverbRange, forSong: true, convertRealFactor: -Config.reverbRange, associatedEffect: EffectType.length,\n            promptName: \"Song Reverb\", promptDesc: [ \"This setting affects the overall reverb of your song. It works by multiplying existing reverb for instruments, so those with no reverb set will be unaffected.\", \"At $MID, all instruments' reverb will be unchanged from default. This increases up to double the reverb value at $HI, or down to no reverb at $LO.\", \"[MULTIPLICATIVE] [$LO - $HI]\" ] },\n        { name: \"next bar\", pianoName: \"Next Bar\", maxRawVol: 1, newNoteVol: 1, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"Go To Next Bar\", promptDesc: [ \"This setting functions a little different from most. Wherever a note is placed, the song will jump immediately to the next bar when it is encountered.\", \"This jump happens at the very start of the note, so the length of a next-bar note is irrelevant. Also, the note can be value 0 or 1, but the value is also irrelevant - wherever you place a note, the song will jump.\", \"You can make mixed-meter songs or intro sections by cutting off unneeded beats with a next-bar modulator.\", \"[$LO - $HI]\" ] },\n        { name: \"note volume\", pianoName: \"Note Vol.\", maxRawVol: Config.volumeRange, newNoteVol: Math.ceil(Config.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-Config.volumeRange / 2.0), associatedEffect: EffectType.length,\n            promptName: \"Note Volume\", promptDesc: [ \"This setting affects the volume of your instrument as if its note size had been scaled.\", \"At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments. The volume gradually increases up to $HI, or decreases down to mute at $LO.\", \"This setting was the default for volume modulation in JummBox for a long time. Due to some new effects like distortion and bitcrush, note volume doesn't always allow fine volume control. Also, this modulator affects the value of FM modulator waves instead of just carriers. This can distort the sound which may be useful, but also may be undesirable. In those cases, use the 'mix volume' modulator instead, which will always just scale the volume with no added effects.\", \"For display purposes, this mod will show up on the instrument volume slider, as long as there is not also an active 'mix volume' modulator anyhow. However, as mentioned, it works more like changing note volume.\", \"[MULTIPLICATIVE] [$LO - $HI]\" ] },\n        { name: \"pan\", pianoName: \"Pan\", maxRawVol: Config.panMax, newNoteVol: Math.ceil(Config.panMax / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.panning,\n            promptName: \"Instrument Panning\", promptDesc: [ \"This setting controls the panning of your instrument, just like the panning slider.\", \"At $LO, your instrument will sound like it is coming fully from the left-ear side. At $MID it will be right in the middle, and at $HI, it will sound like it's on the right.\", \"[OVERWRITING] [$LO - $HI] [L-R]\" ] },\n        { name: \"reverb\", pianoName: \"Reverb\", maxRawVol: Config.reverbRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.reverb,\n            promptName: \"Instrument Reverb\", promptDesc: [ \"This setting controls the reverb of your insturment, just like the reverb slider.\", \"At $LO, your instrument will have no reverb. At $HI, it will be at maximum.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"distortion\", pianoName: \"Distortion\", maxRawVol: Config.distortionRange-1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.distortion,\n            promptName: \"Instrument Distortion\", promptDesc: [ \"This setting controls the amount of distortion for your instrument, just like the distortion slider.\", \"At $LO, your instrument will have no distortion. At $HI, it will be at maximum.\", \"[OVERWRITING] [$LO - $HI]\" ] },\n        { name: \"fm slider 1\", pianoName: \"FM 1\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"FM Slider 1\", promptDesc: [ \"This setting affects the strength of the first FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n        { name: \"fm slider 2\", pianoName: \"FM 2\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"FM Slider 2\", promptDesc: [\"This setting affects the strength of the second FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\" ] },\n        { name: \"fm slider 3\", pianoName: \"FM 3\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"FM Slider 3\", promptDesc: [\"This setting affects the strength of the third FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\" ] },\n        { name: \"fm slider 4\", pianoName: \"FM 4\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"FM Slider 4\", promptDesc: [\"This setting affects the strength of the fourth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n        { name: \"fm feedback\", pianoName: \"FM Feedback\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"FM Feedback\", promptDesc: [\"This setting affects the strength of the FM feedback slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n        { name: \"pulse width\", pianoName: \"Pulse Width\", maxRawVol: Config.pulseWidthRange, newNoteVol: Config.pulseWidthRange, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"Pulse Width\", promptDesc: [\"This setting controls the width of this instrument's pulse wave, just like the pulse width slider.\", \"At $HI, your instrument will sound like a pure square wave (on 50% of the time). It will gradually sound narrower down to $LO, where it will be inaudible (as it is on 0% of the time).\", \"Changing pulse width randomly between a few values is a common strategy in chiptune music to lend some personality to a lead instrument.\", \"[OVERWRITING] [$LO - $HI] [%Duty]\"] },\n        { name: \"detune\", pianoName: \"Detune\", maxRawVol: Config.detuneMax - Config.detuneMin, newNoteVol: Config.detuneCenter, forSong: false, convertRealFactor: -Config.detuneCenter, associatedEffect: EffectType.detune,\n            promptName: \"Instrument Detune\", promptDesc: [\"This setting controls the detune for this instrument, just like the detune slider.\", \"At $MID, your instrument will have no detune applied. Each tick corresponds to one cent, or one-hundredth of a pitch. Thus, each change of 100 ticks corresponds to one half-step of detune, up to two half-steps up at $HI, or two half-steps down at $LO.\", \"[OVERWRITING] [$LO - $HI] [cents]\"] },\n        { name: \"vibrato depth\", pianoName: \"Vibrato Depth\", maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.vibrato,\n            promptName: \"Vibrato Depth\", promptDesc: [\"This setting controls the amount that your pitch moves up and down by during vibrato, just like the vibrato depth slider.\", \"At $LO, your instrument will have no vibrato depth so its vibrato would be inaudible. This increases up to $HI, where an extreme pitch change will be noticeable.\", \"[OVERWRITING] [$LO - $HI] [pitch ÷25]\"] },\n        { name: \"song detune\", pianoName: \"Detune\", maxRawVol: Config.songDetuneMax - Config.songDetuneMin, newNoteVol: Math.ceil((Config.songDetuneMax - Config.songDetuneMin) / 2), forSong: true, convertRealFactor: -250, associatedEffect: EffectType.length,\n            promptName: \"Song Detune\", promptDesc: [\"This setting controls the overall detune of the entire song. There is no associated slider.\", \"At $MID, your song will have no extra detune applied and sound unchanged from default. Each tick corresponds to four cents, or four hundredths of a pitch. Thus, each change of 25 ticks corresponds to one half-step of detune, up to 10 half-steps up at $HI, or 10 half-steps down at $LO.\", \"[MULTIPLICATIVE] [$LO - $HI] [cents x4]\"] },\n        { name: \"vibrato speed\", pianoName: \"Vibrato Speed\", maxRawVol: 30, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.vibrato,\n            promptName: \"Vibrato Speed\", promptDesc: [\"This setting controls the speed your instrument will vibrato at, just like the slider.\", \"A setting of $LO means there will be no oscillation, and vibrato will be disabled. Higher settings will increase the speed, up to a dramatic trill at the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"vibrato delay\", pianoName: \"Vibrato Delay\", maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.vibrato,\n            promptName: \"Vibrato Delay\", promptDesc: [\"This setting controls the amount of time vibrato will be held off for before triggering for every new note, just like the slider.\", \"A setting of $LO means there will be no delay. A setting of 24 corresponds to one full beat of delay. As a sole exception to this scale, setting delay to $HI will completely disable vibrato (as if it had infinite delay).\", \"[OVERWRITING] [$LO - $HI] [beats ÷24]\"] },\n        { name: \"arp speed\", pianoName: \"Arp Speed\", maxRawVol: 50, newNoteVol: 10, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.chord,\n            promptName: \"Arpeggio Speed\", promptDesc: [\"This setting controls the speed at which your instrument's chords arpeggiate, just like the arpeggio speed slider.\", \"Each setting corresponds to a different speed, from the slowest to the fastest. The speeds are listed below.\",\n                \"[0-4]: x0, x1/16, x⅛, x⅕, x¼,\", \"[5-9]: x⅓, x⅖, x½, x⅔, x¾,\", \"[10-14]: x⅘, x0.9, x1, x1.1, x1.2,\", \"[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,\", \"[20-24]: x1.8, x1.9, x2, x2.1, x2.2,\", \"[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,\", \"[30-34]: x2.8, x2.9, x3, x3.1, x3.2,\", \"[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,\" ,\"[40-44]: x3.8, x3.9, x4, x4.15, x4.3,\", \"[45-50]: x4.5, x4.8, x5, x5.5, x6, x8\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"pan delay\", pianoName: \"Pan Delay\", maxRawVol: 20, newNoteVol: 10, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.panning,\n            promptName: \"Panning Delay\", promptDesc: [\"This setting controls the delay applied to panning for your instrument, just like the pan delay slider.\", \"With more delay, the panning effect will generally be more pronounced. $MID is the default value, whereas $LO will remove any delay at all. No delay can be desirable for chiptune songs.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"reset arp\", pianoName: \"Reset Arp\", maxRawVol: 1, newNoteVol: 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.chord,\n            promptName: \"Reset Arpeggio\", promptDesc: [\"This setting functions a little different from most. Wherever a note is placed, the arpeggio of this instrument will reset at the very start of that note. This is most noticeable with lower arpeggio speeds. The lengths and values of notes for this setting don't matter, just the note start times.\", \"This mod can be used to sync up your apreggios so that they always sound the same, even if you are using an odd-ratio arpeggio speed or modulating arpeggio speed.\", \"[$LO - $HI]\"] },\n        { name: \"eq filter\", pianoName: \"EQFlt\", maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"EQ Filter\", promptDesc: [\"This setting controls a few separate things for your instrument's EQ filter.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"note filter\", pianoName: \"N.Flt\", maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.noteFilter,\n            promptName: \"Note Filter\", promptDesc: [\"This setting controls a few separate things for your instrument's note filter.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your note filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"bit crush\", pianoName: \"Bitcrush\", maxRawVol: Config.bitcrusherQuantizationRange-1, newNoteVol: Math.round(Config.bitcrusherQuantizationRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.bitcrusher,\n            promptName: \"Instrument Bit Crush\", promptDesc: [\"This setting controls the bit crush of your instrument, just like the bit crush slider.\", \"At a value of $LO, no bit crush will be applied. This increases and the bit crush effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"freq crush\", pianoName: \"Freq Crush\", maxRawVol: Config.bitcrusherFreqRange-1, newNoteVol: Math.round(Config.bitcrusherFreqRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.bitcrusher,\n            promptName: \"Instrument Frequency Crush\", promptDesc: [\"This setting controls the frequency crush of your instrument, just like the freq crush slider.\", \"At a value of $LO, no frequency crush will be applied. This increases and the frequency crush effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"echo\", pianoName: \"Echo\", maxRawVol: Config.echoSustainRange-1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.echo,\n            promptName: \"Instrument Echo Sustain\", promptDesc: [\"This setting controls the echo sustain (echo loudness) of your instrument, just like the echo slider.\", \"At $LO, your instrument will have no echo sustain and echo will not be audible. Echo sustain increases and the echo effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"echo delay\", pianoName: \"Echo Delay\", maxRawVol: Config.echoDelayRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"Instrument Echo Delay\", promptDesc: [\"This setting controls the echo delay of your instrument, just like the echo delay slider.\", \"At $LO, your instrument will have very little echo delay, and this increases up to 2 beats of delay at $HI.\", \"[OVERWRITING] [$LO - $HI] [~beats ÷12]\" ]\n        }, // Disabled via associatedEffect and manually in list build in SongEditor, enable and set back to echo after fixing bugginess!\n        { name: \"chorus\", pianoName: \"Chorus\", maxRawVol: Config.chorusRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.chorus,\n            promptName: \"Instrument Chorus\", promptDesc: [\"This setting controls the chorus strength of your instrument, just like the chorus slider.\", \"At $LO, the chorus effect will be disabled. The strength of the chorus effect increases up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"eq filt cut\", pianoName: \"EQFlt Cut\", maxRawVol: Config.filterSimpleCutRange - 1, newNoteVol: Config.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"EQ Filter Cutoff Frequency\", promptDesc: [\"This setting controls the filter cut position of your instrument, just like the filter cut slider.\", \"This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"eq filt peak\", pianoName: \"EQFlt Peak\", maxRawVol: Config.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"EQ Filter Peak Gain\", promptDesc: [\"This setting controls the filter peak position of your instrument, just like the filter peak slider.\", \"This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"note filt cut\", pianoName: \"N.Flt Cut\", maxRawVol: Config.filterSimpleCutRange - 1, newNoteVol: Config.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.noteFilter,\n            promptName: \"Note Filter Cutoff Frequency\", promptDesc: [\"This setting controls the filter cut position of your instrument, just like the filter cut slider.\", \"This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"note filt peak\", pianoName: \"N.Flt Peak\", maxRawVol: Config.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.noteFilter,\n            promptName: \"Note Filter Peak Gain\", promptDesc: [\"This setting controls the filter peak position of your instrument, just like the filter peak slider.\", \"This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"pitch shift\", pianoName: \"Pitch Shift\", maxRawVol: Config.pitchShiftRange - 1, newNoteVol: Config.pitchShiftCenter, forSong: false, convertRealFactor: -Config.pitchShiftCenter, associatedEffect: EffectType.pitchShift,\n            promptName: \"Pitch Shift\", promptDesc: [\"This setting controls the pitch offset of your instrument, just like the pitch shift slider.\", \"At $MID your instrument will have no pitch shift. This increases as you decrease toward $LO pitches (half-steps) at the low end, or increases towards +$HI pitches at the high end.\", \"[OVERWRITING] [$LO - $HI] [pitch]\"] },\n        { name: \"sustain\", pianoName: \"Sustain\", maxRawVol: Config.stringSustainRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"Picked String Sustain\", promptDesc: [\"This setting controls the sustain of your picked string instrument, just like the sustain slider.\", \"At $LO, your instrument will have minimum sustain and sound 'plucky'. This increases to a more held sound as your modulator approaches the maximum, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n        { name: \"mix volume\", pianoName: \"Mix Vol.\", maxRawVol: Config.volumeRange, newNoteVol: Math.ceil(Config.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-Config.volumeRange / 2.0), associatedEffect: EffectType.length,\n            promptName: \"Mix Volume\", promptDesc: [\"This setting affects the volume of your instrument as if its volume slider had been moved.\", \"At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments, since this setting and the default value work multiplicatively. The volume gradually increases up to $HI, or decreases down to mute at $LO.\", \"Unlike the 'note volume' setting, mix volume is very straightforward and simply affects the resultant instrument volume after all effects are applied.\", \"[MULTIPLICATIVE] [$LO - $HI]\"] },\n        { name: \"fm slider 5\", pianoName: \"FM 5\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"FM Slider 5\", promptDesc: [\"This setting affects the strength of the fifth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n        { name: \"fm slider 6\", pianoName: \"FM 6\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length,\n            promptName: \"FM Slider 6\", promptDesc: [\"This setting affects the strength of the sixth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n        { name: \"decimal offset\", pianoName: \"Decimal Offset\", maxRawVol: 99, newNoteVol: 0, forSong: false, convertRealFactor: 0, optionalModify: \"invert-0to99\", associatedEffect: EffectType.length,\n            promptName: \"Decimal Offset\", promptDesc: [\"This setting controls the decimal offset that is subtracted from the pulse width; use this for creating values like 12.5 or 6.25.\", \"[$LO - $HI] [%Duty]\"] },\n        { name: \"dynamism\",        pianoName: \"Dynamism\",               maxRawVol: Config.supersawDynamismMax,                             newNoteVol: 0,                                                            forSong: false,   convertRealFactor: 0,                                    associatedEffect: EffectType.length,\n            promptName: \"Supersaw Dynamism\",            promptDesc: [\"This setting controls the dynamism of each saw/wave in your supersaw instrument.\", \"[OVERWRITING] [$LO - $HI]\"]},\n\n        { name: \"spread\",          pianoName: \"Spread\",                 maxRawVol: Config.supersawSpreadMax,                               newNoteVol: 0,                                                            forSong: false,   convertRealFactor: 0,                                    associatedEffect: EffectType.length,\n            promptName: \"Supersaw Spread\",              promptDesc: [\"This setting controls the spread of each saw/wave in your supersaw instrument.\", \"[OVERWRITING] [$LO - $HI]\"]},\n\n        { name: \"shape\",           pianoName: \"Shape\",                  maxRawVol: Config.supersawShapeMax,                                newNoteVol: 0,                                                            forSong: false,   convertRealFactor: 0,                                    associatedEffect: EffectType.length,\n            promptName: \"Supersaw Shape\",               promptDesc: [\"This setting controls the shape of each wave in your supersaw instrument.\", \"At the lowest value, each wave will be a sawtooth. At the highest value, each wave will be fully affected by the pulse width slider.\", \"[OVERWRITING] [$LO - $HI]\"]},      \n        ]);\n}\n\nfunction centerWave(wave: Array<number>): Float32Array {\n    let sum: number = 0.0;\n    for (let i: number = 0; i < wave.length; i++) sum += wave[i];\n    const average: number = sum / wave.length;\n    for (let i: number = 0; i < wave.length; i++) wave[i] -= average;\n    performIntegral(wave);\n    // The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\n    wave.push(0);\n    return new Float32Array(wave);\n}\nfunction centerAndNormalizeWave(wave: Array<number>): Float32Array {\n    let magn: number = 0.0;\n\n    centerWave(wave);\n\n    // Going to length-1 because an extra 0 sample is added on the end as part of centerWave, which shouldn't impact magnitude calculation.\n    for (let i: number = 0; i < wave.length - 1; i++) {\n        magn += Math.abs(wave[i]);\n    }\n    const magnAvg: number = magn / (wave.length - 1);\n\n    for (let i: number = 0; i < wave.length - 1; i++) {\n        wave[i] = wave[i] / magnAvg;\n    }\n\n    return new Float32Array(wave);\n\n}\nexport function performIntegral(wave: { length: number, [index: number]: number }): Float32Array {\n    // Perform the integral on the wave. The synth function will perform the derivative to get the original wave back but with antialiasing.\n    let cumulative: number = 0.0;\n    let newWave: Float32Array = new Float32Array(wave.length);\n    for (let i: number = 0; i < wave.length; i++) {\n        newWave[i] = cumulative;\n        cumulative += wave[i];\n    }\n\n    return newWave;\n}\nexport function performIntegralOld(wave: { length: number, [index: number]: number }): void {\n\t// Old ver used in harmonics/picked string instruments, manipulates wave in place.\n\tlet cumulative: number = 0.0;\n\tfor (let i: number = 0; i < wave.length; i++) {\n\t\tconst temp = wave[i];\n\t\twave[i] = cumulative;\n\t\tcumulative += temp;\n\t}\n}\n\nexport function getPulseWidthRatio(pulseWidth: number): number {\n    // BeepBox formula for reference\n    //return Math.pow(0.5, (Config.pulseWidthRange - 1 - pulseWidth) * Config.pulseWidthStepPower) * 0.5;\n\n    return pulseWidth / (Config.pulseWidthRange * 2);\n}\n\n\n// The function arguments will be defined in FFT.ts, but I want\n// SynthConfig.ts to be at the top of the compiled JS so I won't directly\n// depend on FFT here. synth.ts will take care of importing FFT.ts.\n//function inverseRealFourierTransform(array: {length: number, [index: number]: number}, fullArrayLength: number): void;\n//function scaleElementsByFactor(array: {length: number, [index: number]: number}, factor: number): void;\nexport function getDrumWave(index: number, inverseRealFourierTransform: Function | null, scaleElementsByFactor: Function | null): Float32Array {\n    let wave: Float32Array | null = Config.chipNoises[index].samples;\n    if (wave == null) {\n        wave = new Float32Array(Config.chipNoiseLength + 1);\n        Config.chipNoises[index].samples = wave;\n\n\t\tif (index == 0) {\n\t\t\t// The \"retro\" drum uses a \"Linear Feedback Shift Register\" similar to the NES noise channel.\n\t\t\tlet drumBuffer: number = 1;\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\n\t\t\t\t\tnewBuffer += 1 << 14;\n\t\t\t\t}\n\t\t\t\tdrumBuffer = newBuffer;\n\t\t\t}\n\t\t} else if (index == 1) {\n\t\t\t// White noise is just random values for each sample.\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\n\t\t\t\twave[i] = Math.random() * 2.0 - 1.0;\n\t\t\t}\n\t\t} else if (index == 2) {\n\t\t\t// The \"clang\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\n\t\t\tlet drumBuffer: number = 1;\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\n\t\t\t\t\tnewBuffer += 2 << 14;\n\t\t\t\t}\n\t\t\t\tdrumBuffer = newBuffer;\n\t\t\t}\n\t\t} else if (index == 3) {\n\t\t\t// The \"buzz\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\n\t\t\tlet drumBuffer: number = 1;\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\n\t\t\t\t\tnewBuffer += 10 << 2;\n\t\t\t\t}\n\t\t\t\tdrumBuffer = newBuffer;\n\t\t\t}\n\t\t} else if (index == 4) {\n\t\t\t// \"hollow\" drums, designed in frequency space and then converted via FFT:\n\t\t\tdrawNoiseSpectrum(wave, Config.chipNoiseLength, 10, 11, 1, 1, 0);\n\t\t\tdrawNoiseSpectrum(wave, Config.chipNoiseLength, 11, 14, .6578, .6578, 0);\n\t\t\tinverseRealFourierTransform!(wave, Config.chipNoiseLength);\n\t\t\tscaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\n\t\t} else if (index == 5) {\n\t\t\t// \"Shine\" drums from modbox!\n\t\t\tvar drumBuffer = 1;\n\t\t\tfor (var i = 0; i < Config.chipNoiseLength; i++) {\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\n\t\t\t\t\tnewBuffer += 10 << 2;\n\t\t\t\t}\n\t\t\t\tdrumBuffer = newBuffer;\n\t\t\t}\n\t\t} else if (index == 6) {\n\t\t\t// \"Deep\" drums from modbox!\n\t\t\tdrawNoiseSpectrum(wave, Config.chipNoiseLength, 1, 10, 1, 1, 0);\n\t\t\tdrawNoiseSpectrum(wave, Config.chipNoiseLength, 20, 14, -2, -2, 0);\n\t\t\tinverseRealFourierTransform!(wave, Config.chipNoiseLength);\n\t\t\tscaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\n\t\t} else if (index == 7) {\n\t\t\t// \"Cutter\" drums from modbox!\n\t\t\tvar drumBuffer = 1;\n\t\t\tfor (var i = 0; i < Config.chipNoiseLength; i++) {\n\t\t\t\twave[i] = (drumBuffer & 1) * 4.0 * (Math.random() * 14 + 1);\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\n\t\t\t\t\tnewBuffer += 15 << 2;\n\t\t\t\t}\n\t\t\t\tdrumBuffer = newBuffer;\n\t\t\t}\n\t\t} else if (index == 8) {\n\t\t\t// \"Metallic\" drums from modbox!\n\t\t\tvar drumBuffer = 1;\n\t\t\tfor (var i = 0; i < 32768; i++) {\n\t\t\t\twave[i] = (drumBuffer & 1) / 2.0 + 0.5;\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\n\t\t\t\t\tnewBuffer -= 10 << 2;\n\t\t\t\t}\n\t\t\t\tdrumBuffer = newBuffer;\n            }\n        } else if (index == 9) {\n            // a noise more like old static than white noise\n            let drumBuffer: number = 1;\n            for (let i: number = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.1;\n                let newBuffer: number = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 8 ^ 2 << 16;\n                }\n                drumBuffer = newBuffer;\n            }\n\t\t}\n\t\t\t\t\telse if (index == 10) {\n                for (let i = 0; i < Config.chipNoiseLength; i++) {\n                    wave[i] = Math.round(Math.random());\n                }\n            }\n\t\t\t else if (index == 11) {\n                var drumBuffer = 1;\n                for (var i = 0; i < 32768; i++) {\n                    wave[i] = Math.round((drumBuffer & 1));\n                    var newBuffer = drumBuffer >> 1;\n                    if (((drumBuffer + newBuffer) & 1) == 1) {\n                        newBuffer -= 10 << 2;\n                    }\n                    drumBuffer = newBuffer;\n                }\n            }\n\t\t\telse if (index == 12) {\n                for (let i = 0; i < Config.chipNoiseLength; i++) {\n                   var ultraboxnewchipnoiserand = Math.random();\n\t\t\t\t   wave[i] = Math.pow(ultraboxnewchipnoiserand, Math.clz32(ultraboxnewchipnoiserand));\n                }\n            }\n\t\t\telse if (index == 13) {\n\t\t\t\tvar b0 = 0, b1 = 0, b2 = 0, b3, b4, b5, b6;\n\t\t\t\tb0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\t\t\t\t\n\t\t\t\tfor (let i = 0; i < Config.chipNoiseLength; i++) {\n\t\t\t\t\tvar white = Math.random() * 2 - 1;\n\t\t\t\t\tb0 = 0.99886 * b0 + white * 0.0555179;\n\t\t\t\t\tb1 = 0.99332 * b1 + white * 0.0750759;\n\t\t\t\t\tb2 = 0.96900 * b2 + white * 0.1538520;\n\t\t\t\t\tb3 = 0.86650 * b3 + white * 0.3104856;\n\t\t\t\t\tb4 = 0.55000 * b4 + white * 0.5329522;\n\t\t\t\t\tb5 = -0.7616 * b5 - white * 0.0168980;\n\t\t\t\t\twave[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n\t\t\t\t\twave[i] *= 0.44;\n\t\t\t\t\tb6 = white * 0.115926;\n\t\t\t\t\t// from https://github.com/zacharydenton/noise.js, MIT license soooo\n                }\n            }\n\t\t\telse if (index == 14) {\n\t\t\t\tvar lastOut = 0.0;\n\t\t\t\t\n                for (let i = 0; i < Config.chipNoiseLength; i++) {\n\t\t\t\t\tvar white = Math.random() * 2 - 1;\n\t\t\t\t\twave[i] = (lastOut + (0.02 * white)) / 1.02;\n\t\t\t\t\tlastOut = wave[i];\n\t\t\t\t\twave[i] *= 14;\n\t\t\t\t\t// this is also from noise.js\n                }\n            }\n\t\t//\telse if (index == 15) {\n\t\t//\t\tconst doomRandArray = [0, 8, 109, 220, 222, 241, 149, 107, 75, 248, 254, 140, 16, 66 , 74, 21, 211, 47, 80, 242, 154, 27, 205, 128, 161, 89, 77, 36 , 95, 110, 85, 48, 212, 140, 211, 249, 22, 79, 200, 50, 28, 188 , 52, 140, 202, 120, 68, 145, 62, 70, 184, 190, 91, 197, 152, 224 , 149, 104, 25, 178, 252, 182, 202, 182, 141, 197, 4, 81, 181, 242 , 145, 42, 39, 227, 156, 198, 225, 193, 219, 93, 122, 175, 249, 0 , 175, 143, 70, 239, 46, 246, 163, 53, 163, 109, 168, 135, 2, 235 , 25, 92, 20, 145, 138, 77, 69, 166, 78, 176, 173, 212, 166, 113 , 94, 161, 41, 50, 239, 49, 111, 164, 70, 60, 2, 37, 171, 75 , 136, 156, 11, 56, 42, 146, 138, 229, 73, 146, 77, 61, 98, 196 , 135, 106, 63, 197, 195, 86, 96, 203, 113, 101, 170, 247, 181, 113 , 80, 250, 108, 7, 255, 237, 129, 226, 79, 107, 112, 166, 103, 241 , 24, 223, 239, 120, 198, 58, 60, 82, 128, 3, 184, 66, 143, 224 , 145, 224, 81, 206, 163, 45, 63, 90, 168, 114, 59, 33, 159, 95 , 28, 139, 123, 98, 125, 196, 15, 70, 194, 253, 54, 14, 109, 226 , 71, 17, 161, 93, 186, 87, 244, 138, 20, 52, 123, 251, 26, 36 , 17, 46, 52, 231, 232, 76, 31, 221, 84, 37, 216, 165, 212, 106 , 197, 242, 98, 43, 39, 175, 254, 145, 190, 84, 118, 222, 187, 136 , 120, 163, 236, 249];\n\t\t//\t\tconst randomSeed = Math.floor(Math.random() * 256);\n\t\t//\t\tvar amountOfLoops = 0;\n\t\t//\t\tvar newWaveValue = 0;\n       //         for (let i = 0; i < Config.chipNoiseLength; i++) {\n\t\t//\t\t\tif (i / 256 > amountOfLoops) {amountOfLoops++;}\n\t\t//\t\t\tnewWaveValue = doomRandArray.at(i - amountOfLoops * 256 + randomSeed);\n\t\t//\t\t\tif (newWaveValue > 256) {newWaveValue += - 256;}\n\t\t//\t\t\twave[i] = newWaveValue * 0.0025;\n\t\t\t\t\t//this sucks\n\t\t\t\t\t//also the randomized starting point code I spent 5 minutes on does nothing (auditorily)\n        //        }\n            //}\n\t\t\n\t\telse {\n\t\t\tthrow new Error(\"Unrecognized drum index: \" + index);\n\t\t}\n\n        wave[Config.chipNoiseLength] = wave[0];\n    }\n\n    return wave;\n}\n\nexport function drawNoiseSpectrum(wave: Float32Array, waveLength: number, lowOctave: number, highOctave: number, lowPower: number, highPower: number, overallSlope: number): number {\n    const referenceOctave: number = 11;\n    const referenceIndex: number = 1 << referenceOctave;\n    const lowIndex: number = Math.pow(2, lowOctave) | 0;\n    const highIndex: number = Math.min(waveLength >> 1, Math.pow(2, highOctave) | 0);\n    const retroWave: Float32Array = getDrumWave(0, null, null);\n    let combinedAmplitude: number = 0.0;\n    for (let i: number = lowIndex; i < highIndex; i++) {\n\n        let lerped: number = lowPower + (highPower - lowPower) * (Math.log2(i) - lowOctave) / (highOctave - lowOctave);\n        let amplitude: number = Math.pow(2, (lerped - 1) * 7 + 1) * lerped;\n\n        amplitude *= Math.pow(i / referenceIndex, overallSlope);\n\n        combinedAmplitude += amplitude;\n\n        // Add two different sources of psuedo-randomness to the noise\n        // (individually they aren't random enough) but in a deterministic\n        // way so that live spectrum editing doesn't result in audible pops.\n        // Multiply all the sine wave amplitudes by 1 or -1 based on the\n        // LFSR retro wave (effectively random), and also rotate the phase\n        // of each sine wave based on the golden angle to disrupt the symmetry.\n        amplitude *= retroWave[i];\n        const radians: number = 0.61803398875 * i * i * Math.PI * 2.0;\n\n        wave[i] = Math.cos(radians) * amplitude;\n        wave[waveLength - i] = Math.sin(radians) * amplitude;\n    }\n\n    return combinedAmplitude;\n}\n\nfunction generateSineWave(): Float32Array {\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\n        wave[i] = Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength);\n    }\n    return wave;\n}\n\nfunction generateTriWave(): Float32Array {\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\n        wave[i] = Math.asin(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength)) / (Math.PI / 2);\n    }\n    return wave;\n}\n\nfunction generateTrapezoidWave(drive: number = 2): Float32Array {\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\n        wave[i] = Math.max(-1.0, Math.min(1.0, Math.asin(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength)) * drive));\n    }\n    return wave;\n}\n\nfunction generateSquareWave(phaseWidth: number = 0): Float32Array {\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n    const centerPoint: number = Config.sineWaveLength / 4;\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\n        wave[i] = +((Math.abs(i - centerPoint) < phaseWidth * Config.sineWaveLength / 2)\n            || ((Math.abs(i - Config.sineWaveLength - centerPoint) < phaseWidth * Config.sineWaveLength / 2))) * 2 - 1;\n    }\n    return wave;\n}\n\nfunction generateSawWave(inverse: boolean = false): Float32Array {\n    const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n    for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\n        wave[i] = ((i + (Config.sineWaveLength / 4.0)) * 2.0 / Config.sineWaveLength) % 2 - 1;\n        wave[i] = inverse ? -wave[i] : wave[i];\n    }\n    return wave;\n}\n\n\t// function generateWhiteNoiseFmWave() {\n        // const wave = new Float32Array(Config.sineWaveLength + 1);\n        // for (let i = 0; i < Config.sineWaveLength + 1; i++) {\n            // wave[i] = Math.random() * 2.0 - 1.0;\n        // }\n        // return wave;\n    // }\n\t// function generateOneBitWhiteNoiseFmWave() {\n        // const wave = new Float32Array(Config.sineWaveLength + 1);\n        // for (let i = 0; i < Config.sineWaveLength + 1; i++) {\n            // wave[i] = Math.round(Math.random());\n        // }\n        // return wave;\n    // }\n\tfunction generateRoundedSineWave() {\n        const wave = new Float32Array(Config.sineWaveLength + 1);\n        for (let i = 0; i < Config.sineWaveLength + 1; i++) {\n            wave[i] = Math.round(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength));\n        }\n        return wave;\n\t}\n\nexport function getArpeggioPitchIndex(pitchCount: number, useFastTwoNoteArp: boolean, arpeggio: number): number {\n    let arpeggioPattern: ReadonlyArray<number> = Config.arpeggioPatterns[pitchCount - 1];\n    if (arpeggioPattern != null) {\n        if (pitchCount == 2 && useFastTwoNoteArp == false) {\n            arpeggioPattern = [0, 0, 1, 1];\n        }\n        return arpeggioPattern[arpeggio % arpeggioPattern.length];\n    } else {\n        return arpeggio % pitchCount;\n    }\n}\n\n// Pardon the messy type casting. This allows accessing array members by numerical index or string name.\nexport function toNameMap<T extends BeepBoxOption>(array: Array<Pick<T, Exclude<keyof T, \"index\">>>): DictionaryArray<T> {\n    const dictionary: Dictionary<T> = {};\n    for (let i: number = 0; i < array.length; i++) {\n        const value: any = array[i];\n        value.index = i;\n        dictionary[value.name] = <T>value;\n    }\n    const result: DictionaryArray<T> = <DictionaryArray<T>><any>array;\n    result.dictionary = dictionary;\n    return result;\n}\n\nexport function effectsIncludeTransition(effects: number): boolean {\n    return (effects & (1 << EffectType.transition)) != 0;\n}\nexport function effectsIncludeChord(effects: number): boolean {\n    return (effects & (1 << EffectType.chord)) != 0;\n}\nexport function effectsIncludePitchShift(effects: number): boolean {\n    return (effects & (1 << EffectType.pitchShift)) != 0;\n}\nexport function effectsIncludeDetune(effects: number): boolean {\n    return (effects & (1 << EffectType.detune)) != 0;\n}\nexport function effectsIncludeVibrato(effects: number): boolean {\n    return (effects & (1 << EffectType.vibrato)) != 0;\n}\nexport function effectsIncludeNoteFilter(effects: number): boolean {\n    return (effects & (1 << EffectType.noteFilter)) != 0;\n}\nexport function effectsIncludeDistortion(effects: number): boolean {\n    return (effects & (1 << EffectType.distortion)) != 0;\n}\nexport function effectsIncludeBitcrusher(effects: number): boolean {\n    return (effects & (1 << EffectType.bitcrusher)) != 0;\n}\nexport function effectsIncludePanning(effects: number): boolean {\n    return (effects & (1 << EffectType.panning)) != 0;\n}\nexport function effectsIncludeChorus(effects: number): boolean {\n    return (effects & (1 << EffectType.chorus)) != 0;\n}\nexport function effectsIncludeEcho(effects: number): boolean {\n    return (effects & (1 << EffectType.echo)) != 0;\n}\nexport function effectsIncludeReverb(effects: number): boolean {\n    return (effects & (1 << EffectType.reverb)) != 0;\n}\nexport function rawChipToIntegrated(raw: DictionaryArray<ChipWave>): DictionaryArray<ChipWave> {\n    const newArray: Array<ChipWave> = new Array<ChipWave>(raw.length);\n    const dictionary: Dictionary<ChipWave> = {};\n    for (let i: number = 0; i < newArray.length; i++) {\n        newArray[i] = Object.assign([], raw[i]);\n        const value: any = newArray[i];\n        value.index = i;\n        dictionary[value.name] = <ChipWave>value;\n    }\n    for (let key in dictionary) {\n        dictionary[key].samples = performIntegral(dictionary[key].samples);\n    }\n    const result: DictionaryArray<ChipWave> = <DictionaryArray<ChipWave>><any>newArray;\n    result.dictionary = dictionary;\n    return result;\n}\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\n\nexport function applyElementArgs<T extends HTMLElement | SVGElement | DocumentFragment>(element: T, args: Array<any>): T {\n\tfor (const arg of args) {\n\t\tif (arg instanceof Node) {\n\t\t\telement.appendChild(arg);\n\t\t} else if (typeof arg === \"string\") {\n\t\t\telement.appendChild(document.createTextNode(arg));\n\t\t} else if (typeof arg === \"function\") {\n\t\t\tapplyElementArgs(element, [arg()]);\n\t\t} else if (Array.isArray(arg)) {\n\t\t\tapplyElementArgs(element, arg);\n\t\t} else if (arg && typeof Symbol !== \"undefined\" && typeof arg[Symbol.iterator] === \"function\") {\n\t\t\tapplyElementArgs(element, [...arg]);\n\t\t} else if (arg && arg.constructor === Object && element instanceof Element) {\n\t\t\t// If the argument is a literal {} Object\n\t\t\tfor (const key of Object.keys(arg)) {\n\t\t\t\tconst value = arg[key];\n\t\t\t\t/*if (key === \"classList\") {\n\t\t\t\t\tif (typeof value === \"string\") {\n\t\t\t\t\t\telement.classList.add(...value.split(\" \"));\n\t\t\t\t\t} else if (Array.isArray(arg) || (value && typeof Symbol !== \"undefined\" && typeof value[Symbol.iterator] === \"function\")) {\n\t\t\t\t\t\telement.classList.add(...value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"Invalid classList value \\\"\" + value + \"\\\" on \" + element.tagName + \" element.\");\n\t\t\t\t\t}\n\t\t\t\t} else*/ if (key === \"class\" /* || key === \"className\" */) {\n\t\t\t\t\tif (typeof value === \"string\") {\n\t\t\t\t\t\telement.setAttribute(\"class\", value);\n\t\t\t\t\t} else if (Array.isArray(arg) || (value && typeof Symbol !== \"undefined\" && typeof value[Symbol.iterator] === \"function\")) {\n\t\t\t\t\t\telement.setAttribute(\"class\", [...value].join(\" \"));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"Invalid \" + key + \" value \\\"\" + value + \"\\\" on \" + element.tagName + \" element.\");\n\t\t\t\t\t}\n\t\t\t\t} else if (key === \"style\") {\n\t\t\t\t\tif (value && value.constructor === Object) {\n\t\t\t\t\t\tfor (const styleKey of Object.keys(value)) {\n\t\t\t\t\t\t\tif (styleKey in (<HTMLElement | SVGElement>element).style) {\n\t\t\t\t\t\t\t\t// In practice, camelCase and kebab-case properties both work as properties on CSSStyleDeclaration objects.\n\t\t\t\t\t\t\t\t(<any> element).style[styleKey] = value[styleKey];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// CSS variables start with -- and must be set with setProperty.\n\t\t\t\t\t\t\t\t(<HTMLElement | SVGElement>element).style.setProperty(styleKey, value[styleKey]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\telement.setAttribute(key, value);\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof(value) === \"function\") {\n\t\t\t\t\t// If value is a callback, set as a property instead trying to coerce to string.\n\t\t\t\t\t(<any>element)[key] = value;\n\t\t\t\t} else if (typeof(value) === \"boolean\") {\n\t\t\t\t\t// If value is boolean, set attribute if true, remove if false.\n\t\t\t\t\tif (value) element.setAttribute(key, \"\");\n\t\t\t\t\telse element.removeAttribute(key);\n\t\t\t\t} else {\n\t\t\t\t\t// Default to setting attribute, as if writing html directly.\n\t\t\t\t\telement.setAttribute(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// Just convert unrecognized objects to text and append them.\n\t\t\telement.appendChild(document.createTextNode(arg));\n\t\t}\n\t}\n\treturn element;\n}\n\nexport const svgNS: string = \"http://www.w3.org/2000/svg\";\n\nexport function parseHTML(...args: Array<any>): DocumentFragment {\n\treturn document.createRange().createContextualFragment(args.join());\n}\n\n//let svgParser: SVGSVGElement | null = null;\nexport function parseSVG(...args: Array<any>): DocumentFragment {\n\tconst fragment: DocumentFragment = document.createDocumentFragment();\n\t\n\t// Internet Explorer doesn't support the first method here, so I commented it out and used a slightly more complex one involving DOMParser below.\n\t/*\n\tif (svgParser === null) svgParser = <SVGSVGElement>document.createElementNS(svgNS, \"svg\");\n\tsvgParser.innerHTML = args.join();\n\twhile (svgParser.firstChild !== null) fragment.appendChild(svgParser.firstChild);\n\t*/\n\tconst svgParser: Element = new DOMParser().parseFromString(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\">\" + args.join() + \"</svg>\", \"image/svg+xml\").documentElement;\n\twhile (svgParser.firstChild !== null) {\n\t\tdocument.importNode(svgParser.firstChild, true);\n\t\tfragment.appendChild(svgParser.firstChild);\n\t}\n\t\n\treturn fragment;\n}\n\nexport function replaceScriptWith(...args: Array<any>): void {\n\tlet currentScript: HTMLScriptElement | SVGScriptElement | null = document.currentScript;\n\tif (currentScript == null) { // double-equals to intentionally include undefined in Internet Explorer.\n\t\t\n\t\t// Internet Explorer doens't support currentScript, try this method instead:\n\t\tif (document.readyState === \"loading\") {\n\t\t\tconst scripts: HTMLCollectionOf<HTMLScriptElement> = document.getElementsByTagName(\"script\");\n\t\t\tcurrentScript = scripts[scripts.length - 1];\n\t\t}\n\t\t\n\t\tif (currentScript == null) {\n\t\t\tconsole.warn(\"Couldn't replace script because no script is currently being parsed and executed, maybe this is happening in a callback function or event handler instead?\");\n\t\t\treturn;\n\t\t}\n\t}\n\tif (currentScript.parentNode === null) {\n\t\tconsole.warn(\"Couldn't replace script element because it is not attached to a parent anymore, did you try to replace the same script more than once?\");\n\t\treturn;\n\t}\n\tcurrentScript.parentNode.replaceChild(applyElementArgs(document.createDocumentFragment(), args), currentScript);\n}\n\nexport function applyToElement<T extends HTMLElement | SVGElement | DocumentFragment>(element: T, ...args: Array<any>): T {\n\tif (!(element instanceof Element || element instanceof DocumentFragment)) {\n\t\tconsole.warn(\"Couldn't apply to provided argument because it's not an element or DocumentFragment.\");\n\t\treturn element;\n\t}\n\treturn applyElementArgs(element, args);\n}\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\n\nimport {applyElementArgs, svgNS, parseHTML, parseSVG, replaceScriptWith, applyToElement} from \"./elements-base\";\nexport {replaceScriptWith, applyToElement};\n\ninterface HTMLElementFactory {\n\t(...args: Array<string>): DocumentFragment;\n\t//readonly [key: string]: (...args: Array<any>) => HTMLElement;\n\ta(...args: Array<any>): HTMLAnchorElement;\n\tabbr(...args: Array<any>): HTMLElement;\n\taddress(...args: Array<any>): HTMLElement;\n\tarea(...args: Array<any>): HTMLAreaElement;\n\tarticle(...args: Array<any>): HTMLElement;\n\taside(...args: Array<any>): HTMLElement;\n\taudio(...args: Array<any>): HTMLAudioElement;\n\tb(...args: Array<any>): HTMLElement;\n\tbase(...args: Array<any>): HTMLBaseElement;\n\tbdi(...args: Array<any>): HTMLElement;\n\tbdo(...args: Array<any>): HTMLElement;\n\tblockquote(...args: Array<any>): HTMLQuoteElement;\n\tbr(...args: Array<any>): HTMLBRElement;\n\tbutton(...args: Array<any>): HTMLButtonElement;\n\tcanvas(...args: Array<any>): HTMLCanvasElement;\n\tcaption(...args: Array<any>): HTMLTableCaptionElement;\n\tcite(...args: Array<any>): HTMLElement;\n\tcode(...args: Array<any>): HTMLElement;\n\tcol(...args: Array<any>): HTMLTableColElement;\n\tcolgroup(...args: Array<any>): HTMLTableColElement;\n\tdatalist(...args: Array<any>): HTMLDataListElement;\n\tdd(...args: Array<any>): HTMLElement;\n\tdel(...args: Array<any>): HTMLModElement;\n\tdetails(...args: Array<any>): HTMLDetailsElement;\n\tdfn(...args: Array<any>): HTMLElement;\n\tdialog(...args: Array<any>): HTMLDialogElement;\n\tdiv(...args: Array<any>): HTMLDivElement;\n\tdl(...args: Array<any>): HTMLDListElement;\n\tdt(...args: Array<any>): HTMLElement;\n\tem(...args: Array<any>): HTMLElement;\n\tembed(...args: Array<any>): HTMLEmbedElement;\n\tfieldset(...args: Array<any>): HTMLFieldSetElement;\n\tfigcaption(...args: Array<any>): HTMLElement;\n\tfigure(...args: Array<any>): HTMLElement;\n\tfooter(...args: Array<any>): HTMLElement;\n\tform(...args: Array<any>): HTMLFormElement;\n\th1(...args: Array<any>): HTMLHeadingElement;\n\th2(...args: Array<any>): HTMLHeadingElement;\n\th3(...args: Array<any>): HTMLHeadingElement;\n\th4(...args: Array<any>): HTMLHeadingElement;\n\th5(...args: Array<any>): HTMLHeadingElement;\n\th6(...args: Array<any>): HTMLHeadingElement;\n\theader(...args: Array<any>): HTMLElement;\n\thr(...args: Array<any>): HTMLHRElement;\n\ti(...args: Array<any>): HTMLElement;\n\tiframe(...args: Array<any>): HTMLIFrameElement;\n\timg(...args: Array<any>): HTMLImageElement;\n\tinput(...args: Array<any>): HTMLInputElement;\n\tins(...args: Array<any>): HTMLModElement;\n\tkbd(...args: Array<any>): HTMLElement;\n\tlabel(...args: Array<any>): HTMLLabelElement;\n\tlegend(...args: Array<any>): HTMLLegendElement;\n\tli(...args: Array<any>): HTMLLIElement;\n\tlink(...args: Array<any>): HTMLLinkElement;\n\tmain(...args: Array<any>): HTMLElement;\n\tmap(...args: Array<any>): HTMLMapElement;\n\tmark(...args: Array<any>): HTMLElement;\n\tmenu(...args: Array<any>): HTMLMenuElement;\n\tmenuitem(...args: Array<any>): HTMLUnknownElement;\n\tmeta(...args: Array<any>): HTMLMetaElement;\n\tmeter(...args: Array<any>): HTMLMeterElement;\n\tnav(...args: Array<any>): HTMLElement;\n\tnoscript(...args: Array<any>): HTMLElement;\n\tobject(...args: Array<any>): HTMLObjectElement;\n\tol(...args: Array<any>): HTMLOListElement;\n\toptgroup(...args: Array<any>): HTMLOptGroupElement;\n\toption(...args: Array<any>): HTMLOptionElement;\n\toutput(...args: Array<any>): HTMLOutputElement;\n\tp(...args: Array<any>): HTMLParagraphElement;\n\tparam(...args: Array<any>): HTMLParamElement;\n\tpicture(...args: Array<any>): HTMLPictureElement;\n\tpre(...args: Array<any>): HTMLPreElement;\n\tprogress(...args: Array<any>): HTMLProgressElement;\n\tq(...args: Array<any>): HTMLQuoteElement;\n\trp(...args: Array<any>): HTMLElement;\n\trt(...args: Array<any>): HTMLElement;\n\truby(...args: Array<any>): HTMLElement;\n\ts(...args: Array<any>): HTMLElement;\n\tsamp(...args: Array<any>): HTMLElement;\n\tscript(...args: Array<any>): HTMLScriptElement;\n\tsection(...args: Array<any>): HTMLElement;\n\tselect(...args: Array<any>): HTMLSelectElement;\n\tsmall(...args: Array<any>): HTMLElement;\n\tsource(...args: Array<any>): HTMLSourceElement;\n\tspan(...args: Array<any>): HTMLSpanElement;\n\tstrong(...args: Array<any>): HTMLElement;\n\tstyle(...args: Array<any>): HTMLStyleElement;\n\tsub(...args: Array<any>): HTMLElement;\n\tsummary(...args: Array<any>): HTMLElement;\n\tsup(...args: Array<any>): HTMLElement;\n\ttable(...args: Array<any>): HTMLTableElement;\n\ttbody(...args: Array<any>): HTMLTableSectionElement;\n\ttd(...args: Array<any>): HTMLTableCellElement;\n\ttemplate(...args: Array<any>): HTMLTemplateElement;\n\ttextarea(...args: Array<any>): HTMLTextAreaElement;\n\ttfoot(...args: Array<any>): HTMLTableSectionElement;\n\tth(...args: Array<any>): HTMLTableCellElement;\n\tthead(...args: Array<any>): HTMLTableSectionElement;\n\ttime(...args: Array<any>): HTMLTimeElement;\n\ttitle(...args: Array<any>): HTMLTitleElement;\n\ttr(...args: Array<any>): HTMLTableRowElement;\n\ttrack(...args: Array<any>): HTMLTrackElement;\n\tu(...args: Array<any>): HTMLElement;\n\tul(...args: Array<any>): HTMLUListElement;\n\tvar(...args: Array<any>): HTMLElement;\n\tvideo(...args: Array<any>): HTMLVideoElement;\n\twbr(...args: Array<any>): HTMLElement;\n}\n\ninterface SVGElementFactory {\n\t(...args: Array<string>): DocumentFragment;\n\t//readonly [key: string]: (...args: Array<any>) => SVGElement;\n\ta(...args: Array<any>): SVGAElement;\n\taltGlyph(...args: Array<any>): SVGElement;\n\taltGlyphDef(...args: Array<any>): SVGElement;\n\taltGlyphItem(...args: Array<any>): SVGElement;\n\tanimate(...args: Array<any>): SVGAnimateElement;\n\tanimateMotion(...args: Array<any>): SVGAnimateMotionElement;\n\tanimateTransform(...args: Array<any>): SVGAnimateTransformElement;\n\tcircle(...args: Array<any>): SVGCircleElement;\n\tclipPath(...args: Array<any>): SVGClipPathElement;\n\t\"color-profile\"(...args: Array<any>): SVGElement;\n\tcolor_profile(...args: Array<any>): SVGElement;\n\tcursor(...args: Array<any>): SVGElement;\n\tdefs(...args: Array<any>): SVGDefsElement;\n\tdesc(...args: Array<any>): SVGDescElement;\n\tdiscard(...args: Array<any>): SVGElement;\n\tellipse(...args: Array<any>): SVGEllipseElement;\n\tfeBlend(...args: Array<any>): SVGFEBlendElement;\n\tfeColorMatrix(...args: Array<any>): SVGFEColorMatrixElement;\n\tfeComponentTransfer(...args: Array<any>): SVGFEComponentTransferElement;\n\tfeComposite(...args: Array<any>): SVGFECompositeElement;\n\tfeConvolveMatrix(...args: Array<any>): SVGFEConvolveMatrixElement;\n\tfeDiffuseLighting(...args: Array<any>): SVGFEDiffuseLightingElement;\n\tfeDisplacementMap(...args: Array<any>): SVGFEDisplacementMapElement;\n\tfeDistantLight(...args: Array<any>): SVGFEDistantLightElement;\n\tfeDropShadow(...args: Array<any>): SVGElement;\n\tfeFlood(...args: Array<any>): SVGFEFloodElement;\n\tfeFuncA(...args: Array<any>): SVGFEFuncAElement;\n\tfeFuncB(...args: Array<any>): SVGFEFuncBElement;\n\tfeFuncG(...args: Array<any>): SVGFEFuncGElement;\n\tfeFuncR(...args: Array<any>): SVGFEFuncRElement;\n\tfeGaussianBlur(...args: Array<any>): SVGFEGaussianBlurElement;\n\tfeImage(...args: Array<any>): SVGFEImageElement;\n\tfeMerge(...args: Array<any>): SVGFEMergeElement;\n\tfeMergeNode(...args: Array<any>): SVGFEMergeNodeElement;\n\tfeMorphology(...args: Array<any>): SVGFEMorphologyElement;\n\tfeOffset(...args: Array<any>): SVGFEOffsetElement;\n\tfePointLight(...args: Array<any>): SVGFEPointLightElement;\n\tfeSpecularLighting(...args: Array<any>): SVGFESpecularLightingElement;\n\tfeSpotLight(...args: Array<any>): SVGFESpotLightElement;\n\tfeTile(...args: Array<any>): SVGFETileElement;\n\tfeTurbulence(...args: Array<any>): SVGFETurbulenceElement;\n\tfilter(...args: Array<any>): SVGFilterElement;\n\tfont(...args: Array<any>): SVGElement;\n\t\"font-face\"(...args: Array<any>): SVGElement;\n\tfont_face(...args: Array<any>): SVGElement;\n\t\"font-face-format\"(...args: Array<any>): SVGElement;\n\tfont_face_format(...args: Array<any>): SVGElement;\n\t\"font-face-name\"(...args: Array<any>): SVGElement;\n\tfont_face_name(...args: Array<any>): SVGElement;\n\t\"font-face-src\"(...args: Array<any>): SVGElement;\n\tfont_face_src(...args: Array<any>): SVGElement;\n\t\"font-face-uri\"(...args: Array<any>): SVGElement;\n\tfont_face_uri(...args: Array<any>): SVGElement;\n\tforeignObject(...args: Array<any>): SVGForeignObjectElement;\n\tg(...args: Array<any>): SVGGElement;\n\tglyph(...args: Array<any>): SVGElement;\n\tglyphRef(...args: Array<any>): SVGElement;\n\thkern(...args: Array<any>): SVGElement;\n\timage(...args: Array<any>): SVGImageElement;\n\tline(...args: Array<any>): SVGLineElement;\n\tlinearGradient(...args: Array<any>): SVGLinearGradientElement;\n\tmarker(...args: Array<any>): SVGMarkerElement;\n\tmask(...args: Array<any>): SVGMaskElement;\n\tmetadata(...args: Array<any>): SVGMetadataElement;\n\t\"missing-glyph\"(...args: Array<any>): SVGElement;\n\tmissing_glyph(...args: Array<any>): SVGElement;\n\tmpath(...args: Array<any>): SVGElement;\n\tpath(...args: Array<any>): SVGPathElement;\n\tpattern(...args: Array<any>): SVGPatternElement;\n\tpolygon(...args: Array<any>): SVGPolygonElement;\n\tpolyline(...args: Array<any>): SVGPolylineElement;\n\tradialGradient(...args: Array<any>): SVGRadialGradientElement;\n\trect(...args: Array<any>): SVGRectElement;\n\tscript(...args: Array<any>): SVGScriptElement;\n\tset(...args: Array<any>): SVGElement;\n\tstop(...args: Array<any>): SVGStopElement;\n\tstyle(...args: Array<any>): SVGStyleElement;\n\tsvg(...args: Array<any>): SVGSVGElement;\n\tswitch(...args: Array<any>): SVGSwitchElement;\n\tsymbol(...args: Array<any>): SVGSymbolElement;\n\ttext(...args: Array<any>): SVGTextElement;\n\ttextPath(...args: Array<any>): SVGTextPathElement;\n\ttitle(...args: Array<any>): SVGTitleElement;\n\ttref(...args: Array<any>): SVGElement;\n\ttspan(...args: Array<any>): SVGTSpanElement;\n\tuse(...args: Array<any>): SVGUseElement;\n\tview(...args: Array<any>): SVGViewElement;\n\tvkern(...args: Array<any>): SVGElement;\n}\n\nexport const HTML: HTMLElementFactory = <HTMLElementFactory> <unknown> parseHTML;\nexport const SVG: SVGElementFactory = <SVGElementFactory> <unknown> parseSVG;\n\nfor (const name of \"a abbr address area article aside audio b base bdi bdo blockquote br button canvas caption cite code col colgroup datalist dd del details dfn dialog div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 header hr i iframe img input ins kbd label legend li link main map mark menu menuitem meta meter nav noscript object ol optgroup option output p param picture pre progress q rp rt ruby s samp script section select small source span strong style sub summary sup table tbody td template textarea tfoot th thead time title tr track u ul var video wbr\".split(\" \")) {\n\t(<any>HTML)[name] = (...args: Array<any>) => applyElementArgs(document.createElement(name), args);\n}\nfor (const name of \"a altGlyph altGlyphDef altGlyphItem animate animateMotion animateTransform circle clipPath color-profile cursor defs desc discard ellipse feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting feDisplacementMap feDistantLight feDropShadow feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence filter font font-face font-face-format font-face-name font-face-src font-face-uri foreignObject g glyph glyphRef hkern image line linearGradient marker mask metadata missing-glyph mpath path pattern polygon polyline radialGradient rect script set stop style svg switch symbol text textPath title tref tspan use view vkern\".split(\" \")) {\n\t(<any>SVG)[name] = (...args: Array<any>) => applyElementArgs(<SVGElement> document.createElementNS(svgNS, name), args);\n\tif (/-/.test(name)) {\n\t\tconst snakeCaseName = name.replace(/-/g, \"_\");\n\t\t(<any>SVG)[snakeCaseName] = (...args: Array<any>) => applyElementArgs(<SVGElement> document.createElementNS(svgNS, name), args);\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { BeepBoxOption, DictionaryArray, toNameMap, Config } from \"../synth/SynthConfig\";\nimport { Song } from \"../synth/synth\";\nimport { HTML } from \"imperative-html/dist/esm/elements-strict\";\n\nexport interface ChannelColors extends BeepBoxOption {\n    readonly secondaryChannel: string;\n    readonly primaryChannel: string;\n    readonly secondaryNote: string;\n    readonly primaryNote: string;\n}\n\nexport class ColorConfig {\n    public static colorLookup: Map<number, ChannelColors> = new Map<number, ChannelColors>();\n\n    public static readonly themes: { [name: string]: string } = {\n      \"AbyssBox Classic\": `\n\t\t\t:root {\t\t\n\t\t\t--page-margin: #1e0915; \t\t\n\t\t\t--editor-background: #1e0915; \t\t\n\t\t\t--hover-preview: white; \t\t\n\t\t\t--playhead: rgba(255, 255, 255, 0.9); \t\t\n\t\t\t--primary-text: white; \t\t\n\t\t\t--secondary-text: #ffcedd; \t\t\n\t\t\t--inverted-text: black;\t \t\t\n\t\t\t--text-selection: rgba(119,68,255,0.99); \t\t\n\t\t\t--box-selection-fill: #1e0915; \t\t\n\t\t\t--loop-accent: #873a51; \t\t\n\t\t\t--link-accent: #df88ff; \t\t\n\t\t\t--ui-widget-background: #581b3e; \t\t\n\t\t\t--ui-widget-focus: #762b4c; \t\t\n\t\t\t--pitch-background: #381d24; \t\t\n\t\t\t--tonic: #873a51; \t\t\n\t\t\t--fifth-note: #75001e; \t\t\n\t\t\t--white-piano-key: #cca5c7; \t\t\n\t\t\t--black-piano-key: #402f2f; \t\t\n\t\t\t--use-color-formula: true; \t\t\n\t\t\t--track-editor-bg-pitch: #571c40; \t\t\n\t\t\t--track-editor-bg-pitch-dim: #290d0d; \t\t\n\t\t\t--track-editor-bg-noise: #571131; \t\t\n\t\t\t--track-editor-bg-noise-dim: #330a28; \t\t\n\t\t\t--track-editor-bg-mod: #54083c; \t\t\n\t\t\t--track-editor-bg-mod-dim: #360426; \t\t\n\t\t\t--multiplicative-mod-slider: #9f6082; \t\t\n\t\t\t--overwriting-mod-slider: #9e3470; \t\t\n\t\t\t--indicator-primary: #b3498f; \t\t\n\t\t\t--indicator-secondary: #541d40; \t\t\n\t\t\t--select2-opt-group: #4f191e; \t\t\n\t\t\t--input-box-outline: #18041a; \t\t\n\t\t\t--mute-button-normal: #dd5d94;\t \t\t\n\t\t\t--mute-button-mod: #ba364c; \t\t\n\t\t\t--mod-label-primary: #541625; \t\t\n\t\t\t--mod-label-secondary-text: rgb(120, 87, 86); \n\t\t\t--mod-label-primary-text: gray; \n\t\t\n\t\t\t--pitch-secondary-channel-hue: -80; \t\t\n\t\t\t--pitch-secondary-channel-hue-scale 0; \t\t\n\t\t\t--pitch-secondary-channel-sat: 43; \t\t\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1; \t\t\n\t\t\t--pitch-secondary-channel-lum: 40; \t\t\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05; \n\t\t\n\t\t\t--pitch-primary-channel-hue: -53; \t\t\n\t\t\t--pitch-primary-channel-hue-scale: 6.1; \t\t\n\t\t\t--pitch-primary-channel-sat: 75; \t\t\n\t\t\t--pitch-primary-channel-sat-scale: 0.1; \t\t\n\t\t\t--pitch-primary-channel-lum: 67.5; \t\t\n\t\t\t--pitch-primary-channel-lum-scale: 0.05; \t\n\t\n\t\t\t--pitch-secondary-note-hue: -34; \t\t\n\t\t\t--pitch-secondary-note-hue-scale: 6.1; \t\t\n\t\t\t--pitch-secondary-note-sat: 93.9; \t\t\n\t\t\t--pitch-secondary-note-sat-scale: 0.1; \t\t\n\t\t\t--pitch-secondary-note-lum: 25; \t\t\n\t\t\t--pitch-secondary-note-lum-scale: 0.05; \n\t\t\n\t\t\t--pitch-primary-note-hue: -53; \t\t\n\t\t\t--pitch-primary-note-hue-scale: 6.1; \t\t\n\t\t\t--pitch-primary-note-sat: 100; \t\t\n\t\t\t--pitch-primary-note-sat-scale: 0.05; \t\t\n\t\t\t--pitch-primary-note-lum: 85.6; \t\t\n\t\t\t--pitch-primary-note-lum-scale: 0.025; \n\t\t\n\t\t\t--noise-secondary-channel-hue: 0; \t\t\n\t\t\t--noise-secondary-channel-hue-scale: 2; \t\t\n\t\t\t--noise-secondary-channel-sat: 65; \t\t\n\t\t\t--noise-secondary-channel-sat-scale: 0; \t\t\n\t\t\t--noise-secondary-channel-lum: 42; \t\t\n\t\t\t--noise-secondary-channel-lum-scale: 0; \n\t\t\n\t\t\t--noise-primary-channel-hue: 0; \t\t\n\t\t\t--noise-primary-channel-hue-scale: 1; \t\t\n\t\t\t--noise-primary-channel-sat: 100; \t\t\n\t\t\t--noise-primary-channel-sat-scale: 1; \t\t\n\t\t\t--noise-primary-channel-lum: 63.5; \t\t\n\t\t\t--noise-primary-channel-lum-scale: 0; \n\t\t\n\t\t\t--noise-secondary-note-hue: 24; \t\t\n\t\t\t--noise-secondary-note-hue-scale: 2; \t\t\n\t\t\t--noise-secondary-note-sat: 100; \t\t\n\t\t\t--noise-secondary-note-sat-scale: 0; \t\t\n\t\t\t--noise-secondary-note-lum: 35; \t\t\n\t\t\t--noise-secondary-note-lum-scale: 0; \t\n\t\n\t\t\t--noise-primary-note-hue: 24; \t\t\n\t\t\t--noise-primary-note-hue-scale: 2; \t\t\n\t\t\t--noise-primary-note-sat: 100; \t\t\n\t\t\t--noise-primary-note-sat-scale: 1; \t\t\n\t\t\t--noise-primary-note-lum: 60; \t\t\n\t\t\t--noise-primary-note-lum-scale: 1; \t\n\t\n\t\t\t--mod-secondary-channel-hue: 55; \t\t\n\t\t\t--mod-secondary-channel-hue-scale: 1.5; \t\t\n\t\t\t--mod-secondary-channel-sat: 100; \t\t\n\t\t\t--mod-secondary-channel-sat-scale: 0; \t\t\n\t\t\t--mod-secondary-channel-lum: 20; \t\t\n\t\t\t--mod-secondary-channel-lum-scale: 0; \n\t\t\n\t\t\t--mod-primary-channel-hue: 55; \t\t\n\t\t\t--mod-primary-channel-hue-scale: 1.5; \t\t\n\t\t\t--mod-primary-channel-sat: 96; \t\t\n\t\t\t--mod-primary-channel-sat-scale: 0; \t\t\n\t\t\t--mod-primary-channel-lum: 50; \t\t\n\t\t\t--mod-primary-channel-lum-scale: 0; \n\t\t\n\t\t\t--mod-secondary-note-hue: 55; \t\t\n\t\t\t--mod-secondary-note-hue-scale: 1.5; \t\t\n\t\t\t--mod-secondary-note-sat: 92; \t\t\n\t\t\t--mod-secondary-note-sat-scale: 0; \t\t\n\t\t\t--mod-secondary-note-lum: 45; \t\t\n\t\t\t--mod-secondary-note-lum-scale: 0; \n\t\t\n\t\t\t--mod-primary-note-hue: 55; \t\t\n\t\t\t--mod-primary-note-hue-scale: 1.5; \t\t\n\t\t\t--mod-primary-note-sat: 96; \t\t\n\t\t\t--mod-primary-note-sat-scale: 0; \t\t\n\t\t\t--mod-primary-note-lum: 85; \t\t\n\t\t\t--mod-primary-note-lum-scale: 0; \t\n\t\t\t\t}\n\t\t* {\n\t\tcursor: url(\"abyssbox_cursor.png\"), auto !important;\n\t\t}\n\n\t\t\t@font-face {\n\t\t   font-family: \"AbyssType\";\n\t\t   src:\n \t\t   url(\"abysstype.otf\") format(\"opentype\") tech(color-COLRv1),\n\t\t\t}\n\n\t\t\t@font-face {\n\t\t   font-family: \"AbyssType_small\";\n\t\t   src:\n \t\t   url(\"abysstype_small.otf\") format(\"opentype\") tech(color-COLRv1),\n\t\t\t}\n\n\t\t\thtml {\n \t\t   font-family: 'AbyssType';\n\t\t\t}\n\n\t\t   var(--track-font): 'AbyssType';\n\n\t\t\t`,\n  \"AbyssBox Competative\": `\n\t\t\t:root { \t\t\n\t\t\t--page-margin: #000000; \t\t\n\t\t\t--editor-background: #000000; \t\t\n\t\t\t--hover-preview: white; \t\t\n\t\t\t--playhead: rgba(255, 255, 255, 0.9); \t\t\n\t\t\t--primary-text: white; \t\t\n\t\t\t--secondary-text: #ffcedd; \t\t\n\t\t\t--inverted-text: black;\t \t\t\n\t\t\t--text-selection: rgba(119,68,255,0.99); \t\t\n\t\t\t--box-selection-fill: #bf2c5d; \t\t\n\t\t\t--loop-accent: #873a51; \t\t\n\t\t\t--link-accent: #df88ff; \t\t\n\t\t\t--ui-widget-background: #581b3e; \t\t\n\t\t\t--ui-widget-focus: #000000; \t\t\n\t\t\t--pitch-background: #240f15; \t\t\n\t\t\t--tonic: #a34b65; \t\t\n\t\t\t--fifth-note: #75001e; \t\t\n\t\t\t--white-piano-key: #cca5c7; \t\t\n\t\t\t--black-piano-key: #402f2f; \t\t\n\t\t\t--use-color-formula: true; \t\t\n\t\t\t--track-editor-bg-pitch: #571c40; \t\t\n\t\t\t--track-editor-bg-pitch-dim: #290d0d; \t\t\n\t\t\t--track-editor-bg-noise: #571131; \t\t\n\t\t\t--track-editor-bg-noise-dim: #330a28; \t\t\n\t\t\t--track-editor-bg-mod: #54083c; \t\t\n\t\t\t--track-editor-bg-mod-dim: #360426; \t\t\n\t\t\t--multiplicative-mod-slider: #9f6082; \t\t\n\t\t\t--overwriting-mod-slider: #9e3470; \t\t\n\t\t\t--indicator-primary: #b3498f; \t\t\n\t\t\t--indicator-secondary: #541d40; \t\t\n\t\t\t--select2-opt-group: #4f191e; \t\t\n\t\t\t--input-box-outline: #18041a; \t\t\n\t\t\t--mute-button-normal: #dd5d94;\t \t\t\n\t\t\t--mute-button-mod: #ba364c; \t\t\n\t\t\t--mod-label-primary: #541625; \t\t\n\t\t\t--mod-label-secondary-text: rgb(120, 87, 86); \n\t\t\t--mod-label-primary-text: gray; \n\t\t\n\t\t\t--pitch-secondary-channel-hue: -80; \t\t\n\t\t\t--pitch-secondary-channel-hue-scale 0; \t\t\n\t\t\t--pitch-secondary-channel-sat: 43; \t\t\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1; \t\t\n\t\t\t--pitch-secondary-channel-lum: 40; \t\t\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05; \n\t\t\n\t\t\t--pitch-primary-channel-hue: -53; \t\t\n\t\t\t--pitch-primary-channel-hue-scale: 6.1; \t\t\n\t\t\t--pitch-primary-channel-sat: 75; \t\t\n\t\t\t--pitch-primary-channel-sat-scale: 0.1; \t\t\n\t\t\t--pitch-primary-channel-lum: 67.5; \t\t\n\t\t\t--pitch-primary-channel-lum-scale: 0.05; \t\n\t\n\t\t\t--pitch-secondary-note-hue: -34; \t\t\n\t\t\t--pitch-secondary-note-hue-scale: 6.1; \t\t\n\t\t\t--pitch-secondary-note-sat: 93.9; \t\t\n\t\t\t--pitch-secondary-note-sat-scale: 0.1; \t\t\n\t\t\t--pitch-secondary-note-lum: 25; \t\t\n\t\t\t--pitch-secondary-note-lum-scale: 0.05; \n\t\t\n\t\t\t--pitch-primary-note-hue: -53; \t\t\n\t\t\t--pitch-primary-note-hue-scale: 6.1; \t\t\n\t\t\t--pitch-primary-note-sat: 100; \t\t\n\t\t\t--pitch-primary-note-sat-scale: 0.05; \t\t\n\t\t\t--pitch-primary-note-lum: 85.6; \t\t\n\t\t\t--pitch-primary-note-lum-scale: 0.025; \n\t\t\n\t\t\t--noise-secondary-channel-hue: 0; \t\t\n\t\t\t--noise-secondary-channel-hue-scale: 2; \t\t\n\t\t\t--noise-secondary-channel-sat: 65; \t\t\n\t\t\t--noise-secondary-channel-sat-scale: 0; \t\t\n\t\t\t--noise-secondary-channel-lum: 42; \t\t\n\t\t\t--noise-secondary-channel-lum-scale: 0; \n\t\t\n\t\t\t--noise-primary-channel-hue: 0; \t\t\n\t\t\t--noise-primary-channel-hue-scale: 1; \t\t\n\t\t\t--noise-primary-channel-sat: 100; \t\t\n\t\t\t--noise-primary-channel-sat-scale: 1; \t\t\n\t\t\t--noise-primary-channel-lum: 63.5; \t\t\n\t\t\t--noise-primary-channel-lum-scale: 0; \n\t\t\n\t\t\t--noise-secondary-note-hue: 24; \t\t\n\t\t\t--noise-secondary-note-hue-scale: 2; \t\t\n\t\t\t--noise-secondary-note-sat: 100; \t\t\n\t\t\t--noise-secondary-note-sat-scale: 0; \t\t\n\t\t\t--noise-secondary-note-lum: 35; \t\t\n\t\t\t--noise-secondary-note-lum-scale: 0; \t\n\t\n\t\t\t--noise-primary-note-hue: 24; \t\t\n\t\t\t--noise-primary-note-hue-scale: 2; \t\t\n\t\t\t--noise-primary-note-sat: 100; \t\t\n\t\t\t--noise-primary-note-sat-scale: 1; \t\t\n\t\t\t--noise-primary-note-lum: 60; \t\t\n\t\t\t--noise-primary-note-lum-scale: 1; \t\n\t\n\t\t\t--mod-secondary-channel-hue: 55; \t\t\n\t\t\t--mod-secondary-channel-hue-scale: 1.5; \t\t\n\t\t\t--mod-secondary-channel-sat: 100; \t\t\n\t\t\t--mod-secondary-channel-sat-scale: 0; \t\t\n\t\t\t--mod-secondary-channel-lum: 20; \t\t\n\t\t\t--mod-secondary-channel-lum-scale: 0; \n\t\t\n\t\t\t--mod-primary-channel-hue: 55; \t\t\n\t\t\t--mod-primary-channel-hue-scale: 1.5; \t\t\n\t\t\t--mod-primary-channel-sat: 96; \t\t\n\t\t\t--mod-primary-channel-sat-scale: 0; \t\t\n\t\t\t--mod-primary-channel-lum: 50; \t\t\n\t\t\t--mod-primary-channel-lum-scale: 0; \n\t\t\n\t\t\t--mod-secondary-note-hue: 55; \t\t\n\t\t\t--mod-secondary-note-hue-scale: 1.5; \t\t\n\t\t\t--mod-secondary-note-sat: 92; \t\t\n\t\t\t--mod-secondary-note-sat-scale: 0; \t\t\n\t\t\t--mod-secondary-note-lum: 45; \t\t\n\t\t\t--mod-secondary-note-lum-scale: 0; \n\t\t\n\t\t\t--mod-primary-note-hue: 55; \t\t\n\t\t\t--mod-primary-note-hue-scale: 1.5; \t\t\n\t\t\t--mod-primary-note-sat: 96; \t\t\n\t\t\t--mod-primary-note-sat-scale: 0; \t\t\n\t\t\t--mod-primary-note-lum: 85; \t\t\n\t\t\t--mod-primary-note-lum-scale: 0; \n\t\t\t--track-font: \"AbyssType\";\t\n\t\t\t\t}\n\t\t/* sets cursor */ \n\t\t* {\n\t\tcursor: url(\"abyssbox_cursor.png\"), auto !important;\n\t\t}\n\t\t\t@font-face {\n\t\t   font-family: \"AbyssType\";\n\t\t   src:\n \t\t   url(\"abysstype.otf\") format(\"opentype\") tech(color-COLRv1),\n\t\t\t}\n\n\t\t\t@font-face {\n\t\t   font-family: \"AbyssType_small\";\n\t\t   src:\n \t\t   url(\"abysstype_small.otf\") format(\"opentype\") tech(color-COLRv1),\n\t\t\t}\n\n\t\t\thtml {\n \t\t   font-family: 'AbyssType_small';\n\t\t\t}\n\t\t   var(--track-font): 'AbyssType';\n\n\t\t\t`,\n  \"AbyssBox Light\": `\n\t\t\t:root { \t\t\n\t\t\t--page-margin: #e0adbc; \t\t\n\t\t\t--editor-background: #e0adbc; \t\t\n\t\t\t--hover-preview: white; \t\t\n\t\t\t--playhead: rgba(255, 255, 255, 0.9); \t\t\n\t\t\t--primary-text: #c763a0; \t\t\n\t\t\t--secondary-text: #c763a0; \t\t\n\t\t\t--inverted-text:  #e8bcc9;\t \t\t\n\t\t\t--text-selection: rgba(119,68,255,0.99); \t\t\n\t\t\t--box-selection-fill: #bf2c5d; \t\t\n\t\t\t--loop-accent: #8c346a; \t\t\n\t\t\t--link-accent: #8c346a; \t\t\n\t\t\t--ui-widget-background: #f5e9f0;\t\t\n\t\t\t--ui-widget-focus: #8c346a; \t\t\n\t\t\t--pitch-background: #eddadf; \t\t\n\t\t\t--tonic: #f5f0f1; \t\t\n\t\t\t--fifth-note: #75001e; \t\t\n\t\t\t--white-piano-key: #cca5c7; \t\t\n\t\t\t--black-piano-key: #402f2f; \t\t\n\t\t\t--use-color-formula: true; \t\t\n\t\t\t--track-editor-bg-pitch: #decad8; \t\t\n\t\t\t--track-editor-bg-pitch-dim: #bfb0bb; \t\t\n\t\t\t--track-editor-bg-noise: #d6a3ca; \t\t\n\t\t\t--track-editor-bg-noise-dim: #b389a9; \t\t\n\t\t\t--track-editor-bg-mod: #b0649e; \t\t\n\t\t\t--track-editor-bg-mod-dim: #915683; \t\t\n\t\t\t--multiplicative-mod-slider: #9f6082; \t\t\n\t\t\t--overwriting-mod-slider: #9e3470; \t\t\n\t\t\t--indicator-primary: #b3498f; \t\t\n\t\t\t--indicator-secondary: #541d40; \t\t\n\t\t\t--select2-opt-group: #4f191e; \t\t\n\t\t\t--input-box-outline: #18041a; \t\t\n\t\t\t--mute-button-normal: #dd5d94;\t \t\t\n\t\t\t--mute-button-mod: #ba364c; \t\t\n\t\t\t--mod-label-primary: #541625; \t\t\n\t\t\t--mod-label-secondary-text: rgb(120, 87, 86); \n\t\t\t--mod-label-primary-text: gray; \n\t\t\n\t\t\t--pitch-secondary-channel-hue: -80; \t\t\n\t\t\t--pitch-secondary-channel-hue-scale 0; \t\t\n\t\t\t--pitch-secondary-channel-sat: 43; \t\t\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1; \t\t\n\t\t\t--pitch-secondary-channel-lum: 20; \t\t\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05; \n\t\t\n\t\t\t--pitch-primary-channel-hue: -53; \t\t\n\t\t\t--pitch-primary-channel-hue-scale: 6.1; \t\t\n\t\t\t--pitch-primary-channel-sat: 75; \t\t\n\t\t\t--pitch-primary-channel-sat-scale: 0.1; \t\t\n\t\t\t--pitch-primary-channel-lum: 47.5; \t\t\n\t\t\t--pitch-primary-channel-lum-scale: 0.05; \t\n\t\n\t\t\t--pitch-secondary-note-hue: -34; \t\t\n\t\t\t--pitch-secondary-note-hue-scale: 6.1; \t\t\n\t\t\t--pitch-secondary-note-sat: 93.9; \t\t\n\t\t\t--pitch-secondary-note-sat-scale: 0.1; \t\t\n\t\t\t--pitch-secondary-note-lum: 15; \t\t\n\t\t\t--pitch-secondary-note-lum-scale: 0.05; \n\t\t\n\t\t\t--pitch-primary-note-hue: -53; \t\t\n\t\t\t--pitch-primary-note-hue-scale: 6.1; \t\t\n\t\t\t--pitch-primary-note-sat: 45; \t\t\n\t\t\t--pitch-primary-note-sat-scale: 0.05; \t\t\n\t\t\t--pitch-primary-note-lum: 45.6; \t\t\n\t\t\t--pitch-primary-note-lum-scale: 0.025; \n\t\t\n\t\t\t--noise-secondary-channel-hue: 0; \t\t\n\t\t\t--noise-secondary-channel-hue-scale: 2; \t\t\n\t\t\t--noise-secondary-channel-sat: 65; \t\t\n\t\t\t--noise-secondary-channel-sat-scale: 0; \t\t\n\t\t\t--noise-secondary-channel-lum: 42; \t\t\n\t\t\t--noise-secondary-channel-lum-scale: 0; \n\t\t\n\t\t\t--noise-primary-channel-hue: 0; \t\t\n\t\t\t--noise-primary-channel-hue-scale: 1; \t\t\n\t\t\t--noise-primary-channel-sat: 100; \t\t\n\t\t\t--noise-primary-channel-sat-scale: 1; \t\t\n\t\t\t--noise-primary-channel-lum: 63.5; \t\t\n\t\t\t--noise-primary-channel-lum-scale: 0; \n\t\t\n\t\t\t--noise-secondary-note-hue: 24; \t\t\n\t\t\t--noise-secondary-note-hue-scale: 2; \t\t\n\t\t\t--noise-secondary-note-sat: 100; \t\t\n\t\t\t--noise-secondary-note-sat-scale: 0; \t\t\n\t\t\t--noise-secondary-note-lum: 35; \t\t\n\t\t\t--noise-secondary-note-lum-scale: 0; \t\n\t\n\t\t\t--noise-primary-note-hue: 24; \t\t\n\t\t\t--noise-primary-note-hue-scale: 2; \t\t\n\t\t\t--noise-primary-note-sat: 75; \t\t\n\t\t\t--noise-primary-note-sat-scale: 1; \t\t\n\t\t\t--noise-primary-note-lum: 60; \t\t\n\t\t\t--noise-primary-note-lum-scale: 1; \t\n\t\n\t\t\t--mod-secondary-channel-hue: 55; \t\t\n\t\t\t--mod-secondary-channel-hue-scale: 1.5; \t\t\n\t\t\t--mod-secondary-channel-sat: 100; \t\t\n\t\t\t--mod-secondary-channel-sat-scale: 0; \t\t\n\t\t\t--mod-secondary-channel-lum: 20; \t\t\n\t\t\t--mod-secondary-channel-lum-scale: 0; \n\t\t\n\t\t\t--mod-primary-channel-hue: 55; \t\t\n\t\t\t--mod-primary-channel-hue-scale: 1.5; \t\t\n\t\t\t--mod-primary-channel-sat: 96; \t\t\n\t\t\t--mod-primary-channel-sat-scale: 0; \t\t\n\t\t\t--mod-primary-channel-lum: 50; \t\t\n\t\t\t--mod-primary-channel-lum-scale: 0; \n\t\t\n\t\t\t--mod-secondary-note-hue: 55; \t\t\n\t\t\t--mod-secondary-note-hue-scale: 1.5; \t\t\n\t\t\t--mod-secondary-note-sat: 92; \t\t\n\t\t\t--mod-secondary-note-sat-scale: 0; \t\t\n\t\t\t--mod-secondary-note-lum: 45; \t\t\n\t\t\t--mod-secondary-note-lum-scale: 0; \n\t\t\n\t\t\t--mod-primary-note-hue: 55; \t\t\n\t\t\t--mod-primary-note-hue-scale: 1.5; \t\t\n\t\t\t--mod-primary-note-sat: 96; \t\t\n\t\t\t--mod-primary-note-sat-scale: 0; \t\t\n\t\t\t--mod-primary-note-lum: 85; \t\t\n\t\t\t--mod-primary-note-lum-scale: 0; \t\n\t\t\t--track-font: \"AbyssType\";\n\t\t\t\t}\n\t\t/* sets cursor */ \n\t\t* {\n\t\tcursor: url(\"abyssbox_cursor.png\"), auto !important;\n\t\t}\n\t\t\t@font-face {\n\t\t   font-family: \"AbyssType\";\n\t\t   src:\n \t\t   url(\"abysstype.otf\") format(\"opentype\") tech(color-COLRv1),\n\t\t\t}\n\n\t\t\t@font-face {\n\t\t   font-family: \"AbyssType_small\";\n\t\t   src:\n \t\t   url(\"abysstype_small.otf\") format(\"opentype\") tech(color-COLRv1),\n\t\t\t}\n\n\t\t\thtml {\n \t\t   font-family: 'AbyssType_small';\n\t\t\t}\n\t\t   var(--track-font): 'AbyssType';\n\n\t\t\t`,\n\t\t\"Half-Life\": `\n\t\t\t:root { \t\t\n\t\t\t--page-margin: #0c1012; \t\t\n\t\t\t--editor-background: #0c1012; \t\t\n\t\t\t--hover-preview: white; \t\t\n\t\t\t--playhead: rgba(255, 255, 255, 0.9); \t\t\n\t\t\t--primary-text: #ffee00; \t\t\n\t\t\t--secondary-text: #ffee00; \t\t\n\t\t\t--inverted-text:  #000000;\t \t\t\n\t\t\t--text-selection: rgba(119,68,255,0.99); \t\t\n\t\t\t--box-selection-fill: #ff6f00; \t\t\n\t\t\t--loop-accent: #ff6f00; \t\t\n\t\t\t--link-accent: #ff6f00; \t\t\n\t\t\t--ui-widget-background: #36454F;\t\t\n\t\t\t--ui-widget-focus: #36454F; \t\t\n\t\t\t--pitch-background: #5e2103; \t\t\n\t\t\t--tonic: #ff6f00; \t\t\n\t\t\t--fifth-note: #963c00; \t\t\n\t\t\t--white-piano-key: #ccbca5; \t\t\n\t\t\t--black-piano-key: #40382f; \t\t\n\t\t\t--use-color-formula: true; \t\t\n\t\t\t--track-editor-bg-pitch: #7d5100; \t\t\n\t\t\t--track-editor-bg-pitch-dim: #3b2c10; \t\t\n\t\t\t--track-editor-bg-noise: #730a00; \t\t\n\t\t\t--track-editor-bg-noise-dim: #360e0b; \t\t\n\t\t\t--track-editor-bg-mod: #856f00; \t\t\n\t\t\t--track-editor-bg-mod-dim: #3b3205; \t\t\n\t\t\t--multiplicative-mod-slider: #9f8460; \t\t\n\t\t\t--overwriting-mod-slider: #9e7534; \t\t\n\t\t\t--indicator-primary: #b38949; \t\t\n\t\t\t--indicator-secondary: #543d1d; \t\t\n\t\t\t--select2-opt-group: #4f3b19; \t\t\n\t\t\t--input-box-outline: #1a0b04; \t\t\n\t\t\t--mute-button-normal: #ddac5d;\t \t\t\n\t\t\t--mute-button-mod: #ba3d36; \t\t\n\t\t\t--mod-label-primary: #542f16; \t\t\n\t\t\t--mod-label-secondary-text: rgb(120, 87, 86); \n\t\t\t--mod-label-primary-text: gray; \n\t\t\n\t\t\t--pitch-secondary-channel-hue: 0; \t\t\n\t\t\t--pitch-secondary-channel-hue-scale 0; \t\t\n\t\t\t--pitch-secondary-channel-sat: 43; \t\t\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1; \t\t\n\t\t\t--pitch-secondary-channel-lum: 60; \t\t\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05; \n\t\t\n\t\t\t--pitch-primary-channel-hue: 154; \t\t\n\t\t\t--pitch-primary-channel-hue-scale: 6.1; \t\t\n\t\t\t--pitch-primary-channel-sat: 75; \t\t\n\t\t\t--pitch-primary-channel-sat-scale: 0.1; \t\t\n\t\t\t--pitch-primary-channel-lum: 60; \t\t\n\t\t\t--pitch-primary-channel-lum-scale: 0.05; \t\n\t\n\t\t\t--pitch-secondary-note-hue: 154; \t\t\n\t\t\t--pitch-secondary-note-hue-scale: 6.1; \t\t\n\t\t\t--pitch-secondary-note-sat: 93.9; \t\t\n\t\t\t--pitch-secondary-note-sat-scale: 0.1; \t\t\n\t\t\t--pitch-secondary-note-lum: 20; \t\t\n\t\t\t--pitch-secondary-note-lum-scale: 0.05; \n\t\t\n\t\t\t--pitch-primary-note-hue: 154; \t\t\n\t\t\t--pitch-primary-note-hue-scale: 6.1; \t\t\n\t\t\t--pitch-primary-note-sat: 65; \t\t\n\t\t\t--pitch-primary-note-sat-scale: 0.05; \t\t\n\t\t\t--pitch-primary-note-lum: 60; \t\t\n\t\t\t--pitch-primary-note-lum-scale: 0.05; \n\t\t\n\t\t\t--noise-secondary-channel-hue: 0; \t\t\n\t\t\t--noise-secondary-channel-hue-scale: 2; \t\t\n\t\t\t--noise-secondary-channel-sat: 65; \t\t\n\t\t\t--noise-secondary-channel-sat-scale: 0; \t\t\n\t\t\t--noise-secondary-channel-lum: 60; \t\t\n\t\t\t--noise-secondary-channel-lum-scale: 0; \n\t\t\n\t\t\t--noise-primary-channel-hue: 0; \t\t\n\t\t\t--noise-primary-channel-hue-scale: 1; \t\t\n\t\t\t--noise-primary-channel-sat: 100; \t\t\n\t\t\t--noise-primary-channel-sat-scale: 1; \t\t\n\t\t\t--noise-primary-channel-lum: 63.5; \t\t\n\t\t\t--noise-primary-channel-lum-scale: 0; \n\t\t\n\t\t\t--noise-secondary-note-hue: 24; \t\t\n\t\t\t--noise-secondary-note-hue-scale: 2; \t\t\n\t\t\t--noise-secondary-note-sat: 100; \t\t\n\t\t\t--noise-secondary-note-sat-scale: 0; \t\t\n\t\t\t--noise-secondary-note-lum: 25; \t\t\n\t\t\t--noise-secondary-note-lum-scale: 0; \t\n\t\n\t\t\t--noise-primary-note-hue: 24; \t\t\n\t\t\t--noise-primary-note-hue-scale: 2; \t\t\n\t\t\t--noise-primary-note-sat: 75; \t\t\n\t\t\t--noise-primary-note-sat-scale: 1; \t\t\n\t\t\t--noise-primary-note-lum: 60; \t\t\n\t\t\t--noise-primary-note-lum-scale: 1; \t\n\t\n\t\t\t--mod-secondary-channel-hue: 55; \t\t\n\t\t\t--mod-secondary-channel-hue-scale: 1.5; \t\t\n\t\t\t--mod-secondary-channel-sat: 100; \t\t\n\t\t\t--mod-secondary-channel-sat-scale: 0; \t\t\n\t\t\t--mod-secondary-channel-lum: 20; \t\t\n\t\t\t--mod-secondary-channel-lum-scale: 0; \n\t\t\n\t\t\t--mod-primary-channel-hue: 55; \t\t\n\t\t\t--mod-primary-channel-hue-scale: 1.5; \t\t\n\t\t\t--mod-primary-channel-sat: 96; \t\t\n\t\t\t--mod-primary-channel-sat-scale: 0; \t\t\n\t\t\t--mod-primary-channel-lum: 50; \t\t\n\t\t\t--mod-primary-channel-lum-scale: 0; \n\t\t\n\t\t\t--mod-secondary-note-hue: 55; \t\t\n\t\t\t--mod-secondary-note-hue-scale: 1.5; \t\t\n\t\t\t--mod-secondary-note-sat: 92; \t\t\n\t\t\t--mod-secondary-note-sat-scale: 0; \t\t\n\t\t\t--mod-secondary-note-lum: 45; \t\t\n\t\t\t--mod-secondary-note-lum-scale: 0; \n\t\t\n\t\t\t--mod-primary-note-hue: 55; \t\t\n\t\t\t--mod-primary-note-hue-scale: 1.5; \t\t\n\t\t\t--mod-primary-note-sat: 96; \t\t\n\t\t\t--mod-primary-note-sat-scale: 0; \t\t\n\t\t\t--mod-primary-note-lum: 85; \t\t\n\t\t\t--mod-primary-note-lum-scale: 0; \t\n\t\t\t\t}\n\t\t/* replaces hotdog (in a hacky way) with an image of gordon freeman but really wide*/\n\t\t#Hotdog {\n\t\tdisplay: none;\n\t\t}\n\t\t.instructions-column > section:first-of-type > p:first-of-type:after {\n\t\tdisplay: block;\n\t\tcontent: url(\"wide-gordon.png\");\n\t\twidth: 50%;\n\t\theight: 50%;\n\t\ttext-align: center;\n\t\tmargin-top: 25px;\n\t\t}\n\t\t/* sets background image */\n\t\tbody {\n\t\tbackground-image: url(\"lambda.png\") !important;\n\t\tbackground-size: cover;\n\t\tbackground-position: center;\n\t\tbackground-repeat: no-repeat;\n\t\t\t}\n\t\t\t/* make editor background transparent */\n\t\t#beepboxEditorContainer, .beepboxEditor, #text-content {\n\t\t}\n\n\t\t\t@font-face {\n\t\t   font-family: \"trebuc\";\n\t\t   src:\n \t\t   url(\"trebuc.otf\") format(\"opentype\") tech(color-COLRv1),\n\t\t\t}\n\n\t\t\thtml {\n \t\t   font-family: 'trebuc';\n\t\t\t}\n\n\t\t\t`,\n\t\t\"Doom 1993\": `\n\t\t\t:root { \t\t\n\t\t\t--page-margin: #470000; \t\t\n\t\t\t--editor-background: #470000; \t\t\n\t\t\t--hover-preview: white; \t\t\n\t\t\t--playhead: rgba(255, 255, 255, 0.9); \t\t\n\t\t\t--primary-text: #ffffff; \t\t\n\t\t\t--secondary-text: #ffffff; \t\t\n\t\t\t--inverted-text:  #000000;\t \t\t\n\t\t\t--text-selection: rgba(119,68,255,0.99); \t\t\n\t\t\t--box-selection-fill: #ff6f00; \t\t\n\t\t\t--loop-accent: #ff0000; \t\t\n\t\t\t--link-accent: #962727; \t\t\n\t\t\t--ui-widget-background: #4f3b36;\t\t\n\t\t\t--ui-widget-focus: #4f3b36; \t\t\n\t\t\t--pitch-background: #7d0000; \t\t\n\t\t\t--tonic: #ff0000; \t\t\n\t\t\t--fifth-note: #962727; \t\t\n\t\t\t--white-piano-key: #ccbca5; \t\t\n\t\t\t--black-piano-key: #40382f; \t\t\n\t\t\t--use-color-formula: true; \t\t\n\t\t\t--track-editor-bg-pitch: #7d1f00; \t\t\n\t\t\t--track-editor-bg-pitch-dim: #401000; \t\t\n\t\t\t--track-editor-bg-noise: #7d0000; \t\t\n\t\t\t--track-editor-bg-noise-dim: #400000; \t\t\n\t\t\t--track-editor-bg-mod: #7d0028; \t\t\n\t\t\t--track-editor-bg-mod-dim: #470017; \t\t\n\t\t\t--multiplicative-mod-slider: #9f8460; \t\t\n\t\t\t--overwriting-mod-slider: #9f6460; \t\t\n\t\t\t--indicator-primary: #b38949; \t\t\n\t\t\t--indicator-secondary: #543d1d; \t\t\n\t\t\t--select2-opt-group: #4f3b19; \t\t\n\t\t\t--input-box-outline: #1a0404; \t\t\n\t\t\t--mute-button-normal: #dd5d5d;\t \t\t\n\t\t\t--mute-button-mod: #ba3d36; \t\t\n\t\t\t--mod-label-primary: #541616; \t\t\n\t\t\t--mod-label-secondary-text: rgb(120, 87, 86); \n\t\t\t--mod-label-primary-text: gray; \n\t\t\n\t\t\t--pitch-secondary-channel-hue: 0; \t\t\n\t\t\t--pitch-secondary-channel-hue-scale 0; \t\t\n\t\t\t--pitch-secondary-channel-sat: 43; \t\t\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1; \t\t\n\t\t\t--pitch-secondary-channel-lum: 60; \t\t\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05; \n\t\t\n\t\t\t--pitch-primary-channel-hue: -4; \t\t\n\t\t\t--pitch-primary-channel-hue-scale: 6.1; \t\t\n\t\t\t--pitch-primary-channel-sat: 75; \t\t\n\t\t\t--pitch-primary-channel-sat-scale: 0.1; \t\t\n\t\t\t--pitch-primary-channel-lum: 60; \t\t\n\t\t\t--pitch-primary-channel-lum-scale: 0.05; \t\n\t\n\t\t\t--pitch-secondary-note-hue: -4; \t\t\n\t\t\t--pitch-secondary-note-hue-scale: 6.1; \t\t\n\t\t\t--pitch-secondary-note-sat: 93.9; \t\t\n\t\t\t--pitch-secondary-note-sat-scale: 0.1; \t\t\n\t\t\t--pitch-secondary-note-lum: 20; \t\t\n\t\t\t--pitch-secondary-note-lum-scale: 0.05; \n\t\t\n\t\t\t--pitch-primary-note-hue: -4; \t\t\n\t\t\t--pitch-primary-note-hue-scale: 6.1; \t\t\n\t\t\t--pitch-primary-note-sat: 65; \t\t\n\t\t\t--pitch-primary-note-sat-scale: 0.05; \t\t\n\t\t\t--pitch-primary-note-lum: 60; \t\t\n\t\t\t--pitch-primary-note-lum-scale: 0.05; \n\t\t\n\t\t\t--noise-secondary-channel-hue: 0; \t\t\n\t\t\t--noise-secondary-channel-hue-scale: 2; \t\t\n\t\t\t--noise-secondary-channel-sat: 65; \t\t\n\t\t\t--noise-secondary-channel-sat-scale: 0; \t\t\n\t\t\t--noise-secondary-channel-lum: 60; \t\t\n\t\t\t--noise-secondary-channel-lum-scale: 0; \n\t\t\n\t\t\t--noise-primary-channel-hue: 0; \t\t\n\t\t\t--noise-primary-channel-hue-scale: 1; \t\t\n\t\t\t--noise-primary-channel-sat: 100; \t\t\n\t\t\t--noise-primary-channel-sat-scale: 1; \t\t\n\t\t\t--noise-primary-channel-lum: 63.5; \t\t\n\t\t\t--noise-primary-channel-lum-scale: 0; \n\t\t\n\t\t\t--noise-secondary-note-hue: 24; \t\t\n\t\t\t--noise-secondary-note-hue-scale: 2; \t\t\n\t\t\t--noise-secondary-note-sat: 100; \t\t\n\t\t\t--noise-secondary-note-sat-scale: 0; \t\t\n\t\t\t--noise-secondary-note-lum: 25; \t\t\n\t\t\t--noise-secondary-note-lum-scale: 0; \t\n\t\n\t\t\t--noise-primary-note-hue: 24; \t\t\n\t\t\t--noise-primary-note-hue-scale: 2; \t\t\n\t\t\t--noise-primary-note-sat: 75; \t\t\n\t\t\t--noise-primary-note-sat-scale: 1; \t\t\n\t\t\t--noise-primary-note-lum: 60; \t\t\n\t\t\t--noise-primary-note-lum-scale: 1; \t\n\t\n\t\t\t--mod-secondary-channel-hue: 55; \t\t\n\t\t\t--mod-secondary-channel-hue-scale: 1.5; \t\t\n\t\t\t--mod-secondary-channel-sat: 100; \t\t\n\t\t\t--mod-secondary-channel-sat-scale: 0; \t\t\n\t\t\t--mod-secondary-channel-lum: 20; \t\t\n\t\t\t--mod-secondary-channel-lum-scale: 0; \n\t\t\n\t\t\t--mod-primary-channel-hue: 55; \t\t\n\t\t\t--mod-primary-channel-hue-scale: 1.5; \t\t\n\t\t\t--mod-primary-channel-sat: 96; \t\t\n\t\t\t--mod-primary-channel-sat-scale: 0; \t\t\n\t\t\t--mod-primary-channel-lum: 50; \t\t\n\t\t\t--mod-primary-channel-lum-scale: 0; \n\t\t\n\t\t\t--mod-secondary-note-hue: 55; \t\t\n\t\t\t--mod-secondary-note-hue-scale: 1.5; \t\t\n\t\t\t--mod-secondary-note-sat: 92; \t\t\n\t\t\t--mod-secondary-note-sat-scale: 0; \t\t\n\t\t\t--mod-secondary-note-lum: 45; \t\t\n\t\t\t--mod-secondary-note-lum-scale: 0; \n\t\t\n\t\t\t--mod-primary-note-hue: 55; \t\t\n\t\t\t--mod-primary-note-hue-scale: 1.5; \t\t\n\t\t\t--mod-primary-note-sat: 96; \t\t\n\t\t\t--mod-primary-note-sat-scale: 0; \t\t\n\t\t\t--mod-primary-note-lum: 85; \t\t\n\t\t\t--mod-primary-note-lum-scale: 0; \t\n\t\t\t\t}\n\t\t\n\t\t\t#text-content > section > h1 > font {\n\t\tdisplay: none;\n\t\t}\n\t\t#text-content > section > h1 {\n\t\tmargin: auto;\n\t\tcontent: url(\"AbyssBox_DOOM.png\");\n\t\t}\n\t\t\t\t\n\t\t\t\t/* sets background image */\n\t\tbody {\n\t\tbackground-image: url(\"doomsky.png\") !important;\n\t\tbackground-size: cover;\n\t\tbackground-position: center;\n\t\tbackground-repeat: no-repeat;\n\t\t\t}\n\t\t\t/* make editor background transparent */\n\t\t#beepboxEditorContainer, .beepboxEditor, #text-content {\n\t\t}\n\n\n\t\t\t@font-face {\n\t\t   font-family: \"doomfont\";\n\t\t   src:\n \t\t   url(\"doomfont.otf\") format(\"opentype\") tech(color-COLRv1),\n\t\t\t}\n\n\t\t\thtml {\n \t\t   font-family: 'doomfont';\n\t\t\t}\n\n\t\t\t`,\n      \"Windows Xp\": `\n\t\t\t:root {\t\t\n\t\t\t--page-margin: #1e0915; \t\t\n\t\t\t--editor-background: #1e0915; \t\t\n\t\t\t--hover-preview: white; \t\t\n\t\t\t--playhead: rgba(255, 255, 255, 0.9); \t\t\n\t\t\t--primary-text: white; \t\t\n\t\t\t--secondary-text: #ffcedd; \t\t\n\t\t\t--inverted-text: black;\t \t\t\n\t\t\t--text-selection: rgba(119,68,255,0.99); \t\t\n\t\t\t--box-selection-fill: #1e0915; \t\t\n\t\t\t--loop-accent: #873a51; \t\t\n\t\t\t--link-accent: #df88ff; \t\t\n\t\t\t--ui-widget-background: #581b3e; \t\t\n\t\t\t--ui-widget-focus: #762b4c; \t\t\n\t\t\t--pitch-background: #381d24; \t\t\n\t\t\t--tonic: #873a51; \t\t\n\t\t\t--fifth-note: #75001e; \t\t\n\t\t\t--white-piano-key: #cca5c7; \t\t\n\t\t\t--black-piano-key: #402f2f; \t\t\n\t\t\t--use-color-formula: true; \t\t\n\t\t\t--track-editor-bg-pitch: #571c40; \t\t\n\t\t\t--track-editor-bg-pitch-dim: #290d0d; \t\t\n\t\t\t--track-editor-bg-noise: #571131; \t\t\n\t\t\t--track-editor-bg-noise-dim: #330a28; \t\t\n\t\t\t--track-editor-bg-mod: #54083c; \t\t\n\t\t\t--track-editor-bg-mod-dim: #360426; \t\t\n\t\t\t--multiplicative-mod-slider: #9f6082; \t\t\n\t\t\t--overwriting-mod-slider: #9e3470; \t\t\n\t\t\t--indicator-primary: #b3498f; \t\t\n\t\t\t--indicator-secondary: #541d40; \t\t\n\t\t\t--select2-opt-group: #4f191e; \t\t\n\t\t\t--input-box-outline: #18041a; \t\t\n\t\t\t--mute-button-normal: #dd5d94;\t \t\t\n\t\t\t--mute-button-mod: #ba364c; \t\t\n\t\t\t--mod-label-primary: #541625; \t\t\n\t\t\t--mod-label-secondary-text: rgb(120, 87, 86); \n\t\t\t--mod-label-primary-text: gray; \n\t\t\n\t\t\t--pitch-secondary-channel-hue: -80; \t\t\n\t\t\t--pitch-secondary-channel-hue-scale 0; \t\t\n\t\t\t--pitch-secondary-channel-sat: 43; \t\t\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1; \t\t\n\t\t\t--pitch-secondary-channel-lum: 40; \t\t\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05; \n\t\t\n\t\t\t--pitch-primary-channel-hue: -53; \t\t\n\t\t\t--pitch-primary-channel-hue-scale: 6.1; \t\t\n\t\t\t--pitch-primary-channel-sat: 75; \t\t\n\t\t\t--pitch-primary-channel-sat-scale: 0.1; \t\t\n\t\t\t--pitch-primary-channel-lum: 67.5; \t\t\n\t\t\t--pitch-primary-channel-lum-scale: 0.05; \t\n\t\n\t\t\t--pitch-secondary-note-hue: -34; \t\t\n\t\t\t--pitch-secondary-note-hue-scale: 6.1; \t\t\n\t\t\t--pitch-secondary-note-sat: 93.9; \t\t\n\t\t\t--pitch-secondary-note-sat-scale: 0.1; \t\t\n\t\t\t--pitch-secondary-note-lum: 25; \t\t\n\t\t\t--pitch-secondary-note-lum-scale: 0.05; \n\t\t\n\t\t\t--pitch-primary-note-hue: -53; \t\t\n\t\t\t--pitch-primary-note-hue-scale: 6.1; \t\t\n\t\t\t--pitch-primary-note-sat: 100; \t\t\n\t\t\t--pitch-primary-note-sat-scale: 0.05; \t\t\n\t\t\t--pitch-primary-note-lum: 85.6; \t\t\n\t\t\t--pitch-primary-note-lum-scale: 0.025; \n\t\t\n\t\t\t--noise-secondary-channel-hue: 0; \t\t\n\t\t\t--noise-secondary-channel-hue-scale: 2; \t\t\n\t\t\t--noise-secondary-channel-sat: 65; \t\t\n\t\t\t--noise-secondary-channel-sat-scale: 0; \t\t\n\t\t\t--noise-secondary-channel-lum: 42; \t\t\n\t\t\t--noise-secondary-channel-lum-scale: 0; \n\t\t\n\t\t\t--noise-primary-channel-hue: 0; \t\t\n\t\t\t--noise-primary-channel-hue-scale: 1; \t\t\n\t\t\t--noise-primary-channel-sat: 100; \t\t\n\t\t\t--noise-primary-channel-sat-scale: 1; \t\t\n\t\t\t--noise-primary-channel-lum: 63.5; \t\t\n\t\t\t--noise-primary-channel-lum-scale: 0; \n\t\t\n\t\t\t--noise-secondary-note-hue: 24; \t\t\n\t\t\t--noise-secondary-note-hue-scale: 2; \t\t\n\t\t\t--noise-secondary-note-sat: 100; \t\t\n\t\t\t--noise-secondary-note-sat-scale: 0; \t\t\n\t\t\t--noise-secondary-note-lum: 35; \t\t\n\t\t\t--noise-secondary-note-lum-scale: 0; \t\n\t\n\t\t\t--noise-primary-note-hue: 24; \t\t\n\t\t\t--noise-primary-note-hue-scale: 2; \t\t\n\t\t\t--noise-primary-note-sat: 100; \t\t\n\t\t\t--noise-primary-note-sat-scale: 1; \t\t\n\t\t\t--noise-primary-note-lum: 60; \t\t\n\t\t\t--noise-primary-note-lum-scale: 1; \t\n\t\n\t\t\t--mod-secondary-channel-hue: 55; \t\t\n\t\t\t--mod-secondary-channel-hue-scale: 1.5; \t\t\n\t\t\t--mod-secondary-channel-sat: 100; \t\t\n\t\t\t--mod-secondary-channel-sat-scale: 0; \t\t\n\t\t\t--mod-secondary-channel-lum: 20; \t\t\n\t\t\t--mod-secondary-channel-lum-scale: 0; \n\t\t\n\t\t\t--mod-primary-channel-hue: 55; \t\t\n\t\t\t--mod-primary-channel-hue-scale: 1.5; \t\t\n\t\t\t--mod-primary-channel-sat: 96; \t\t\n\t\t\t--mod-primary-channel-sat-scale: 0; \t\t\n\t\t\t--mod-primary-channel-lum: 50; \t\t\n\t\t\t--mod-primary-channel-lum-scale: 0; \n\t\t\n\t\t\t--mod-secondary-note-hue: 55; \t\t\n\t\t\t--mod-secondary-note-hue-scale: 1.5; \t\t\n\t\t\t--mod-secondary-note-sat: 92; \t\t\n\t\t\t--mod-secondary-note-sat-scale: 0; \t\t\n\t\t\t--mod-secondary-note-lum: 45; \t\t\n\t\t\t--mod-secondary-note-lum-scale: 0; \n\t\t\n\t\t\t--mod-primary-note-hue: 55; \t\t\n\t\t\t--mod-primary-note-hue-scale: 1.5; \t\t\n\t\t\t--mod-primary-note-sat: 96; \t\t\n\t\t\t--mod-primary-note-sat-scale: 0; \t\t\n\t\t\t--mod-primary-note-lum: 85; \t\t\n\t\t\t--mod-primary-note-lum-scale: 0; \t\n\t\t\t\t}\n\t\t* {\n\t\tcursor: url(\"xpcursor.png\"), auto !important;\n\t\t}\n\n\t\t\t\t/* sets background image */\n\t\tbody {\n\t\tbackground-image: url(\"xphills.png\") !important;\n\t\tbackground-size: cover;\n\t\tbackground-position: center;\n\t\tbackground-repeat: no-repeat;\n\t\t\t}\n\t\t\t/* make editor background transparent */\n\t\t#beepboxEditorContainer, .beepboxEditor, #text-content {\n\t\t}\n\n\t\t\t\t/* sets text background image image */\n\t\t#text-content {\n\t\tbackground-image: url(\"xptextbg.png\") !important;\n\t\tbackground-size: scale;\n\t\tbackground-position: center;\n\t\tbackground-repeat: no-repeat;\n\t\t\t}\n\n\t\t\t@font-face {\n\t\t   font-family: \"tahoma\";\n\t\t   src:\n \t\t   url(\"tahoma.otf\") format(\"opentype\") tech(color-COLRv1),\n\t\t\t}\n\n\t\t\thtml {\n \t\t   font-family: 'tahoma';\n\t\t\t}\n\n\t\t\t`,\n      \"dark classic\": `\n\t\t\t:root {\n\t\t\t\t--page-margin: black;\n\t\t\t\t--editor-background: black;\n\t\t\t\t--hover-preview: white;\n\t\t\t\t--playhead: white;\n\t\t\t\t--primary-text: white;\n\t\t\t\t--secondary-text: #999;\n\t\t\t\t--inverted-text: black;\n\t\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\n\t\t\t\t--loop-accent: #74f;\n\t\t\t\t--link-accent: #98f;\n\t\t\t\t--ui-widget-background: #444;\n\t\t\t\t--ui-widget-focus: #777;\n\t\t\t\t--pitch-background: #444;\n\t\t\t\t--tonic: #864;\n\t\t\t\t--fifth-note: #468;\n\t\t\t\t--white-piano-key: #bbb;\n\t\t\t\t--black-piano-key: #444;\n\t\t\t\t--white-piano-key-text: #131200;\n\t\t\t\t--black-piano-key-text: #fff;\n\t\t\t\t\t--use-color-formula: false;\n\t\t\t\t\t--track-editor-bg-pitch: #444;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #333;\n\t\t\t\t\t--track-editor-bg-noise: #444;\n\t\t\t\t\t--track-editor-bg-noise-dim: #333;\n\t\t\t\t\t--track-editor-bg-mod: #234;\n\t\t\t\t\t--track-editor-bg-mod-dim: #123;\n\t\t\t\t\t--multiplicative-mod-slider: #456;\n\t\t\t\t\t--overwriting-mod-slider: #654;\n\t\t\t\t\t--indicator-primary: #74f;\n\t\t\t\t\t--indicator-secondary: #444;\n\t\t\t\t\t--select2-opt-group: #585858;\n\t\t\t\t\t--input-box-outline: #333;\n\t\t\t\t\t--mute-button-normal: #ffa033;\n\t\t\t\t\t--mute-button-mod: #9a6bff;\n\t\t\t\t--pitch1-secondary-channel: #0099A1;\n\t\t\t\t--pitch1-primary-channel:   #25F3FF;\n\t\t\t\t--pitch1-secondary-note:    #00BDC7;\n\t\t\t\t--pitch1-primary-note:      #92F9FF;\n\t\t\t\t--pitch2-secondary-channel: #A1A100;\n\t\t\t\t--pitch2-primary-channel:   #FFFF25;\n\t\t\t\t--pitch2-secondary-note:    #C7C700;\n\t\t\t\t--pitch2-primary-note:      #FFFF92;\n\t\t\t\t--pitch3-secondary-channel: #C75000;\n\t\t\t\t--pitch3-primary-channel:   #FF9752;\n\t\t\t\t--pitch3-secondary-note:    #FF771C;\n\t\t\t\t--pitch3-primary-note:      #FFCDAB;\n\t\t\t\t--pitch4-secondary-channel: #00A100;\n\t\t\t\t--pitch4-primary-channel:   #50FF50;\n\t\t\t\t--pitch4-secondary-note:    #00C700;\n\t\t\t\t--pitch4-primary-note:      #A0FFA0;\n\t\t\t\t--pitch5-secondary-channel: #D020D0;\n\t\t\t\t--pitch5-primary-channel:   #FF90FF;\n\t\t\t\t--pitch5-secondary-note:    #E040E0;\n\t\t\t\t--pitch5-primary-note:      #FFC0FF;\n\t\t\t\t--pitch6-secondary-channel: #7777B0;\n\t\t\t\t--pitch6-primary-channel:   #A0A0FF;\n\t\t\t\t--pitch6-secondary-note:    #8888D0;\n\t\t\t\t--pitch6-primary-note:      #D0D0FF;\n\t\t\t\t--pitch7-secondary-channel: #8AA100;\n\t\t\t\t--pitch7-primary-channel:   #DEFF25;\n\t\t\t\t--pitch7-secondary-note:    #AAC700;\n\t\t\t\t--pitch7-primary-note:      #E6FF92;\n\t\t\t\t--pitch8-secondary-channel: #DF0019;\n\t\t\t\t--pitch8-primary-channel:   #FF98A4;\n\t\t\t\t--pitch8-secondary-note:    #FF4E63;\n\t\t\t\t--pitch8-primary-note:      #FFB2BB;\n\t\t\t\t--pitch9-secondary-channel: #00A170;\n\t\t\t\t--pitch9-primary-channel:   #50FFC9;\n\t\t\t\t--pitch9-secondary-note:    #00C78A;\n\t\t\t\t--pitch9-primary-note:      #83FFD9;\n\t\t\t\t--pitch10-secondary-channel:#A11FFF;\n\t\t\t\t--pitch10-primary-channel:  #CE8BFF;\n\t\t\t\t--pitch10-secondary-note:   #B757FF;\n\t\t\t\t--pitch10-primary-note:     #DFACFF;\n\t\t\t\t--noise1-secondary-channel: #6F6F6F;\n\t\t\t\t--noise1-primary-channel:   #AAAAAA;\n\t\t\t\t--noise1-secondary-note:    #A7A7A7;\n\t\t\t\t--noise1-primary-note:      #E0E0E0;\n\t\t\t\t--noise2-secondary-channel: #996633;\n\t\t\t\t--noise2-primary-channel:   #DDAA77;\n\t\t\t\t--noise2-secondary-note:    #CC9966;\n\t\t\t\t--noise2-primary-note:      #F0D0BB;\n\t\t\t\t--noise3-secondary-channel: #4A6D8F;\n\t\t\t\t--noise3-primary-channel:   #77AADD;\n\t\t\t\t--noise3-secondary-note:    #6F9FCF;\n\t\t\t\t--noise3-primary-note:      #BBD7FF;\n\t\t\t\t--noise4-secondary-channel: #7A4F9A;\n\t\t\t\t--noise4-primary-channel:   #AF82D2;\n\t\t\t\t--noise4-secondary-note:    #9E71C1;\n\t\t\t\t--noise4-primary-note:      #D4C1EA;\n\t\t\t\t--noise5-secondary-channel: #607837;\n\t\t\t\t--noise5-primary-channel:   #A2BB77;\n\t\t\t\t--noise5-secondary-note:    #91AA66;\n\t\t\t\t--noise5-primary-note:      #C5E2B2;\n          --mod1-secondary-channel:   #339955;\n\t\t\t\t\t--mod1-primary-channel:     #77fc55;\n\t\t\t\t\t--mod1-secondary-note:      #77ff8a;\n\t\t\t\t\t--mod1-primary-note:        #cdffee;\n\t\t\t\t\t--mod2-secondary-channel:   #993355;\n\t\t\t\t\t--mod2-primary-channel:     #f04960;\n\t\t\t\t\t--mod2-secondary-note:      #f057a0;\n\t\t\t\t\t--mod2-primary-note:        #ffb8de;\n\t\t\t\t\t--mod3-secondary-channel:   #553399;\n\t\t\t\t\t--mod3-primary-channel:     #8855fc;\n\t\t\t\t\t--mod3-secondary-note:      #aa64ff;\n\t\t\t\t\t--mod3-primary-note:\t    #f8ddff;\n\t\t\t\t\t--mod4-secondary-channel:   #a86436;\n\t\t\t\t\t--mod4-primary-channel:     #c8a825;\n\t\t\t\t\t--mod4-secondary-note:      #e8ba46;\n\t\t\t\t\t--mod4-primary-note:        #fff6d3;\n\t\t\t\t\t--mod-label-primary:        #999;\n\t\t\t\t\t--mod-label-secondary-text: #333;\n\t\t\t\t\t--mod-label-primary-text:   black;\n\t\t\t\t\t--disabled-note-primary:    #999;\n\t\t\t\t\t--disabled-note-secondary:  #666;\n\t\t\t\t}\n\t\t\t`,\n        \"dark competition\": `\n\t\t\t\t:root {\n\t\t\t\t\t--page-margin: black;\n\t\t\t\t\t--editor-background: black;\n\t\t\t\t\t--hover-preview: #ddd;\n\t\t\t\t\t--playhead: #ddd;\n\t\t\t\t\t--primary-text: #ddd;\n\t\t\t\t\t--secondary-text: #8e695b;\n\t\t\t\t\t--inverted-text: black;\n\t\t\t\t\t--text-selection: rgba(169,0,255,0.99);\n\t\t\t\t\t--box-selection-fill: rgba(221,221,221,0.2);\n\t\t\t\t\t--loop-accent: #bf15ba;\n\t\t\t\t\t--link-accent: #f888ff;\n\t\t\t\t\t--ui-widget-background: #443a3a;\n\t\t\t\t\t--ui-widget-focus: #777;\n\t\t\t\t\t--pitch-background: #353333;\n\t\t\t\t\t--tonic: #884a44;\n\t\t\t\t\t--fifth-note: #415498;\n\t\t\t\t\t--white-piano-key: #bbb;\n\t\t\t\t\t--black-piano-key: #444;\n                    --white-piano-key-text: #131200;\n                    --black-piano-key-text: #fff;\n\t\t\t\t\t--use-color-formula: false;\n\t\t\t\t\t--track-editor-bg-pitch: #444;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #333;\n\t\t\t\t\t--track-editor-bg-noise: #444;\n\t\t\t\t\t--track-editor-bg-noise-dim: #333;\n\t\t\t\t\t--track-editor-bg-mod: #234;\n\t\t\t\t\t--track-editor-bg-mod-dim: #123;\n\t\t\t\t\t--multiplicative-mod-slider: #456;\n\t\t\t\t\t--overwriting-mod-slider: #654;\n\t\t\t\t\t--indicator-primary: #74f;\n\t\t\t\t\t--indicator-secondary: #444;\n\t\t\t\t\t--select2-opt-group: #585858;\n\t\t\t\t\t--input-box-outline: #333;\n\t\t\t\t\t--mute-button-normal: #ffa033;\n\t\t\t\t\t--mute-button-mod: #9a6bff;\n\t\t\t\t\t--pitch1-secondary-channel: #0099a1;\n\t\t\t\t\t--pitch1-primary-channel:   #25f3ff;\n\t\t\t\t\t--pitch1-secondary-note:    #00bdc7;\n\t\t\t\t\t--pitch1-primary-note:      #92f9ff;\n\t\t\t\t\t--pitch2-secondary-channel: #a1a100;\n\t\t\t\t\t--pitch2-primary-channel:   #ffff25;\n\t\t\t\t\t--pitch2-secondary-note:    #c7c700;\n\t\t\t\t\t--pitch2-primary-note:      #ffff92;\n\t\t\t\t\t--pitch3-secondary-channel: #c75000;\n\t\t\t\t\t--pitch3-primary-channel:   #ff9752;\n\t\t\t\t\t--pitch3-secondary-note:    #ff771c;\n\t\t\t\t\t--pitch3-primary-note:      #ffcdab;\n\t\t\t\t\t--pitch4-secondary-channel: #00a100;\n\t\t\t\t\t--pitch4-primary-channel:   #50ff50;\n\t\t\t\t\t--pitch4-secondary-note:    #00c700;\n\t\t\t\t\t--pitch4-primary-note:      #a0ffa0;\n\t\t\t\t\t--pitch5-secondary-channel: #d020d0;\n\t\t\t\t\t--pitch5-primary-channel:   #ff90ff;\n\t\t\t\t\t--pitch5-secondary-note:    #e040e0;\n\t\t\t\t\t--pitch5-primary-note:      #ffc0ff;\n\t\t\t\t\t--pitch6-secondary-channel: #7777b0;\n\t\t\t\t\t--pitch6-primary-channel:   #a0a0ff;\n\t\t\t\t\t--pitch6-secondary-note:    #8888d0;\n\t\t\t\t\t--pitch6-primary-note:      #d0d0ff;\n\t\t\t\t\t--pitch7-secondary-channel: #8AA100;\n\t\t\t\t\t--pitch7-primary-channel:   #DEFF25;\n\t\t\t\t\t--pitch7-secondary-note:\t  #AAC700;\n\t\t\t\t\t--pitch7-primary-note:\t\t\t#E6FF92;\n\t\t\t\t\t--pitch8-secondary-channel: #DF0019;\n\t\t\t\t\t--pitch8-primary-channel:   #FF98A4;\n\t\t\t\t\t--pitch8-secondary-note:    #FF4E63;\n\t\t\t\t\t--pitch8-primary-note:      #FFB2BB;\n\t\t\t\t\t--pitch9-secondary-channel: #00A170;\n\t\t\t\t\t--pitch9-primary-channel:   #50FFC9;\n\t\t\t\t\t--pitch9-secondary-note:    #00C78A;\n\t\t\t\t\t--pitch9-primary-note:\t\t\t#83FFD9;\n\t\t\t\t\t--pitch10-secondary-channel:#A11FFF;\n\t\t\t\t\t--pitch10-primary-channel:  #CE8BFF;\n\t\t\t\t\t--pitch10-secondary-note:   #B757FF;\n\t\t\t\t\t--pitch10-primary-note:     #DFACFF;\n\t\t\t\t\t--noise1-secondary-channel: #6f6f6f;\n\t\t\t\t\t--noise1-primary-channel:   #aaaaaa;\n\t\t\t\t\t--noise1-secondary-note:    #a7a7a7;\n\t\t\t\t\t--noise1-primary-note:      #e0e0e0;\n\t\t\t\t\t--noise2-secondary-channel: #996633;\n\t\t\t\t\t--noise2-primary-channel:   #ddaa77;\n\t\t\t\t\t--noise2-secondary-note:    #cc9966;\n\t\t\t\t\t--noise2-primary-note:      #f0d0bb;\n\t\t\t\t\t--noise3-secondary-channel: #4a6d8f;\n\t\t\t\t\t--noise3-primary-channel:   #77aadd;\n\t\t\t\t\t--noise3-secondary-note:    #6f9fcf;\n\t\t\t\t\t--noise3-primary-note:      #bbd7ff;\n\t\t\t\t\t--noise4-secondary-channel: #6B3E8E;\n\t\t\t\t\t--noise4-primary-channel:   #AF82D2;\n\t\t\t\t\t--noise4-secondary-note:    #9E71C1;\n\t\t\t\t\t--noise5-secondary-channel: #607837;\n\t\t\t\t\t--noise5-primary-channel:   #A2BB77;\n\t\t\t\t\t--noise5-secondary-note:    #91AA66;\n\t\t\t\t\t--noise5-primary-note:      #C5E2B2;\n\t\t\t\t\t--mod1-secondary-channel:   #339955;\n\t\t\t\t\t--mod1-primary-channel:     #77fc55;\n\t\t\t\t\t--mod1-secondary-note:      #77ff8a;\n\t\t\t\t\t--mod1-primary-note:        #cdffee;\n\t\t\t\t\t--mod2-secondary-channel:   #993355;\n\t\t\t\t\t--mod2-primary-channel:     #f04960;\n\t\t\t\t\t--mod2-secondary-note:      #f057a0;\n\t\t\t\t\t--mod2-primary-note:        #ffb8de;\n\t\t\t\t\t--mod3-secondary-channel:   #553399;\n\t\t\t\t\t--mod3-primary-channel:     #8855fc;\n\t\t\t\t\t--mod3-secondary-note:      #aa64ff;\n\t\t\t\t\t--mod3-primary-note:\t\t\t  #f8ddff;\n\t\t\t\t\t--mod4-secondary-channel:   #a86436;\n\t\t\t\t\t--mod4-primary-channel:     #c8a825;\n\t\t\t\t\t--mod4-secondary-note:      #e8ba46;\n\t\t\t\t\t--mod4-primary-note:        #fff6d3;\n\t\t\t\t\t--mod-label-primary:        #999;\n\t\t\t\t\t--mod-label-secondary-text: #333;\n\t\t\t\t\t--mod-label-primary-text:   black;\n\t\t\t\t\t--disabled-note-primary:    #999;\n\t\t\t\t\t--disabled-note-secondary:  #666;\n\n\t\t\t}\n\t\t`,\n        \"light classic\": `\n\t\t\t:root {\n\t\t\t\t-webkit-text-stroke-width: 0.5px;\n\t\t\t\t--page-margin: #685d88;\n\t\t\t\t--editor-background: white;\n\t\t\t\t--hover-preview: black;\n\t\t\t\t--playhead: rgba(0,0,0,0.5);\n\t\t\t\t--primary-text: black;\n\t\t\t\t--secondary-text: #777;\n\t\t\t\t--inverted-text: white;\n\t\t\t\t--text-selection: rgba(200,170,255,0.99);\n\t\t\t\t--box-selection-fill: rgba(0,0,0,0.1);\n\t\t\t\t--loop-accent: #98f;\n\t\t\t\t--link-accent: #74f;\n\t\t\t\t--ui-widget-background: #ececec;\n\t\t\t\t--ui-widget-focus: #eee;\n\t\t\t\t--pitch-background: #ececec;\n\t\t\t\t--tonic: #f0d6b6;\n\t\t\t\t--fifth-note: #bbddf0;\n\t\t\t\t--white-piano-key: #eee;\n\t\t\t\t--black-piano-key: #666;\n\t\t\t\t--white-piano-key-text: #131200;\n\t\t\t\t--black-piano-key-text: #fff;\n\t\t\t\t\t--use-color-formula: false;\n\t\t\t\t\t--track-editor-bg-pitch: #ececec;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #fdfdfd;\n\t\t\t\t\t--track-editor-bg-noise: #ececec;\n\t\t\t\t\t--track-editor-bg-noise-dim: #fdfdfd;\n\t\t\t\t\t--track-editor-bg-mod: #dbecfd;\n\t\t\t\t\t--track-editor-bg-mod-dim: #ecfdff;\n\t\t\t\t\t--multiplicative-mod-slider: #789;\n\t\t\t\t\t--overwriting-mod-slider: #987;\n\t\t\t\t\t--indicator-primary: #98f;\n\t\t\t\t\t--indicator-secondary: #cde;\n\t\t\t\t\t--select2-opt-group: #cecece;\n\t\t\t\t\t--input-box-outline: #ddd;\n\t\t\t\t\t--mute-button-normal: #c0b47f;\n\t\t\t\t\t--mute-button-mod: #bd7fc0;\n\t\t\t\t--pitch1-secondary-channel: #6CD9ED;\n\t\t\t\t--pitch1-primary-channel:   #00A0BD;\n\t\t\t\t--pitch1-secondary-note:    #34C2DC;\n\t\t\t\t--pitch1-primary-note:      #00758A;\n\t\t\t\t--pitch2-secondary-channel: #E3C941;\n\t\t\t\t--pitch2-primary-channel:   #B49700;\n\t\t\t\t--pitch2-secondary-note:    #D1B628;\n\t\t\t\t--pitch2-primary-note:      #836E00;\n\t\t\t\t--pitch3-secondary-channel: #FF9D61;\n\t\t\t\t--pitch3-primary-channel:   #E14E00;\n\t\t\t\t--pitch3-secondary-note:    #F67D3C;\n\t\t\t\t--pitch3-primary-note:      #B64000;\n\t\t\t\t--pitch4-secondary-channel: #4BE24B;\n\t\t\t\t--pitch4-primary-channel:   #00A800;\n\t\t\t\t--pitch4-secondary-note:    #2DC82D;\n\t\t\t\t--pitch4-primary-note:      #008000;\n\t\t\t\t--pitch5-secondary-channel: #FF90FF;\n\t\t\t\t--pitch5-primary-channel:   #E12EDF;\n\t\t\t\t--pitch5-secondary-note:    #EC6EEC;\n\t\t\t\t--pitch5-primary-note:      #A600A5;\n\t\t\t\t--pitch6-secondary-channel: #B5B5FE;\n\t\t\t\t--pitch6-primary-channel:   #6969FD;\n\t\t\t\t--pitch6-secondary-note:    #9393FE;\n\t\t\t\t--pitch6-primary-note:      #4A4AD7;\n\t\t\t\t--pitch7-secondary-channel: #C2D848;\n\t\t\t\t--pitch7-primary-channel:   #8EA800;\n\t\t\t\t--pitch7-secondary-note:    #B0C82D;\n\t\t\t\t--pitch7-primary-note:      #6C8000;\n\t\t\t\t--pitch8-secondary-channel: #FF90A4;\n\t\t\t\t--pitch8-primary-channel:   #E12E4D;\n\t\t\t\t--pitch8-secondary-note:    #EC6E85;\n\t\t\t\t--pitch8-primary-note:      #A6001D;\n\t\t\t\t--pitch9-secondary-channel: #41E3B5;\n\t\t\t\t--pitch9-primary-channel:   #00B481;\n\t\t\t\t--pitch9-secondary-note:    #28D1A1;\n\t\t\t\t--pitch9-primary-note:      #00835E;\n\t\t\t\t--pitch10-secondary-channel:#CA77FF;\n\t\t\t\t--pitch10-primary-channel:  #9609FF;\n\t\t\t\t--pitch10-secondary-note:   #B54FFF;\n\t\t\t\t--pitch10-primary-note:     #8400E3;\n\t\t\t\t--noise1-secondary-channel: #C1C1C1;\n\t\t\t\t--noise1-primary-channel:   #898989;\n\t\t\t\t--noise1-secondary-note:    #ADADAD;\n\t\t\t\t--noise1-primary-note:      #6C6C6C;\n\t\t\t\t--noise2-secondary-channel: #E8BB8C;\n\t\t\t\t--noise2-primary-channel:   #BD7D3A;\n\t\t\t\t--noise2-secondary-note:    #D1A374;\n\t\t\t\t--noise2-primary-note:      #836342;\n\t\t\t\t--noise3-secondary-channel: #9BC4EB;\n\t\t\t\t--noise3-primary-channel:   #4481BE;\n\t\t\t\t--noise3-secondary-note:    #7CA7D3;\n\t\t\t\t--noise3-primary-note:      #476685;\n\t\t\t\t--noise4-secondary-channel: #C5A5E0;\n\t\t\t\t--noise4-primary-channel:   #8553AE;\n\t\t\t\t--noise4-secondary-note:    #B290CC;\n\t\t\t\t--noise4-primary-note:      #684F7D;\n\t\t\t\t--noise5-secondary-channel: #B8CE93;\n\t\t\t\t--noise5-primary-channel:   #87A74F;\n\t\t\t\t--noise5-secondary-note:    #ABC183;\n\t\t\t\t--noise5-primary-note:      #68784C;\n\t\t\t\t\t--mod1-secondary-channel:   #339955;\n\t\t\t\t\t--mod1-primary-channel:     #77dd55;\n\t\t\t\t\t--mod1-secondary-note:      #77ff8a;\n\t\t\t\t\t--mod1-primary-note:        #2ad84a;\n\t\t\t\t\t--mod2-secondary-channel:   #993355;\n\t\t\t\t\t--mod2-primary-channel:     #f04960;\n\t\t\t\t\t--mod2-secondary-note:      #f057a0;\n\t\t\t\t\t--mod2-primary-note:        #ba124a;\n\t\t\t\t\t--mod3-secondary-channel:   #553399;\n\t\t\t\t\t--mod3-primary-channel:     #8855fc;\n\t\t\t\t\t--mod3-secondary-note:      #aa64ff;\n\t\t\t\t\t--mod3-primary-note:        #7a1caa;\n\t\t\t\t\t--mod4-secondary-channel:   #a86436;\n\t\t\t\t\t--mod4-primary-channel:     #c8a825;\n\t\t\t\t\t--mod4-secondary-note:      #e8ba46;\n\t\t\t\t\t--mod4-primary-note:        #a86810;\n\t\t\t\t\t--mod-label-primary:        #dddddd;\n\t\t\t\t\t--mod-label-secondary-text: #777;\n\t\t\t\t\t--mod-label-primary-text:   black;\n\t\t\t\t\t--disabled-note-primary:    #666;\n\t\t\t\t\t--disabled-note-secondary:  #aaa;\n\t\t\t}\n\t\t\t\n\t\t\t.beepboxEditor button, .beepboxEditor select {\n\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\n\t\t\t}\n\n\t\t\t\t.select2-selection__rendered {\n\t\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\n\t\t\t\t}\n\t\t`,\n        \"jummbox classic\": `\n\t\t\t\t:root {\n\t\t\t\t\t--page-margin: #040410;\n\t\t\t\t\t--editor-background: #040410;\n\t\t\t\t\t--hover-preview: white;\n\t\t\t\t\t--playhead: rgba(255, 255, 255, 0.9);\n\t\t\t\t\t--primary-text: white;\n\t\t\t\t\t--secondary-text: #84859a;\n\t\t\t\t\t--inverted-text: black;\n\t\t\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t\t\t--box-selection-fill: #044b94;\n\t\t\t\t\t--loop-accent: #74f;\n\t\t\t\t\t--link-accent: #98f;\n\t\t\t\t\t--ui-widget-background: #393e4f;\n\t\t\t\t\t--ui-widget-focus: #6d6886;\n\t\t\t\t\t--pitch-background: #393e4f;\n\t\t\t\t\t--tonic: #725491;\n\t\t\t\t\t--fifth-note: #54547a;\n\t\t\t\t\t--white-piano-key: #eee;\n\t\t\t\t\t--black-piano-key: #666;\n                    --white-piano-key-text: #131200;\n                    --black-piano-key-text: #fff;\n\t\t\t\t\t--use-color-formula: true;\n\t\t\t\t\t--track-editor-bg-pitch: #393e4f;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #1c1d28;\n\t\t\t\t\t--track-editor-bg-noise: #3d3535;\n\t\t\t\t\t--track-editor-bg-noise-dim: #161313;\n\t\t\t\t\t--track-editor-bg-mod: #283560;\n\t\t\t\t\t--track-editor-bg-mod-dim: #0a101f;\n\t\t\t\t\t--multiplicative-mod-slider: #606c9f;\n\t\t\t\t\t--overwriting-mod-slider: #6850b5;\n\t\t\t\t\t--indicator-primary: #9c64f7;\n\t\t\t\t\t--indicator-secondary: #393e4f;\n\t\t\t\t\t--select2-opt-group: #5d576f;\n\t\t\t\t\t--input-box-outline: #222;\n\t\t\t\t\t--mute-button-normal: #dda85d;\n\t\t\t\t\t--mute-button-mod: #886eae;\n\t\t\t\t\t--mod-label-primary: #282840;\n\t\t\t\t\t--mod-label-secondary-text: rgb(87, 86, 120);\n\t\t\t\t\t--mod-label-primary-text: white;\n\t\t\t\t\t--pitch-secondary-channel-hue: 0;\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 6.1;\n\t\t\t\t\t--pitch-secondary-channel-sat: 83.3;\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-channel-lum: 40;\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\n\t\t\t\t\t--pitch-primary-channel-hue: 0;\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 6.1;\n\t\t\t\t\t--pitch-primary-channel-sat: 100;\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-primary-channel-lum: 67.5;\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.05;\n\t\t\t\t\t--pitch-secondary-note-hue: 0;\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 6.1;\n\t\t\t\t\t--pitch-secondary-note-sat: 93.9;\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-note-lum: 25;\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-hue: 0;\n\t\t\t\t\t--pitch-primary-note-hue-scale: 6.1;\n\t\t\t\t\t--pitch-primary-note-sat: 100;\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-lum: 85.6;\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t\t\t--noise-secondary-channel-hue: 0;\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-channel-lum: 42;\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-primary-channel-hue: 0;\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-primary-channel-sat: 33;\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-primary-channel-lum: 63.5;\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-secondary-note-hue: 0;\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-note-lum: 55;\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t\t\t--noise-primary-note-hue: 0;\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t\t\t--noise-primary-note-lum: 74;\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-hue: 192;\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-primary-channel-hue: 192;\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-channel-sat: 96;\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-note-hue: 192;\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-note-sat: 92;\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-note-lum: 45;\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t\t\t--mod-primary-note-hue: 192;\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-note-sat: 96;\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t\t\t--mod-primary-note-lum: 85;\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t\t\t--disabled-note-primary:    #91879f;\n\t\t\t\t\t--disabled-note-secondary:  #6a677a;\n\t\t\t\t}\n\t\t\t`,\n        \"forest\": `\n\t\t\t\t:root {\n\t\t\t\t\t--page-margin: #010c03;\n\t\t\t\t\t--editor-background: #010c03;\n\t\t\t\t\t--hover-preview: #efe;\n\t\t\t\t\t--playhead: rgba(232, 255, 232, 0.9);\n\t\t\t\t\t--primary-text: #efe;\n\t\t\t\t\t--secondary-text: #70A070;\n\t\t\t\t\t--inverted-text: #280228;\n\t\t\t\t\t--text-selection: rgba(255,68,199,0.99);\n\t\t\t\t\t--box-selection-fill: #267aa3;\n\t\t\t\t\t--loop-accent: #ffe845;\n\t\t\t\t\t--link-accent: #9f8;\n\t\t\t\t\t--ui-widget-background: #203829;\n\t\t\t\t\t--ui-widget-focus: #487860;\n\t\t\t\t\t--pitch-background: #203829;\n\t\t\t\t\t--tonic: #2b8d20;\n\t\t\t\t\t--fifth-note: #385840;\n\t\t\t\t\t--white-piano-key: #bda;\n\t\t\t\t\t--black-piano-key: #573;\n                    --white-piano-key-text: #131200;\n                    --black-piano-key-text: #ffffff;\n\t\t\t\t\t--use-color-formula: true;\n\t\t\t\t\t--track-editor-bg-pitch: #254820;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #102819;\n\t\t\t\t\t--track-editor-bg-noise: #304050;\n\t\t\t\t\t--track-editor-bg-noise-dim: #102030;\n\t\t\t\t\t--track-editor-bg-mod: #506030;\n\t\t\t\t\t--track-editor-bg-mod-dim: #2a300a;\n\t\t\t\t\t--multiplicative-mod-slider: #205c8f;\n\t\t\t\t\t--overwriting-mod-slider: #20ac6f;\n\t\t\t\t\t--indicator-primary: #dcd866;\n\t\t\t\t\t--indicator-secondary: #203829;\n\t\t\t\t\t--select2-opt-group: #1a6f5a;\n\t\t\t\t\t--input-box-outline: #242;\n\t\t\t\t\t--mute-button-normal: #49e980;\n\t\t\t\t\t--mute-button-mod: #c2e502;\n\t\t\t\t\t--mod-label-primary: #133613;\n\t\t\t\t\t--mod-label-secondary-text: rgb(27, 126, 40);\n\t\t\t\t\t--mod-label-primary-text: #efe;\n\t\t\t\t\t--pitch-secondary-channel-hue: 120;\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 8.1;\n\t\t\t\t\t--pitch-secondary-channel-sat: 59;\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-channel-lum: 50;\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.04;\n\t\t\t\t\t--pitch-primary-channel-hue: 120;\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 8.1;\n\t\t\t\t\t--pitch-primary-channel-sat: 86;\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-primary-channel-lum: 70;\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.04;\n\t\t\t\t\t--pitch-secondary-note-hue: 120;\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 8.1;\n\t\t\t\t\t--pitch-secondary-note-sat: 85;\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-note-lum: 30;\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.04;\n\t\t\t\t\t--pitch-primary-note-hue: 120;\n\t\t\t\t\t--pitch-primary-note-hue-scale: 8.1;\n\t\t\t\t\t--pitch-primary-note-sat: 90;\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-lum: 80;\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t\t\t--noise-secondary-channel-hue: 200;\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 1.1;\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-channel-lum: 22;\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-primary-channel-hue: 200;\n\t\t\t\t\t--noise-primary-channel-hue-scale: 1.1;\n\t\t\t\t\t--noise-primary-channel-sat: 48;\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-primary-channel-lum: 65;\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-secondary-note-hue: 200;\n\t\t\t\t\t--noise-secondary-note-hue-scale: 1.1;\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-note-lum: 33;\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t\t\t--noise-primary-note-hue: 200;\n\t\t\t\t\t--noise-primary-note-hue-scale: 1.1;\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t\t\t--noise-primary-note-lum: 64;\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-hue: 40;\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.8;\n\t\t\t\t\t--mod-secondary-channel-sat: 44;\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-primary-channel-hue: 40;\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.8;\n\t\t\t\t\t--mod-primary-channel-sat: 60;\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-note-hue: 40;\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.8;\n\t\t\t\t\t--mod-secondary-note-sat: 62;\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-note-lum: 55;\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t\t\t--mod-primary-note-hue: 40;\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.8;\n\t\t\t\t\t--mod-primary-note-sat: 66;\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t\t\t--mod-primary-note-lum: 85;\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t\t\t--disabled-note-primary:    #536e5c;\n\t\t\t\t\t--disabled-note-secondary:  #395440;\n\t\t\t\t}\n\t\t\t`,\n        \"canyon\": `\n\t\t\t\t:root {\n\t\t\t\t\t--page-margin: #0a0000;\n\t\t\t\t\t--editor-background: #0a0000;\n\t\t\t\t\t--hover-preview: white;\n\t\t\t\t\t--playhead: rgba(247, 172, 196, 0.9);\n\t\t\t\t\t--primary-text: #f5d6bf;\n\t\t\t\t\t--secondary-text: #934050;\n\t\t\t\t\t--inverted-text: #290505;\n\t\t\t\t\t--text-selection: rgba(255, 208, 68, 0.99);\n\t\t\t\t\t--box-selection-fill: #94044870;\n\t\t\t\t\t--loop-accent: #ff1e1e;\n\t\t\t\t\t--link-accent: #da7b76;\n\t\t\t\t\t--ui-widget-background: #533137;\n\t\t\t\t\t--ui-widget-focus: #743e4b;\n\t\t\t\t\t--pitch-background: #4f3939;\n\t\t\t\t\t--tonic: #9e4145;\n\t\t\t\t\t--fifth-note: #5b3e6b;\n\t\t\t\t\t--white-piano-key: #d89898;\n\t\t\t\t\t--black-piano-key: #572b29;\n                    --white-piano-key-text: #131200;\n                    --black-piano-key-text: #ffffff;\n\t\t\t\t\t--use-color-formula: true;\n\t\t\t\t\t--track-editor-bg-pitch: #5e3a41;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #281d1c;\n\t\t\t\t\t--track-editor-bg-noise: #3a3551;\n\t\t\t\t\t--track-editor-bg-noise-dim: #272732;\n\t\t\t\t\t--track-editor-bg-mod: #552045;\n\t\t\t\t\t--track-editor-bg-mod-dim: #3e1442;\n\t\t\t\t\t--multiplicative-mod-slider: #9f6095;\n\t\t\t\t\t--overwriting-mod-slider: #b55050;\n\t\t\t\t\t--indicator-primary: #f2f764;\n\t\t\t\t\t--indicator-secondary: #4f3939;\n\t\t\t\t\t--select2-opt-group: #673030;\n\t\t\t\t\t--input-box-outline: #443131;\n\t\t\t\t\t--mute-button-normal: #d81833;\n\t\t\t\t\t--mute-button-mod: #9e2691;\n\t\t\t\t\t--mod-label-primary: #5f2b39;\n\t\t\t\t\t--mod-label-secondary-text: rgb(158, 66, 122);\n\t\t\t\t\t--mod-label-primary-text: #e6caed;\n\t\t\t\t\t--pitch-secondary-channel-hue: 0;\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 11.8;\n\t\t\t\t\t--pitch-secondary-channel-sat: 73.3;\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-channel-lum: 40;\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\n\t\t\t\t\t--pitch-primary-channel-hue: 0;\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 11.8;\n\t\t\t\t\t--pitch-primary-channel-sat: 90;\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-primary-channel-lum: 67.5;\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.05;\n\t\t\t\t\t--pitch-secondary-note-hue: 0;\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 11.8;\n\t\t\t\t\t--pitch-secondary-note-sat: 83.9;\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-note-lum: 35;\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-hue: 0;\n\t\t\t\t\t--pitch-primary-note-hue-scale: 11.8;\n\t\t\t\t\t--pitch-primary-note-sat: 100;\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-lum: 85.6;\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t\t\t--noise-secondary-channel-hue: 60;\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-channel-lum: 42;\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-primary-channel-hue: 60;\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-primary-channel-sat: 33;\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-primary-channel-lum: 63.5;\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-secondary-note-hue: 60;\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-note-lum: 55;\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t\t\t--noise-primary-note-hue: 60;\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t\t\t--noise-primary-note-lum: 74;\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-hue: 222;\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-primary-channel-hue: 222;\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-channel-sat: 96;\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-note-hue: 222;\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-note-sat: 92;\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-note-lum: 54;\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t\t\t--mod-primary-note-hue: 222;\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-note-sat: 96;\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t\t\t--mod-primary-note-lum: 75;\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t\t\t--disabled-note-primary:    #515164;\n\t\t\t\t\t--disabled-note-secondary:  #2a2a3a;\n\t\t\t\t}\n\t\t\t`,\n        \"midnight\": `\n\t\t:root {\n\t\t\t--page-margin: #000;\n\t\t\t--editor-background: #000;\n\t\t\t--hover-preview: #757575;\n\t\t\t--playhead: #fff;\n\t\t\t--primary-text: #fff;\n\t\t\t--secondary-text: #acacac;\n\t\t\t--inverted-text: #290505;\n\t\t\t--text-selection: rgba(155, 155, 155, 0.99);\n\t\t\t--box-selection-fill: #79797970;\n\t\t\t--loop-accent: #646464;\n\t\t\t--link-accent: #707070;\n\t\t\t--ui-widget-background: #353535;\n\t\t\t--ui-widget-focus: #464646;\n\t\t\t--pitch-background: #222121;\n\t\t\t--tonic: #555955;\n\t\t\t--fifth-note: #1a1818;\n\t\t\t--white-piano-key: #a89e9e;\n\t\t\t--black-piano-key: #2d2424;\n            --white-piano-key-text: #131200;\n            --black-piano-key-text: #ffffff;\n\t\t\t--use-color-formula: true;\n\t\t\t--track-editor-bg-pitch: #373737;\n\t\t\t--track-editor-bg-pitch-dim: #131313;\n\t\t\t--track-editor-bg-noise: #484848;\n\t\t\t--track-editor-bg-noise-dim: #131313;\n\t\t\t--track-editor-bg-mod: #373737;\n\t\t\t--track-editor-bg-mod-dim: #131313;\n\t\t\t--multiplicative-mod-slider: #555;\n\t\t\t--overwriting-mod-slider: #464545;\n\t\t\t--indicator-primary: #e0e0e0;\n\t\t\t--indicator-secondary: #404040;\n\t\t\t--select2-opt-group: #3c3b3b;\n\t\t\t--input-box-outline: #757575;\n\t\t\t--mute-button-normal: #8e8d8d;\n\t\t\t--mute-button-mod: #ddd;\n\t\t\t--mod-label-primary: #262526;\n\t\t\t--mod-label-secondary-text: rgb(227, 222, 225);\n\t\t\t--mod-label-primary-text: #b9b9b9;\n\t\t\t--pitch-secondary-channel-hue: 240;\n\t\t\t--pitch-secondary-channel-hue-scale: 228;\n\t\t\t--pitch-secondary-channel-sat: 73.3;\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t--pitch-secondary-channel-lum: 25;\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\n\t\t\t--pitch-primary-channel-hue: 240;\n\t\t\t--pitch-primary-channel-hue-scale: 228;\n\t\t\t--pitch-primary-channel-sat: 80;\n\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t--pitch-primary-channel-lum: 60.5;\n\t\t\t--pitch-primary-channel-lum-scale: 0.05;\n\t\t\t--pitch-secondary-note-hue: 240;\n\t\t\t--pitch-secondary-note-hue-scale: 228;\n\t\t\t--pitch-secondary-note-sat: 73.9;\n\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t--pitch-secondary-note-lum: 32;\n\t\t\t--pitch-secondary-note-lum-scale: 0.05;\n\t\t\t--pitch-primary-note-hue: 240;\n\t\t\t--pitch-primary-note-hue-scale: 228;\n\t\t\t--pitch-primary-note-sat: 90;\n\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t--pitch-primary-note-lum: 80.6;\n\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t--noise-secondary-channel-hue: 160;\n\t\t\t--noise-secondary-channel-hue-scale: 2;\n\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t--noise-secondary-channel-lum: 42;\n\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t--noise-primary-channel-hue: 160;\n\t\t\t--noise-primary-channel-hue-scale: 2;\n\t\t\t--noise-primary-channel-sat: 33;\n\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t--noise-primary-channel-lum: 63.5;\n\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t--noise-secondary-note-hue: 160;\n\t\t\t--noise-secondary-note-hue-scale: 2;\n\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t--noise-secondary-note-lum: 55;\n\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t--noise-primary-note-hue: 160;\n\t\t\t--noise-primary-note-hue-scale: 2;\n\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t--noise-primary-note-lum: 74;\n\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t--mod-secondary-channel-hue: 62;\n\t\t\t--mod-secondary-channel-hue-scale: 1.5;\n\t\t\t--mod-secondary-channel-sat: 88;\n\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t--mod-secondary-channel-lum: 30;\n\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t--mod-primary-channel-hue: 62;\n\t\t\t--mod-primary-channel-hue-scale: 1.5;\n\t\t\t--mod-primary-channel-sat: 96;\n\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t--mod-secondary-note-hue: 62;\n\t\t\t--mod-secondary-note-hue-scale: 1.5;\n\t\t\t--mod-secondary-note-sat: 92;\n\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t--mod-secondary-note-lum: 34;\n\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t--mod-primary-note-hue: 62;\n\t\t\t--mod-primary-note-hue-scale: 1.5;\n\t\t\t--mod-primary-note-sat: 96;\n\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t--mod-primary-note-lum: 75;\n\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t--disabled-note-primary:    #66a;\n\t\t\t--disabled-note-secondary:  #447;\n\t\t}\n\t`,\n        \"jummbox light\": `\n\t\t\t\t:root {\n\t\t\t\t\t-webkit-text-stroke-width: 0.5px;\n\t\t\t\t\t--page-margin: #cab1d3;\n\t\t\t\t\t--editor-background: #f4f4f4;\n\t\t\t\t\t--hover-preview: #2d26a2;\n\t\t\t\t\t--playhead: rgb(20 25 153 / 90%);\n\t\t\t\t\t--primary-text: #b686c3;\n\t\t\t\t\t--secondary-text: #970f38;\n\t\t\t\t\t--inverted-text: #fefdff;\n\t\t\t\t\t--text-selection: rgb(56 21 8 / 99%);\n\t\t\t\t\t--box-selection-fill: rgb(20 203 160 / 61%);\n\t\t\t\t\t--loop-accent: #09dc0e;\n\t\t\t\t\t--link-accent: #3ee669;\n\t\t\t\t\t--ui-widget-background: #0e0a42;\n\t\t\t\t\t--ui-widget-focus: #380c42;\n\t\t\t\t\t--pitch-background: #8daf96;\n\t\t\t\t\t--tonic: #a16fb1;\n\t\t\t\t\t--fifth-note: #d08c8c;\n\t\t\t\t\t--white-piano-key: #fbffee;\n\t\t\t\t\t--black-piano-key: #c9d8e5;\n\t\t\t\t\t--white-piano-key-text: #101160;\n\t\t\t\t\t--black-piano-key-text: #231b03;\n\t\t\t\t\t--use-color-formula: true;\n\t\t\t\t\t--track-editor-bg-pitch: #34456a;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #88afad;\n\t\t\t\t\t--track-editor-bg-noise: #564566;\n\t\t\t\t\t--track-editor-bg-noise-dim: #aaa;\n\t\t\t\t\t--track-editor-bg-mod: #7f779d;\n\t\t\t\t\t--track-editor-bg-mod-dim: #aaa;\n\t\t\t\t\t--multiplicative-mod-slider: #807caf;\n\t\t\t\t\t--overwriting-mod-slider: #909cdf;\n\t\t\t\t\t--indicator-primary: #ae38ff;\n\t\t\t\t\t--indicator-secondary: #5c8dbb;\n\t\t\t\t\t--select2-opt-group: #581b50;\n\t\t\t\t\t--input-box-outline: #6f7074;\n\t\t\t\t\t--mute-button-normal: #db1e00;\n\t\t\t\t\t--mute-button-mod: #883bf9;\n\t\t\t\t\t--mod-label-primary: #525297;\n\t\t\t\t\t--mod-label-secondary-text: rgb(197 147 245);\n\t\t\t\t\t--mod-label-primary-text: #a3aae9;\n                    --pitch-secondary-channel-hue: 26;\n                    --pitch-secondary-channel-hue-scale: 214.5;\n                    --pitch-secondary-channel-sat: 74.3;\n                    --pitch-secondary-channel-sat-scale: -0.1;\n\t\t\t\t\t--pitch-secondary-channel-lum: 55;\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: -0.05;\n\t\t\t\t\t--pitch-primary-channel-hue: 26;\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 214.5;\n\t\t\t\t\t--pitch-primary-channel-sat: 74;\n\t\t\t\t\t--pitch-primary-channel-sat-scale: -0.1;\n\t\t\t\t\t--pitch-primary-channel-lum: 65.5;\n\t\t\t\t\t--pitch-primary-channel-lum-scale: -0.05;\n\t\t\t\t\t--pitch-secondary-note-hue: 26;\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 214.5;\n\t\t\t\t\t--pitch-secondary-note-sat: 74.9;\n\t\t\t\t\t--pitch-secondary-note-sat-scale: -0.1;\n\t\t\t\t\t--pitch-secondary-note-lum: 70;\n\t\t\t\t\t--pitch-secondary-note-lum-scale: -0.05;\n\t\t\t\t\t--pitch-primary-note-hue: 26;\n\t\t\t\t\t--pitch-primary-note-hue-scale: 214.5;\n\t\t\t\t\t--pitch-primary-note-sat: 85;\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-lum: 64.6;\n\t\t\t\t\t--pitch-primary-note-lum-scale: -0.025;\n\t\t\t\t\t--noise-secondary-channel-hue: 220;\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-channel-lum: 62;\n\t\t\t\t\t--noise-secondary-channel-lum-scale: -0.1;\n\t\t\t\t\t--noise-primary-channel-hue: 220;\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-primary-channel-sat: 53;\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-primary-channel-lum: 53.5;\n\t\t\t\t\t--noise-primary-channel-lum-scale: -0.1;\n\t\t\t\t\t--noise-secondary-note-hue: 220;\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-note-sat: 58.5;\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-note-lum: 85;\n\t\t\t\t\t--noise-secondary-note-lum-scale: -1;\n\t\t\t\t\t--noise-primary-note-hue: 220;\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\n\t\t\t\t\t--noise-primary-note-sat: 56.5;\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t\t\t--noise-primary-note-lum: 54;\n\t\t\t\t\t--noise-primary-note-lum-scale: -1;\n\t\t\t\t\t--mod-secondary-channel-hue: 90;\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-lum: 60;\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-primary-channel-hue: 90;\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-channel-sat: 89;\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-primary-channel-lum: 65;\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-note-hue: 90;\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-note-sat: 79;\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-note-lum: 95;\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t\t\t--mod-primary-note-hue: 90;\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-note-sat: 79;\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t\t\t--mod-primary-note-lum: 55;\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t\t\t--disabled-note-primary:    #868;\n\t\t\t\t\t--disabled-note-secondary:  #767;\n\t\t\t\t}\n\n\t\t\t\t.beepboxEditor button, .beepboxEditor select {\n\t\t\t\t\tbackground-color: var(--secondary-text);\n\t\t\t\t}\n\n\t\t\t\t.select2-selection__rendered {\n\t\t\t\t\tbackground-color: var(--secondary-text);\n\t\t\t\t}\n\n\t\t\t\t.beepboxEditor .piano-button::before {\n\t\t\t\t\tdisplay: none;\n\t\t\t\t}\n\t\t\t`,\n        \"amoled dark\": `\n\t\t\t\t:root {\n\t\t\t\t\t--page-margin: #000;\n\t\t\t\t\t--editor-background: #020406;\n\t\t\t\t\t--hover-preview: white;\n\t\t\t\t\t--playhead: rgba(255, 255, 255, 0.9);\n\t\t\t\t\t--primary-text: white;\n\t\t\t\t\t--secondary-text: #8e88ce;\n\t\t\t\t\t--inverted-text: black;\n\t\t\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t\t\t--box-selection-fill: #044b94;\n\t\t\t\t\t--loop-accent: #ad38f9;\n\t\t\t\t\t--link-accent: #bd25ff;\n\t\t\t\t\t--ui-widget-background: #080d1f;\n\t\t\t\t\t--ui-widget-focus: #060f2d;\n\t\t\t\t\t--pitch-background: #02060b;\n\t\t\t\t\t--tonic: #00113a;\n\t\t\t\t\t--fifth-note: #1b0019;\n\t\t\t\t\t--white-piano-key: #02040c;\n\t\t\t\t\t--black-piano-key: #02040c;\n                    --white-piano-key-text: #fff;\n                    --black-piano-key-text: #fff;\n\t\t\t\t\t--use-color-formula: true;\n\t\t\t\t\t--track-editor-bg-pitch: #050829;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #010213;\n\t\t\t\t\t--track-editor-bg-noise: #051529;\n\t\t\t\t\t--track-editor-bg-noise-dim: #010b13;\n\t\t\t\t\t--track-editor-bg-mod: #150529;\n\t\t\t\t\t--track-editor-bg-mod-dim: #0a0113;\n\t\t\t\t\t--multiplicative-mod-slider: #2b409c;\n\t\t\t\t\t--overwriting-mod-slider: #6850b5;\n\t\t\t\t\t--indicator-primary: #7f3bec;\n\t\t\t\t\t--indicator-secondary: #213888;\n\t\t\t\t\t--select2-opt-group: #1d123c;\n\t\t\t\t\t--input-box-outline: #1b1e48;\n\t\t\t\t\t--mute-button-normal: #d234b0;\n\t\t\t\t\t--mute-button-mod: #263d98;\n\t\t\t\t\t--mod-label-primary: #090910;\n\t\t\t\t\t--mod-label-secondary-text: rgb(73, 69, 214);\n\t\t\t\t\t--mod-label-primary-text: white;\n\t\t\t\t\t--pitch-secondary-channel-hue: 183;\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 158.7;\n\t\t\t\t\t--pitch-secondary-channel-sat: 83.3;\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-channel-lum: 40;\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\n\t\t\t\t\t--pitch-primary-channel-hue: 183;\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 158.7;\n\t\t\t\t\t--pitch-primary-channel-sat: 100;\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-primary-channel-lum: 67.5;\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.05;\n\t\t\t\t\t--pitch-secondary-note-hue: 183;\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 158.7;\n\t\t\t\t\t--pitch-secondary-note-sat: 93.9;\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-note-lum: 25;\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-hue: 183;\n\t\t\t\t\t--pitch-primary-note-hue-scale: 158.7;\n\t\t\t\t\t--pitch-primary-note-sat: 100;\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-lum: 85.6;\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t\t\t--noise-secondary-channel-hue: 30;\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-channel-lum: 42;\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-primary-channel-hue: 30;\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-primary-channel-sat: 33;\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-primary-channel-lum: 63.5;\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-secondary-note-hue: 30;\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-note-lum: 55;\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t\t\t--noise-primary-note-hue: 30;\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t\t\t--noise-primary-note-lum: 74;\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-hue: 0;\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-primary-channel-hue: 0;\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-channel-sat: 96;\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-note-hue: 0;\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-note-sat: 92;\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-note-lum: 45;\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t\t\t--mod-primary-note-hue: 0;\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-note-sat: 96;\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t\t\t--mod-primary-note-lum: 85;\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t\t\t--disabled-note-primary: #91879f;\n\t\t\t\t\t--disabled-note-secondary: #6a677a;\n\t\t\t\t}\n\n\t\t\t`,\n        \"beachcombing\": `\n\t\t\t:root {\n\t\t\t  --page-margin: #010121;\n  --editor-background: #020222;\n  --hover-preview: #f3ffff;\n  --playhead: #fff;\n  --primary-text: #c1f1ff;\n  --secondary-text: #546775;\n  --inverted-text: black;\n  --text-selection: rgba(119,68,255,0.99);\n  --box-selection-fill: #3e0028;\n  --loop-accent: #5e68fffc;\n  --link-accent: #ff3ad5fc;\n  --ui-widget-background: #1f2b52;\n  --ui-widget-focus: #384e91;\n  --pitch-background: #2c3155;\n  --tonic: #935175;\n  --fifth-note: #1f569f;\n  --white-piano-key: #f3f2ff;\n  --black-piano-key: #4b4471;\n  --white-piano-key-text: #4b4471;\n  --black-piano-key-text: #fff;\n  --use-color-formula: false;\n  --track-editor-bg-pitch: #34406c;\n  --track-editor-bg-pitch-dim: #121931;\n  --track-editor-bg-noise: #562e3b;\n  --track-editor-bg-noise-dim: #161313;\n  --track-editor-bg-mod: #372e66;\n  --track-editor-bg-mod-dim: #2a1640;\n  --multiplicative-mod-slider: #606c9f;\n  --overwriting-mod-slider: #6850b5;\n  --indicator-primary: #ff8bd1;\n  --indicator-secondary: #393e4f;\n  --select2-opt-group: #5d576f;\n  --input-box-outline: #222;\n  --mute-button-normal: #7ce1ff;\n  --mute-button-mod: #db519d;\n  --pitch1-secondary-channel: #329b70;\n  --pitch1-primary-channel: #53ffb8;\n  --pitch1-secondary-note: #4cb98c;\n  --pitch1-primary-note: #98ffd4;\n  --pitch2-secondary-channel: #b08e4d;\n  --pitch2-primary-channel: #ffe185;\n  --pitch2-secondary-note: #91782e;\n  --pitch2-primary-note: #ffd968;\n  --pitch3-secondary-channel: #018e8e;\n  --pitch3-primary-channel: #3de4ff;\n  --pitch3-secondary-note: #24b7b7;\n  --pitch3-primary-note: #a7ffff;\n  --pitch4-secondary-channel: #792354;\n  --pitch4-primary-channel: #ff68bd;\n  --pitch4-secondary-note: #a73c78;\n  --pitch4-primary-note: #ff98d2;\n  --pitch5-secondary-channel: #185aab;\n  --pitch5-primary-channel: #6493ff;\n  --pitch5-secondary-note: #3e99d9;\n  --pitch5-primary-note: #b3e3ff;\n  --pitch6-secondary-channel: #953C47;\n  --pitch6-primary-channel: #FF7888;\n  --pitch6-secondary-note: #DF4F60;\n  --pitch6-primary-note: #FFB2BB;\n  --pitch7-secondary-channel: #4f007d;\n  --pitch7-primary-channel: #a54cd9;\n  --pitch7-secondary-note: #732b9d;\n  --pitch7-primary-note: #d386ff;\n  --pitch8-secondary-channel: #323c99;\n  --pitch8-primary-channel: #1b61ff;\n  --pitch8-secondary-note: #1848b3;\n  --pitch8-primary-note: #6f9bff;\n  --pitch9-secondary-channel: #1F605A;\n  --pitch9-primary-channel: #69FFEA;\n  --pitch9-secondary-note: #178076;\n  --pitch9-primary-note: #83FFD9;\n  --pitch10-secondary-channel: #6D438C;\n  --pitch10-primary-channel: #CE8BFF;\n  --pitch10-secondary-note: #8040B0;\n  --pitch10-primary-note: #DFACFF;\n  --noise1-secondary-channel: #635070;\n  --noise1-primary-channel: #9071db;\n  --noise1-secondary-note: #915dc1;\n  --noise1-primary-note: #c5a5ff;\n  --noise2-secondary-channel: #993367;\n  --noise2-primary-channel: #dd777c;\n  --noise2-secondary-note: #cc6695;\n  --noise2-primary-note: #f0bbd1;\n  --noise3-secondary-channel: #4a8c8f;\n  --noise3-primary-channel: #77c5dd;\n  --noise3-secondary-note: #6fb4cf;\n  --noise3-primary-note: #bbf2ff;\n  --noise4-secondary-channel: #8e3e7d;\n  --noise4-primary-channel: #c682d2;\n  --noise4-secondary-note: #b871c1;\n  --noise4-primary-note: #ffb8f0;\n  --noise5-secondary-channel: #785e37;\n  --noise5-primary-channel: #bb9d77;\n  --noise5-secondary-note: #aa8c66;\n  --noise5-primary-note: #e2d1b2;\n  --mod1-secondary-channel: #4e8397;\n  --mod1-primary-channel: #92e6f3;\n  --mod1-secondary-note: #76b9d9;\n  --mod1-primary-note: #cde3ff;\n  --mod2-secondary-channel: #ad5774;\n  --mod2-primary-channel: #eba4ae;\n  --mod2-secondary-note: #c9719b;\n  --mod2-primary-note: #fdcee7;\n  --mod3-secondary-channel: #6f579f;\n  --mod3-primary-channel: #b192f7;\n  --mod3-secondary-note: #7c3fc8;\n  --mod3-primary-note: #f8ddff;\n  --mod4-secondary-channel: #a88a36;\n  --mod4-primary-channel: #bec825;\n  --mod4-secondary-note: #aecb57;\n  --mod4-primary-note: #dee9bd;\n  --mod-label-primary: #2c2c56;\n  --mod-label-secondary-text: rgb(71,69,147);\n  --mod-label-primary-text: white;\n  --disabled-note-primary: #91879f;\n  --disabled-note-secondary: #6a677a;\n\n\n\t\t\t}\n\t\t`,\n        \"roe\": `\n\t\t\t:root {\n\t\t\t--page-margin: #050000;\n\t\t\t--editor-background: #050000;\n\t\t\t--hover-preview: white;\n\t\t\t--playhead: white;\n\t\t\t--primary-text: #b8cee0;\n\t\t\t--secondary-text: #cb3434;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: rgb(255 68 68 / 99%);\n\t\t\t--box-selection-fill: rgb(255 0 0 / 30%);\n\t\t\t--loop-accent: #7744FF;\n\t\t\t--link-accent: #FF2A2A;\n\t\t\t--ui-widget-background: #1a2642;\n\t\t\t--ui-widget-focus: #2c3f6d;\n\t\t\t--pitch-background: #15111a;\n\t\t\t--tonic: #1b3041;\n\t\t\t--fifth-note: #381818;\n\t\t\t--white-piano-key: #cdcdcd;\n\t\t\t--black-piano-key: #232323;\n\t\t\t--white-piano-key-text: #131200;\n\t\t\t--black-piano-key-text: #fff;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #302938;\n\t\t\t--track-editor-bg-pitch-dim: #211c26;\n\t\t\t--track-editor-bg-noise: #261f42;\n\t\t\t--track-editor-bg-noise-dim: #1a152d;\n\t\t\t--track-editor-bg-mod: #183049;\n\t\t\t--track-editor-bg-mod-dim: #102132;\n\t\t\t--multiplicative-mod-slider: #344a7f;\n\t\t\t--overwriting-mod-slider: #344a7f;\n\t\t\t--indicator-primary: #FF2A2A;\n\t\t\t--indicator-secondary: #800000;\n\t\t\t--select2-opt-group: #141e34;\n\t\t\t--input-box-outline: #141e34;\n\t\t\t--mute-button-normal: #299eff;\n\t\t\t--mute-button-mod: #165a93;\n\t\t\t--pitch1-secondary-channel: #273c90;\n\t\t\t--pitch1-primary-channel: #476BFF;\n\t\t\t--pitch1-secondary-note: #273c90;\n\t\t\t--pitch1-primary-note: #476BFF;\n\t\t\t--pitch2-secondary-channel: #3a3898;\n\t\t\t--pitch2-primary-channel: #625FFB;\n\t\t\t--pitch2-secondary-note: #3a3898;\n\t\t\t--pitch2-primary-note: #625FFB;\n\t\t\t--pitch3-secondary-channel: #542780;\n\t\t\t--pitch3-primary-channel: #9C49EC;\n\t\t\t--pitch3-secondary-note: #542780;\n\t\t\t--pitch3-primary-note: #9C49EC;\n\t\t\t--pitch4-secondary-channel: #84225d;\n\t\t\t--pitch4-primary-channel: #fd3fb1;\n\t\t\t--pitch4-secondary-note: #84225d;\n\t\t\t--pitch4-primary-note: #fd3fb1;\n\t\t\t--pitch5-secondary-channel: #8d2323;\n\t\t\t--pitch5-primary-channel: #ff3f3f;\n\t\t\t--pitch5-secondary-note: #8d2323;\n\t\t\t--pitch5-primary-note: #ff3f3f;\n\t\t\t--pitch6-secondary-channel: #84225d;\n\t\t\t--pitch6-primary-channel: #fd3fb1;\n\t\t\t--pitch6-secondary-note: #84225d;\n\t\t\t--pitch6-primary-note: #fd3fb1;\n\t\t\t--pitch7-secondary-channel: #542780;\n\t\t\t--pitch7-primary-channel: #9C49EC;\n\t\t\t--pitch7-secondary-note: #542780;\n\t\t\t--pitch7-primary-note: #9C49EC;\n\t\t\t--pitch8-secondary-channel: #3a3898;\n\t\t\t--pitch8-primary-channel: #625FFB;\n\t\t\t--pitch8-secondary-note: #3a3898;\n\t\t\t--pitch8-primary-note: #625FFB;\n\t\t\t--pitch9-secondary-channel: #273c90;\n\t\t\t--pitch9-primary-channel: #476BFF;\n\t\t\t--pitch9-secondary-note: #273c90;\n\t\t\t--pitch9-primary-note: #476BFF;\n\t\t\t--pitch10-secondary-channel: #165a93;\n\t\t\t--pitch10-primary-channel: #299EFF;\n\t\t\t--pitch10-secondary-note: #165a93;\n\t\t\t--pitch10-primary-note: #299EFF;\n\t\t\t--noise1-secondary-channel: #4281FF;\n\t\t\t--noise1-primary-channel: #96b9ff;\n\t\t\t--noise1-secondary-note: #4281FF;\n\t\t\t--noise1-primary-note: #96b9ff;\n\t\t\t--noise2-secondary-channel: #7347FF;\n\t\t\t--noise2-primary-channel: #c3b0ff;\n\t\t\t--noise2-secondary-note: #7347FF;\n\t\t\t--noise2-primary-note: #c3b0ff;\n\t\t\t--noise3-secondary-channel: #9F3CBF;\n\t\t\t--noise3-primary-channel: #e29cf9;\n\t\t\t--noise3-secondary-note: #9F3CBF;\n\t\t\t--noise3-primary-note: #e29cf9;\n\t\t\t--noise4-secondary-channel: #D3326F;\n\t\t\t--noise4-primary-channel: #fb9bbf;\n\t\t\t--noise4-secondary-note: #D3326F;\n\t\t\t--noise4-primary-note: #fb9bbf;\n\t\t\t--noise5-secondary-channel: #FF2A2A;\n\t\t\t--noise5-primary-channel: #ffa2a2;\n\t\t\t--noise5-secondary-note: #FF2A2A;\n\t\t\t--noise5-primary-note: #ffa2a2;\n\t\t\t--mod1-secondary-channel: #47587a;\n\t\t\t--mod1-primary-channel: #96b9ff;\n\t\t\t--mod1-secondary-note: #47587a;\n\t\t\t--mod1-primary-note: #96b9ff;\n\t\t\t--mod2-secondary-channel: #716791;\n\t\t\t--mod2-primary-channel: #c3b0ff;\n\t\t\t--mod2-secondary-note: #716791;\n\t\t\t--mod2-primary-note: #c3b0ff;\n\t\t\t--mod3-secondary-channel: #6f4c7b;\n\t\t\t--mod3-primary-channel: #e29cf9;\n\t\t\t--mod3-secondary-note: #6f4c7b;\n\t\t\t--mod3-primary-note: #e29cf9;\n\t\t\t--mod4-secondary-channel: #9e6279;\n\t\t\t--mod4-primary-channel: #fb9bbf;\n\t\t\t--mod4-secondary-note: #9e6279;\n\t\t\t--mod4-primary-note: #fb9bbf;\n\t\t\t--mod-label-primary: #15111a;\n\t\t\t--mod-label-secondary-text: #cb3434;\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--disabled-note-primary: #c9c9c9;\n\t\t\t--disabled-note-secondary: #616161;\n\t\t}`,\n        \"moonlight\": `\n\t\t\t:root {\n\t\t\t--page-margin: #020514;\n\t\t\t--editor-background: #020514;\n\t\t\t--hover-preview: white;\n\t\t\t--playhead: white;\n\t\t\t--primary-text: #D4DCE9;\n\t\t\t--secondary-text: #3E87DA;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: #03599bd9;\n\t\t\t--box-selection-fill: hsl(206deg 66% 41% / 85%);\n\t\t\t--loop-accent: #639BD6;\n\t\t\t--link-accent: #A8C6E8;\n\t\t\t--ui-widget-background: #1e2940;\n\t\t\t--ui-widget-focus: #324b81;\n\t\t\t--pitch-background: #223849;\n\t\t\t--tonic: #33536c;\n\t\t\t--fifth-note: hsl(206deg 36% 16%);\n\t\t\t--white-piano-key: #c1bfe9;\n\t\t\t--black-piano-key: #454354;\n\t\t\t--white-piano-key-text: #131200;\n\t\t\t--black-piano-key-text: #fff;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #25568d80;\n\t\t\t--track-editor-bg-pitch-dim: #10253c80;\n\t\t\t--track-editor-bg-noise: #25568d80;\n\t\t\t--track-editor-bg-noise-dim: #10253c80;\n\t\t\t--track-editor-bg-mod: #25568d80;\n\t\t\t--track-editor-bg-mod-dim: #10253c80;\n\t\t\t--multiplicative-mod-slider: #0476cd;\n\t\t\t--overwriting-mod-slider: #035899;\n\t\t\t--indicator-primary: #57a1f4;\n\t\t\t--indicator-secondary: #2e5684;\n\t\t\t--select2-opt-group: #24355c;\n\t\t\t--input-box-outline: #141e34;\n\t\t\t--mute-button-normal: #6ebffc;\n\t\t\t--mute-button-mod: #0a92fa;\n\t\t\t--pitch1-secondary-channel: #47425c;\n\t\t\t--pitch1-primary-channel: #918bac;\n\t\t\t--pitch1-secondary-note: #6b6489;\n\t\t\t--pitch1-primary-note: #a8a3bf;\n\t\t\t--pitch2-secondary-channel: #626493;\n\t\t\t--pitch2-primary-channel: #bdbed3;\n\t\t\t--pitch2-secondary-note: #626493;\n\t\t\t--pitch2-primary-note: #bdbed3;\n\t\t\t--pitch3-secondary-channel: #6e89b4;\n\t\t\t--pitch3-primary-channel: #d4dce9;\n\t\t\t--pitch3-secondary-note: #6e89b4;\n\t\t\t--pitch3-primary-note: #d4dce9;\n\t\t\t--pitch4-secondary-channel: #4c77a9;\n\t\t\t--pitch4-primary-channel: #a8c6e8;\n\t\t\t--pitch4-secondary-note: #4c77a9;\n\t\t\t--pitch4-primary-note: #a8c6e8;\n\t\t\t--pitch5-secondary-channel: #314e6d;\n\t\t\t--pitch5-primary-channel: #639bd6;\n\t\t\t--pitch5-secondary-note: #46698f;\n\t\t\t--pitch5-primary-note: #639bd6;\n\t\t\t--pitch6-secondary-channel: #143d6b;\n\t\t\t--pitch6-primary-channel: #3e87da;\n\t\t\t--pitch6-secondary-note: #143d6b;\n\t\t\t--pitch6-primary-note: #3e87da;\n\t\t\t--pitch7-secondary-channel: #314e6d;\n\t\t\t--pitch7-primary-channel: #639bd6;\n\t\t\t--pitch7-secondary-note: #314e6d;\n\t\t\t--pitch7-primary-note: #639bd6;\n\t\t\t--pitch8-secondary-channel: #4c77a9;\n\t\t\t--pitch8-primary-channel: #a8c6e8;\n\t\t\t--pitch8-secondary-note: #4c77a9;\n\t\t\t--pitch8-primary-note: #a8c6e8;\n\t\t\t--pitch9-secondary-channel: #6e89b4;\n\t\t\t--pitch9-primary-channel: #d4dce9;\n\t\t\t--pitch9-secondary-note: #6e89b4;\n\t\t\t--pitch9-primary-note: #d4dce9;\n\t\t\t--pitch10-secondary-channel: #626493;\n\t\t\t--pitch10-primary-channel: #bdbed3;\n\t\t\t--pitch10-secondary-note: #626493;\n\t\t\t--pitch10-primary-note: #bdbed3;\n\t\t\t--noise1-secondary-channel: #4b4a55;\n\t\t\t--noise1-primary-channel: #9795a3;\n\t\t\t--noise1-secondary-note: #4b4a55;\n\t\t\t--noise1-primary-note: #9795a3;\n\t\t\t--noise2-secondary-channel: #858e9d;\n\t\t\t--noise2-primary-channel: #d7dce5;\n\t\t\t--noise2-secondary-note: #858e9d;\n\t\t\t--noise2-primary-note: #d7dce5;\n\t\t\t--noise3-secondary-channel: #394e65;\n\t\t\t--noise3-primary-channel: #809bb7;\n\t\t\t--noise3-secondary-note: #394e65;\n\t\t\t--noise3-primary-note: #809bb7;\n\t\t\t--noise4-secondary-channel: #37577b;\n\t\t\t--noise4-primary-channel: #6189b8;\n\t\t\t--noise4-secondary-note: #37577b;\n\t\t\t--noise4-primary-note: #6189b8;\n\t\t\t--noise5-secondary-channel: #223849;\n\t\t\t--noise5-primary-channel: #5588af;\n\t\t\t--noise5-secondary-note: #223849;\n\t\t\t--noise5-primary-note: #5588af;\n\t\t\t--mod1-secondary-channel: #3e336c;\n\t\t\t--mod1-primary-channel: #6d60a4;\n\t\t\t--mod1-secondary-note: #3e336c;\n\t\t\t--mod1-primary-note: #6d60a4;\n\t\t\t--mod2-secondary-channel: #716791;\n\t\t\t--mod2-primary-channel: #bdbed3;\n\t\t\t--mod2-secondary-note: #716791;\n\t\t\t--mod2-primary-note: #bdbed3;\n\t\t\t--mod3-secondary-channel: #6b91bd;\n\t\t\t--mod3-primary-channel: #4b8fdd;\n\t\t\t--mod3-secondary-note: #597ca7;\n\t\t\t--mod3-primary-note: #7eade3;\n\t\t\t--mod4-secondary-channel: #14559f;\n\t\t\t--mod4-primary-channel: #3386e6;\n\t\t\t--mod4-secondary-note: #14559f;\n\t\t\t--mod4-primary-note: #3386e6;\n\t\t\t--mod-label-primary: #1e2940;\n\t\t\t--mod-label-secondary-text: #748ebe;\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--disabled-note-primary: #828282;\n\t\t\t--disabled-note-secondary: #4f4f4f;\n\t\t\t}`,\n        \"autumn\": `\n\t\t:root {\n\t\t\t--page-margin: #060304;\n\t\t\t--editor-background: #060304;\n\t\t\t--hover-preview: white;\n\t\t\t--playhead: white;\n\t\t\t--primary-text: white;\n\t\t\t--secondary-text: #999;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: rgb(115 80 76);\n\t\t\t--box-selection-fill: rgb(174 73 81 / 45%);\n\t\t\t--loop-accent: #834A69;\n\t\t\t--link-accent: #98f;\n\t\t\t--ui-widget-background: #2a2523;\n\t\t\t--ui-widget-focus: #4e4c44;\n\t\t\t--pitch-background: #121212;\n\t\t\t--tonic: #4f4f4f;\n\t\t\t--fifth-note: #222;\n\t\t\t--white-piano-key: #b59b9b;\n\t\t\t--black-piano-key: #231e1e;\n\t\t\t--white-piano-key-text: #131200;\n\t\t\t--black-piano-key-text: #fff;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #352f38;\n\t\t\t--track-editor-bg-pitch-dim: #232025;\n\t\t\t--track-editor-bg-noise: #3c3029;\n\t\t\t--track-editor-bg-noise-dim: #251d19;\n\t\t\t--track-editor-bg-mod: #202623;\n\t\t\t--track-editor-bg-mod-dim: #131715;\n\t\t\t--multiplicative-mod-slider: #D9D16E;\n\t\t\t--overwriting-mod-slider: #2D826F;\n\t\t\t--indicator-primary: #D9D16E;\n\t\t\t--indicator-secondary: #444226;\n\t\t\t--select2-opt-group: #20191c;\n\t\t\t--input-box-outline: #20191c;\n\t\t\t--mute-button-normal: var(--pitch2-primary-channel);\n\t\t\t--mute-button-mod: var(--pitch4-primary-channel);\n\t\t\t--pitch1-secondary-channel: #704a34;\n\t\t\t--pitch1-primary-channel: #D9895A;\n\t\t\t--pitch1-secondary-note: #704a34;\n\t\t\t--pitch1-primary-note: #D9895A;\n\t\t\t--pitch2-secondary-channel: #5f3538;\n\t\t\t--pitch2-primary-channel: #AE4951;\n\t\t\t--pitch2-secondary-note: #5f3538;\n\t\t\t--pitch2-primary-note: #AE4951;\n\t\t\t--pitch3-secondary-channel: #5c4336;\n\t\t\t--pitch3-primary-channel: #CA9A81;\n\t\t\t--pitch3-secondary-note: #5c4336;\n\t\t\t--pitch3-primary-note: #CA9A81;\n\t\t\t--pitch4-secondary-channel: #1d3143;\n\t\t\t--pitch4-primary-channel: #386995;\n\t\t\t--pitch4-secondary-note: #1d3143;\n\t\t\t--pitch4-primary-note: #386995;\n\t\t\t--pitch5-secondary-channel: #9c8a58;\n\t\t\t--pitch5-primary-channel: #D9D16E;\n\t\t\t--pitch5-secondary-note: #7c783f;\n\t\t\t--pitch5-primary-note: #D9D16E;\n\t\t\t--pitch6-secondary-channel: #886562;\n\t\t\t--pitch6-primary-channel: #D3A9A5;\n\t\t\t--pitch6-secondary-note: #886562;\n\t\t\t--pitch6-primary-note: #D3A9A5;\n\t\t\t--pitch7-secondary-channel: #1c3f37;\n\t\t\t--pitch7-primary-channel: #2D826F;\n\t\t\t--pitch7-secondary-note: #1c3f37;\n\t\t\t--pitch7-primary-note: #2D826F;\n\t\t\t--pitch8-secondary-channel: #442e2d;\n\t\t\t--pitch8-primary-channel: #815150;\n\t\t\t--pitch8-secondary-note: #442e2d;\n\t\t\t--pitch8-primary-note: #815150;\n\t\t\t--pitch9-secondary-channel: #8e6f60;\n\t\t\t--pitch9-primary-channel: #E5B8A1;\n\t\t\t--pitch9-secondary-note: #8e6f60;\n\t\t\t--pitch9-primary-note: #E5B8A1;\n\t\t\t--pitch10-secondary-channel: #4f3142;\n\t\t\t--pitch10-primary-channel: #834A69;\n\t\t\t--pitch10-secondary-note: #4f3142;\n\t\t\t--pitch10-primary-note: #834A69;\n\t\t\t--noise1-secondary-channel: #6b5346;\n\t\t\t--noise1-primary-channel: #b99c89;\n\t\t\t--noise1-secondary-note: #6b5346;\n\t\t\t--noise1-primary-note: #F0D0BB;\n\t\t\t--noise2-secondary-channel: #4a3839;\n\t\t\t--noise2-primary-channel: #9c6b6e;\n\t\t\t--noise2-secondary-note: #4a3839;\n\t\t\t--noise2-primary-note: #c18b8f;\n\t\t\t--noise3-secondary-channel: #2d3c4a;\n\t\t\t--noise3-primary-channel: #536e86;\n\t\t\t--noise3-secondary-note: #2d3c4a;\n\t\t\t--noise3-primary-note: #8fa8c0;\n\t\t\t--noise4-secondary-channel: #273f3a;\n\t\t\t--noise4-primary-channel: #4e8377;\n\t\t\t--noise4-secondary-note: #273f3a;\n\t\t\t--noise4-primary-note: #87baae;\n\t\t\t--noise5-secondary-channel: #372730;\n\t\t\t--noise5-primary-channel: #7f5e70;\n\t\t\t--noise5-secondary-note: #372730;\n\t\t\t--noise5-primary-note: #cc96b3;\n\t\t\t--mod1-secondary-channel: #783f1f;\n\t\t\t--mod1-primary-channel: #dc6d2c;\n\t\t\t--mod1-secondary-note: #783f1f;\n\t\t\t--mod1-primary-note: #dc6d2c;\n\t\t\t--mod2-secondary-channel: #0b3153;\n\t\t\t--mod2-primary-channel: #1464ac;\n\t\t\t--mod2-secondary-note: #0b3153;\n\t\t\t--mod2-primary-note: #1464ac;\n\t\t\t--mod3-secondary-channel: #075040;\n\t\t\t--mod3-primary-channel: #08a17f;\n\t\t\t--mod3-secondary-note: #075040;\n\t\t\t--mod3-primary-note: #08a17f;\n\t\t\t--mod4-secondary-channel: #631640;\n\t\t\t--mod4-primary-channel: #b4186d;\n\t\t\t--mod4-secondary-note: #631640;\n\t\t\t--mod4-primary-note: #b4186d;\n\t\t\t--mod-label-primary: #000;\n\t\t\t--mod-label-secondary-text: #707070;\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--disabled-note-primary: #5d5d5d;\n\t\t\t--disabled-note-secondary: #292929;\n\t\t}`,\n        \"fruit\": `\n\t\t:root {\n\t\t\t--page-margin: #040507;\n\t\t\t--editor-background: #040507;\n\t\t\t--hover-preview: white;\n\t\t\t--playhead: white;\n\t\t\t--primary-text: white;\n\t\t\t--secondary-text: #999;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: rgb(115 103 76);\n\t\t\t--box-selection-fill: rgb(174 109 73 / 45%);\n\t\t\t--loop-accent: #EC897D;\n\t\t\t--link-accent: #FDE484;\n\t\t\t--ui-widget-background: #22222c;\n\t\t\t--ui-widget-focus: #39394c;\n\t\t\t--pitch-background: #101010;\n\t\t\t--tonic: #2c2d34;\n\t\t\t--fifth-note: #191a20;\n\t\t\t--white-piano-key: #bbbaba;\n\t\t\t--black-piano-key: #2d2d2d;\n\t\t\t--white-piano-key-text: #131200;\n\t\t\t--black-piano-key-text: #fff;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #2b2d40;\n\t\t\t--track-editor-bg-pitch-dim: #191a25;\n\t\t\t--track-editor-bg-noise: #3c3644;\n\t\t\t--track-editor-bg-noise-dim: #26222b;\n\t\t\t--track-editor-bg-mod: #322a2a;\n\t\t\t--track-editor-bg-mod-dim: #191515;\n\t\t\t--multiplicative-mod-slider: #977da9;\n\t\t\t--overwriting-mod-slider: #798FA7;\n\t\t\t--indicator-primary: #EAAC9D;\n\t\t\t--indicator-secondary: #5e413a;\n\t\t\t--select2-opt-group: #191920;\n\t\t\t--input-box-outline: #191920;\n\t\t\t--mute-button-normal: #798FA7;\n\t\t\t--mute-button-mod: #354457;\n\t\t\t--pitch1-secondary-channel: #91655a;\n\t\t\t--pitch1-primary-channel: #EAAC9D;\n\t\t\t--pitch1-secondary-note: #91655a;\n\t\t\t--pitch1-primary-note: #EAAC9D;\n\t\t\t--pitch2-secondary-channel: #8f6513;\n\t\t\t--pitch2-primary-channel: #FFAF12;\n\t\t\t--pitch2-secondary-note: #8f6513;\n\t\t\t--pitch2-primary-note: #FFAF12;\n\t\t\t--pitch3-secondary-channel: #212f46;\n\t\t\t--pitch3-primary-channel: #34558B;\n\t\t\t--pitch3-secondary-note: #212f46;\n\t\t\t--pitch3-primary-note: #34558B;\n\t\t\t--pitch4-secondary-channel: #2e6b5b;\n\t\t\t--pitch4-primary-channel: #4EC5A7;\n\t\t\t--pitch4-secondary-note: #2e6b5b;\n\t\t\t--pitch4-primary-note: #4EC5A7;\n\t\t\t--pitch5-secondary-channel: #555D46;\n\t\t\t--pitch5-primary-channel: #aabf84;\n\t\t\t--pitch5-secondary-note: #555D46;\n\t\t\t--pitch5-primary-note: #aabf84;\n\t\t\t--pitch6-secondary-channel: #A2553B;\n\t\t\t--pitch6-primary-channel: #e59a81;\n\t\t\t--pitch6-secondary-note: #A2553B;\n\t\t\t--pitch6-primary-note: #e59a81;\n\t\t\t--pitch7-secondary-channel: #7b4021;\n\t\t\t--pitch7-primary-channel: #FE813E;\n\t\t\t--pitch7-secondary-note: #7b4021;\n\t\t\t--pitch7-primary-note: #FE813E;\n\t\t\t--pitch8-secondary-channel: #847753;\n\t\t\t--pitch8-primary-channel: #EFDAA3;\n\t\t\t--pitch8-secondary-note: #847753;\n\t\t\t--pitch8-primary-note: #EFDAA3;\n\t\t\t--pitch9-secondary-channel: #2c3642;\n\t\t\t--pitch9-primary-channel: #798FA7;\n\t\t\t--pitch9-secondary-note: #2c3642;\n\t\t\t--pitch9-primary-note: #798FA7;\n\t\t\t--pitch10-secondary-channel: #0d4453;\n\t\t\t--pitch10-primary-channel: #107895;\n\t\t\t--pitch10-secondary-note: #0d4453;\n\t\t\t--pitch10-primary-note: #107895;\n\t\t\t--noise1-secondary-channel: #71617C;\n\t\t\t--noise1-primary-channel: #977da9;\n\t\t\t--noise1-secondary-note: #71617C;\n\t\t\t--noise1-primary-note: #977da9;\n\t\t\t--noise2-secondary-channel: #3B3D4A;\n\t\t\t--noise2-primary-channel: #707591;\n\t\t\t--noise2-secondary-note: #3B3D4A;\n\t\t\t--noise2-primary-note: #707591;\n\t\t\t--noise3-secondary-channel: #625f5e;\n\t\t\t--noise3-primary-channel: #A19D9C;\n\t\t\t--noise3-secondary-note: #625f5e;\n\t\t\t--noise3-primary-note: #A19D9C;\n\t\t\t--noise4-secondary-channel: #ab847b;\n\t\t\t--noise4-primary-channel: #EAAC9D;\n\t\t\t--noise4-secondary-note: #ab847b;\n\t\t\t--noise4-primary-note: #EAAC9D;\n\t\t\t--noise5-secondary-channel: #B49D74;\n\t\t\t--noise5-primary-channel: #dec69b;\n\t\t\t--noise5-secondary-note: #B49D74;\n\t\t\t--noise5-primary-note: #dec69b;\n\t\t\t--mod1-secondary-channel: #722124;\n\t\t\t--mod1-primary-channel: #D13A41;\n\t\t\t--mod1-secondary-note: #722124;\n\t\t\t--mod1-primary-note: #D13A41;\n\t\t\t--mod2-secondary-channel: #213657;\n\t\t\t--mod2-primary-channel: #34558B;\n\t\t\t--mod2-secondary-note: #213657;\n\t\t\t--mod2-primary-note: #34558B;\n\t\t\t--mod3-secondary-channel: #555D46;\n\t\t\t--mod3-primary-channel: #848f6d;\n\t\t\t--mod3-secondary-note: #555D46;\n\t\t\t--mod3-primary-note: #848f6d;\n\t\t\t--mod4-secondary-channel: #71617C;\n\t\t\t--mod4-primary-channel: #a68ab9;\n\t\t\t--mod4-secondary-note: #71617C;\n\t\t\t--mod4-primary-note: #a68ab9;\n\t\t\t--mod-label-primary: #282828;\n\t\t\t--mod-label-secondary-text: #707070;\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--disabled-note-primary: #5d5d5d;\n\t\t\t--disabled-note-secondary: #292929;\n\t\t}`,\n        \"sunset\": `\n\t\t:root {\n\t\t\t--page-margin: #040300;\n\t\t\t--editor-background: #040300;\n\t\t\t--hover-preview: white;\n\t\t\t--playhead: white;\n\t\t\t--primary-text: white;\n\t\t\t--secondary-text: #999;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: rgb(94 0 157);\n\t\t\t--box-selection-fill: rgb(174 173 73 / 45%);\n\t\t\t--loop-accent: #EC897D;\n\t\t\t--link-accent: #FDE484;\n\t\t\t--ui-widget-background: #241b24;\n\t\t\t--ui-widget-focus: #3a2e39;\n\t\t\t--pitch-background: #141414;\n\t\t\t--tonic: #2C212B;\n\t\t\t--fifth-note: #2E2A15;\n\t\t\t--white-piano-key: #bbbaba;\n\t\t\t--black-piano-key: #2d2d2d;\n\t\t\t--white-piano-key-text: #131200;\n\t\t\t--black-piano-key-text: #fff;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #2d2e42;\n\t\t\t--track-editor-bg-pitch-dim: #191a25;\n\t\t\t--track-editor-bg-noise: #393340;\n\t\t\t--track-editor-bg-noise-dim: #26222b;\n\t\t\t--track-editor-bg-mod: #232a2c;\n\t\t\t--track-editor-bg-mod-dim: #151819;\n\t\t\t--multiplicative-mod-slider: #977da9;\n\t\t\t--overwriting-mod-slider: #798FA7;\n\t\t\t--indicator-primary: #F28891;\n\t\t\t--indicator-secondary: #601d23;\n\t\t\t--select2-opt-group: #151015;\n\t\t\t--input-box-outline: #151015;\n\t\t\t--mute-button-normal: #E4739D;\n\t\t\t--mute-button-mod: #9650A6;\n\t\t\t--pitch1-secondary-channel: #7F7721;\n\t\t\t--pitch1-primary-channel: #F3E79A;\n\t\t\t--pitch1-secondary-note: #7F7721;\n\t\t\t--pitch1-primary-note: #F3E79A;\n\t\t\t--pitch2-secondary-channel: #785E20;\n\t\t\t--pitch2-primary-channel: #F7D086;\n\t\t\t--pitch2-secondary-note: #785E20;\n\t\t\t--pitch2-primary-note: #F7D086;\n\t\t\t--pitch3-secondary-channel: #6E4219;\n\t\t\t--pitch3-primary-channel: #F9B881;\n\t\t\t--pitch3-secondary-note: #6E4219;\n\t\t\t--pitch3-primary-note: #F9B881;\n\t\t\t--pitch4-secondary-channel: #79351F;\n\t\t\t--pitch4-primary-channel: #F7A086;\n\t\t\t--pitch4-secondary-note: #79351F;\n\t\t\t--pitch4-primary-note: #F7A086;\n\t\t\t--pitch5-secondary-channel: #81272F;\n\t\t\t--pitch5-primary-channel: #F28891;\n\t\t\t--pitch5-secondary-note: #81272F;\n\t\t\t--pitch5-primary-note: #F28891;\n\t\t\t--pitch6-secondary-channel: #8F224D;\n\t\t\t--pitch6-primary-channel: #E4739D;\n\t\t\t--pitch6-secondary-note: #8F224D;\n\t\t\t--pitch6-primary-note: #E4739D;\n\t\t\t--pitch7-secondary-channel: #611548;\n\t\t\t--pitch7-primary-channel: #CF63A6;\n\t\t\t--pitch7-secondary-note: #611548;\n\t\t\t--pitch7-primary-note: #CF63A6;\n\t\t\t--pitch8-secondary-channel: #561253;\n\t\t\t--pitch8-primary-channel: #B557A9;\n\t\t\t--pitch8-secondary-note: #4D104A;\n\t\t\t--pitch8-primary-note: #B557A9;\n\t\t\t--pitch9-secondary-channel: #4c1260;\n\t\t\t--pitch9-primary-channel: #9650A6;\n\t\t\t--pitch9-secondary-note: #3C0F4C;\n\t\t\t--pitch9-primary-note: #9650A6;\n\t\t\t--pitch10-secondary-channel: #3e1d78;\n\t\t\t--pitch10-primary-channel: #704D9E;\n\t\t\t--pitch10-secondary-note: #27124C;\n\t\t\t--pitch10-primary-note: #704D9E;\n\t\t\t--noise1-secondary-channel: #A7A578;\n\t\t\t--noise1-primary-channel: #EFE9AC;\n\t\t\t--noise1-secondary-note: #A7A578;\n\t\t\t--noise1-primary-note: #EFE9AC;\n\t\t\t--noise2-secondary-channel: #947A5F;\n\t\t\t--noise2-primary-channel: #FBCEA8;\n\t\t\t--noise2-secondary-note: #947A5F;\n\t\t\t--noise2-primary-note: #FBCEA8;\n\t\t\t--noise3-secondary-channel: #A3635D;\n\t\t\t--noise3-primary-channel: #F4A5AB;\n\t\t\t--noise3-secondary-note: #A3635D;\n\t\t\t--noise3-primary-note: #F4A5AB;\n\t\t\t--noise4-secondary-channel: #724D60;\n\t\t\t--noise4-primary-channel: #CD90B6;\n\t\t\t--noise4-secondary-note: #724D60;\n\t\t\t--noise4-primary-note: #CD90B6;\n\t\t\t--noise5-secondary-channel: #503F5C;\n\t\t\t--noise5-primary-channel: #7C6A9E;\n\t\t\t--noise5-secondary-note: #503F5C;\n\t\t\t--noise5-primary-note: #7C6A9E;\n\t\t\t--mod1-secondary-channel: #371883;\n\t\t\t--mod1-primary-channel: #6416C6;\n\t\t\t--mod1-secondary-note: #1F0A52;\n\t\t\t--mod1-primary-note: #6416C6;\n\t\t\t--mod2-secondary-channel: #690645;\n\t\t\t--mod2-primary-channel: #E52FA2;\n\t\t\t--mod2-secondary-note: #690645;\n\t\t\t--mod2-primary-note: #E52FA2;\n\t\t\t--mod3-secondary-channel: #943618;\n\t\t\t--mod3-primary-channel: #eb5b2c;\n\t\t\t--mod3-secondary-note: #943618;\n\t\t\t--mod3-primary-note: #eb5b2c;\n\t\t\t--mod4-secondary-channel: #928409;\n\t\t\t--mod4-primary-channel: #ecd50e;\n\t\t\t--mod4-secondary-note: #928409;\n\t\t\t--mod4-primary-note: #ecd50e;\n\t\t\t--mod-label-primary: #282828;\n\t\t\t--mod-label-secondary-text: #707070;\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--disabled-note-primary: #5d5d5d;\n\t\t\t--disabled-note-secondary: #292929;\n\t\t}`,\n        \"toxic\": `\n\t\t:root {\n\t\t\t--page-margin: #010003;\n\t\t\t--editor-background: #010003;\n\t\t\t--hover-preview: white;\n\t\t\t--playhead: white;\n\t\t\t--primary-text: white;\n\t\t\t--secondary-text: #999;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: rgb(147 195 0);\n\t\t\t--box-selection-fill: rgb(145 174 73 / 49%);\n\t\t\t--loop-accent: #BCDE2C;\n\t\t\t--link-accent: #edff9f;\n\t\t\t--ui-widget-background: #261e2e;\n\t\t\t--ui-widget-focus: #322042;\n\t\t\t--pitch-background: #141c15;\n\t\t\t--tonic: #282c21;\n\t\t\t--fifth-note: #18221a;\n\t\t\t--white-piano-key: #e3e3e3;\n\t\t\t--black-piano-key: #2d2d2d;\n\t\t\t--white-piano-key-text: #131200;\n\t\t\t--black-piano-key-text: #fff;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #38293e;\n\t\t\t--track-editor-bg-pitch-dim: #251c29;\n\t\t\t--track-editor-bg-noise: #2c304c;\n\t\t\t--track-editor-bg-noise-dim: #191b2b;\n\t\t\t--track-editor-bg-mod: #311b32;\n\t\t\t--track-editor-bg-mod-dim: #1d101e;\n\t\t\t--multiplicative-mod-slider: #977da9;\n\t\t\t--overwriting-mod-slider: #798FA7;\n\t\t\t--indicator-primary: #aae9ff;\n\t\t\t--indicator-secondary: #253e46;\n\t\t\t--select2-opt-group: #110d15;\n\t\t\t--input-box-outline: #110d15;\n\t\t\t--mute-button-normal: #8f5ad1;\n\t\t\t--mute-button-mod: #482574;\n\t\t\t--pitch1-secondary-channel: #6b7f19;\n\t\t\t--pitch1-primary-channel: #BCDE2C;\n\t\t\t--pitch1-secondary-note: #6b7f19;\n\t\t\t--pitch1-primary-note: #BCDE2C;\n\t\t\t--pitch2-secondary-channel: #497a31;\n\t\t\t--pitch2-primary-channel: #7BD152;\n\t\t\t--pitch2-secondary-note: #497a31;\n\t\t\t--pitch2-primary-note: #7BD152;\n\t\t\t--pitch3-secondary-channel: #286b40;\n\t\t\t--pitch3-primary-channel: #45BE71;\n\t\t\t--pitch3-secondary-note: #286b40;\n\t\t\t--pitch3-primary-note: #45BE71;\n\t\t\t--pitch4-secondary-channel: #125140;\n\t\t\t--pitch4-primary-channel: #25A884;\n\t\t\t--pitch4-secondary-note: #125140;\n\t\t\t--pitch4-primary-note: #25A884;\n\t\t\t--pitch5-secondary-channel: #114c49;\n\t\t\t--pitch5-primary-channel: #21908C;\n\t\t\t--pitch5-secondary-note: #114c49;\n\t\t\t--pitch5-primary-note: #21908C;\n\t\t\t--pitch6-secondary-channel: #143843;\n\t\t\t--pitch6-primary-channel: #2B788E;\n\t\t\t--pitch6-secondary-note: #143843;\n\t\t\t--pitch6-primary-note: #2B788E;\n\t\t\t--pitch7-secondary-channel: #1d354e;\n\t\t\t--pitch7-primary-channel: #355F8D;\n\t\t\t--pitch7-secondary-note: #1a2f46;\n\t\t\t--pitch7-primary-note: #355F8D;\n\t\t\t--pitch8-secondary-channel: #2c2e5a;\n\t\t\t--pitch8-primary-channel: #414486;\n\t\t\t--pitch8-secondary-note: #1e1f3d;\n\t\t\t--pitch8-primary-note: #414486;\n\t\t\t--pitch9-secondary-channel: #3c1f5e;\n\t\t\t--pitch9-primary-channel: #5e3b89;\n\t\t\t--pitch9-secondary-note: #25133b;\n\t\t\t--pitch9-primary-note: #5e3b89;\n\t\t\t--pitch10-secondary-channel: #510264;\n\t\t\t--pitch10-primary-channel: #720d8a;\n\t\t\t--pitch10-secondary-note: #440154;\n\t\t\t--pitch10-primary-note: #720d8a;\n\t\t\t--noise1-secondary-channel: #BCDE2C;\n\t\t\t--noise1-primary-channel: #edff9f;\n\t\t\t--noise1-secondary-note: #BCDE2C;\n\t\t\t--noise1-primary-note: #edff9f;\n\t\t\t--noise2-secondary-channel: #45BE71;\n\t\t\t--noise2-primary-channel: #89ffb4;\n\t\t\t--noise2-secondary-note: #45BE71;\n\t\t\t--noise2-primary-note: #89ffb4;\n\t\t\t--noise3-secondary-channel: #21908C;\n\t\t\t--noise3-primary-channel: #72fffa;\n\t\t\t--noise3-secondary-note: #21908C;\n\t\t\t--noise3-primary-note: #72fffa;\n\t\t\t--noise4-secondary-channel: #355F8D;\n\t\t\t--noise4-primary-channel: #7cb6f5;\n\t\t\t--noise4-secondary-note: #355F8D;\n\t\t\t--noise4-primary-note: #7cb6f5;\n\t\t\t--noise5-secondary-channel: #482574;\n\t\t\t--noise5-primary-channel: #8f5ad1;\n\t\t\t--noise5-secondary-note: #48257A;\n\t\t\t--noise5-primary-note: #8f5ad1;\n\t\t\t--mod1-secondary-channel: #815a16;\n\t\t\t--mod1-primary-channel: #F5AB29;\n\t\t\t--mod1-secondary-note: #815a16;\n\t\t\t--mod1-primary-note: #F5AB29;\n\t\t\t--mod2-secondary-channel: #4d341a;\n\t\t\t--mod2-primary-channel: #C98540;\n\t\t\t--mod2-secondary-note: #4d341a;\n\t\t\t--mod2-primary-note: #C98540;\n\t\t\t--mod3-secondary-channel: #643734;\n\t\t\t--mod3-primary-channel: #A75D58;\n\t\t\t--mod3-secondary-note: #643734;\n\t\t\t--mod3-primary-note: #A75D58;\n\t\t\t--mod4-secondary-channel: #461430;\n\t\t\t--mod4-primary-channel: #812359;\n\t\t\t--mod4-secondary-note: #3f112b;\n\t\t\t--mod4-primary-note: #812359;\n\t\t\t--mod-label-primary: #282828;\n\t\t\t--mod-label-secondary-text: #707070;\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--disabled-note-primary: #5d5d5d;\n\t\t\t--disabled-note-secondary: #292929;\n\t\t}`,\n        \"violet verdant\": `\n\t\t:root {\n\t\t\t--page-margin: #0e031a;\n\t\t\t--editor-background: #0e031a;\n\t\t\t--hover-preview: #e5ffea;\n\t\t\t--playhead: rgba(255, 255, 255, 0.9);\n\t\t\t--primary-text: #f0e0ff;\n\t\t\t--secondary-text: #706087;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t--box-selection-fill: #225835;\n\t\t\t--loop-accent: #8f00fb;\n\t\t\t--link-accent: #82dd5d;\n\t\t\t--ui-widget-background: #303c66;\n\t\t\t--ui-widget-focus: #62559b;\n\t\t\t--pitch-background: #293b52;\n\t\t\t--tonic: #5b46ad;\n\t\t\t--fifth-note: #42604d;\n\t\t\t--white-piano-key: #f6e8ff;\n\t\t\t--black-piano-key: #5a4972;\n\t\t\t--white-piano-key-text: #131200;\n\t\t\t--black-piano-key-text: #fff;\n\t\t\t--use-color-formula: true;\n\t\t\t--track-editor-bg-pitch: #392a46;\n\t\t\t--track-editor-bg-pitch-dim: #1c1d28;\n\t\t\t--track-editor-bg-noise: #403150;\n\t\t\t--track-editor-bg-noise-dim: #161313;\n\t\t\t--track-editor-bg-mod: #253c25;\n\t\t\t--track-editor-bg-mod-dim: #0c1811;\n\t\t\t--multiplicative-mod-slider: #606c9f;\n\t\t\t--overwriting-mod-slider: #6850b5;\n\t\t\t--indicator-primary: #9c64f7;\n\t\t\t--indicator-secondary: #393e4f;\n\t\t\t--select2-opt-group: #5d576f;\n\t\t\t--input-box-outline: #403150;\n\t\t\t--mute-button-normal: #82dd5d;\n\t\t\t--mute-button-mod: #945de5;\n\t\t\t--mod-label-primary: #312840;\n\t\t\t--mod-label-secondary-text: rgb(88 70 104);\n\t\t\t--mod-label-primary-text: #82dd5d;\n\t\t\t--pitch-secondary-channel-hue: 64;\n\t\t\t--pitch-secondary-channel-hue-scale: 6.1;\n\t\t\t--pitch-secondary-channel-sat: 63.3;\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t--pitch-secondary-channel-lum: 40;\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\n\t\t\t--pitch-primary-channel-hue: 64;\n\t\t\t--pitch-primary-channel-hue-scale: 6.1;\n\t\t\t--pitch-primary-channel-sat: 90;\n\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t--pitch-primary-channel-lum: 67.5;\n\t\t\t--pitch-primary-channel-lum-scale: 0.05;\n\t\t\t--pitch-secondary-note-hue: 32;\n\t\t\t--pitch-secondary-note-hue-scale: 6.1;\n\t\t\t--pitch-secondary-note-sat: 87.9;\n\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t--pitch-secondary-note-lum: 25;\n\t\t\t--pitch-secondary-note-lum-scale: 0.05;\n\t\t\t--pitch-primary-note-hue: 64;\n\t\t\t--pitch-primary-note-hue-scale: 6.1;\n\t\t\t--pitch-primary-note-sat: 90;\n\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t--pitch-primary-note-lum: 85.6;\n\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t--noise-secondary-channel-hue: 192;\n\t\t\t--noise-secondary-channel-hue-scale: 2;\n\t\t\t--noise-secondary-channel-sat: 45;\n\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t--noise-secondary-channel-lum: 32;\n\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t--noise-primary-channel-hue: 192;\n\t\t\t--noise-primary-channel-hue-scale: 2;\n\t\t\t--noise-primary-channel-sat: 33;\n\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t--noise-primary-channel-lum: 43.5;\n\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t--noise-secondary-note-hue: 160;\n\t\t\t--noise-secondary-note-hue-scale: 2;\n\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t--noise-secondary-note-lum: 45;\n\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t--noise-primary-note-hue: 192;\n\t\t\t--noise-primary-note-hue-scale: 2;\n\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t--noise-primary-note-lum: 74;\n\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t--mod-secondary-channel-hue: 132;\n\t\t\t--mod-secondary-channel-hue-scale: 1.5;\n\t\t\t--mod-secondary-channel-sat: 88;\n\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t--mod-secondary-channel-lum: 50;\n\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t--mod-primary-channel-hue: 132;\n\t\t\t--mod-primary-channel-hue-scale: 1.5;\n\t\t\t--mod-primary-channel-sat: 96;\n\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t--mod-secondary-note-hue: 100;\n\t\t\t--mod-secondary-note-hue-scale: 1.5;\n\t\t\t--mod-secondary-note-sat: 92;\n\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t--mod-secondary-note-lum: 45;\n\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t--mod-primary-note-hue: 132;\n\t\t\t--mod-primary-note-hue-scale: 1.5;\n\t\t\t--mod-primary-note-sat: 96;\n\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t--mod-primary-note-lum: 85;\n\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t--disabled-note-primary: #91879f;\n\t\t\t--disabled-note-secondary: #6a677a;\n\t\t}`,\n        \"portal\": `\n\t\t:root {\n\t\t\t--page-margin: #04081a;\n\t\t\t--editor-background: #04081a;\n\t\t\t--hover-preview: white;\n\t\t\t--playhead: white;\n\t\t\t--primary-text: white;\n\t\t\t--secondary-text: #999;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t--box-selection-fill: rgb(0 72 181);\n\t\t\t--loop-accent: #44d4ff;\n\t\t\t--link-accent: #ffa500;\n\t\t\t--ui-widget-background: #212c4a;\n\t\t\t--ui-widget-focus: #121f42;\n\t\t\t--pitch-background: #1b263e;\n\t\t\t--tonic: #995d00;\n\t\t\t--fifth-note: #0898a1;\n\t\t\t--white-piano-key: #ffffff;\n\t\t\t--black-piano-key: #516d7a;\n\t\t\t--white-piano-key-text: #131200;\n\t\t\t--black-piano-key-text: #fff;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #213352;\n\t\t\t--track-editor-bg-pitch-dim: #152032;\n\t\t\t--track-editor-bg-noise: #403524;\n\t\t\t--track-editor-bg-noise-dim: #2a1f0e;\n\t\t\t--track-editor-bg-mod: #234;\n\t\t\t--track-editor-bg-mod-dim: #123;\n\t\t\t--multiplicative-mod-slider: #456;\n\t\t\t--overwriting-mod-slider: #654;\n\t\t\t--indicator-primary: #5490ff;\n\t\t\t--indicator-secondary: #444;\n\t\t\t--select2-opt-group: #585858;\n\t\t\t--input-box-outline: #333;\n\t\t\t--mute-button-normal: #3372ff;\n\t\t\t--mute-button-mod: #dd872f;\n\t\t\t--pitch1-secondary-channel: #0099A1;\n\t\t\t--pitch1-primary-channel: #77f7ff;\n\t\t\t--pitch1-secondary-note: #00BDC7;\n\t\t\t--pitch1-primary-note: #92F9FF;\n\t\t\t--pitch2-secondary-channel: #0083a1;\n\t\t\t--pitch2-primary-channel: #35d9ff;\n\t\t\t--pitch2-secondary-note: #0083a1;\n\t\t\t--pitch2-primary-note: #a4eeff;\n\t\t\t--pitch3-secondary-channel: #0074c7;\n\t\t\t--pitch3-primary-channel: #3caeff;\n\t\t\t--pitch3-secondary-note: #00477a;\n\t\t\t--pitch3-primary-note: #aadcff;\n\t\t\t--pitch4-secondary-channel: #0039a1;\n\t\t\t--pitch4-primary-channel: #2673ff;\n\t\t\t--pitch4-secondary-note: #001f56;\n\t\t\t--pitch4-primary-note: #9bbeff;\n\t\t\t--pitch5-secondary-channel: #31148b;\n\t\t\t--pitch5-primary-channel: #7042ff;\n\t\t\t--pitch5-secondary-note: #190656;\n\t\t\t--pitch5-primary-note: #b79fff;\n\t\t\t--pitch6-secondary-channel: #979934;\n\t\t\t--pitch6-primary-channel: #fbff2f;\n\t\t\t--pitch6-secondary-note: #5d5e0a;\n\t\t\t--pitch6-primary-note: #fdff9a;\n\t\t\t--pitch7-secondary-channel: #b78f00;\n\t\t\t--pitch7-primary-channel: #ffd747;\n\t\t\t--pitch7-secondary-note: #5e3d00;\n\t\t\t--pitch7-primary-note: #ffe381;\n\t\t\t--pitch8-secondary-channel: #9d6500;\n\t\t\t--pitch8-primary-channel: #ffa400;\n\t\t\t--pitch8-secondary-note: #583900;\n\t\t\t--pitch8-primary-note: #ffd07c;\n\t\t\t--pitch9-secondary-channel: #744203;\n\t\t\t--pitch9-primary-channel: #ff8e00;\n\t\t\t--pitch9-secondary-note: #502d00;\n\t\t\t--pitch9-primary-note: #ffcb89;\n\t\t\t--pitch10-secondary-channel: #a32d00;\n\t\t\t--pitch10-primary-channel: #ff885b;\n\t\t\t--pitch10-secondary-note: #521700;\n\t\t\t--pitch10-primary-note: #ffb397;\n\t\t\t--noise1-secondary-channel: #6e2210;\n\t\t\t--noise1-primary-channel: #ff4600;\n\t\t\t--noise1-secondary-note: #4c1a08;\n\t\t\t--noise1-primary-note: #ffc9b4;\n\t\t\t--noise2-secondary-channel: #6a3110;\n\t\t\t--noise2-primary-channel: #ff782a;\n\t\t\t--noise2-secondary-note: #4c1f05;\n\t\t\t--noise2-primary-note: #ffb488;\n\t\t\t--noise3-secondary-channel: #72460e;\n\t\t\t--noise3-primary-channel: #d9871f;\n\t\t\t--noise3-secondary-note: #442905;\n\t\t\t--noise3-primary-note: #ffdcae;\n\t\t\t--noise4-secondary-channel: #837a0f;\n\t\t\t--noise4-primary-channel: #f7ea55;\n\t\t\t--noise4-secondary-note: #605906;\n\t\t\t--noise4-primary-note: #fff9ab;\n\t\t\t--noise5-secondary-channel: #8c8f00;\n\t\t\t--noise5-primary-channel: #fdff90;\n\t\t\t--noise5-secondary-note: #606200;\n\t\t\t--noise5-primary-note: #feffbc;\n\t\t\t--mod1-secondary-channel: #561b97;\n\t\t\t--mod1-primary-channel: #aa66f5;\n\t\t\t--mod1-secondary-note: #30075c;\n\t\t\t--mod1-primary-note: #cd9fff;\n\t\t\t--mod2-secondary-channel: #5116df;\n\t\t\t--mod2-primary-channel: #6b2dff;\n\t\t\t--mod2-secondary-note: #36138b;\n\t\t\t--mod2-primary-note: #bea3ff;\n\t\t\t--mod3-secondary-channel: #2535a1;\n\t\t\t--mod3-primary-channel: #3f57ff;\n\t\t\t--mod3-secondary-note: #0e185c;\n\t\t\t--mod3-primary-note: #8494ff;\n\t\t\t--mod4-secondary-channel: #1b5883;\n\t\t\t--mod4-primary-channel: #5eb7f5;\n\t\t\t--mod4-secondary-note: #072f4a;\n\t\t\t--mod4-primary-note: #63beff;\n\t\t\t--mod-label-primary: #24293a;\n\t\t\t--mod-label-secondary-text: #454d4e;\n\t\t\t--mod-label-primary-text: #7bd4ff;\n\t\t\t--disabled-note-primary: #072f4a;\n\t\t\t--disabled-note-secondary: #6585a7;\n\t\t}`,\n        \"fusion\": `:root {\n\t\t\t--page-margin: #0c0306;\n\t\t\t--editor-background: #0c0306;\n\t\t\t--hover-preview: white;\n\t\t\t--playhead: white;\n\t\t\t--primary-text: #26d9cd;\n\t\t\t--secondary-text: #ff6666;\n\t\t\t--inverted-text: white;\n\t\t\t--text-selection: #ffffff;\n\t\t\t--box-selection-fill: #ff00004d;\n\t\t\t--loop-accent: #ff6666;\n\t\t\t--link-accent: white;\n\t\t\t--ui-widget-background: #232323;\n\t\t\t--ui-widget-focus: #303030;\n\t\t\t--pitch-background: hsl(61deg 100% 70% / 25%);\n\t\t\t--tonic: #66a3ff40;\n\t\t\t--fifth-note: #ff666640;\n\t\t\t--white-piano-key: #cdcdcd;\n\t\t\t--black-piano-key: #232323;\n\t\t\t--white-piano-key-text: #131200;\n\t\t\t--black-piano-key-text: #fff;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #404040bf;\n\t\t\t--track-editor-bg-pitch-dim: #151515;\n\t\t\t--track-editor-bg-noise: #404040bf;\n\t\t\t--track-editor-bg-noise-dim: #151515;\n\t\t\t--track-editor-bg-mod: #404040bf;\n\t\t\t--track-editor-bg-mod-dim: #151515;\n\t\t\t--multiplicative-mod-slider: #ef7692;\n\t\t\t--overwriting-mod-slider: #f43e69;\n\t\t\t--indicator-primary: #26d9cd;\n\t\t\t--indicator-secondary: hsl(176deg 70% 25%);\n\t\t\t--select2-opt-group: #232323;\n\t\t\t--input-box-outline: #141e34;\n\t\t\t--mute-button-normal: #26d9cd;\n\t\t\t--mute-button-mod: hsl(346deg 70% 50%);\n\t\t\t--pitch1-secondary-channel: #bf4040;\n\t\t\t--pitch1-primary-channel: #ff6666;\n\t\t\t--pitch1-secondary-note: #bf4040;\n\t\t\t--pitch1-primary-note: #ff6666;\n\t\t\t--pitch2-secondary-channel: #bf5b40;\n\t\t\t--pitch2-primary-channel: #ff8766;\n\t\t\t--pitch2-secondary-note: #bf5b40;\n\t\t\t--pitch2-primary-note: #ff8766;\n\t\t\t--pitch3-secondary-channel: #bf7940;\n\t\t\t--pitch3-primary-channel: #ffab66;\n\t\t\t--pitch3-secondary-note: #bf7940;\n\t\t\t--pitch3-primary-note: #ffab66;\n\t\t\t--pitch4-secondary-channel: #bf9b40;\n\t\t\t--pitch4-primary-channel: #ffd466;\n\t\t\t--pitch4-secondary-note: #bf9b40;\n\t\t\t--pitch4-primary-note: #ffd466;\n\t\t\t--pitch5-secondary-channel: #bdbf40;\n\t\t\t--pitch5-primary-channel: #fcff66;\n\t\t\t--pitch5-secondary-note: #bdbf40;\n\t\t\t--pitch5-primary-note: #fcff66;\n\t\t\t--pitch6-secondary-channel: #9dbf40;\n\t\t\t--pitch6-primary-channel: #d6ff66;\n\t\t\t--pitch6-secondary-note: #9dbf40;\n\t\t\t--pitch6-primary-note: #d6ff66;\n\t\t\t--pitch7-secondary-channel: #9dbf40;\n\t\t\t--pitch7-primary-channel: #fcff66;\n\t\t\t--pitch7-secondary-note: #9dbf40;\n\t\t\t--pitch7-primary-note: #fcff66;\n\t\t\t--pitch8-secondary-channel: #bf9b40;\n\t\t\t--pitch8-primary-channel: #ffd466;\n\t\t\t--pitch8-secondary-note: #bf9b40;\n\t\t\t--pitch8-primary-note: #ffd466;\n\t\t\t--pitch9-secondary-channel: #bf5b40;\n\t\t\t--pitch9-primary-channel: #ffab66;\n\t\t\t--pitch9-secondary-note: #bf5b40;\n\t\t\t--pitch9-primary-note: #ffab66;\n\t\t\t--pitch10-secondary-channel: #d15a1f;\n\t\t\t--pitch10-primary-channel: #ff8766;\n\t\t\t--pitch10-secondary-note: #d15a1f;\n\t\t\t--pitch10-primary-note: #ff8766;\n\t\t\t--noise1-secondary-channel: #4073bf;\n\t\t\t--noise1-primary-channel: #66a3ff;\n\t\t\t--noise1-secondary-note: #4073bf;\n\t\t\t--noise1-primary-note: #66a3ff;\n\t\t\t--noise2-secondary-channel: #405dbf;\n\t\t\t--noise2-primary-channel: #668aff;\n\t\t\t--noise2-secondary-note: #405dbf;\n\t\t\t--noise2-primary-note: #668aff;\n\t\t\t--noise3-secondary-channel: #4f40bf;\n\t\t\t--noise3-primary-channel: #7866ff;\n\t\t\t--noise3-secondary-note: #4f40bf;\n\t\t\t--noise3-primary-note: #7866ff;\n\t\t\t--noise4-secondary-channel: #8840bf;\n\t\t\t--noise4-primary-channel: #bd66ff;\n\t\t\t--noise4-secondary-note: #8840bf;\n\t\t\t--noise4-primary-note: #bd66ff;\n\t\t\t--noise5-secondary-channel: #bf40b5;\n\t\t\t--noise5-primary-channel: #ff66f2;\n\t\t\t--noise5-secondary-note: #bf40b5;\n\t\t\t--noise5-primary-note: #ff66f2;\n\t\t\t--mod1-secondary-channel: #cc6666;\n\t\t\t--mod1-primary-channel: #ff9999;\n\t\t\t--mod1-secondary-note: #cc6666;\n\t\t\t--mod1-primary-note: #ff9999;\n\t\t\t--mod2-secondary-channel: #cc7766;\n\t\t\t--mod2-primary-channel: #ffaa99;\n\t\t\t--mod2-secondary-note: #bf5540;\n\t\t\t--mod2-primary-note: #ffaa99;\n\t\t\t--mod3-secondary-channel: #cc8866;\n\t\t\t--mod3-primary-channel: #ffbb99;\n\t\t\t--mod3-secondary-note: #cc8866;\n\t\t\t--mod3-primary-note: #ffbb99;\n\t\t\t--mod4-secondary-channel: #cc9966;\n\t\t\t--mod4-primary-channel: #ffcc99;\n\t\t\t--mod4-secondary-note: #cc9966;\n\t\t\t--mod4-primary-note: #ffcc99;\n\t\t\t--mod-label-primary: #999;\n\t\t\t--mod-label-secondary-text: #333;\n\t\t\t--mod-label-primary-text: black;\n\t\t\t--disabled-note-primary: #696969;\n\t\t\t--disabled-note-secondary: #232323;\n\t\t}`,\n        \"inverse\": `:root {\n\t\t\t--page-margin: #c4c8e3;\n\t\t\t--editor-background: #c4c8e3;\n\t\t\t--hover-preview: #000000;\n\t\t\t--playhead: #243953;\n\t\t\t--primary-text: black;\n\t\t\t--secondary-text: #855b95;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: rgb(132 125 255);\n\t\t\t--box-selection-fill: rgb(174 109 73 / 65%);\n\t\t\t--loop-accent: #EC897D;\n\t\t\t--link-accent: #4e00c8;\n\t\t\t--ui-widget-background: #e7e7ff;\n\t\t\t--ui-widget-focus: #d0d3e9;\n\t\t\t--pitch-background: #ffffff;\n\t\t\t--tonic: #bbbbbb;\n\t\t\t--fifth-note: #dcdcdc;\n\t\t\t--white-piano-key: #ffffff;\n\t\t\t--black-piano-key: #615f66;\n\t\t\t--white-piano-key-text: #131200;\n\t\t\t--black-piano-key-text: #fff;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #e9ebff;\n\t\t\t--track-editor-bg-pitch-dim: #e9ebff;\n\t\t\t--track-editor-bg-noise: #fdf2fe;\n\t\t\t--track-editor-bg-noise-dim: #fdf2fe;\n\t\t\t--track-editor-bg-mod: #dbdefe;\n\t\t\t--track-editor-bg-mod-dim: #dbdefe;\n\t\t\t--multiplicative-mod-slider: #6900b3;\n\t\t\t--overwriting-mod-slider: #004b9d;\n\t\t\t--indicator-primary: #ff633d;\n\t\t\t--indicator-secondary: #933822;\n\t\t\t--select2-opt-group: #e7e7ff;\n\t\t\t--input-box-outline: #e7e7ff;\n\t\t\t--mute-button-normal: #0072ef;\n\t\t\t--mute-button-mod: #002e67;\n\t\t\t--pitch1-secondary-channel: #b77d6e;\n\t\t\t--pitch1-primary-channel: #ff9d85;\n\t\t\t--pitch1-secondary-note: #b77d6e;\n\t\t\t--pitch1-primary-note: #ff9d85;\n\t\t\t--pitch2-secondary-channel: #be8821;\n\t\t\t--pitch2-primary-channel: #FFAF12;\n\t\t\t--pitch2-secondary-note: #be8821;\n\t\t\t--pitch2-primary-note: #FFAF12;\n\t\t\t--pitch3-secondary-channel: #3a62a4;\n\t\t\t--pitch3-primary-channel: #528ae6;\n\t\t\t--pitch3-secondary-note: #3a62a4;\n\t\t\t--pitch3-primary-note: #528ae6;\n\t\t\t--pitch4-secondary-channel: #3e8d78;\n\t\t\t--pitch4-primary-channel: #4EC5A7;\n\t\t\t--pitch4-secondary-note: #3e8d78;\n\t\t\t--pitch4-primary-note: #4EC5A7;\n\t\t\t--pitch5-secondary-channel: #84906d;\n\t\t\t--pitch5-primary-channel: #aabf84;\n\t\t\t--pitch5-secondary-note: #84906d;\n\t\t\t--pitch5-primary-note: #aabf84;\n\t\t\t--pitch6-secondary-channel: #bd6345;\n\t\t\t--pitch6-primary-channel: #e59a81;\n\t\t\t--pitch6-secondary-note: #bd6345;\n\t\t\t--pitch6-primary-note: #e59a81;\n\t\t\t--pitch7-secondary-channel: #aa592f;\n\t\t\t--pitch7-primary-channel: #FE813E;\n\t\t\t--pitch7-secondary-note: #aa592f;\n\t\t\t--pitch7-primary-note: #FE813E;\n\t\t\t--pitch8-secondary-channel: #b2a171;\n\t\t\t--pitch8-primary-channel: #ffd76d;\n\t\t\t--pitch8-secondary-note: #b2a171;\n\t\t\t--pitch8-primary-note: #ffd76d;\n\t\t\t--pitch9-secondary-channel: #4f6177;\n\t\t\t--pitch9-primary-channel: #798FA7;\n\t\t\t--pitch9-secondary-note: #4f6177;\n\t\t\t--pitch9-primary-note: #798FA7;\n\t\t\t--pitch10-secondary-channel: #165162;\n\t\t\t--pitch10-primary-channel: #107895;\n\t\t\t--pitch10-secondary-note: #165162;\n\t\t\t--pitch10-primary-note: #107895;\n\t\t\t--noise1-secondary-channel: #71617C;\n\t\t\t--noise1-primary-channel: #977da9;\n\t\t\t--noise1-secondary-note: #71617C;\n\t\t\t--noise1-primary-note: #977da9;\n\t\t\t--noise2-secondary-channel: #4a4c5b;\n\t\t\t--noise2-primary-channel: #707591;\n\t\t\t--noise2-secondary-note: #4a4c5b;\n\t\t\t--noise2-primary-note: #707591;\n\t\t\t--noise3-secondary-channel: #817c7b;\n\t\t\t--noise3-primary-channel: #A19D9C;\n\t\t\t--noise3-secondary-note: #817c7b;\n\t\t\t--noise3-primary-note: #A19D9C;\n\t\t\t--noise4-secondary-channel: #ab847b;\n\t\t\t--noise4-primary-channel: #EAAC9D;\n\t\t\t--noise4-secondary-note: #ab847b;\n\t\t\t--noise4-primary-note: #EAAC9D;\n\t\t\t--noise5-secondary-channel: #B49D74;\n\t\t\t--noise5-primary-channel: #dec69b;\n\t\t\t--noise5-secondary-note: #B49D74;\n\t\t\t--noise5-primary-note: #dec69b;\n\t\t\t--mod1-secondary-channel: #722124;\n\t\t\t--mod1-primary-channel: #D13A41;\n\t\t\t--mod1-secondary-note: #722124;\n\t\t\t--mod1-primary-note: #D13A41;\n\t\t\t--mod2-secondary-channel: #213657;\n\t\t\t--mod2-primary-channel: #34558B;\n\t\t\t--mod2-secondary-note: #213657;\n\t\t\t--mod2-primary-note: #34558B;\n\t\t\t--mod3-secondary-channel: #555D46;\n\t\t\t--mod3-primary-channel: #848f6d;\n\t\t\t--mod3-secondary-note: #555D46;\n\t\t\t--mod3-primary-note: #848f6d;\n\t\t\t--mod4-secondary-channel: #71617C;\n\t\t\t--mod4-primary-channel: #a68ab9;\n\t\t\t--mod4-secondary-note: #71617C;\n\t\t\t--mod4-primary-note: #a68ab9;\n\t\t\t--mod-label-primary: #e9e9e9;\n\t\t\t--mod-label-secondary-text: #707070;\n\t\t\t--mod-label-primary-text: black;\n\t\t\t--disabled-note-primary: #959595;\n\t\t\t--disabled-note-secondary: #6e6e6e;\n\t\t\t}`,\n        \"nebula\": `\n\t\t:root {\n\t\t\t--page-margin: #040410;\n\t\t\t--editor-background: #150e1f;\n\t\t\t--hover-preview: white;\n\t\t\t--playhead: rgba(255, 255, 255, 0.9);\n\t\t\t--primary-text: white;\n\t\t\t--secondary-text: #8C849A;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: rgba(141,79,201,0.99);\n\t\t\t--box-selection-fill: #311E44;\n\t\t\t--loop-accent: #CC688C;\n\t\t\t--link-accent: #817DC9;\n\t\t\t--ui-widget-background: #44394F;\n\t\t\t--ui-widget-focus: #7A6386;\n\t\t\t--pitch-background: #393e4f40;\n\t\t\t--tonic: #7D5C9EC0;\n\t\t\t--fifth-note: #ab77bd50;\n\t\t\t--white-piano-key: #EEEEEE;\n\t\t\t--black-piano-key: #5F5566;\n\t\t\t--white-piano-key-text: #131200;\n\t\t\t--black-piano-key-text: #fff;\n\t\t\t--use-color-formula: true;\n\t\t\t--track-editor-bg-pitch: #46374C;\n\t\t\t--track-editor-bg-pitch-dim: #1F1C2850;\n\t\t\t--track-editor-bg-noise: #3D353B;\n\t\t\t--track-editor-bg-noise-dim: #16131550;\n\t\t\t--track-editor-bg-mod: #623F4C;\n\t\t\t--track-editor-bg-mod-dim: #361A2450;\n\t\t\t--multiplicative-mod-slider: #9F6E6A;\n\t\t\t--overwriting-mod-slider: #A664B5;\n\t\t\t--indicator-primary: #CC6B8E;\n\t\t\t--indicator-secondary: #44394F;\n\t\t\t--select2-opt-group: #6A576F;\n\t\t\t--input-box-outline: #222;\n\t\t\t--mute-button-normal: #BF91DC;\n\t\t\t--mute-button-mod: #DC8C9A;\n\t\t\t--mod-label-primary: #3A2840;\n\t\t\t--mod-label-secondary-text: #62485E;\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--pitch-secondary-channel-hue: -96;\n\t\t\t--pitch-secondary-channel-hue-scale: 4.2;\n\t\t\t--pitch-secondary-channel-sat: 50.3;\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t--pitch-secondary-channel-lum: 40;\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\n\t\t\t--pitch-primary-channel-hue: -96;\n\t\t\t--pitch-primary-channel-hue-scale: 4.2;\n\t\t\t--pitch-primary-channel-sat: 70;\n\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t--pitch-primary-channel-lum: 67.5;\n\t\t\t--pitch-primary-channel-lum-scale: 0.05;\n\t\t\t--pitch-secondary-note-hue: -96;\n\t\t\t--pitch-secondary-note-hue-scale: 4.2;\n\t\t\t--pitch-secondary-note-sat: 70.9;\n\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t--pitch-secondary-note-lum: 25;\n\t\t\t--pitch-secondary-note-lum-scale: 0.05;\n\t\t\t--pitch-primary-note-hue: -96;\n\t\t\t--pitch-primary-note-hue-scale: 4.2;\n\t\t\t--pitch-primary-note-sat: 90;\n\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t--pitch-primary-note-lum: 85.6;\n\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t--noise-secondary-channel-hue: 16;\n\t\t\t--noise-secondary-channel-hue-scale: -1.33;\n\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t--noise-secondary-channel-lum: 42;\n\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t--noise-primary-channel-hue: 16;\n\t\t\t--noise-primary-channel-hue-scale: -1.33;\n\t\t\t--noise-primary-channel-sat: 33;\n\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t--noise-primary-channel-lum: 63.5;\n\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t--noise-secondary-note-hue: 12;\n\t\t\t--noise-secondary-note-hue-scale: -1.33;\n\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t--noise-secondary-note-lum: 55;\n\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t--noise-primary-note-hue: 12;\n\t\t\t--noise-primary-note-hue-scale: -1.33;\n\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t--noise-primary-note-lum: 74;\n\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t--mod-secondary-channel-hue: 12;\n\t\t\t--mod-secondary-channel-hue-scale: -.75;\n\t\t\t--mod-secondary-channel-sat: 50;\n\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t--mod-secondary-channel-lum: 50;\n\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t--mod-primary-channel-hue: 12;\n\t\t\t--mod-primary-channel-hue-scale: -.75;\n\t\t\t--mod-primary-channel-sat: 70;\n\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t--mod-secondary-note-hue: 12;\n\t\t\t--mod-secondary-note-hue-scale: -.75;\n\t\t\t--mod-secondary-note-sat: 75;\n\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t--mod-secondary-note-lum: 45;\n\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t--mod-primary-note-hue: 12;\n\t\t\t--mod-primary-note-hue-scale: -.75;\n\t\t\t--mod-primary-note-sat: 85;\n\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t--mod-primary-note-lum: 85;\n\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t--disabled-note-primary: #aaa;\n\t\t\t--disabled-note-secondary: #666;\n\t\t}`,\n        \"roe light\": `\n\t\t:root {\n\t\t\t--page-margin: #fff5f5;\n\t\t\t--editor-background: #fff5f5;\n\t\t\t--hover-preview: #0e8bf1;\n\t\t\t--playhead: 000;\n\t\t\t--primary-text: #0e8bf1;\n\t\t\t--secondary-text: #f10e0e;\n\t\t\t--inverted-text: white;\n\t\t\t--text-selection: #ff4444fc;\n\t\t\t--box-selection-fill: #ff00004d;\n\t\t\t--loop-accent: #9a75ff;\n\t\t\t--link-accent: #ff7070;\n\t\t\t--ui-widget-background: #bdc9e5;\n\t\t\t--ui-widget-focus: #a3b7e5;\n\t\t\t--pitch-background: #d0c7db;\n\t\t\t--tonic: #bed3e4;\n\t\t\t--fifth-note: #e7c6c6;\n\t\t\t--white-piano-key: #cdcdcd;\n\t\t\t--black-piano-key: #232323;\n\t\t\t--white-piano-key-text: #131200;\n\t\t\t--black-piano-key-text: #fff;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #e5e1ea;\n\t\t\t--track-editor-bg-pitch-dim: #cbc4d4;\n\t\t\t--track-editor-bg-noise: #e0ddee;\n\t\t\t--track-editor-bg-noise-dim: #c1bade;\n\t\t\t--track-editor-bg-mod: #d8e6f3;\n\t\t\t--track-editor-bg-mod-dim: #b1cce7;\n\t\t\t--multiplicative-mod-slider: #8097cb;\n\t\t\t--overwriting-mod-slider: #8097cb;\n\t\t\t--indicator-primary: #FF2A2A;\n\t\t\t--indicator-secondary: #92a6d3;\n\t\t\t--select2-opt-group: #b6c4e2;\n\t\t\t--input-box-outline: #bdc9e5;\n\t\t\t--mute-button-normal: #66baff;\n\t\t\t--mute-button-mod: #1a98ff;\n\t\t\t--pitch1-secondary-channel: #273c90;\n\t\t\t--pitch1-primary-channel: #476BFF;\n\t\t\t--pitch1-secondary-note: #273c90;\n\t\t\t--pitch1-primary-note: #476BFF;\n\t\t\t--pitch2-secondary-channel: #3a3898;\n\t\t\t--pitch2-primary-channel: #625FFB;\n\t\t\t--pitch2-secondary-note: #3a3898;\n\t\t\t--pitch2-primary-note: #625FFB;\n\t\t\t--pitch3-secondary-channel: #542780;\n\t\t\t--pitch3-primary-channel: #9C49EC;\n\t\t\t--pitch3-secondary-note: #542780;\n\t\t\t--pitch3-primary-note: #9C49EC;\n\t\t\t--pitch4-secondary-channel: #84225d;\n\t\t\t--pitch4-primary-channel: #fd3fb1;\n\t\t\t--pitch4-secondary-note: #84225d;\n\t\t\t--pitch4-primary-note: #fd3fb1;\n\t\t\t--pitch5-secondary-channel: #8d2323;\n\t\t\t--pitch5-primary-channel: #ff3f3f;\n\t\t\t--pitch5-secondary-note: #8d2323;\n\t\t\t--pitch5-primary-note: #ff3f3f;\n\t\t\t--pitch6-secondary-channel: #84225d;\n\t\t\t--pitch6-primary-channel: #fd3fb1;\n\t\t\t--pitch6-secondary-note: #84225d;\n\t\t\t--pitch6-primary-note: #fd3fb1;\n\t\t\t--pitch7-secondary-channel: #542780;\n\t\t\t--pitch7-primary-channel: #9C49EC;\n\t\t\t--pitch7-secondary-note: #542780;\n\t\t\t--pitch7-primary-note: #9C49EC;\n\t\t\t--pitch8-secondary-channel: #3a3898;\n\t\t\t--pitch8-primary-channel: #625FFB;\n\t\t\t--pitch8-secondary-note: #3a3898;\n\t\t\t--pitch8-primary-note: #625FFB;\n\t\t\t--pitch9-secondary-channel: #273c90;\n\t\t\t--pitch9-primary-channel: #476BFF;\n\t\t\t--pitch9-secondary-note: #273c90;\n\t\t\t--pitch9-primary-note: #476BFF;\n\t\t\t--pitch10-secondary-channel: #165a93;\n\t\t\t--pitch10-primary-channel: #299EFF;\n\t\t\t--pitch10-secondary-note: #165a93;\n\t\t\t--pitch10-primary-note: #299EFF;\n\t\t\t--noise1-secondary-channel: #336bdb;\n\t\t\t--noise1-primary-channel: #4281FF;\n\t\t\t--noise1-secondary-note: #336bdb;\n\t\t\t--noise1-primary-note: #4281FF;\n\t\t\t--noise2-secondary-channel: #5e38dc;\n\t\t\t--noise2-primary-channel: #7347FF;\n\t\t\t--noise2-secondary-note: #5e38dc;\n\t\t\t--noise2-primary-note: #7347FF;\n\t\t\t--noise3-secondary-channel: #7d3097;\n\t\t\t--noise3-primary-channel: #9F3CBF;\n\t\t\t--noise3-secondary-note: #7d3097;\n\t\t\t--noise3-primary-note: #9F3CBF;\n\t\t\t--noise4-secondary-channel: #ad2559;\n\t\t\t--noise4-primary-channel: #D3326F;\n\t\t\t--noise4-secondary-note: #ad2559;\n\t\t\t--noise4-primary-note: #D3326F;\n\t\t\t--noise5-secondary-channel: #d02525;\n\t\t\t--noise5-primary-channel: #FF2A2A;\n\t\t\t--noise5-secondary-note: #d02525;\n\t\t\t--noise5-primary-note: #FF2A2A;\n\t\t\t--mod1-secondary-channel: #35415a;\n\t\t\t--mod1-primary-channel: #47587a;\n\t\t\t--mod1-secondary-note: #35415a;\n\t\t\t--mod1-primary-note: #47587a;\n\t\t\t--mod2-secondary-channel: #5a5374;\n\t\t\t--mod2-primary-channel: #716791;\n\t\t\t--mod2-secondary-note: #5a5374;\n\t\t\t--mod2-primary-note: #716791;\n\t\t\t--mod3-secondary-channel: #53385c;\n\t\t\t--mod3-primary-channel: #6f4c7b;\n\t\t\t--mod3-secondary-note: #53385c;\n\t\t\t--mod3-primary-note: #6f4c7b;\n\t\t\t--mod4-secondary-channel: #7e4e60;\n\t\t\t--mod4-primary-channel: #9e6279;\n\t\t\t--mod4-secondary-note: #7e4e60;\n\t\t\t--mod4-primary-note: #9e6279;\n\t\t\t--mod-label-primary: #d0c7db;\n\t\t\t--mod-label-secondary-text: #cb3434;\n\t\t\t--mod-label-primary-text: black;\n\t\t\t--disabled-note-primary: #616161;\n\t\t\t--disabled-note-secondary: #474747;\n\t\t}`,\n        \"energized\": `\n\t\t:root {\n\t\t\t--page-margin: #000a08;\n\t\t\t--editor-background: #000a08;\n\t\t\t--hover-preview: #ffffcc;\n\t\t\t--playhead: #ccfff5;\n\t\t\t--primary-text: white;\n\t\t\t--secondary-text: #d9d98c;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: #ffff6659;\n\t\t\t--box-selection-fill: #ffffff33;\n\t\t\t--loop-accent: #ffff00;\n\t\t\t--link-accent: #00ffcc;\n\t\t\t--ui-widget-background: #141f1d;\n\t\t\t--ui-widget-focus: #24423d;\n\t\t\t--pitch-background: #001410;\n\t\t\t--tonic: #00241d;\n\t\t\t--fifth-note: #ffff6633;\n\t\t\t--white-piano-key: #66998f;\n\t\t\t--black-piano-key: #141f1d;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #66998f40;\n\t\t\t--track-editor-bg-pitch-dim: #293d3940;\n\t\t\t--track-editor-bg-noise: #66998f40;\n\t\t\t--track-editor-bg-noise-dim: #293d3940;\n\t\t\t--track-editor-bg-mod: #99996640;\n\t\t\t--track-editor-bg-mod-dim: #3d3d2940;\n\t\t\t--multiplicative-mod-slider: #ffff00;\n\t\t\t--overwriting-mod-slider: #00ffcc;\n\t\t\t--indicator-primary: #ffff00;\n\t\t\t--indicator-secondary: #141f1d;\n\t\t\t--select2-opt-group: #1b312e;\n\t\t\t--input-box-outline: #141f1d;\n\t\t\t--mute-button-normal: #00ffcc;\n\t\t\t--mute-button-mod: #00997a;\n\t\t\t--pitch1-secondary-channel: #bfbf40;\n\t\t\t--pitch1-primary-channel: #ffff64;\n\t\t\t--pitch1-secondary-note: #bfbf40;\n\t\t\t--pitch1-primary-note: #ffff64;\n\t\t\t--pitch2-secondary-channel: #a2bf40;\n\t\t\t--pitch2-primary-channel: #e0ff7d;\n\t\t\t--pitch2-secondary-note: #a2bf40;\n\t\t\t--pitch2-primary-note: #e0ff7d;\n\t\t\t--pitch3-secondary-channel: #75bf40;\n\t\t\t--pitch3-primary-channel: #c1ff96;\n\t\t\t--pitch3-secondary-note: #75bf40;\n\t\t\t--pitch3-primary-note: #c1ff96;\n\t\t\t--pitch4-secondary-channel: #40bf51;\n\t\t\t--pitch4-primary-channel: #a2ffaf;\n\t\t\t--pitch4-secondary-note: #40bf51;\n\t\t\t--pitch4-primary-note: #a2ffaf;\n\t\t\t--pitch5-secondary-channel: #40bf86;\n\t\t\t--pitch5-primary-channel: #83ffc8;\n\t\t\t--pitch5-secondary-note: #40bf86;\n\t\t\t--pitch5-primary-note: #83ffc8;\n\t\t\t--pitch6-secondary-channel: #40bfa6;\n\t\t\t--pitch6-primary-channel: #64ffe1;\n\t\t\t--pitch6-secondary-note: #40bfa6;\n\t\t\t--pitch6-primary-note: #64ffe1;\n\t\t\t--pitch7-secondary-channel: #40bf86;\n\t\t\t--pitch7-primary-channel: #83ffc8;\n\t\t\t--pitch7-secondary-note: #40bf86;\n\t\t\t--pitch7-primary-note: #83ffc8;\n\t\t\t--pitch8-secondary-channel: #40bf51;\n\t\t\t--pitch8-primary-channel: #a2ffaf;\n\t\t\t--pitch8-secondary-note: #40bf51;\n\t\t\t--pitch8-primary-note: #a2ffaf;\n\t\t\t--pitch9-secondary-channel: #75bf40;\n\t\t\t--pitch9-primary-channel: #c1ff96;\n\t\t\t--pitch9-secondary-note: #75bf40;\n\t\t\t--pitch9-primary-note: #c1ff96;\n\t\t\t--pitch10-secondary-channel: #a2bf40;\n\t\t\t--pitch10-primary-channel: #e0ff7d;\n\t\t\t--pitch10-secondary-note: #a2bf40;\n\t\t\t--pitch10-primary-note: #e0ff7d;\n\t\t\t--noise1-secondary-channel: #a6a659;\n\t\t\t--noise1-primary-channel: #ffffcc;\n\t\t\t--noise1-secondary-note: #a6a659;\n\t\t\t--noise1-primary-note: #ffffcc;\n\t\t\t--noise2-secondary-channel: #94a659;\n\t\t\t--noise2-primary-channel: #f3ffcc;\n\t\t\t--noise2-secondary-note: #94a659;\n\t\t\t--noise2-primary-note: #f3ffcc;\n\t\t\t--noise3-secondary-channel: #79a659;\n\t\t\t--noise3-primary-channel: #e1ffcc;\n\t\t\t--noise3-secondary-note: #79a659;\n\t\t\t--noise3-primary-note: #e1ffcc;\n\t\t\t--noise4-secondary-channel: #94a659;\n\t\t\t--noise4-primary-channel: #f3ffcc;\n\t\t\t--noise4-secondary-note: #94a659;\n\t\t\t--noise4-primary-note: #f3ffcc;\n\t\t\t--noise5-secondary-channel: #a6a659;\n\t\t\t--noise5-primary-channel: #ffffcc;\n\t\t\t--noise5-secondary-note: #a6a659;\n\t\t\t--noise5-primary-note: #ffffcc;\n\t\t\t--mod1-secondary-channel: #a3a329;\n\t\t\t--mod1-primary-channel: #ffff00;\n\t\t\t--mod1-secondary-note: #a3a329;\n\t\t\t--mod1-primary-note: #ffff00;\n\t\t\t--mod2-secondary-channel: #a38529;\n\t\t\t--mod2-primary-channel: #ffbf00;\n\t\t\t--mod2-secondary-note: #a38529;\n\t\t\t--mod2-primary-note: #ffbf00;\n\t\t\t--mod3-secondary-channel: #a36629;\n\t\t\t--mod3-primary-channel: #ff7f00;\n\t\t\t--mod3-secondary-note: #a36629;\n\t\t\t--mod3-primary-note: #ff7f00;\n\t\t\t--mod4-secondary-channel: #a38529;\n\t\t\t--mod4-primary-channel: #ffbf00;\n\t\t\t--mod4-secondary-note: #a38529;\n\t\t\t--mod4-primary-note: #ffbf00;\n\t\t\t--mod-label-primary: #141f1d;\n\t\t\t--mod-label-secondary-text: #d9d98c;\n\t\t\t--mod-label-primary-text: white;\n\t\t\t--disabled-note-primary: #808080;\n\t\t\t--disabled-note-secondary: #666666;\n\t\t}`,\n        \"neapolitan\": `:root {\n\t\t\t--page-margin: #120807;\n\t\t\t--editor-background: #120807;\n\t\t\t--hover-preview: #e79a82;\n\t\t\t--playhead: #e79a82;\n\t\t\t--primary-text: #decdbf;\n\t\t\t--secondary-text: #fa99bb;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: #990036;\n\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\n\t\t\t--loop-accent: #f6377a;\n\t\t\t--link-accent: #f6377a;\n\t\t\t--ui-widget-background: #24160f;\n\t\t\t--ui-widget-focus: #362217;\n\t\t\t--pitch-background: #1e1106;\n\t\t\t--tonic: #382414;\n\t\t\t--fifth-note: #41240c;\n\t\t\t--white-piano-key: #e1c5b7;\n\t\t\t--black-piano-key: #482c1e;\n\t\t\t--white-piano-key-text: black;\n\t\t\t--black-piano-key-text: white;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #4d2a19;\n\t\t\t--track-editor-bg-pitch-dim: #27150c;\n\t\t\t--track-editor-bg-noise: #4d2a19;\n\t\t\t--track-editor-bg-noise-dim: #27150c;\n\t\t\t--track-editor-bg-mod: #4d2a19;\n\t\t\t--track-editor-bg-mod-dim: #27150c;\n\t\t\t--multiplicative-mod-slider: #decdbf;\n\t\t\t--overwriting-mod-slider: #decdbf;\n\t\t\t--indicator-primary: #decdbf;\n\t\t\t--indicator-secondary: #362217;\n\t\t\t--select2-opt-group: #24160f;\n\t\t\t--input-box-outline: #24160f;\n\t\t\t--mute-button-normal: #ff66a1;\n\t\t\t--mute-button-mod: #e61968;\n\t\t\t--pitch1-secondary-channel: #680029;\n\t\t\t--pitch1-primary-channel: #cc0052;\n\t\t\t--pitch1-secondary-note: #660029;\n\t\t\t--pitch1-primary-note: #cc0052;\n\t\t\t--pitch2-secondary-channel: #7e1b43;\n\t\t\t--pitch2-primary-channel: #d32e71;\n\t\t\t--pitch2-secondary-note: #7e1b43;\n\t\t\t--pitch2-primary-note: #d32e71;\n\t\t\t--pitch3-secondary-channel: #aa275e;\n\t\t\t--pitch3-primary-channel: #da5d91;\n\t\t\t--pitch3-secondary-note: #aa275e;\n\t\t\t--pitch3-primary-note: #da5d91;\n\t\t\t--pitch4-secondary-channel: #cc3878;\n\t\t\t--pitch4-primary-channel: #e18bb0;\n\t\t\t--pitch4-secondary-note: #cc3878;\n\t\t\t--pitch4-primary-note: #e18bb0;\n\t\t\t--pitch5-secondary-channel: #d06c9b;\n\t\t\t--pitch5-primary-channel: #e9bad0;\n\t\t\t--pitch5-secondary-note: #d06c9b;\n\t\t\t--pitch5-primary-note: #e9bad0;\n\t\t\t--pitch6-secondary-channel: #c9acc5;\n\t\t\t--pitch6-primary-channel: #f0e8ef;\n\t\t\t--pitch6-secondary-note: #c9acc5;\n\t\t\t--pitch6-primary-note: #f0e8ef;\n\t\t\t--pitch7-secondary-channel: #d06c9b;\n\t\t\t--pitch7-primary-channel: #e9bad0;\n\t\t\t--pitch7-secondary-note: #d06c9b;\n\t\t\t--pitch7-primary-note: #e9bad0;\n\t\t\t--pitch8-secondary-channel: #cc3878;\n\t\t\t--pitch8-primary-channel: #e18bb0;\n\t\t\t--pitch8-secondary-note: #cc3878;\n\t\t\t--pitch8-primary-note: #e18bb0;\n\t\t\t--pitch9-secondary-channel: #aa275e;\n\t\t\t--pitch9-primary-channel: #da5d91;\n\t\t\t--pitch9-secondary-note: #aa275e;\n\t\t\t--pitch9-primary-note: #da5d91;\n\t\t\t--pitch10-secondary-channel: #7e1b43;\n\t\t\t--pitch10-primary-channel: #d32e71;\n\t\t\t--pitch10-secondary-note: #7e1b43;\n\t\t\t--pitch10-primary-note: #d32e71;\n\t\t\t--noise1-secondary-channel: #683a37;\n\t\t\t--noise1-primary-channel: #A85F5A;\n\t\t\t--noise1-secondary-note: #683a37;\n\t\t\t--noise1-primary-note: #A85F5A;\n\t\t\t--noise2-secondary-channel: #7c4a41;\n\t\t\t--noise2-primary-channel: #B47A70;\n\t\t\t--noise2-secondary-note: #7c4a41;\n\t\t\t--noise2-primary-note: #B47A70;\n\t\t\t--noise3-secondary-channel: #935f4d;\n\t\t\t--noise3-primary-channel: #c09587;\n\t\t\t--noise3-secondary-note: #935f4d;\n\t\t\t--noise3-primary-note: #C09587;\n\t\t\t--noise4-secondary-channel: #aa795a;\n\t\t\t--noise4-primary-channel: #cdb09d;\n\t\t\t--noise4-secondary-note: #aa795a;\n\t\t\t--noise4-primary-note: #CDAF9D;\n\t\t\t--noise5-secondary-channel: #bb987c;\n\t\t\t--noise5-primary-channel: #decdbf;\n\t\t\t--noise5-secondary-note: #bb987c;\n\t\t\t--noise5-primary-note: #decdbf;\n\t\t\t--mod1-secondary-channel: #6ca784;\n\t\t\t--mod1-primary-channel: #accdb9;\n\t\t\t--mod1-secondary-note: #6ca784;\n\t\t\t--mod1-primary-note: #accdb9;\n\t\t\t--mod2-secondary-channel: #7daa9f;\n\t\t\t--mod2-primary-channel: #bbd3cd;\n\t\t\t--mod2-secondary-note: #7daa9f;\n\t\t\t--mod2-primary-note: #bbd3cd;\n\t\t\t--mod3-secondary-channel: #70a3a9;\n\t\t\t--mod3-primary-channel: #afcccf;\n\t\t\t--mod3-secondary-note: #70a3a9;\n\t\t\t--mod3-primary-note: #afcccf;\n\t\t\t--mod4-secondary-channel: #5698b8;\n\t\t\t--mod4-primary-channel: #9ec3d6;\n\t\t\t--mod4-secondary-note: #5698b8;\n\t\t\t--mod4-primary-note: #9ec3d6;\n\t\t\t--mod-label-primary: #24160f;\n\t\t\t--mod-label-secondary-text: #E5AFC2;\n\t\t\t--mod-label-primary-text: #decdbf;\n\t\t\t--disabled-note-primary: #bababa;\n\t\t\t--disabled-note-secondary: #878787;\n\t\t}`,\n        \"mono\": `:root {\n\t\t\t--page-margin: #000;\n\t\t\t--editor-background: #000;\n\t\t\t--hover-preview: #808080;\n\t\t\t--playhead: #808080;\n\t\t\t--primary-text: white;\n\t\t\t--secondary-text: #cccccc;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: #696969;\n\t\t\t--box-selection-fill: #cccccc40;\n\t\t\t--loop-accent: #808080;\n\t\t\t--link-accent: white;\n\t\t\t--ui-widget-background: #232323;\n\t\t\t--ui-widget-focus: #303030;\n\t\t\t--pitch-background: #1a1a1a;\n\t\t\t--tonic: #262626;\n\t\t\t--fifth-note: #0d0d0d;\n\t\t\t--white-piano-key: #808080;\n\t\t\t--black-piano-key: #232323;\n\t\t\t--use-color-formula: true;\n\t\t\t--track-editor-bg-pitch: #262626;\n\t\t\t--track-editor-bg-pitch-dim: #1a1a1a;\n\t\t\t--track-editor-bg-noise: #262626;\n\t\t\t--track-editor-bg-noise-dim: #1a1a1a;\n\t\t\t--track-editor-bg-mod: #262626;\n\t\t\t--track-editor-bg-mod-dim: #1a1a1a;\n\t\t\t--multiplicative-mod-slider: #808080;\n\t\t\t--overwriting-mod-slider: #808080;\n\t\t\t--indicator-primary: #808080;\n\t\t\t--indicator-secondary: #333333;\n\t\t\t--select2-opt-group: #232323;\n\t\t\t--input-box-outline: #222;\n\t\t\t--mute-button-normal: #808080;\n\t\t\t--mute-button-mod: #808080;\n\t\t\t--mod-label-primary: #232323;\n\t\t\t--mod-label-secondary-text: #696969;\n\t\t\t--mod-label-primary-text: #cdcdcd;\n\t\t\t--pitch-secondary-channel-hue: 0;\n\t\t\t--pitch-secondary-channel-hue-scale: 25;\n\t\t\t--pitch-secondary-channel-sat: 10;\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t--pitch-secondary-channel-lum: 70;\n\t\t\t--pitch-secondary-channel-lum-scale: 0;\n\t\t\t--pitch-primary-channel-hue: 0;\n\t\t\t--pitch-primary-channel-hue-scale: 25;\n\t\t\t--pitch-primary-channel-sat: 50;\n\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t--pitch-primary-channel-lum: 95;\n\t\t\t--pitch-primary-channel-lum-scale: 0;\n\t\t\t--pitch-secondary-note-hue: 0;\n\t\t\t--pitch-secondary-note-hue-scale: 25;\n\t\t\t--pitch-secondary-note-sat: 10;\n\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t--pitch-secondary-note-lum: 70;\n\t\t\t--pitch-secondary-note-lum-scale: 0;\n\t\t\t--pitch-primary-note-hue: 0;\n\t\t\t--pitch-primary-note-hue-scale: 25;\n\t\t\t--pitch-primary-note-sat: 50;\n\t\t\t--pitch-primary-note-sat-scale: 0.1;\n\t\t\t--pitch-primary-note-lum: 95;\n\t\t\t--pitch-primary-note-lum-scale: 0;\n\t\t\t--noise-secondary-channel-hue: 125;\n\t\t\t--noise-secondary-channel-hue-scale: 50;\n\t\t\t--noise-secondary-channel-sat: 10;\n\t\t\t--noise-secondary-channel-sat-scale: 0.1;\n\t\t\t--noise-secondary-channel-lum: 70;\n\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t--noise-primary-channel-hue: 125;\n\t\t\t--noise-primary-channel-hue-scale: 50;\n\t\t\t--noise-primary-channel-sat: 50;\n\t\t\t--noise-primary-channel-sat-scale: 0.1;\n\t\t\t--noise-primary-channel-lum: 95;\n\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t--noise-secondary-note-hue: 125;\n\t\t\t--noise-secondary-note-hue-scale: 50;\n\t\t\t--noise-secondary-note-sat: 10;\n\t\t\t--noise-secondary-note-sat-scale: 0.1;\n\t\t\t--noise-secondary-note-lum: 70;\n\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t--noise-primary-note-hue: 125;\n\t\t\t--noise-primary-note-hue-scale: 50;\n\t\t\t--noise-primary-note-sat: 50;\n\t\t\t--noise-primary-note-sat-scale: 0.1;\n\t\t\t--noise-primary-note-lum: 95;\n\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t--mod-secondary-channel-hue: 255;\n\t\t\t--mod-secondary-channel-hue-scale: 75;\n\t\t\t--mod-secondary-channel-sat: 10;\n\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t--mod-secondary-channel-lum: 70;\n\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t--mod-primary-channel-hue: 255;\n\t\t\t--mod-primary-channel-hue-scale: 75;\n\t\t\t--mod-primary-channel-sat: 50;\n\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t--mod-primary-channel-lum: 95;\n\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t--mod-secondary-note-hue: 255;\n\t\t\t--mod-secondary-note-hue-scale: 75;\n\t\t\t--mod-secondary-note-sat: 10;\n\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t--mod-secondary-note-lum: 70;\n\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t--mod-primary-note-hue: 255;\n\t\t\t--mod-primary-note-hue-scale: 75;\n\t\t\t--mod-primary-note-sat: 50;\n\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t--mod-primary-note-lum: 95;\n\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t--disabled-note-primary: #c6c6c6;\n\t\t\t--disabled-note-secondary: #8c8c8c;\n\t\t}`,\n\t\t\"modbox classic\": `\n\t\t\t:root {\n\t\t\t\t--page-margin: black;\n\t\t\t\t--editor-background: black;\n\t\t\t\t--hover-preview: white;\n\t\t\t\t--playhead: white;\n\t\t\t\t--primary-text: white;\n\t\t\t\t--secondary-text: #999;\n\t\t\t\t--inverted-text: black;\n\t\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\n\t\t\t\t--loop-accent: #9900cc;\n\t\t\t\t--link-accent: #98f;\n\t\t\t\t--ui-widget-background: #444;\n\t\t\t\t--ui-widget-focus: #777;\n\t\t\t\t--pitch-background: #444;\n\t\t\t\t--tonic: #864;\n\t\t\t\t--fifth-note: #468;\n\t\t\t\t--white-piano-key: #bbb;\n\t\t\t\t--black-piano-key: #444;\n\t\t\t\t--white-piano-key-text: #131200;\n\t\t\t\t--black-piano-key-text: #fff;\n\t\t\t\t\t--use-color-formula: false;\n\t\t\t\t\t--track-editor-bg-pitch: #444;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #333;\n\t\t\t\t\t--track-editor-bg-noise: #444;\n\t\t\t\t\t--track-editor-bg-noise-dim: #333;\n\t\t\t\t\t--track-editor-bg-mod: #234;\n\t\t\t\t\t--track-editor-bg-mod-dim: #123;\n\t\t\t\t\t--multiplicative-mod-slider: #456;\n\t\t\t\t\t--overwriting-mod-slider: #654;\n\t\t\t\t\t--indicator-primary: #74f;\n\t\t\t\t\t--indicator-secondary: #444;\n\t\t\t\t\t--select2-opt-group: #585858;\n\t\t\t\t\t--input-box-outline: #333;\n\t\t\t\t\t--mute-button-normal: #ffa033;\n\t\t\t\t\t--mute-button-mod: #9a6bff;\n\t\t\t\t\t--pitch-channel-limit: 6;\n\t\t\t\t\t--noise-channel-limit: 4;\n\t\t\t\t--pitch1-secondary-channel: #0099a1;\n\t\t\t\t--pitch1-primary-channel:   #25f3ff;\n\t\t\t\t--pitch1-secondary-note:    #0099a1;\n\t\t\t\t--pitch1-primary-note:      #25f3ff;\n\t\t\t\t--pitch2-secondary-channel: #439143;\n\t\t\t\t--pitch2-primary-channel:   #44ff44;\n\t\t\t\t--pitch2-secondary-note:    #439143;\n\t\t\t\t--pitch2-primary-note:      #44ff44;\n\t\t\t\t--pitch3-secondary-channel: #a1a100;\n\t\t\t\t--pitch3-primary-channel:   #ffff25;\n\t\t\t\t--pitch3-secondary-note:    #a1a100;\n\t\t\t\t--pitch3-primary-note:      #ffff25;\n\t\t\t\t--pitch4-secondary-channel: #c75000;\n\t\t\t\t--pitch4-primary-channel:   #ff9752;\n\t\t\t\t--pitch4-secondary-note:    #c75000;\n\t\t\t\t--pitch4-primary-note:      #ff9752;\n\t\t\t\t--pitch5-secondary-channel: #d020d0;\n\t\t\t\t--pitch5-primary-channel:   #FF90FF;\n\t\t\t\t--pitch5-secondary-note:    #d020d0;\n\t\t\t\t--pitch5-primary-note:      #ff90ff;\n\t\t\t\t--pitch6-secondary-channel: #552377;\n\t\t\t\t--pitch6-primary-channel:   #9f31ea;\n\t\t\t\t--pitch6-secondary-note:    #552377;\n\t\t\t\t--pitch6-primary-note:      #9f31ea;\n\t\t\t\t--pitch7-secondary-channel: #221b89;\n\t\t\t\t--pitch7-primary-channel:   #2b6aff;\n\t\t\t\t--pitch7-secondary-note:    #221b89;\n\t\t\t\t--pitch7-primary-note:      #2b6aff;\n\t\t\t\t--pitch8-secondary-channel: #00995f;\n\t\t\t\t--pitch8-primary-channel:   #00ff9f;\n\t\t\t\t--pitch8-secondary-note:    #00995f;\n\t\t\t\t--pitch8-primary-note:      #00ff9f;\n\t\t\t\t--pitch9-secondary-channel: #d6b03e;\n\t\t\t\t--pitch9-primary-channel:   #ffbf00;\n\t\t\t\t--pitch9-secondary-note:    #d6b03e;\n\t\t\t\t--pitch9-primary-note:      #ffbf00;\n\t\t\t\t--pitch10-secondary-channel:#b25915;\n\t\t\t\t--pitch10-primary-channel:  #d85d00;\n\t\t\t\t--pitch10-secondary-note:   #b25915;\n\t\t\t\t--pitch10-primary-note:     #d85d00;\n\t\t\t\t--noise1-secondary-channel: #991010;\n\t\t\t\t--noise1-primary-channel:   #ff1616;\n\t\t\t\t--noise1-secondary-note:    #991010;\n\t\t\t\t--noise1-primary-note:      #ff1616;\n\t\t\t\t--noise2-secondary-channel: #aaaaaa;\n\t\t\t\t--noise2-primary-channel:   #ffffff;\n\t\t\t\t--noise2-secondary-note:    #aaaaaa;\n\t\t\t\t--noise2-primary-note:      #ffffff;\n\t\t\t\t--noise3-secondary-channel: #5869BD;\n\t\t\t\t--noise3-primary-channel:   #768dfc;\n\t\t\t\t--noise3-secondary-note:    #5869BD;\n\t\t\t\t--noise3-primary-note:      #768dfc;\n\t\t\t\t--noise4-secondary-channel: #7c9b42;\n\t\t\t\t--noise4-primary-channel:   #a5ff00;\n\t\t\t\t--noise4-secondary-note:    #7c9b42;\n\t\t\t\t--noise4-primary-note:      #a5ff00;\n\t\t\t\t--noise5-secondary-channel: #7c9b42;\n\t\t\t\t--noise5-primary-channel:   #A2BB77;\n\t\t\t\t--noise5-secondary-note:    #91AA66;\n\t\t\t\t--noise5-primary-note:      #C5E2B2;\n         --mod1-secondary-channel: #0099a1;\n\t\t\t\t--mod1-primary-channel:   #25f3ff;\n\t\t\t\t--mod1-secondary-note:    #0099a1;\n\t\t\t\t--mod1-primary-note:      #25f3ff;\n\t\t\t\t--mod2-secondary-channel: #439143;\n\t\t\t\t--mod2-primary-channel:   #44ff44;\n\t\t\t\t--mod2-secondary-note:    #439143;\n\t\t\t\t--mod2-primary-note:      #44ff44;\n\t\t\t\t--mod3-secondary-channel: #a1a100;\n\t\t\t\t--mod3-primary-channel:   #ffff25;\n\t\t\t\t--mod3-secondary-note:    #a1a100;\n\t\t\t\t--mod3-primary-note:      #ffff25;\n\t\t\t\t--mod4-secondary-channel: #c75000;\n\t\t\t\t--mod4-primary-channel:   #ff9752;\n\t\t\t\t--mod4-secondary-note:    #c75000;\n\t\t\t\t--mod4-primary-note:      #ff9752;\n\t\t\t\t\t--mod-label-primary:        #999;\n\t\t\t\t\t--mod-label-secondary-text: #333;\n\t\t\t\t\t--mod-label-primary-text:   black;\n\t\t\t\t\t--disabled-note-primary:    #999;\n\t\t\t\t\t--disabled-note-secondary:  #666;\n\t\t\t\t}\n\t\t\t`,\n\t\t\t\"zefbox\": `\n\t\t\t:root {\n\t\t\t\t--page-margin: black;\n\t\t\t\t--editor-background: black;\n\t\t\t\t--hover-preview: white;\n\t\t\t\t--playhead: white;\n\t\t\t\t--primary-text: white;\n\t\t\t\t--secondary-text: #999;\n\t\t\t\t--inverted-text: black;\n\t\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\n\t\t\t\t--loop-accent: #C3593D;\n\t\t\t\t--link-accent: #98f;\n\t\t\t\t--ui-widget-background: #444;\n\t\t\t\t--ui-widget-focus: #777;\n\t\t\t\t--pitch-background: #444;\n\t\t\t\t--tonic: #864;\n\t\t\t\t--fifth-note: #468;\n\t\t\t\t--white-piano-key: #bbb;\n\t\t\t\t--black-piano-key: #444;\n\t\t\t\t--white-piano-key-text: #131200;\n\t\t\t\t--black-piano-key-text: #fff;\n\t\t\t\t\t--use-color-formula: false;\n\t\t\t\t\t--track-editor-bg-pitch: #444;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #333;\n\t\t\t\t\t--track-editor-bg-noise: #444;\n\t\t\t\t\t--track-editor-bg-noise-dim: #333;\n\t\t\t\t\t--track-editor-bg-mod: #234;\n\t\t\t\t\t--track-editor-bg-mod-dim: #123;\n\t\t\t\t\t--multiplicative-mod-slider: #456;\n\t\t\t\t\t--overwriting-mod-slider: #654;\n\t\t\t\t\t--indicator-primary: #74f;\n\t\t\t\t\t--indicator-secondary: #444;\n\t\t\t\t\t--select2-opt-group: #585858;\n\t\t\t\t\t--input-box-outline: #333;\n\t\t\t\t\t--mute-button-normal: #ffa033;\n\t\t\t\t\t--mute-button-mod: #9a6bff;\n\t\t\t\t--pitch1-secondary-channel: #06c400;\n\t\t\t\t--pitch1-primary-channel:   #08ff00;\n\t\t\t\t--pitch1-secondary-note:    #06c400;\n\t\t\t\t--pitch1-primary-note:      #06e000;\n\t\t\t\t--pitch2-secondary-channel: #00bf97;\n\t\t\t\t--pitch2-primary-channel:   #00ffcb;\n\t\t\t\t--pitch2-secondary-note:    #00bf97;\n\t\t\t\t--pitch2-primary-note:      #00edbc;\n\t\t\t\t--pitch3-secondary-channel: #b5b000;\n\t\t\t\t--pitch3-primary-channel:   #fffa00;\n\t\t\t\t--pitch3-secondary-note:    #b5b000;\n\t\t\t\t--pitch3-primary-note:      #e0db00;\n\t\t\t\t--pitch4-secondary-channel: #c90000;\n\t\t\t\t--pitch4-primary-channel:   #e20000;\n\t\t\t\t--pitch4-secondary-note:    #c90000;\n\t\t\t\t--pitch4-primary-note:      #e20000;\n\t\t\t\t--pitch5-secondary-channel: #d17d12;\n\t\t\t\t--pitch5-primary-channel:   #ff9e21;\n\t\t\t\t--pitch5-secondary-note:    #d17d12;\n\t\t\t\t--pitch5-primary-note:      #ef9017;\n\t\t\t\t--pitch6-secondary-channel: #d35bc8;\n\t\t\t\t--pitch6-primary-channel:   #ffa5f7;\n\t\t\t\t--pitch6-secondary-note:    #d35bc8;\n\t\t\t\t--pitch6-primary-note:      #fc64ee;\n\t\t\t\t--pitch7-secondary-channel: #D00000;\n\t\t\t\t--pitch7-primary-channel:   #FF4444;\n\t\t\t\t--pitch7-secondary-note:    #D00000;\n\t\t\t\t--pitch7-primary-note:      #FF4444;\n\t\t\t\t--pitch8-secondary-channel: #00C700;\n\t\t\t\t--pitch8-primary-channel:   #A0FFA0;\n\t\t\t\t--pitch8-secondary-note:    #00C700;\n\t\t\t\t--pitch8-primary-note:      #A0FFA0;\n\t\t\t\t--pitch9-secondary-channel: #A88981;\n\t\t\t\t--pitch9-primary-channel:   #F1C3B7;\n\t\t\t\t--pitch9-secondary-note:    #A88981;\n\t\t\t\t--pitch9-primary-note:      #F1C3B7;\n\t\t\t\t--pitch10-secondary-channel:#0C0A99;\n\t\t\t\t--pitch10-primary-channel:  #0000EE;\n\t\t\t\t--pitch10-secondary-note:   #0C0A99;\n\t\t\t\t--pitch10-primary-note:     #0000EE;\n\t\t\t\t--noise1-secondary-channel: #ABABAB;\n\t\t\t\t--noise1-primary-channel:   #D6D6D6;\n\t\t\t\t--noise1-secondary-note:    #ABABAB;\n\t\t\t\t--noise1-primary-note:      #D6D6D6;\n\t\t\t\t--noise2-secondary-channel: #A18F51;\n\t\t\t\t--noise2-primary-channel:   #F6BB6A;\n\t\t\t\t--noise2-secondary-note:    #A18F51;\n\t\t\t\t--noise2-primary-note:      #F6BB6A;\n\t\t\t\t--noise3-secondary-channel: #5869BD;\n\t\t\t\t--noise3-primary-channel:   #768DFC;\n\t\t\t\t--noise3-secondary-note:    #5869BD;\n\t\t\t\t--noise3-primary-note:      #768DFC;\n\t\t\t\t--noise4-secondary-channel: #8888D0;\n\t\t\t\t--noise4-primary-channel:   #D0D0FF;\n\t\t\t\t--noise4-secondary-note:    #8888D0;\n\t\t\t\t--noise4-primary-note:      #D0D0FF;\n\t\t\t\t--noise5-secondary-channel: #B7148E;\n\t\t\t\t--noise5-primary-channel:   #E819B4;\n\t\t\t\t--noise5-secondary-note:    #B7148E;\n\t\t\t\t--noise5-primary-note:      #E819B4;\n       --mod1-secondary-channel: #06c400;\n\t\t\t\t--mod1-primary-channel:   #08ff00;\n\t\t\t\t--mod1-secondary-note:    #06c400;\n\t\t\t\t--mod1-primary-note:      #06e000;\n\t\t\t\t--mod2-secondary-channel: #00bf97;\n\t\t\t\t--mod2-primary-channel:   #00ffcb;\n\t\t\t\t--mod2-secondary-note:    #00bf97;\n\t\t\t\t--mod2-primary-note:      #00edbc;\n\t\t\t\t--mod3-secondary-channel: #b5b000;\n\t\t\t\t--mod3-primary-channel:   #fffa00;\n\t\t\t\t--mod3-secondary-note:    #b5b000;\n\t\t\t\t--mod3-primary-note:      #e0db00;\n\t\t\t\t--mod4-secondary-channel: #c90000;\n\t\t\t\t--mod4-primary-channel:   #e20000;\n\t\t\t\t--mod4-secondary-note:    #c90000;\n\t\t\t\t--mod4-primary-note:      #e20000;\n\t\t\t\t\t--mod-label-primary:        #999;\n\t\t\t\t\t--mod-label-secondary-text: #333;\n\t\t\t\t\t--mod-label-primary-text:   black;\n\t\t\t\t\t--disabled-note-primary:    #999;\n\t\t\t\t\t--disabled-note-secondary:  #666;\n\t\t\t\t}\n\t\t\t`,\n\t\t\t\"sandbox classic\": `\n\t\t\t:root {\n\t\t\t\t--page-margin: black;\n\t\t\t\t--editor-background: black;\n\t\t\t\t--hover-preview: white;\n\t\t\t\t--playhead: white;\n\t\t\t\t--primary-text: white;\n\t\t\t\t--secondary-text: #999;\n\t\t\t\t--inverted-text: black;\n\t\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\n\t\t\t\t--loop-accent: #198195;\n\t\t\t\t--link-accent: #98f;\n\t\t\t\t--ui-widget-background: #444;\n\t\t\t\t--ui-widget-focus: #777;\n\t\t\t\t--pitch-background: #444;\n\t\t\t\t--tonic: #864;\n\t\t\t\t--fifth-note: #468;\n\t\t\t\t--white-piano-key: #bbb;\n\t\t\t\t--black-piano-key: #444;\n\t\t\t\t--white-piano-key-text: #131200;\n\t\t\t\t--black-piano-key-text: #fff;\n\t\t\t\t\t--use-color-formula: false;\n\t\t\t\t\t--track-editor-bg-pitch: #444;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #333;\n\t\t\t\t\t--track-editor-bg-noise: #444;\n\t\t\t\t\t--track-editor-bg-noise-dim: #333;\n\t\t\t\t\t--track-editor-bg-mod: #234;\n\t\t\t\t\t--track-editor-bg-mod-dim: #123;\n\t\t\t\t\t--multiplicative-mod-slider: #456;\n\t\t\t\t\t--overwriting-mod-slider: #654;\n\t\t\t\t\t--indicator-primary: #74f;\n\t\t\t\t\t--indicator-secondary: #444;\n\t\t\t\t\t--select2-opt-group: #585858;\n\t\t\t\t\t--input-box-outline: #333;\n\t\t\t\t\t--mute-button-normal: #ffa033;\n\t\t\t\t\t--mute-button-mod: #9a6bff;\n\t\t\t\t\t--pitch-channel-limit: 6;\n\t\t\t\t\t--noise-channel-limit: 4;\n\t\t\t\t--pitch1-secondary-channel: #539999;\n\t\t\t\t--pitch1-primary-channel:   #5EB1B1;\n\t\t\t\t--pitch1-secondary-note:    #539999;\n\t\t\t\t--pitch1-primary-note:      #5EB1B1;\n\t\t\t\t--pitch2-secondary-channel: #95933C;\n\t\t\t\t--pitch2-primary-channel:   #B0AD44;\n\t\t\t\t--pitch2-secondary-note:    #95933C;\n\t\t\t\t--pitch2-primary-note:      #B0AD44;\n\t\t\t\t--pitch3-secondary-channel: #E75566;\n\t\t\t\t--pitch3-primary-channel:   #FF9AA6;\n\t\t\t\t--pitch3-secondary-note:    #E75566;\n\t\t\t\t--pitch3-primary-note:      #FF9AA6;\n\t\t\t\t--pitch4-secondary-channel: #8B4343;\n\t\t\t\t--pitch4-primary-channel:   #FF8844;\n\t\t\t\t--pitch4-secondary-note:    #8B4343;\n\t\t\t\t--pitch4-primary-note:      #FF8844;\n\t\t\t\t--pitch5-secondary-channel: #888888;\n\t\t\t\t--pitch5-primary-channel:   #BBBBBB;\n\t\t\t\t--pitch5-secondary-note:    #888888;\n\t\t\t\t--pitch5-primary-note:      #BBBBBB;\n\t\t\t\t--pitch6-secondary-channel: #BB6906;\n\t\t\t\t--pitch6-primary-channel:   #FE8D00;\n\t\t\t\t--pitch6-secondary-note:    #BB6906;\n\t\t\t\t--pitch6-primary-note:      #FE8D00;\n\t\t\t\t--pitch7-secondary-channel: #539999;\n\t\t\t\t--pitch7-primary-channel:   #5EB1B1;\n\t\t\t\t--pitch7-secondary-note:    #539999;\n\t\t\t\t--pitch7-primary-note:      #5EB1B1;\n\t\t\t\t--pitch8-secondary-channel: #95933C;\n\t\t\t\t--pitch8-primary-channel:   #B0AD44;\n\t\t\t\t--pitch8-secondary-note:    #95933C;\n\t\t\t\t--pitch8-primary-note:      #B0AD44;\n\t\t\t\t--pitch9-secondary-channel: #E75566;\n\t\t\t\t--pitch9-primary-channel:   #FF9AA6;\n\t\t\t\t--pitch9-secondary-note:    #E75566;\n\t\t\t\t--pitch9-primary-note:      #FF9AA6;\n\t\t\t\t--pitch10-secondary-channel: #8B4343;\n\t\t\t\t--pitch10-primary-channel:   #FF8844;\n\t\t\t\t--pitch10-secondary-note:    #8B4343;\n\t\t\t\t--pitch10-primary-note:      #FF8844;\t\t\t\n\t\t\t\t--noise1-secondary-channel: #ABABAB;\n\t\t\t\t--noise1-primary-channel:   #D6D6D6;\n\t\t\t\t--noise1-secondary-note:    #ABABAB;\n\t\t\t\t--noise1-primary-note:      #D6D6D6;\n\t\t\t\t--noise2-secondary-channel: #A18F51;\n\t\t\t\t--noise2-primary-channel:   #F6BB6A;\n\t\t\t\t--noise2-secondary-note:    #A18F51;\n\t\t\t\t--noise2-primary-note:      #F6BB6A;\n\t\t\t\t--noise3-secondary-channel: #5869BD;\n\t\t\t\t--noise3-primary-channel:   #768DFC;\n\t\t\t\t--noise3-secondary-note:    #5869BD;\n\t\t\t\t--noise3-primary-note:      #768DFC;\n\t\t\t\t--noise4-secondary-channel: #8888D0;\n\t\t\t\t--noise4-primary-channel:   #D0D0FF;\n\t\t\t\t--noise4-secondary-note:    #8888D0;\n\t\t\t\t--noise4-primary-note:      #D0D0FF;\n\t\t\t\t--noise5-secondary-channel: #A18F51;\n\t\t\t\t--noise5-primary-channel:   #F6BB6A;\n\t\t\t\t--noise5-secondary-note:    #A18F51;\n\t\t\t\t--noise5-primary-note:      #F6BB6A;\t\t\t\n         \t--mod1-secondary-channel: #539999;\n\t\t\t\t--mod1-primary-channel:   #5EB1B1;\n\t\t\t\t--mod1-secondary-note:    #539999;\n\t\t\t\t--mod1-primary-note:      #5EB1B1;\n\t\t\t\t--mod2-secondary-channel: #95933C;\n\t\t\t\t--mod2-primary-channel:   #B0AD44;\n\t\t\t\t--mod2-secondary-note:    #95933C;\n\t\t\t\t--mod2-primary-note:      #B0AD44;\n\t\t\t\t--mod3-secondary-channel: #E75566;\n\t\t\t\t--mod3-primary-channel:   #FF9AA6;\n\t\t\t\t--mod3-secondary-note:    #E75566;\n\t\t\t\t--mod3-primary-note:      #FF9AA6;\n\t\t\t\t--mod4-secondary-channel: #8B4343;\n\t\t\t\t--mod4-primary-channel:   #FF8844;\n\t\t\t\t--mod4-secondary-note:    #8B4343;\n\t\t\t\t--mod4-primary-note:      #FF8844;\n\t\t\t\t\t--mod-label-primary:        #999;\n\t\t\t\t\t--mod-label-secondary-text: #333;\n\t\t\t\t\t--mod-label-primary-text:   black;\n\t\t\t\t\t--disabled-note-primary:    #999;\n\t\t\t\t\t--disabled-note-secondary:  #666;\n\t\t\t\t}\n\t\t\t`,\n\t\t\t\"harrybox\": `\n\t\t\t:root {\n\t\t\t\t--page-margin: black;\n\t\t\t\t--editor-background: black;\n\t\t\t\t--hover-preview: white;\n\t\t\t\t--playhead: white;\n\t\t\t\t--primary-text: white;\n\t\t\t\t--secondary-text: #999;\n\t\t\t\t--inverted-text: black;\n\t\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\n\t\t\t\t--loop-accent: #9900cc;\n\t\t\t\t--link-accent: #98f;\n\t\t\t\t--ui-widget-background: #444;\n\t\t\t\t--ui-widget-focus: #777;\n\t\t\t\t--pitch-background: #444;\n\t\t\t\t--tonic: #864;\n\t\t\t\t--fifth-note: #468;\n\t\t\t\t--white-piano-key: #bbb;\n\t\t\t\t--black-piano-key: #444;\n\t\t\t\t--white-piano-key-text: #131200;\n\t\t\t\t--black-piano-key-text: #fff;\n\t\t\t\t\t--use-color-formula: false;\n\t\t\t\t\t--track-editor-bg-pitch: #444;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #333;\n\t\t\t\t\t--track-editor-bg-noise: #444;\n\t\t\t\t\t--track-editor-bg-noise-dim: #333;\n\t\t\t\t\t--track-editor-bg-mod: #234;\n\t\t\t\t\t--track-editor-bg-mod-dim: #123;\n\t\t\t\t\t--multiplicative-mod-slider: #456;\n\t\t\t\t\t--overwriting-mod-slider: #654;\n\t\t\t\t\t--indicator-primary: #74f;\n\t\t\t\t\t--indicator-secondary: #444;\n\t\t\t\t\t--select2-opt-group: #585858;\n\t\t\t\t\t--input-box-outline: #333;\n\t\t\t\t\t--mute-button-normal: #ffa033;\n\t\t\t\t\t--mute-button-mod: #9a6bff;\n\t\t\t\t\t--noise-channel-limit: 2;\n\t\t\t\t--pitch1-secondary-channel: #00ffff;\n\t\t\t\t--pitch1-primary-channel:   #00ffff;\n\t\t\t\t--pitch1-secondary-note:    #00ffff;\n\t\t\t\t--pitch1-primary-note:      #00ffff;\n\t\t\t\t--pitch2-secondary-channel: #00d8d8;\n\t\t\t\t--pitch2-primary-channel:   #00d8d8;\n\t\t\t\t--pitch2-secondary-note:    #00d8d8;\n\t\t\t\t--pitch2-primary-note:      #00d8d8;\n\t\t\t\t--pitch3-secondary-channel: #00adad;\n\t\t\t\t--pitch3-primary-channel:   #00adad;\n\t\t\t\t--pitch3-secondary-note:    #00adad;\n\t\t\t\t--pitch3-primary-note:      #00adad;\n\t\t\t\t-pitch4-secondary-channel: #008c8c;\n\t\t\t\t--pitch4-primary-channel:   #008c8c;\n\t\t\t\t--pitch4-secondary-note:    #008c8c;\n\t\t\t\t--pitch4-primary-note:      #008c8c;\n\t\t\t\t--pitch5-secondary-channel: #005b5b;\n\t\t\t\t--pitch5-primary-channel:   #005b5b;\n\t\t\t\t--pitch5-secondary-note:    #005b5b;\n\t\t\t\t--pitch5-primary-note:      #005b5b;\n\t\t\t\t--pitch6-secondary-channel: #003333;\n\t\t\t\t--pitch6-primary-channel:   #003333;\n\t\t\t\t--pitch6-secondary-note:    #003333;\n\t\t\t\t--pitch6-primary-note:      #003333;\n\t\t\t\t--pitch7-secondary-channel: #00ffff;\n\t\t\t\t--pitch7-primary-channel:   #00ffff;\n\t\t\t\t--pitch7-secondary-note:    #00ffff;\n\t\t\t\t--pitch7-primary-note:      #00ffff;\n\t\t\t\t--pitch8-secondary-channel: #00ffff;\n\t\t\t\t--pitch8-primary-channel:   #00ffff;\n\t\t\t\t--pitch8-secondary-note:    #00ffff;\n\t\t\t\t--pitch8-primary-note:      #00ffff;\n\t\t\t\t--pitch9-secondary-channel: #00ffff;\n\t\t\t\t--pitch9-primary-channel:   #00ffff;\n\t\t\t\t--pitch9-secondary-note:    #00ffff;\n\t\t\t\t--pitch9-primary-note:      #00ffff;\n\t\t\t\t--pitch10-secondary-channel:#00ffff;\n\t\t\t\t--pitch10-primary-channel:  #00ffff;\n\t\t\t\t--pitch10-secondary-note:   #00ffff;\n\t\t\t\t--pitch10-primary-note:     #00ffff;\n\t\t\t\t--noise1-secondary-channel: #991010;\n\t\t\t\t--noise1-primary-channel:   #ff1616;\n\t\t\t\t--noise1-secondary-note:    #991010;\n\t\t\t\t--noise1-primary-note:      #ff1616;\n\t\t\t\t--noise2-secondary-channel: #aaaaaa;\n\t\t\t\t--noise2-primary-channel:   #ffffff;\n\t\t\t\t--noise2-secondary-note:    #aaaaaa;\n\t\t\t\t--noise2-primary-note:      #ffffff;\n\t\t\t\t--noise3-secondary-channel: #991010;\n\t\t\t\t--noise3-primary-channel:   #ff1616;\n\t\t\t\t--noise3-secondary-note:    #991010;\n\t\t\t\t--noise3-primary-note:      #ff1616;\n\t\t\t\t--noise4-secondary-channel: #aaaaaa;\n\t\t\t\t--noise4-primary-channel:   #ffffff;\n\t\t\t\t--noise4-secondary-note:    #aaaaaa;\n\t\t\t\t--noise4-primary-note:      #ffffff;\n\t\t\t\t--noise5-secondary-channel: #991010;\n\t\t\t\t--noise5-primary-channel:   #ff1616;\n\t\t\t\t--noise5-secondary-note:    #991010;\n\t\t\t\t--noise5-primary-note:      #ff1616;\n         \t--mod1-secondary-channel: #00ffff;\n\t\t\t\t--mod1-primary-channel:   #00ffff;\n\t\t\t\t--mod1-secondary-note:    #00ffff;\n\t\t\t\t--mod1-primary-note:      #00ffff;\n\t\t\t\t--mod2-secondary-channel: #00d8d8;\n\t\t\t\t--mod2-primary-channel:   #00d8d8;\n\t\t\t\t--mod2-secondary-note:    #00d8d8;\n\t\t\t\t--mod2-primary-note:      #00d8d8;\n\t\t\t\t--mod3-secondary-channel: #00adad;\n\t\t\t\t--mod3-primary-channel:   #00adad;\n\t\t\t\t--mod3-secondary-note:    #00adad;\n\t\t\t\t--mod3-primary-note:      #00adad;\n\t\t\t\t-mod4-secondary-channel: #008c8c;\n\t\t\t\t--mod4-primary-channel:   #008c8c;\n\t\t\t\t--mod4-secondary-note:    #008c8c;\n\t\t\t\t--mod4-primary-note:      #008c8c;\n\t\t\t\t\t--mod-label-primary:        #999;\n\t\t\t\t\t--mod-label-secondary-text: #333;\n\t\t\t\t\t--mod-label-primary-text:   black;\n\t\t\t\t\t--disabled-note-primary:    #999;\n\t\t\t\t\t--disabled-note-secondary:  #666;\n\t\t\t\t}\n\t\t\t`,\n\t\t\t\"brucebox\": `\n\t\t:root {\n\t\t\t\tfont: 16px/2 cursive;\n\t\t\t\t--page-margin: #4667CE;\n\t\t\t\t--editor-background: black;\n\t\t\t\t--hover-preview: white;\n\t\t\t\t--playhead: white;\n\t\t\t\t--primary-text: white;\n\t\t\t\t--secondary-text: #999;\n\t\t\t\t--inverted-text: black;\n\t\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\n\t\t\t\t--loop-accent: #9900cc;\n\t\t\t\t--link-accent: #98f;\n\t\t\t\t--ui-widget-background: #444;\n\t\t\t\t--ui-widget-focus: #777;\n\t\t\t\t--pitch-background: #444;\n\t\t\t\t--tonic: #864;\n\t\t\t\t--fifth-note: #468;\n\t\t\t\t--white-piano-key: #bbb;\n\t\t\t\t--black-piano-key: #444;\n\t\t\t\t--white-piano-key-text: #131200;\n\t\t\t\t--black-piano-key-text: #fff;\n\t\t\t\t\t--use-color-formula: false;\n\t\t\t\t\t--track-editor-bg-pitch: #444;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #333;\n\t\t\t\t\t--track-editor-bg-noise: #444;\n\t\t\t\t\t--track-editor-bg-noise-dim: #333;\n\t\t\t\t\t--track-editor-bg-mod: #234;\n\t\t\t\t\t--track-editor-bg-mod-dim: #123;\n\t\t\t\t\t--multiplicative-mod-slider: #456;\n\t\t\t\t\t--overwriting-mod-slider: #654;\n\t\t\t\t\t--indicator-primary: #74f;\n\t\t\t\t\t--indicator-secondary: #444;\n\t\t\t\t\t--select2-opt-group: #585858;\n\t\t\t\t\t--input-box-outline: #333;\n\t\t\t\t\t--mute-button-normal: #ffa033;\n\t\t\t\t\t--mute-button-mod: #9a6bff;\n\t\t\t\t\t--pitch-channel-limit: 3;\n\t\t\t\t\t--noise-channel-limit: 1;\n\t\t\t\t--pitch1-secondary-channel: #bda822;\n\t\t\t\t--pitch1-primary-channel:   #fcdb00;\n\t\t\t\t--pitch1-secondary-note:    #bda822;\n\t\t\t\t--pitch1-primary-note:      #fcdb00;\n\t\t\t\t--pitch2-secondary-channel: #612278;\n\t\t\t\t--pitch2-primary-channel:   #bb00ff;\n\t\t\t\t--pitch2-secondary-note:    #612278;\n\t\t\t\t--pitch2-primary-note:      #bb00ff;\n\t\t\t\t--pitch3-secondary-channel: #8b4343;\n\t\t\t\t--pitch3-primary-channel:   #ff8844;\n\t\t\t\t--pitch3-secondary-note:    #8b4343;\n\t\t\t\t--pitch3-primary-note:      #ff8844;\n\t\t\t\t--pitch4-secondary-channel: #bda822;\n\t\t\t\t--pitch4-primary-channel:   #fcdb00;\n\t\t\t\t--pitch4-secondary-note:    #bda822;\n\t\t\t\t--pitch4-primary-note:      #fcdb00;\n\t\t\t\t--pitch5-secondary-channel: #612278;\n\t\t\t\t--pitch5-primary-channel:   #bb00ff;\n\t\t\t\t--pitch5-secondary-note:    #612278;\n\t\t\t\t--pitch5-primary-note:      #bb00ff;\n\t\t\t\t--pitch6-secondary-channel: #8b4343;\n\t\t\t\t--pitch6-primary-channel:   #ff8844;\n\t\t\t\t--pitch6-secondary-note:    #8b4343;\n\t\t\t\t--pitch6-primary-note:      #ff8844;\n\t\t\t\t--pitch7-secondary-channel: #bda822;\n\t\t\t\t--pitch7-primary-channel:   #fcdb00;\n\t\t\t\t--pitch7-secondary-note:    #bda822;\n\t\t\t\t--pitch7-primary-note:      #fcdb00;\n\t\t\t\t--pitch8-secondary-channel: #612278;\n\t\t\t\t--pitch8-primary-channel:   #bb00ff;\n\t\t\t\t--pitch8-secondary-note:    #612278;\n\t\t\t\t--pitch8-primary-note:      #bb00ff;\n\t\t\t\t--pitch9-secondary-channel: #8b4343;\n\t\t\t\t--pitch9-primary-channel:   #ff8844;\n\t\t\t\t--pitch9-secondary-note:    #8b4343;\n\t\t\t\t--pitch9-primary-note:      #ff8844;\n\t\t\t\t--pitch10-secondary-channel: #bda822;\n\t\t\t\t--pitch10-primary-channel:   #fcdb00;\n\t\t\t\t--pitch10-secondary-note:    #bda822;\n\t\t\t\t--pitch10-primary-note:      #fcdb00;\n\t\t\t\t--noise1-secondary-channel: #991010;\n\t\t\t\t--noise1-secondary-channel: #6F6F6F;\n\t\t\t\t--noise1-primary-channel:   #AAAAAA;\n\t\t\t\t--noise1-secondary-note:    #A7A7A7;\n\t\t\t\t--noise1-primary-note:      #E0E0E0;\n\t\t\t\t--noise2-secondary-channel: #996633;\n\t\t\t\t--noise2-primary-channel:   #DDAA77;\n\t\t\t\t--noise2-secondary-note:    #CC9966;\n\t\t\t\t--noise2-primary-note:      #F0D0BB;\n\t\t\t\t--noise3-secondary-channel: #4A6D8F;\n\t\t\t\t--noise3-primary-channel:   #77AADD;\n\t\t\t\t--noise3-secondary-note:    #6F9FCF;\n\t\t\t\t--noise3-primary-note:      #BBD7FF;\n\t\t\t\t--noise4-secondary-channel: #7A4F9A;\n\t\t\t\t--noise4-primary-channel:   #AF82D2;\n\t\t\t\t--noise4-secondary-note:    #9E71C1;\n\t\t\t\t--noise4-primary-note:      #D4C1EA;\n\t\t\t\t--noise5-secondary-channel: #607837;\n\t\t\t\t--noise5-primary-channel:   #A2BB77;\n\t\t\t\t--noise5-secondary-note:    #91AA66;\n\t\t\t\t--noise5-primary-note:      #C5E2B2;\n          --mod1-secondary-channel:   #339955;\n\t\t\t\t\t--mod1-primary-channel:     #77fc55;\n\t\t\t\t\t--mod1-secondary-note:      #77ff8a;\n\t\t\t\t\t--mod1-primary-note:        #cdffee;\n\t\t\t\t\t--mod2-secondary-channel:   #993355;\n\t\t\t\t\t--mod2-primary-channel:     #f04960;\n\t\t\t\t\t--mod2-secondary-note:      #f057a0;\n\t\t\t\t\t--mod2-primary-note:        #ffb8de;\n\t\t\t\t\t--mod3-secondary-channel:   #553399;\n\t\t\t\t\t--mod3-primary-channel:     #8855fc;\n\t\t\t\t\t--mod3-secondary-note:      #aa64ff;\n\t\t\t\t\t--mod3-primary-note:\t    #f8ddff;\n\t\t\t\t\t--mod4-secondary-channel:   #a86436;\n\t\t\t\t\t--mod4-primary-channel:     #c8a825;\n\t\t\t\t\t--mod4-secondary-note:      #e8ba46;\n\t\t\t\t\t--mod4-primary-note:        #fff6d3;\n\t\t\t\t\t--mod-label-primary:        #999;\n\t\t\t\t\t--mod-label-secondary-text: #333;\n\t\t\t\t\t--mod-label-primary-text:   black;\n\t\t\t\t\t--disabled-note-primary:    #999;\n\t\t\t\t\t--disabled-note-secondary:  #666;\n\t\t\t\t}\n\t\t\t`,\n\t\t\t \"shitbox 2.0\": `\n\t\t\t:root {\n\t\t\t--page-margin: maroon;\n\t\t\t\t\t--editor-background: black;\n\t\t\t\t\t--hover-preview: white;\n\t\t\t\t\t--playhead: firebrick;\n\t\t\t\t\t--primary-text: silver;\n\t\t\t\t\t--secondary-text: #999;\n\t\t\t\t\t--inverted-text: black;\n\t\t\t\t--text-selection: rgba(139,69,19,0.99);\n\t\t\t\t\t--box-selection-fill: rgba(220,20,60,0.2);\n\t\t\t\t\t--loop-accent: #841;\n\t\t\t\t\t--link-accent: #841;\n\t\t\t\t\t--ui-widget-background: #800;\n\t\t\t\t\t--ui-widget-focus: #a00;\n\t\t\t\t\t--pitch-background: #700;\n\t\t\t\t\t--tonic: #522;\n\t\t\t\t\t--fifth-note: #f75;\n\t\t\t\t\t--white-piano-key: #bbb;\n\t\t\t\t\t--black-piano-key: #444;\n\t\t\t\t--white-piano-key-text: #131200;\n\t\t\t\t--black-piano-key-text: #fff;\n\t\t\t\t\t--use-color-formula: false;\n\t\t\t\t\t--track-editor-bg-pitch: #444;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #333;\n\t\t\t\t\t--track-editor-bg-noise: #444;\n\t\t\t\t\t--track-editor-bg-noise-dim: #333;\n\t\t\t\t\t--track-editor-bg-mod: #234;\n\t\t\t\t\t--track-editor-bg-mod-dim: #123;\n\t\t\t\t\t--multiplicative-mod-slider: #456;\n\t\t\t\t\t--overwriting-mod-slider: #654;\n\t\t\t\t\t--indicator-primary: #74f;\n\t\t\t\t\t--indicator-secondary: #444;\n\t\t\t\t\t--select2-opt-group: #585858;\n\t\t\t\t\t--input-box-outline: #333;\n\t\t\t\t\t--mute-button-normal: #ffa033;\n\t\t\t\t\t--mute-button-mod: #9a6bff;\n\t\t\t\t\t--pitch-channel-limit: 6;\n\t\t\t\t\t--noise-channel-limit: 3;\n\t\t\t\t--pitch1-secondary-channel: #7e4a35;\n\t\t\t\t\t--pitch1-primary-channel:   #c27251;\n\t\t\t\t\t--pitch1-secondary-note:    #7e4a35;\n\t\t\t\t\t--pitch1-primary-note:      #f09571;\n\t\t\t\t\t--pitch2-secondary-channel: #998a5c;\n\t\t\t\t\t--pitch2-primary-channel:   #d9c27c;\n\t\t\t\t\t--pitch2-secondary-note:    #998a5c;\n\t\t\t\t\t--pitch2-primary-note:      #fae196;\n\t\t\t\t\t--pitch3-secondary-channel: #9c927c;\n\t\t\t\t\t--pitch3-primary-channel:   #dbceb0;\n\t\t\t\t\t--pitch3-secondary-note:    #9c927c;\n\t\t\t\t\t--pitch3-primary-note:      #eddebb;\n\t\t\t\t\t--pitch4-secondary-channel: #838060;\n\t\t\t\t\t--pitch4-primary-channel:   #ccc795;\n\t\t\t\t\t--pitch4-secondary-note:    #838060;\n\t\t\t\t\t--pitch4-primary-note:      #f2ecb1;\n\t\t\t\t\t--pitch5-secondary-channel: #8b6f47;\n\t\t\t\t\t--pitch5-primary-channel:   #d1a76b;\n\t\t\t\t\t--pitch5-secondary-note:    #8b6f47;\n\t\t\t\t\t--pitch5-primary-note:      #ffcc82;\n\t\t\t\t\t--pitch6-secondary-channel: #a96e5b;\n\t\t\t\t\t--pitch6-primary-channel:   #e3967d;\n\t\t\t\t\t--pitch6-secondary-note:    #a96e5b;\n\t\t\t\t\t--pitch6-primary-note:      #ffa68a;\n\t\t\t\t\t\t--pitch7-secondary-channel: #7e4a35;\n\t\t\t\t\t--pitch7-primary-channel:   #c27251;\n\t\t\t\t\t--pitch7-secondary-note:    #7e4a35;\n\t\t\t\t\t--pitch7-primary-note:      #f09571;\n\t\t\t\t\t--pitch8-secondary-channel: #998a5c;\n\t\t\t\t\t--pitch8-primary-channel:   #d9c27c;\n\t\t\t\t\t--pitch8-secondary-note:    #998a5c;\n\t\t\t\t\t--pitch8-primary-note:      #fae196;\n\t\t\t\t\t--pitch9-secondary-channel: #9c927c;\n\t\t\t\t\t--pitch9-primary-channel:   #dbceb0;\n\t\t\t\t\t--pitch9-secondary-note:    #9c927c;\n\t\t\t\t\t--pitch9-primary-note:      #eddebb;\n\t\t\t\t\t--pitch10-secondary-channel: #838060;\n\t\t\t\t\t--pitch10-primary-channel:   #ccc795;\n\t\t\t\t\t--pitch10-secondary-note:    #838060;\n\t\t\t\t\t--pitch10-primary-note:      #f2ecb1;\n\t\t\t\t\t--noise1-secondary-channel: #6f6f6f;\n\t\t\t\t\t--noise1-primary-channel:   #aaaaaa;\n\t\t\t\t\t--noise1-secondary-note:    #a7a7a7;\n\t\t\t\t\t--noise1-primary-note:      #e0e0e0;\n\t\t\t\t\t--noise2-secondary-channel: #996633;\n\t\t\t\t\t--noise2-primary-channel:   #ddaa77;\n\t\t\t\t\t--noise2-secondary-note:    #cc9966;\n\t\t\t\t\t--noise2-primary-note:      #f0d0bb;\n\t\t\t\t\t--noise3-secondary-channel: #4a6d8f;\n\t\t\t\t\t--noise3-primary-channel:   #77aadd;\n\t\t\t\t\t--noise3-secondary-note:    #6f9fcf;\n\t\t\t\t\t--noise3-primary-note:      #bbd7ff;\n\t\t\t\t\t--noise4-secondary-channel: #6f6f6f;\n\t\t\t\t\t--noise4-primary-channel:   #aaaaaa;\n\t\t\t\t\t--noise4-secondary-note:    #a7a7a7;\n\t\t\t\t\t--noise4-primary-note:      #e0e0e0;\n\t\t\t\t\t--noise5-secondary-channel: #996633;\n\t\t\t\t\t--noise5-primary-channel:   #ddaa77;\n\t\t\t\t\t--noise5-secondary-note:    #cc9966;\n\t\t\t\t\t--noise5-primary-note:      #f0d0bb;\n         --mod1-secondary-channel: #7e4a35;\n\t\t\t\t\t--mod1-primary-channel:   #c27251;\n\t\t\t\t\t--mod1-secondary-note:    #7e4a35;\n\t\t\t\t\t--mod1-primary-note:      #f09571;\n\t\t\t\t\t--mod2-secondary-channel: #998a5c;\n\t\t\t\t\t--mod2-primary-channel:   #d9c27c;\n\t\t\t\t\t--mod2-secondary-note:    #998a5c;\n\t\t\t\t\t--mod2-primary-note:      #fae196;\n\t\t\t\t\t--mod3-secondary-channel: #9c927c;\n\t\t\t\t\t--mod3-primary-channel:   #dbceb0;\n\t\t\t\t\t--mod3-secondary-note:    #9c927c;\n\t\t\t\t\t--mod3-primary-note:      #eddebb;\n\t\t\t\t\t--mod4-secondary-channel: #838060;\n\t\t\t\t\t--mod4-primary-channel:   #ccc795;\n\t\t\t\t\t--mod4-secondary-note:    #838060;\n\t\t\t\t\t--mod4-primary-note:      #f2ecb1;\n\t\t\t\t\t--mod-label-primary:        #999;\n\t\t\t\t\t--mod-label-secondary-text: #333;\n\t\t\t\t\t--mod-label-primary-text:   black;\n\t\t\t\t\t--disabled-note-primary:    #999;\n\t\t\t\t\t--disabled-note-secondary:  #666;\n\t\t\t\t}\n\t\t\t`,\n\t\t\t \"shitbox 3.0\": `\n\t\t\t\n\t\t\t:root {\n\t\t\t\tfont: 20px/2 monospace;\n\t\t\t\t--page-margin: #252525;\n\t\t\t\t--editor-background: black;\n\t\t\t\t--hover-preview: white;\n\t\t\t\t--playhead: white;\n\t\t\t\t--primary-text: white;\n\t\t\t\t--secondary-text: #999;\n\t\t\t\t--inverted-text: black;\n\t\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\n\t\t\t\t--loop-accent: #74f;\n\t\t\t\t--link-accent: #98f;\n\t\t\t\t--ui-widget-background: #444;\n\t\t\t\t--ui-widget-focus: #777;\n\t\t\t\t--pitch-background: #444;\n\t\t\t\t--tonic: #864;\n\t\t\t\t--fifth-note: #468;\n\t\t\t\t--white-piano-key: #bbb;\n\t\t\t\t--black-piano-key: #444;\n\t\t\t\t--white-piano-key-text: #131200;\n\t\t\t\t--black-piano-key-text: #fff;\n\t\t\t\t\t--use-color-formula: false;\n\t\t\t\t\t--track-editor-bg-pitch: #444;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #333;\n\t\t\t\t\t--track-editor-bg-noise: #444;\n\t\t\t\t\t--track-editor-bg-noise-dim: #333;\n\t\t\t\t\t--track-editor-bg-mod: #234;\n\t\t\t\t\t--track-editor-bg-mod-dim: #123;\n\t\t\t\t\t--multiplicative-mod-slider: #456;\n\t\t\t\t\t--overwriting-mod-slider: #654;\n\t\t\t\t\t--indicator-primary: #74f;\n\t\t\t\t\t--indicator-secondary: #444;\n\t\t\t\t\t--select2-opt-group: #585858;\n\t\t\t\t\t--input-box-outline: #333;\n\t\t\t\t\t--mute-button-normal: #ffa033;\n\t\t\t\t\t--mute-button-mod: #9a6bff;\n\t\t\t\t\t--pitch-channel-limit: 6;\n\t\t\t\t\t--noise-channel-limit: 3;\n\t\t\t\t--pitch1-secondary-channel: #0099A1;\n\t\t\t\t--pitch1-primary-channel:   #25F3FF;\n\t\t\t\t--pitch1-secondary-note:    #00BDC7;\n\t\t\t\t--pitch1-primary-note:      #92F9FF;\n\t\t\t\t--pitch2-secondary-channel: #A1A100;\n\t\t\t\t--pitch2-primary-channel:   #FFFF25;\n\t\t\t\t--pitch2-secondary-note:    #C7C700;\n\t\t\t\t--pitch2-primary-note:      #FFFF92;\n\t\t\t\t--pitch3-secondary-channel: #C75000;\n\t\t\t\t--pitch3-primary-channel:   #FF9752;\n\t\t\t\t--pitch3-secondary-note:    #FF771C;\n\t\t\t\t--pitch3-primary-note:      #FFCDAB;\n\t\t\t\t--pitch4-secondary-channel: #00A100;\n\t\t\t\t--pitch4-primary-channel:   #50FF50;\n\t\t\t\t--pitch4-secondary-note:    #00C700;\n\t\t\t\t--pitch4-primary-note:      #A0FFA0;\n\t\t\t\t--pitch5-secondary-channel: #D020D0;\n\t\t\t\t--pitch5-primary-channel:   #FF90FF;\n\t\t\t\t--pitch5-secondary-note:    #E040E0;\n\t\t\t\t--pitch5-primary-note:      #FFC0FF;\n\t\t\t\t--pitch6-secondary-channel: #7777B0;\n\t\t\t\t--pitch6-primary-channel:   #A0A0FF;\n\t\t\t\t--pitch6-secondary-note:    #8888D0;\n\t\t\t\t--pitch6-primary-note:      #D0D0FF;\n\t\t\t\t--pitch7-secondary-channel: #8AA100;\n\t\t\t\t--pitch7-primary-channel:   #DEFF25;\n\t\t\t\t--pitch7-secondary-note:    #AAC700;\n\t\t\t\t--pitch7-primary-note:      #E6FF92;\n\t\t\t\t--pitch8-secondary-channel: #DF0019;\n\t\t\t\t--pitch8-primary-channel:   #FF98A4;\n\t\t\t\t--pitch8-secondary-note:    #FF4E63;\n\t\t\t\t--pitch8-primary-note:      #FFB2BB;\n\t\t\t\t--pitch9-secondary-channel: #00A170;\n\t\t\t\t--pitch9-primary-channel:   #50FFC9;\n\t\t\t\t--pitch9-secondary-note:    #00C78A;\n\t\t\t\t--pitch9-primary-note:      #83FFD9;\n\t\t\t\t--pitch10-secondary-channel:#A11FFF;\n\t\t\t\t--pitch10-primary-channel:  #CE8BFF;\n\t\t\t\t--pitch10-secondary-note:   #B757FF;\n\t\t\t\t--pitch10-primary-note:     #DFACFF;\n\t\t\t\t--noise1-secondary-channel: #6F6F6F;\n\t\t\t\t--noise1-primary-channel:   #AAAAAA;\n\t\t\t\t--noise1-secondary-note:    #A7A7A7;\n\t\t\t\t--noise1-primary-note:      #E0E0E0;\n\t\t\t\t--noise2-secondary-channel: #996633;\n\t\t\t\t--noise2-primary-channel:   #DDAA77;\n\t\t\t\t--noise2-secondary-note:    #CC9966;\n\t\t\t\t--noise2-primary-note:      #F0D0BB;\n\t\t\t\t--noise3-secondary-channel: #4A6D8F;\n\t\t\t\t--noise3-primary-channel:   #77AADD;\n\t\t\t\t--noise3-secondary-note:    #6F9FCF;\n\t\t\t\t--noise3-primary-note:      #BBD7FF;\n\t\t\t\t--noise4-secondary-channel: #7A4F9A;\n\t\t\t\t--noise4-primary-channel:   #AF82D2;\n\t\t\t\t--noise4-secondary-note:    #9E71C1;\n\t\t\t\t--noise4-primary-note:      #D4C1EA;\n\t\t\t\t--noise5-secondary-channel: #607837;\n\t\t\t\t--noise5-primary-channel:   #A2BB77;\n\t\t\t\t--noise5-secondary-note:    #91AA66;\n\t\t\t\t--noise5-primary-note:      #C5E2B2;\n          --mod1-secondary-channel:   #339955;\n\t\t\t\t\t--mod1-primary-channel:     #77fc55;\n\t\t\t\t\t--mod1-secondary-note:      #77ff8a;\n\t\t\t\t\t--mod1-primary-note:        #cdffee;\n\t\t\t\t\t--mod2-secondary-channel:   #993355;\n\t\t\t\t\t--mod2-primary-channel:     #f04960;\n\t\t\t\t\t--mod2-secondary-note:      #f057a0;\n\t\t\t\t\t--mod2-primary-note:        #ffb8de;\n\t\t\t\t\t--mod3-secondary-channel:   #553399;\n\t\t\t\t\t--mod3-primary-channel:     #8855fc;\n\t\t\t\t\t--mod3-secondary-note:      #aa64ff;\n\t\t\t\t\t--mod3-primary-note:\t    #f8ddff;\n\t\t\t\t\t--mod4-secondary-channel:   #a86436;\n\t\t\t\t\t--mod4-primary-channel:     #c8a825;\n\t\t\t\t\t--mod4-secondary-note:      #e8ba46;\n\t\t\t\t\t--mod4-primary-note:        #fff6d3;\n\t\t\t\t\t--mod-label-primary:        #999;\n\t\t\t\t\t--mod-label-secondary-text: #333;\n\t\t\t\t\t--mod-label-primary-text:   black;\n\t\t\t\t\t--disabled-note-primary:    #999;\n\t\t\t\t\t--disabled-note-secondary:  #666;\n\t\t\t\t}\n\t\t\t\n\t\t\t`,\n\t\t\t\"nerdbox\": `\n\t\t\t:root {\n\t\t\t\t--page-margin: black;\n\t\t\t\t--editor-background: black;\n\t\t\t\t--hover-preview: white;\n\t\t\t\t--playhead: white;\n\t\t\t\t--primary-text: white;\n\t\t\t\t--secondary-text: #999;\n\t\t\t\t--inverted-text: black;\n\t\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\n\t\t\t\t--loop-accent: #74f;\n\t\t\t\t--link-accent: #98f;\n\t\t\t\t--ui-widget-background: #444;\n\t\t\t\t--ui-widget-focus: #777;\n\t\t\t\t--pitch-background: #444;\n\t\t\t\t--tonic: #864;\n\t\t\t\t--fifth-note: #468;\n\t\t\t\t--white-piano-key: #bbb;\n\t\t\t\t--black-piano-key: #444;\n\t\t\t\t--white-piano-key-text: #131200;\n\t\t\t\t--black-piano-key-text: #fff;\n\t\t\t\t\t--use-color-formula: false;\n\t\t\t\t\t--track-editor-bg-pitch: #444;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #333;\n\t\t\t\t\t--track-editor-bg-noise: #444;\n\t\t\t\t\t--track-editor-bg-noise-dim: #333;\n\t\t\t\t\t--track-editor-bg-mod: #234;\n\t\t\t\t\t--track-editor-bg-mod-dim: #123;\n\t\t\t\t\t--multiplicative-mod-slider: #456;\n\t\t\t\t\t--overwriting-mod-slider: #654;\n\t\t\t\t\t--indicator-primary: #74f;\n\t\t\t\t\t--indicator-secondary: #444;\n\t\t\t\t\t--select2-opt-group: #585858;\n\t\t\t\t\t--input-box-outline: #333;\n\t\t\t\t\t--mute-button-normal: #ffa033;\n\t\t\t\t\t--mute-button-mod: #9a6bff;\n\t\t\t\t\t--pitch-channel-limit: 9;\n\t\t\t\t\t--noise-channel-limit: 3;\n\t\t\t\t--pitch1-secondary-channel: #139620;\n\t\t\t\t--pitch1-primary-channel:   #25ff3a;\n\t\t\t\t--pitch1-secondary-note:    #139620;\n\t\t\t\t--pitch1-primary-note:      #25ff3a;\n\t\t\t\t--pitch2-secondary-channel: #109986;\n\t\t\t\t--pitch2-primary-channel:   #1cffe0;\n\t\t\t\t--pitch2-secondary-note:    #109986;\n\t\t\t\t--pitch2-primary-note:      #1cffe0;\n\t\t\t\t--pitch3-secondary-channel: #127296;\n\t\t\t\t--pitch3-primary-channel:   #21c3ff;\n\t\t\t\t--pitch3-secondary-note:    #127296;\n\t\t\t\t--pitch3-primary-note:      #21c3ff;\n\t\t\t\t--pitch4-secondary-channel: #6038a5;\n\t\t\t\t--pitch4-primary-channel:   #9456ff;\n\t\t\t\t--pitch4-secondary-note:    #6038a5;\n\t\t\t\t--pitch4-primary-note:      #ff35e0;\n\t\t\t\t--pitch5-secondary-channel: #a52491;\n\t\t\t\t--pitch5-primary-channel:   #ff35e0;\n\t\t\t\t--pitch5-secondary-note:    #a52491;\n\t\t\t\t--pitch5-primary-note:      #af3221;\n\t\t\t\t--pitch6-secondary-channel: #af3221;\n\t\t\t\t--pitch6-primary-channel:   #ff4a32;\n\t\t\t\t--pitch6-secondary-note:    #af3221;\n\t\t\t\t--pitch6-primary-note:      #ff4a32;\n\t\t\t\t--pitch7-secondary-channel: #ad6e0f;\n\t\t\t\t--pitch7-primary-channel:   #ffa216;\n\t\t\t\t--pitch7-secondary-note:    #ad6e0f;\n\t\t\t\t--pitch7-primary-note:      #ffa216;\n\t\t\t\t--pitch8-secondary-channel: #ad6e0f;\n\t\t\t\t--pitch8-primary-channel:   #ffa216;\n\t\t\t\t--pitch8-secondary-note:    #ad6e0f;\n\t\t\t\t--pitch8-primary-note:      #ffa216;\n\t\t\t\t--pitch9-secondary-channel: #a7b512;\n\t\t\t\t--pitch9-primary-channel:   #ebff19;\n\t\t\t\t--pitch9-secondary-note:    #a7b512;\n\t\t\t\t--pitch9-primary-note:      #ebff19;\n\t\t\t\t--pitch10-secondary-channel:#70ad1b;\n\t\t\t\t--pitch10-primary-channel:  #a4ff26;\n\t\t\t\t--pitch10-secondary-note:   #70ad1b;\n\t\t\t\t--pitch10-primary-note:     #a4ff26;\n\t\t\t\t--noise1-secondary-channel: #68706f;\n\t\t\t\t--noise1-primary-channel:   #a6b2b1;\n\t\t\t\t--noise1-secondary-note:    #68706f;\n\t\t\t\t--noise1-primary-note:      #a6b2b1;\n\t\t\t\t--noise2-secondary-channel: #665c64;\n\t\t\t\t--noise2-primary-channel:   #a396a1;\n\t\t\t\t--noise2-secondary-note:    #665c64;\n\t\t\t\t--noise2-primary-note:      #a396a1;\n\t\t\t\t--noise3-secondary-channel: #60605a;\n\t\t\t\t--noise3-primary-channel:   #afaea3;\n\t\t\t\t--noise3-secondary-note:    #60605a;\n\t\t\t\t--noise3-primary-note:      #afaea3;\n\t\t\t--noise4-secondary-channel: #665c64;\n\t\t\t--noise4-primary-channel:   #a396a1;\n\t\t\t\t--noise4-secondary-note:    #665c64;\n\t\t\t\t--noise4-primary-note:      #a396a1;\n\t\t\t\t--noise5-secondary-channel: #60605a;\n\t\t\t\t--noise5-primary-channel:   #afaea3;\n\t\t\t\t--noise5-secondary-note:    #60605a;\n\t\t\t\t--noise5-primary-note:      #afaea3;\n         --mod1-secondary-channel: #139620;\n\t\t\t\t--mod1-primary-channel:   #25ff3a;\n\t\t\t\t--mod1-secondary-note:    #139620;\n\t\t\t\t--mod1-primary-note:      #25ff3a;\n\t\t\t\t--mod2-secondary-channel: #109986;\n\t\t\t\t--mod2-primary-channel:   #1cffe0;\n\t\t\t\t--mod2-secondary-note:    #109986;\n\t\t\t\t--mod2-primary-note:      #1cffe0;\n\t\t\t\t--mod3-secondary-channel: #127296;\n\t\t\t\t--mod3-primary-channel:   #21c3ff;\n\t\t\t\t--mod3-secondary-note:    #127296;\n\t\t\t\t--mod3-primary-note:      #21c3ff;\n\t\t\t\t--mod4-secondary-channel: #6038a5;\n\t\t\t\t--mod4-primary-channel:   #9456ff;\n\t\t\t\t--mod4-secondary-note:    #6038a5;\n\t\t\t\t--mod4-primary-note:      #ff35e0;\n\t\t\t\t\t--mod-label-primary:        #999;\n\t\t\t\t\t--mod-label-secondary-text: #333;\n\t\t\t\t\t--mod-label-primary-text:   black;\n\t\t\t\t\t--disabled-note-primary:    #999;\n\t\t\t\t\t--disabled-note-secondary:  #666;\n\t\t\t\t}\n\t\t\t`,\n\t\t\t \"cardboardbox classic\": `\n\t\t\t\t:root {\n\t\t\t\t\t--page-margin: #0f0700;\n--editor-background: #0f0700;\n--hover-preview: #75461d;\n--playhead: #75461d;\n--primary-text: #ddd;\n--secondary-text: #8e695b;\n--inverted-text: black;\n--text-selection: #75461d;\n--box-selection-fill: rgba(117, 70, 29,0.5);\n--loop-accent: #75461d;\n--link-accent: #75461d;\n--ui-widget-background: #574a3e;\n--ui-widget-focus: #756453;\n--pitch-background: #361900;\n--tonic: #fdba9a;\n--fifth-note: #7f78d2;\n--white-piano-key: #bbb;\n--black-piano-key: #444;\n--use-color-formula: false;\n--track-editor-bg-pitch: #444;\n--track-editor-bg-pitch-dim: #333;\n--track-editor-bg-noise: #444;\n--track-editor-bg-noise-dim: #333;\n--track-editor-bg-mod: #234;\n--track-editor-bg-mod-dim: #123;\n--multiplicative-mod-slider: #456;\n--overwriting-mod-slider: #654;\n--indicator-primary: #74f;\n--indicator-secondary: #444;\n--select2-opt-group: #585858;\n--input-box-outline: #333;\n--mute-button-normal: #ffa033;\n--mute-button-mod: #9a6bff;\n--pitch1-secondary-channel: #798566;\n--pitch1-primary-channel: #9dab86;\n--pitch1-secondary-note: #798566;\n--pitch1-primary-note: #9dab86;\n--pitch2-secondary-channel: #a6733d;\n--pitch2-primary-channel: #e6a157;\n--pitch2-secondary-note: #a6733d;\n--pitch2-primary-note: #e6a157;\n--pitch3-secondary-channel: #874c27;\n--pitch3-primary-channel: #eb8242;\n--pitch3-secondary-note: #874c27;\n--pitch3-primary-note: #eb8242;\n--pitch4-secondary-channel: #395866;\n--pitch4-primary-channel: #537d91;\n--pitch4-secondary-note: #395866;\n--pitch4-primary-note: #537d91;\n--pitch5-secondary-channel: #779992;\n--pitch5-primary-channel: #a4d1c8;\n--pitch5-secondary-note: #779992;\n--pitch5-primary-note: #a4d1c8;\n--pitch6-secondary-channel: #7777b0;\n--pitch6-primary-channel: #a0a0ff;\n--pitch6-secondary-note: #8888d0;\n--pitch6-primary-note: #d0d0ff;\n--pitch7-secondary-channel: #300707;\n--pitch7-primary-channel: #560d0d;\n--pitch7-secondary-note: #300707;\n--pitch7-primary-note: #560d0d;\n--pitch8-secondary-channel: #486312;\n--pitch8-primary-channel: #76a21e;\n--pitch8-secondary-note: #486312;\n--pitch8-primary-note: #76a21e;\n--pitch9-secondary-channel: #4a1242;\n--pitch9-primary-channel: #721b65;\n--pitch9-secondary-note: #4a1242;\n--pitch9-primary-note: #721b65;\n--pitch10-secondary-channel: #7a312d;\n--pitch10-primary-channel: #f8615a;\n--pitch10-secondary-note: #7a312d;\n--pitch10-primary-note: #f8615a;\n--noise1-secondary-channel: #5f6582;\n--noise1-primary-channel: #a6b1e1;\n--noise1-secondary-note: #5f6582;\n--noise1-primary-note: #a6b1e1;\n--noise2-secondary-channel: #996633;\n--noise2-primary-channel: #ddaa77;\n--noise2-secondary-note: #cc9966;\n--noise2-primary-note: #f0d0bb;\n--noise3-secondary-channel: #4a6d8f;\n--noise3-primary-channel: #77aadd;\n--noise3-secondary-note: #6f9fcf;\n--noise3-primary-note: #bbd7ff;\n--noise4-secondary-channel: #6B3E8E;\n--noise4-primary-channel: #AF82D2;\n--noise4-secondary-note: #9E71C1;\n--noise4-primary-note: #D4C1EA;\n--noise5-secondary-channel: #996633;\n--noise5-primary-channel: #ddaa77;\n--noise5-secondary-note: #cc9966;\n--noise5-primary-note: #f0d0bb;\n--mod1-secondary-channel: #339955;\n--mod1-primary-channel: #77fc55;\n--mod1-secondary-note: #77ff8a;\n--mod1-primary-note: #cdffee;\n--mod2-secondary-channel: #993355;\n--mod2-primary-channel: #f04960;\n--mod2-secondary-note: #f057a0;\n--mod2-primary-note: #ffb8de;\n--mod3-secondary-channel: #553399;\n--mod3-primary-channel: #8855fc;\n--mod3-secondary-note: #aa64ff;\n--mod3-primary-note: #f8ddff;\n--mod4-secondary-channel: #a86436;\n--mod4-primary-channel: #c8a825;\n--mod4-secondary-note: #e8ba46;\n--mod4-primary-note: #fff6d3;\n--mod-label-primary: #999;\n--mod-label-secondary-text: #333;\n--mod-label-primary-text: black;\n\t\t\t\t}\n\t\t\t`,\n\t\t\t\"blubox classic\": `\n\t\t\t:root {\n\t\t\t\t--page-margin: #040410;\n\t\t\t\t\t--editor-background: #040410;\n\t\t\t\t\t--hover-preview: white;\n\t\t\t\t\t--playhead: white;\n\t\t\t\t\t--primary-text: white;\n\t\t\t\t\t--secondary-text: #84859a;\n\t\t\t\t\t--inverted-text: black;\n\t\t\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t\t\t--box-selection-fill: #044b94;\n\t\t\t\t\t--loop-accent: #74f;\n\t\t\t\t\t--link-accent: #024ACA;\n\t\t\t\t\t--ui-widget-background: #393e4f;\n\t\t\t\t\t--ui-widget-focus: #6d6886;\n\t\t\t\t\t--pitch-background: #393e4f;\n\t\t\t\t\t--tonic: #725491;\n\t\t\t\t\t--fifth-note: #54547a;\n\t\t\t\t\t--white-piano-key: #bbb;\n\t\t\t\t\t--black-piano-key: #444;\n\t\t\t\t\t--use-color-formula: false;\n\t\t\t\t\t--track-editor-bg-pitch: #393e4f;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #1c1d28;\n\t\t\t\t\t--track-editor-bg-noise: #3d3535;\n\t\t\t\t\t--track-editor-bg-noise-dim: #161313;\n\t\t\t\t\t--track-editor-bg-mod: #283560;\n\t\t\t\t\t--track-editor-bg-mod-dim: #0a101f;\n\t\t\t\t\t--multiplicative-mod-slider: #606c9f;\n\t\t\t\t\t--overwriting-mod-slider: #6850b5;\n\t\t\t\t\t--indicator-primary: #9c64f7;\n\t\t\t\t\t--indicator-secondary: #393e4f;\n\t\t\t\t\t--select2-opt-group: #5d576f;\n\t\t\t\t\t--input-box-outline: #222;\n\t\t\t\t\t--mute-button-normal: #886eae;\n\t\t\t\t\t--mute-button-mod: #9a6bff;\n\t\t\t\t\t--pitch1-secondary-channel: #0A89FF;\n\t\t\t\t\t--pitch1-primary-channel:   #024ACA;\n\t\t\t\t\t--pitch1-secondary-note:    #0A89FF;\n\t\t\t\t\t--pitch1-primary-note:      #024ACA;\n\t\t\t\t\t--pitch2-secondary-channel: #0A89FF;\n\t\t\t\t\t--pitch2-primary-channel:   #024ACA;\n\t\t\t\t\t--pitch2-secondary-note:    #0A89FF;\n\t\t\t\t\t--pitch2-primary-note:      #024ACA;\n\t\t\t\t\t--pitch3-secondary-channel: #0A89FF;\n\t\t\t\t\t--pitch3-primary-channel:   #024ACA;\n\t\t\t\t\t--pitch3-secondary-note:    #0A89FF;\n\t\t\t\t\t--pitch3-primary-note:      #024ACA;\n\t\t\t\t\t--pitch4-secondary-channel: #0A89FF;\n\t\t\t\t\t--pitch4-primary-channel:   #024ACA;\n\t\t\t\t\t--pitch4-secondary-note:    #0A89FF;\n\t\t\t\t\t--pitch4-primary-note:      #024ACA;\n\t\t\t\t\t--pitch5-secondary-channel: #0A89FF;\n\t\t\t\t\t--pitch5-primary-channel:   #024ACA;\n\t\t\t\t\t--pitch5-secondary-note:    #0A89FF;\n\t\t\t\t\t--pitch5-primary-note:      #024ACA;\n\t\t\t\t\t--pitch6-secondary-channel: #0A89FF;\n\t\t\t\t\t--pitch6-primary-channel:   #024ACA;\n\t\t\t\t\t--pitch6-secondary-note:    #0A89FF;\n\t\t\t\t\t--pitch6-primary-note:      #024ACA;\n\t\t\t\t\t--pitch7-secondary-channel: #0A89FF;\n\t\t\t\t\t--pitch7-primary-channel:   #024ACA;\n\t\t\t\t\t--pitch7-secondary-note:\t  #0A89FF;\n\t\t\t\t\t--pitch7-primary-note:\t\t\t#024ACA;\n\t\t\t\t\t--pitch8-secondary-channel: #0A89FF;\n\t\t\t\t\t--pitch8-primary-channel:   #024ACA;\n\t\t\t\t\t--pitch8-secondary-note:    #0A89FF;\n\t\t\t\t\t--pitch8-primary-note:      #024ACA;\n\t\t\t\t\t--pitch9-secondary-channel: #0A89FF;\n\t\t\t\t\t--pitch9-primary-channel:   #024ACA;\n\t\t\t\t\t--pitch9-secondary-note:    #0A89FF;\n\t\t\t\t\t--pitch9-primary-note:\t\t\t#024ACA;\n\t\t\t\t\t--pitch10-secondary-channel:#0A89FF;\n\t\t\t\t\t--pitch10-primary-channel:  #024ACA;\n\t\t\t\t\t--pitch10-secondary-note:   #0A89FF;\n\t\t\t\t\t--pitch10-primary-note:     #024ACA;\n\t\t\t\t\t--noise1-secondary-channel: #0A89FF;\n\t\t\t\t\t--noise1-primary-channel:   #024ACA;\n\t\t\t\t\t--noise1-secondary-note:    #0A89FF;\n\t\t\t\t\t--noise1-primary-note:      #024ACA;\n\t\t\t\t\t--noise2-secondary-channel: #0A89FF;\n\t\t\t\t\t--noise2-primary-channel:   #024ACA;\n\t\t\t\t\t--noise2-secondary-note:    #0A89FF;\n\t\t\t\t\t--noise2-primary-note:      #024ACA;\n\t\t\t\t\t--noise3-secondary-channel: #0A89FF;\n\t\t\t\t\t--noise3-primary-channel:   #024ACA;\n\t\t\t\t\t--noise3-secondary-note:    #0A89FF;\n\t\t\t\t\t--noise3-primary-note:      #024ACA;\n\t\t\t\t\t--noise4-secondary-channel: #0A89FF;\n\t\t\t\t\t--noise4-primary-channel:   #024ACA;\n\t\t\t\t\t--noise4-secondary-note:    #0A89FF;\n\t\t\t\t\t--noise4-primary-note:      #024ACA;\n\t\t\t\t\t--mod1-secondary-channel:   #0A89FF;\n\t\t\t\t\t--mod1-primary-channel:     #024ACA;\n\t\t\t\t\t--mod1-secondary-note:      #0A89FF;\n\t\t\t\t\t--mod1-primary-note:        #024ACA;\n\t\t\t\t\t--mod2-secondary-channel:   #0A89FF;\n\t\t\t\t\t--mod2-primary-channel:     #024ACA;\n\t\t\t\t\t--mod2-secondary-note:      #0A89FF;\n\t\t\t\t\t--mod2-primary-note:        #024ACA;\n\t\t\t\t\t--mod3-secondary-channel:   #0A89FF;\n\t\t\t\t\t--mod3-primary-channel:     #024ACA;\n\t\t\t\t\t--mod3-secondary-note:      #0A89FF;\n\t\t\t\t\t--mod3-primary-note:\t\t\t  #024ACA;\n\t\t\t\t\t--mod4-secondary-channel:   #0A89FF;\n\t\t\t\t\t--mod4-primary-channel:     #024ACA;\n\t\t\t\t\t--mod4-secondary-note:      #0A89FF;\n\t\t\t\t\t--mod4-primary-note:        #024ACA;\n\t\t\t\t\t--mod-label-primary:        #282840;\n\t\t\t\t\t--mod-label-secondary-text: rgb(87, 86, 120);\n\t\t\t\t\t--mod-label-primary-text:   white;\n\t\t\t\t}\n\t\t\t`,\n\t\t\"dogebox classic\": `\n\t\t\t\t:root {\n\t\t\t--page-margin: #0d0063;\n\t\t\t--editor-background: #0D0063;\n\t\t\t--hover-preview: white;\n\t\t\t--playhead: white;\n\t\t\t--primary-text: white;\n\t\t\t--secondary-text: #999;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\n\t\t\t--loop-accent: #74f;\n\t\t\t--link-accent: #98f;\n\t\t\t--ui-widget-background: #444;\n\t\t\t--ui-widget-focus: #777;\n\t\t\t--pitch-background: #322c59;\n\t\t\t--tonic: #1c1933;\n\t\t\t--fifth-note: #7b74ad;\n\t\t\t--white-piano-key: #bbb;\n\t\t\t--black-piano-key: #444;\n\t\t\t--white-piano-key-text: #131200;\n\t\t\t--black-piano-key-text: #fff;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #444;\n\t\t\t--track-editor-bg-pitch-dim: #333;\n\t\t\t--track-editor-bg-noise: #444;\n\t\t\t--track-editor-bg-noise-dim: #333;\n\t\t\t--track-editor-bg-mod: #234;\n\t\t\t--track-editor-bg-mod-dim: #123;\n\t\t\t--multiplicative-mod-slider: #456;\n\t\t\t--overwriting-mod-slider: #654;\n\t\t\t--indicator-primary: #74f;\n\t\t\t--indicator-secondary: #444;\n\t\t\t--select2-opt-group: #585858;\n\t\t\t--input-box-outline: #333;\n\t\t\t--mute-button-normal: #ffa033;\n\t\t\t--mute-button-mod: #9a6bff;\n\t\t\t--pitch-channel-limit: 6;\n\t\t\t--noise-channel-limit: 3;\n\t\t\t--pitch1-secondary-channel: #c7ac00;\n\t\t\t--pitch1-primary-channel: #fcf403;\n\t\t\t--pitch1-secondary-note: #c7c700;\n\t\t\t--pitch1-primary-note: #fcf403;\n\t\t\t--pitch2-secondary-channel: #9400b5;\n\t\t\t--pitch2-primary-channel: #ff00ee;\n\t\t\t--pitch2-secondary-note: #9400b5;\n\t\t\t--pitch2-primary-note: #ff00ee;\n\t\t\t--pitch3-secondary-channel: #b37466;\n\t\t\t--pitch3-primary-channel: #ffc6a1;\n\t\t\t--pitch3-secondary-note: #b37466;\n\t\t\t--pitch3-primary-note: #ffc6a1;\n\t\t\t--pitch4-secondary-channel: #00a100;\n\t\t\t--pitch4-primary-channel: #50ff50;\n\t\t\t--pitch4-secondary-note: #00c700;\n\t\t\t--pitch4-primary-note: #a0ffa0;\n\t\t\t--pitch5-secondary-channel: #d020d0;\n\t\t\t--pitch5-primary-channel: #ff90ff;\n\t\t\t--pitch5-secondary-note: #e040e0;\n\t\t\t--pitch5-primary-note: #ffc0ff;\n\t\t\t--pitch6-secondary-channel: #7777b0;\n\t\t\t--pitch6-primary-channel: #a0a0ff;\n\t\t\t--pitch6-secondary-note: #8888d0;\n\t\t\t--pitch6-primary-note: #d0d0ff;\n\t\t\t--pitch7-secondary-channel: #c7ac00;\n\t\t\t--pitch7-primary-channel: #fcf403;\n\t\t\t--pitch7-secondary-note: #c7c700;\n\t\t\t--pitch7-primary-note: #fcf403;\n\t\t\t--pitch8-secondary-channel: #9400b5;\n\t\t\t--pitch8-primary-channel: #ff00ee;\n\t\t\t--pitch8-secondary-note: #9400b5;\n\t\t\t--pitch8-primary-note: #ff00ee;\n\t\t\t--pitch9-secondary-channel: #b37466;\n\t\t\t--pitch9-primary-channel: #ffc6a1;\n\t\t\t--pitch9-secondary-note: #b37466;\n\t\t\t--pitch9-primary-note: #ffc6a1;\n\t\t\t--pitch10-secondary-channel: #00a100;\n\t\t\t--pitch10-primary-channel: #50ff50;\n\t\t\t--pitch10-secondary-note: #00c700;\n\t\t\t--pitch10-primary-note: #a0ffa0;\n\t\t\t--noise1-secondary-channel: #95acad;\n\t\t\t--noise1-primary-channel: #cee9eb;\n\t\t\t--noise1-secondary-note: #95acad;\n\t\t\t--noise1-primary-note: #cee9eb;\n\t\t\t--noise2-secondary-channel: #996633;\n\t\t\t--noise2-primary-channel: #ddaa77;\n\t\t\t--noise2-secondary-note: #cc9966;\n\t\t\t--noise2-primary-note: #f0d0bb;\n\t\t\t--noise3-secondary-channel: #4a6d8f;\n\t\t\t--noise3-primary-channel: #77aadd;\n\t\t\t--noise3-secondary-note: #6f9fcf;\n\t\t\t--noise3-primary-note: #bbd7ff;\n\t\t\t--noise4-secondary-channel: #7c9b42;\n\t\t\t--noise4-primary-channel:   #a5ff00;\n\t\t\t--noise4-secondary-note:    #7c9b42;\n\t\t\t--noise4-primary-note:      #a5ff00;\n\t\t\t--noise5-secondary-channel: #7c9b42;\n\t\t\t--noise5-primary-channel:   #A2BB77;\n\t\t\t--noise5-secondary-note:    #91AA66;\n\t\t\t--noise5-primary-note:      #C5E2B2;\n      \t \t--mod1-secondary-channel: #c7ac00;\n\t\t\t--mod1-primary-channel: #fcf403;\n\t\t\t--mod1-secondary-note: #c7c700;\n\t\t\t--mod1-primary-note: #fcf403;\n\t\t\t--mod2-secondary-channel: #9400b5;\n\t\t\t--mod2-primary-channel: #ff00ee;\n\t\t\t--mod2-secondary-note: #9400b5;\n\t\t\t--mod2-primary-note: #ff00ee;\n\t\t\t--mod3-secondary-channel: #b37466;\n\t\t\t--mod3-primary-channel: #ffc6a1;\n\t\t\t--mod3-secondary-note: #b37466;\n\t\t\t--mod3-primary-note: #ffc6a1;\n\t\t\t--mod4-secondary-channel: #00a100;\n\t\t\t--mod4-primary-channel: #50ff50;\n\t\t\t--mod4-secondary-note: #00c700;\n\t\t\t--mod4-primary-note: #a0ffa0;\n\t\t\t--mod-label-primary:        #999;\n\t\t\t--mod-label-secondary-text: #333;\n\t\t\t--mod-label-primary-text:   black;\n\t\t\t--disabled-note-primary:    #999;\n\t\t\t--disabled-note-secondary:  #666;\n\t\t\t\t}\n\t\t\t`,\n\t\t  \"dogebox dark\": `\n\t\t\t\t:root {\n\t\t\t\t\t--page-margin: #0d0063;\n\t\t\t\t\t--editor-background: #0D0063;\n\t\t\t\t\t--hover-preview: white;\n\t\t\t\t\t--playhead: white;\n\t\t\t\t\t--primary-text: white;\n\t\t\t\t\t--secondary-text: #999;\n\t\t\t\t\t--inverted-text: black;\n\t\t\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\n\t\t\t\t\t--loop-accent: #74f;\n\t\t\t\t\t--link-accent: #98f;\n\t\t\t\t\t--ui-widget-background: #444;\n\t\t\t\t\t--ui-widget-focus: #777;\n\t\t\t\t\t--pitch-background: #322c59;\n\t\t\t\t\t--tonic: #1c1933;\n\t\t\t\t\t--fifth-note: #7b74ad;\n\t\t\t\t\t--white-piano-key: #bbb;\n\t\t\t\t\t--black-piano-key: #444;\n\t\t\t\t\t--pitch1-secondary-channel: #c7ac00;\n\t\t\t\t\t--pitch1-primary-channel:   #fcf403;\n\t\t\t\t\t--pitch1-secondary-note:    #c7c700;\n\t\t\t\t\t--pitch1-primary-note:      #fcf403;\n\t\t\t\t\t--pitch2-secondary-channel: #9400b5;\n\t\t\t\t\t--pitch2-primary-channel:   #ff00ee;\n\t\t\t\t\t--pitch2-secondary-note:    #9400b5;\n\t\t\t\t\t--pitch2-primary-note:      #ff00ee;\n\t\t\t\t\t--pitch3-secondary-channel: #b37466;\n\t\t\t\t\t--pitch3-primary-channel:   #ffc6a1;\n\t\t\t\t\t--pitch3-secondary-note:    #b37466;\n\t\t\t\t\t--pitch3-primary-note:      #ffc6a1;\n\t\t\t\t\t--pitch4-secondary-channel: #00a100;\n\t\t\t\t\t--pitch4-primary-channel:   #50ff50;\n\t\t\t\t\t--pitch4-secondary-note:    #00c700;\n\t\t\t\t\t--pitch4-primary-note:      #a0ffa0;\n\t\t\t\t\t--pitch5-secondary-channel: #d020d0;\n\t\t\t\t\t--pitch5-primary-channel:   #ff90ff;\n\t\t\t\t\t--pitch5-secondary-note:    #e040e0;\n\t\t\t\t\t--pitch5-primary-note:      #ffc0ff;\n\t\t\t\t\t--pitch6-secondary-channel: #7777b0;\n\t\t\t\t\t--pitch6-primary-channel:   #a0a0ff;\n\t\t\t\t\t--pitch6-secondary-note:    #8888d0;\n\t\t\t\t\t--pitch6-primary-note:      #d0d0ff;\n\t\t\t\t\t--noise1-secondary-channel: #95acad;\n\t\t\t\t\t--noise1-primary-channel:   #cee9eb;\n\t\t\t\t\t--noise1-secondary-note:    #95acad;\n\t\t\t\t\t--noise1-primary-note:      #cee9eb;\n\t\t\t\t\t--noise2-secondary-channel: #996633;\n\t\t\t\t\t--noise2-primary-channel:   #ddaa77;\n\t\t\t\t\t--noise2-secondary-note:    #cc9966;\n\t\t\t\t\t--noise2-primary-note:      #f0d0bb;\n\t\t\t\t\t--noise3-secondary-channel: #4a6d8f;\n\t\t\t\t\t--noise3-primary-channel:   #77aadd;\n\t\t\t\t\t--noise3-secondary-note:    #6f9fcf;\n\t\t\t\t\t--noise3-primary-note:      #bbd7ff;\n\t\t\t\t}\n\t\t\t`,\n\t\t\t    \"todbox classic\": `\n\t\t\t\t:root {\n\t\t\t\t\t--page-margin: black;\n\t\t\t\t\t--editor-background: black;\n\t\t\t\t\t--hover-preview: white;\n\t\t\t\t\t--playhead: white;\n\t\t\t\t\t--primary-text: white;\n\t\t\t\t\t--secondary-text: #999;\n\t\t\t\t\t--inverted-text: black;\n\t\t\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\n\t\t\t\t\t--loop-accent: #74f;\n\t\t\t\t\t--link-accent: #98f;\n\t\t\t\t\t--ui-widget-background: #444;\n\t\t\t\t\t--ui-widget-focus: #777;\n\t\t\t\t\t--pitch-background: #444;\n\t\t\t\t\t--tonic: #864;\n\t\t\t\t\t--fifth-note: #468;\n\t\t\t\t\t--white-piano-key: #bbb;\n\t\t\t\t\t--black-piano-key: #444;\n\t\t\t\t\t\t--white-piano-key-text: #131200;\n\t\t\t\t\t\t--black-piano-key-text: #fff;\n\t\t\t\t\t\t--use-color-formula: false;\n\t\t\t\t\t\t--track-editor-bg-pitch: #444;\n\t\t\t\t\t\t--track-editor-bg-pitch-dim: #333;\n\t\t\t\t\t\t--track-editor-bg-noise: #444;\n\t\t\t\t\t\t--track-editor-bg-noise-dim: #333;\n\t\t\t\t\t\t--track-editor-bg-mod: #234;\n\t\t\t\t\t\t--track-editor-bg-mod-dim: #123;\n\t\t\t\t\t\t--multiplicative-mod-slider: #456;\n\t\t\t\t\t\t--overwriting-mod-slider: #654;\n\t\t\t\t\t\t--indicator-primary: #74f;\n\t\t\t\t\t\t--indicator-secondary: #444;\n\t\t\t\t\t\t--select2-opt-group: #585858;\n\t\t\t\t\t\t--input-box-outline: #333;\n\t\t\t\t\t\t--mute-button-normal: #ffa033;\n\t\t\t\t\t\t--mute-button-mod: #9a6bff;s\n\t\t\t\t\t\t--pitch-channel-limit: 6;\n\t\t\t\t\t--noise-channel-limit: 3;\n\t\t\t\t\t--pitch1-secondary-channel: #0099a1;\n\t\t\t\t\t--pitch1-primary-channel:   #25f3ff;\n\t\t\t\t\t--pitch1-secondary-note:    #00bdc7;\n\t\t\t\t\t--pitch1-primary-note:      #92f9ff;\n\t\t\t\t\t--pitch2-secondary-channel: #a1a100;\n\t\t\t\t\t--pitch2-primary-channel:   #ffff25;\n\t\t\t\t\t--pitch2-secondary-note:    #c7c700;\n\t\t\t\t\t--pitch2-primary-note:      #ffff92;\n\t\t\t\t\t--pitch3-secondary-channel: #c75000;\n\t\t\t\t\t--pitch3-primary-channel:   #ff9752;\n\t\t\t\t\t--pitch3-secondary-note:    #ff771c;\n\t\t\t\t\t--pitch3-primary-note:      #ffcdab;\n\t\t\t\t\t--pitch4-secondary-channel: #00a100;\n\t\t\t\t\t--pitch4-primary-channel:   #50ff50;\n\t\t\t\t\t--pitch4-secondary-note:    #00c700;\n\t\t\t\t\t--pitch4-primary-note:      #a0ffa0;\n\t\t\t\t\t--pitch5-secondary-channel: #d020d0;\n\t\t\t\t\t--pitch5-primary-channel:   #ff90ff;\n\t\t\t\t\t--pitch5-secondary-note:    #e040e0;\n\t\t\t\t\t--pitch5-primary-note:      #ffc0ff;\n\t\t\t\t\t--pitch6-secondary-channel: #7777b0;\n\t\t\t\t\t--pitch6-primary-channel:   #a0a0ff;\n\t\t\t\t\t--pitch6-secondary-note:    #8888d0;\n\t\t\t\t\t--pitch6-primary-note:      #d0d0ff;\n\t\t\t\t\t--pitch7-secondary-channel: #0099a1;\n\t\t\t\t\t--pitch7-primary-channel:   #25f3ff;\n\t\t\t\t\t--pitch7-secondary-note:    #00bdc7;\n\t\t\t\t\t--pitch7-primary-note:      #92f9ff;\n\t\t\t\t\t--pitch8-secondary-channel: #a1a100;\n\t\t\t\t\t--pitch8-primary-channel:   #ffff25;\n\t\t\t\t\t--pitch8-secondary-note:    #c7c700;\n\t\t\t\t\t--pitch8-primary-note:      #ffff92;\n\t\t\t\t\t--pitch9-secondary-channel: #c75000;\n\t\t\t\t\t--pitch9-primary-channel:   #ff9752;\n\t\t\t\t\t--pitch9-secondary-note:    #ff771c;\n\t\t\t\t\t--pitch9-primary-note:      #ffcdab;\n\t\t\t\t\t--pitch10-secondary-channel: #00a100;\n\t\t\t\t\t--pitch10-primary-channel:   #50ff50;\n\t\t\t\t\t--pitch10-secondary-note:    #00c700;\n\t\t\t\t\t--pitch10-primary-note:      #a0ffa0;\n\t\t\t\t\t--noise1-secondary-channel: #6f6f6f;\n\t\t\t\t\t--noise1-primary-channel:   #aaaaaa;\n\t\t\t\t\t--noise1-secondary-note:    #a7a7a7;\n\t\t\t\t\t--noise1-primary-note:      #e0e0e0;\n\t\t\t\t\t--noise2-secondary-channel: #996633;\n\t\t\t\t\t--noise2-primary-channel:   #ddaa77;\n\t\t\t\t\t--noise2-secondary-note:    #cc9966;\n\t\t\t\t\t--noise2-primary-note:      #f0d0bb;\n\t\t\t\t\t--noise3-secondary-channel: #4a6d8f;\n\t\t\t\t\t--noise3-primary-channel:   #77aadd;\n\t\t\t\t\t--noise3-secondary-note:    #6f9fcf;\n\t\t\t\t\t--noise3-primary-note:      #bbd7ff;\n\t\t\t\t\t--noise4-secondary-channel: #6f6f6f;\n\t\t\t\t\t--noise4-primary-channel:   #aaaaaa;\n\t\t\t\t\t--noise4-secondary-note:    #a7a7a7;\n\t\t\t\t\t--noise4-primary-note:      #e0e0e0;\n\t\t\t\t\t--noise5-secondary-channel: #996633;\n\t\t\t\t\t--noise5-primary-channel:   #ddaa77;\n\t\t\t\t\t--noise5-secondary-note:    #cc9966;\n\t\t\t\t\t--noise5-primary-note:      #f0d0bb;\n\t\t\t\t\t--mod1-secondary-channel: #0099a1;\n\t\t\t\t\t--mod1-primary-channel:   #25f3ff;\n\t\t\t\t\t--mod1-secondary-note:    #00bdc7;\n\t\t\t\t\t--mod1-primary-note:      #92f9ff;\n\t\t\t\t\t--mod2-secondary-channel: #a1a100;\n\t\t\t\t\t--mod2-primary-channel:   #ffff25;\n\t\t\t\t\t--mod2-secondary-note:    #c7c700;\n\t\t\t\t\t--mod2-primary-note:      #ffff92;\n\t\t\t\t\t--mod3-secondary-channel: #c75000;\n\t\t\t\t\t--mod3-primary-channel:   #ff9752;\n\t\t\t\t\t--mod3-secondary-note:    #ff771c;\n\t\t\t\t\t--mod3-primary-note:      #ffcdab;\n\t\t\t\t\t--mod4-secondary-channel: #00a100;\n\t\t\t\t\t--mod4-primary-channel:   #50ff50;\n\t\t\t\t\t--mod4-secondary-note:    #00c700;\n\t\t\t\t\t--mod4-primary-note:      #a0ffa0;\n\t\t\t\t\t--mod-label-primary:        #999;\n\t\t\t\t\t--mod-label-secondary-text: #333;\n\t\t\t\t\t--mod-label-primary-text:   black;\n\t\t\t\t\t--disabled-note-primary:    #999;\n\t\t\t\t\t--disabled-note-secondary:  #666;\n\t\t\t\t}\n\t\t\t`,\n\t\t\t \"todbox dark mode\": `\n\t\t\t:root {\n\t\t\t\t-webkit-text-stroke-width: 0.5px;\n\t\t\t\t\t--page-margin: black;\n\t\t\t\t\t--editor-background: black;\n\t\t\t\t\t--hover-preview: #999999;\n\t\t\t\t\t--playhead: #999999;\n\t\t\t\t\t--primary-text: #999999;\n\t\t\t\t\t--secondary-text: #444444;\n\t\t\t\t\t--inverted-text: black;\n\t\t\t\t--text-selection: #999999;\n\t\t\t\t\t--box-selection-fill: #999999;\n\t\t\t\t\t--loop-accent: #999999;\n\t\t\t\t\t--link-accent: #999999;\n\t\t\t\t\t--ui-widget-background: #222222;\n\t\t\t\t\t--ui-widget-focus: #444444;\n\t\t\t\t--pitch-background: #101010;\n\t\t\t\t\t--tonic: #404040;\n\t\t\t\t\t--fifth-note: #202020;\n\t\t\t\t\t--white-piano-key: #999999;\n\t\t\t\t\t--black-piano-key: #101010;\n\t\t\t\t--white-piano-key-text: #131200;\n\t\t\t\t--black-piano-key-text: #fff;\n\t\t\t\t\t--use-color-formula: false;\n\t\t\t\t\t--track-editor-bg-pitch: #444;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #333;\n\t\t\t\t\t--track-editor-bg-noise: #444;\n\t\t\t\t\t--track-editor-bg-noise-dim: #333;\n\t\t\t\t\t--track-editor-bg-mod: #234;\n\t\t\t\t\t--track-editor-bg-mod-dim: #123;\n\t\t\t\t\t--multiplicative-mod-slider: #456;\n\t\t\t\t\t--overwriting-mod-slider: #654;\n\t\t\t\t\t--indicator-primary: #74f;\n\t\t\t\t\t--indicator-secondary: #444;\n\t\t\t\t\t--select2-opt-group: #585858;\n\t\t\t\t\t--input-box-outline: #333;\n\t\t\t\t\t--mute-button-normal: #ffa033;\n\t\t\t\t\t--mute-button-mod: #9a6bff;\n\t\t\t\t\t--pitch-channel-limit: 6;\n\t\t\t\t\t--noise-channel-limit: 3;\n\t\t\t\t\t--pitch1-secondary-channel: #004444;\n\t\t\t\t\t--pitch1-primary-channel:   #009999;\n\t\t\t\t\t--pitch1-secondary-note:    #004444;\n\t\t\t\t\t--pitch1-primary-note:      #009999;\n\t\t\t\t\t--pitch2-secondary-channel: #444400;\n\t\t\t\t\t--pitch2-primary-channel:   #999900;\n\t\t\t\t\t--pitch2-secondary-note:    #444400;\n\t\t\t\t\t--pitch2-primary-note:      #999900;\n\t\t\t\t\t--pitch3-secondary-channel: #443300;\n\t\t\t\t\t--pitch3-primary-channel:   #996600;\n\t\t\t\t\t--pitch3-secondary-note:    #443300;\n\t\t\t\t\t--pitch3-primary-note:      #996600;\n\t\t\t\t\t--pitch4-secondary-channel: #004400;\n\t\t\t\t\t--pitch4-primary-channel:   #009900;\n\t\t\t\t\t--pitch4-secondary-note:    #004400;\n\t\t\t\t\t--pitch4-primary-note:      #009900;\n\t\t\t\t\t--pitch5-secondary-channel: #440044;\n\t\t\t\t\t--pitch5-primary-channel:   #990099;\n\t\t\t\t\t--pitch5-secondary-note:    #440044;\n\t\t\t\t\t--pitch5-primary-note:      #990099;\n\t\t\t\t\t--pitch6-secondary-channel: #333344;\n\t\t\t\t\t--pitch6-primary-channel:   #666699;\n\t\t\t\t\t--pitch6-secondary-note:    #333344;\n\t\t\t\t\t--pitch6-primary-note:      #666699;\n\t\t\t\t\t--pitch7-secondary-channel: #444400;\n\t\t\t\t\t--pitch7-primary-channel:   #999900;\n\t\t\t\t\t--pitch7-secondary-note:    #444400;\n\t\t\t\t\t--pitch7-primary-note:      #999900;\n\t\t\t\t\t--pitch8-secondary-channel: #824E54;\n\t\t\t\t\t--pitch8-primary-channel:   #C4757E;\n\t\t\t\t\t--pitch8-secondary-note:    #824E54;\n\t\t\t\t\t--pitch8-primary-note:      #C4757E;\n\t\t\t\t\t--pitch9-secondary-channel: #006342;\n\t\t\t\t\t--pitch9-primary-channel:   #008E5F;\n\t\t\t\t\t--pitch9-secondary-note:    #006342;\n\t\t\t\t\t--pitch9-primary-note:      #008E5F;\n\t\t\t\t\t--pitch10-secondary-channel: #561291;\n\t\t\t\t\t--pitch10-primary-channel:   #7819C1;\n\t\t\t\t\t--pitch10-secondary-note:    #561291;\n\t\t\t\t\t--pitch10-primary-note:      #7819C1;\n\t\t\t\t\t--noise1-secondary-channel: #444444;\n\t\t\t\t\t--noise1-primary-channel:   #999999;\n\t\t\t\t\t--noise1-secondary-note:    #444444;\n\t\t\t\t\t--noise1-primary-note:      #999999;\n\t\t\t\t\t--noise2-secondary-channel: #443311;\n\t\t\t\t\t--noise2-primary-channel:   #996633;\n\t\t\t\t\t--noise2-secondary-note:    #443311;\n\t\t\t\t\t--noise2-primary-note:      #996633;\n\t\t\t\t\t--noise3-secondary-channel: #113344;\n\t\t\t\t\t--noise3-primary-channel:   #336699;\n\t\t\t\t\t--noise3-secondary-note:    #113344;\n\t\t\t\t\t--noise3-primary-note:      #336699;\n\t\t\t\t\t--noise4-secondary-channel: #444444;\n\t\t\t\t\t--noise4-primary-channel:   #999999;\n\t\t\t\t\t--noise4-secondary-note:    #444444;\n\t\t\t\t\t--noise4-primary-note:      #999999;\n\t\t\t\t\t--noise5-secondary-channel: #443311;\n\t\t\t\t\t--noise5-primary-channel:   #996633;\n\t\t\t\t\t--noise5-secondary-note:    #443311;\n\t\t\t\t\t--noise5-primary-note:      #996633;\n          --mod1-secondary-channel: #004444;\n\t\t\t\t\t--mod1-primary-channel:   #009999;\n\t\t\t\t\t--mod1-secondary-note:    #004444;\n\t\t\t\t\t--mod1-primary-note:      #009999;\n\t\t\t\t\t--mod2-secondary-channel: #444400;\n\t\t\t\t\t--mod2-primary-channel:   #999900;\n\t\t\t\t\t--mod2-secondary-note:    #444400;\n\t\t\t\t\t--mod2-primary-note:      #999900;\n\t\t\t\t\t--mod3-secondary-channel: #443300;\n\t\t\t\t\t--mod3-primary-channel:   #996600;\n\t\t\t\t\t--mod3-secondary-note:    #443300;\n\t\t\t\t\t--mod3-primary-note:      #996600;\n\t\t\t\t\t--mod4-secondary-channel: #004400;\n\t\t\t\t\t--mod4-primary-channel:   #009900;\n\t\t\t\t\t--mod4-secondary-note:    #004400;\n\t\t\t\t\t--mod4-primary-note:      #009900;\n\t\t\t\t\t--mod-label-primary:        #999;\n\t\t\t\t\t--mod-label-secondary-text: #333;\n\t\t\t\t\t--mod-label-primary-text:   black;\n\t\t\t\t\t--disabled-note-primary:    #999;\n\t\t\t\t\t--disabled-note-secondary:  #666;\n\t\t\t\t}\n\t\t\t\t.beepboxEditor button, .beepboxEditor select {\n\t\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\n\t\t\t\t}\n\t\t\t`,\n\t\t\t\"mainbox 1.0\": `\n\t\t\t:root {\n\t\t\t\t--page-margin: black;\n\t\t\t\t--editor-background: black;\n\t\t\t\t--hover-preview: white;\n\t\t\t\t--playhead: white;\n\t\t\t\t--primary-text: white;\n\t\t\t\t--secondary-text: #999;\n\t\t\t\t--inverted-text: black;\n\t\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\n\t\t\t\t--loop-accent: #2F1C40;\n\t\t\t\t--link-accent: #543873;\n\t\t\t\t--ui-widget-background: #2F1C40;\n\t\t\t\t--ui-widget-focus: #543873;\n\t\t\t\t--pitch-background: #2F1C40;\n\t\t\t\t--tonic: #42286D;\n\t\t\t\t--fifth-note: #37416B;\n\t\t\t\t--white-piano-key: #156CB6;\n\t\t\t\t--black-piano-key: #130D14;\n\t\t\t\t--white-piano-key-text: #131200;\n\t\t\t\t--black-piano-key-text: #fff;\n\t\t\t\t\t--use-color-formula: false;\n\t\t\t\t\t--track-editor-bg-pitch: #444;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #333;\n\t\t\t\t\t--track-editor-bg-noise: #444;\n\t\t\t\t\t--track-editor-bg-noise-dim: #333;\n\t\t\t\t\t--track-editor-bg-mod: #234;\n\t\t\t\t\t--track-editor-bg-mod-dim: #123;\n\t\t\t\t\t--multiplicative-mod-slider: #456;\n\t\t\t\t\t--overwriting-mod-slider: #654;\n\t\t\t\t\t--indicator-primary: #74f;\n\t\t\t\t\t--indicator-secondary: #444;\n\t\t\t\t\t--select2-opt-group: #585858;\n\t\t\t\t\t--input-box-outline: #333;\n\t\t\t\t\t--mute-button-normal: #ffa033;\n\t\t\t\t\t--mute-button-mod: #9a6bff;\n\t\t\t\t\t--pitch-channel-limit: 6;\n\t\t\t\t\t--noise-channel-limit: 3;\n\t\t\t\t\t--pitch1-secondary-channel: #156C99;\n\t\t\t\t\t--pitch1-primary-channel:   #00CFDF;\n\t\t\t\t\t--pitch1-secondary-note:    #0080A8;\n\t\t\t\t\t--pitch1-primary-note:      #009FC6;\n\t\t\t\t\t--pitch2-secondary-channel: #AD923A;\n\t\t\t\t\t--pitch2-primary-channel:   #FFD552;\n\t\t\t\t\t--pitch2-secondary-note:    #C49736;\n\t\t\t\t\t--pitch2-primary-note:      #EFC742;\n\t\t\t\t\t--pitch3-secondary-channel: #7A401E;\n\t\t\t\t\t--pitch3-primary-channel:   #C14E30;\n\t\t\t\t\t--pitch3-secondary-note:    #89381B;\n\t\t\t\t\t--pitch3-primary-note:      #E15427;\n\t\t\t\t\t--pitch4-secondary-channel: #0B6030;\n\t\t\t\t\t--pitch4-primary-channel:   #00915C;\n\t\t\t\t\t--pitch4-secondary-note:    #004337;\n\t\t\t\t\t--pitch4-primary-note:      #00915E;\n\t\t\t\t\t--pitch5-secondary-channel: #543873;\n\t\t\t\t\t--pitch5-primary-channel:   #695B95;\n\t\t\t\t\t--pitch5-secondary-note:    #8188BE;\n\t\t\t\t\t--pitch5-primary-note:      #848ED8;\n\t\t\t\t\t--pitch6-secondary-channel: #585882;\n\t\t\t\t\t--pitch6-primary-channel:   #5A72DD;\n\t\t\t\t\t--pitch6-secondary-note:    #8888d0;\n\t\t\t\t\t--pitch6-primary-note:      #d0d0ff;\n\t\t\t\t\t--pitch7-secondary-channel: #7D7C2E;\n\t\t\t\t\t--pitch7-primary-channel:   #B0C952;\n\t\t\t\t\t--pitch7-secondary-note:    #7D7C2E;\n\t\t\t\t\t--pitch7-primary-note:      #B0C952;\n\t\t\t\t\t--pitch8-secondary-channel: #7F426A;\n\t\t\t\t\t--pitch8-primary-channel:   #B75297;\n\t\t\t\t\t--pitch8-secondary-note:    #7F426A;\n\t\t\t\t\t--pitch8-primary-note:      #B75297;\n\t\t\t\t\t--pitch9-secondary-channel: #2A6B65;\n\t\t\t\t\t--pitch9-primary-channel:   #3BA590;\n\t\t\t\t\t--pitch9-secondary-note:    #2A6B65;\n\t\t\t\t\t--pitch9-primary-note:      #3BA590;\n\t\t\t\t\t--pitch10-secondary-channel: #713EA0;\n\t\t\t\t\t--pitch10-primary-channel:   #925EC9;\n\t\t\t\t\t--pitch10-secondary-note:    #713EA0;\n\t\t\t\t\t--pitch10-primary-note:      #925EC9;\n\t\t\t\t\t--noise1-secondary-channel: #6C6C8E;\n\t\t\t\t\t--noise1-primary-channel:   #8A7F96;\n\t\t\t\t\t--noise1-secondary-note:    #A1A3B7;\n\t\t\t\t\t--noise1-primary-note:      #DDBADD;\n\t\t\t\t\t--noise2-secondary-channel: #865E40;\n\t\t\t\t\t--noise2-primary-channel:   #ddaa77;\n\t\t\t\t\t--noise2-secondary-note:    #C7B47A;\n\t\t\t\t\t--noise2-primary-note:      #CFC587;\n\t\t\t\t\t--noise3-secondary-channel: #7E7068;\n\t\t\t\t\t--noise3-primary-channel:   #B19998;\n\t\t\t\t\t--noise3-secondary-note:    #BAA6BC;\n\t\t\t\t\t--noise3-primary-note:      #EDDCEC;\n\t\t\t\t--noise4-secondary-channel: #7A4F9A;\n\t\t\t\t--noise4-primary-channel:   #AF82D2;\n\t\t\t\t--noise4-secondary-note:    #9E71C1;\n\t\t\t\t--noise4-primary-note:      #D4C1EA;\n\t\t\t\t--noise5-secondary-channel: #607837;\n\t\t\t\t--noise5-primary-channel:   #A2BB77;\n\t\t\t\t--noise5-secondary-note:    #91AA66;\n\t\t\t\t--noise5-primary-note:      #C5E2B2;\n          --mod1-secondary-channel: #156C99;\n\t\t\t\t\t--mod1-primary-channel:   #00CFDF;\n\t\t\t\t\t--mod1-secondary-note:    #0080A8;\n\t\t\t\t\t--mod1-primary-note:      #009FC6;\n\t\t\t\t\t--mod2-secondary-channel: #AD923A;\n\t\t\t\t\t--mod2-primary-channel:   #FFD552;\n\t\t\t\t\t--mod2-secondary-note:    #C49736;\n\t\t\t\t\t--mod2-primary-note:      #EFC742;\n\t\t\t\t\t--mod3-secondary-channel: #7A401E;\n\t\t\t\t\t--mod3-primary-channel:   #C14E30;\n\t\t\t\t\t--mod3-secondary-note:    #89381B;\n\t\t\t\t\t--mod3-primary-note:      #E15427;\n\t\t\t\t\t--mod4-secondary-channel: #0B6030;\n\t\t\t\t\t--mod4-primary-channel:   #00915C;\n\t\t\t\t\t--mod4-secondary-note:    #004337;\n\t\t\t\t\t--mod4-primary-note:      #00915E;\n\t\t\t\t\t--mod-label-primary:        #999;\n\t\t\t\t\t--mod-label-secondary-text: #333;\n\t\t\t\t\t--mod-label-primary-text:   black;\n\t\t\t\t\t--disabled-note-primary:    #999;\n\t\t\t\t\t--disabled-note-secondary:  #666;\n\t\t\t\t}\n\t\t\t`,\n\t\t\t \"fogbox\": `\n\t\t\t:root {\n\t\t\t\t--page-margin: #252525;\n\t\t\t\t--editor-background: #252525;\n\t\t\t\t--hover-preview: white;\n\t\t\t\t--playhead: white;\n\t\t\t\t--primary-text: white;\n\t\t\t\t--secondary-text: #999;\n\t\t\t\t--inverted-text: black;\n\t\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\n\t\t\t\t--loop-accent: #74f;\n\t\t\t\t--link-accent: #98f;\n\t\t\t\t--ui-widget-background: #444;\n\t\t\t\t--ui-widget-focus: #777;\n\t\t\t\t--pitch-background: #444;\n\t\t\t\t--tonic: #864;\n\t\t\t\t--fifth-note: #468;\n\t\t\t\t--white-piano-key: #bbb;\n\t\t\t\t--black-piano-key: #444;\n\t\t\t\t--white-piano-key-text: #131200;\n\t\t\t\t--black-piano-key-text: #fff;\n\t\t\t\t\t--use-color-formula: false;\n\t\t\t\t\t--track-editor-bg-pitch: #444;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #333;\n\t\t\t\t\t--track-editor-bg-noise: #444;\n\t\t\t\t\t--track-editor-bg-noise-dim: #333;\n\t\t\t\t\t--track-editor-bg-mod: #234;\n\t\t\t\t\t--track-editor-bg-mod-dim: #123;\n\t\t\t\t\t--multiplicative-mod-slider: #456;\n\t\t\t\t\t--overwriting-mod-slider: #654;\n\t\t\t\t\t--indicator-primary: #74f;\n\t\t\t\t\t--indicator-secondary: #444;\n\t\t\t\t\t--select2-opt-group: #585858;\n\t\t\t\t\t--input-box-outline: #333;\n\t\t\t\t\t--mute-button-normal: #ffa033;\n\t\t\t\t\t--mute-button-mod: #9a6bff;\n\t\t\t\t--pitch1-secondary-channel: #0099A1;\n\t\t\t\t--pitch1-primary-channel:   #25F3FF;\n\t\t\t\t--pitch1-secondary-note:    #00BDC7;\n\t\t\t\t--pitch1-primary-note:      #92F9FF;\n\t\t\t\t--pitch2-secondary-channel: #A1A100;\n\t\t\t\t--pitch2-primary-channel:   #FFFF25;\n\t\t\t\t--pitch2-secondary-note:    #C7C700;\n\t\t\t\t--pitch2-primary-note:      #FFFF92;\n\t\t\t\t--pitch3-secondary-channel: #C75000;\n\t\t\t\t--pitch3-primary-channel:   #FF9752;\n\t\t\t\t--pitch3-secondary-note:    #FF771C;\n\t\t\t\t--pitch3-primary-note:      #FFCDAB;\n\t\t\t\t--pitch4-secondary-channel: #00A100;\n\t\t\t\t--pitch4-primary-channel:   #50FF50;\n\t\t\t\t--pitch4-secondary-note:    #00C700;\n\t\t\t\t--pitch4-primary-note:      #A0FFA0;\n\t\t\t\t--pitch5-secondary-channel: #D020D0;\n\t\t\t\t--pitch5-primary-channel:   #FF90FF;\n\t\t\t\t--pitch5-secondary-note:    #E040E0;\n\t\t\t\t--pitch5-primary-note:      #FFC0FF;\n\t\t\t\t--pitch6-secondary-channel: #7777B0;\n\t\t\t\t--pitch6-primary-channel:   #A0A0FF;\n\t\t\t\t--pitch6-secondary-note:    #8888D0;\n\t\t\t\t--pitch6-primary-note:      #D0D0FF;\n\t\t\t\t--pitch7-secondary-channel: #8AA100;\n\t\t\t\t--pitch7-primary-channel:   #DEFF25;\n\t\t\t\t--pitch7-secondary-note:    #AAC700;\n\t\t\t\t--pitch7-primary-note:      #E6FF92;\n\t\t\t\t--pitch8-secondary-channel: #DF0019;\n\t\t\t\t--pitch8-primary-channel:   #FF98A4;\n\t\t\t\t--pitch8-secondary-note:    #FF4E63;\n\t\t\t\t--pitch8-primary-note:      #FFB2BB;\n\t\t\t\t--pitch9-secondary-channel: #00A170;\n\t\t\t\t--pitch9-primary-channel:   #50FFC9;\n\t\t\t\t--pitch9-secondary-note:    #00C78A;\n\t\t\t\t--pitch9-primary-note:      #83FFD9;\n\t\t\t\t--pitch10-secondary-channel:#A11FFF;\n\t\t\t\t--pitch10-primary-channel:  #CE8BFF;\n\t\t\t\t--pitch10-secondary-note:   #B757FF;\n\t\t\t\t--pitch10-primary-note:     #DFACFF;\n\t\t\t\t--noise1-secondary-channel: #6F6F6F;\n\t\t\t\t--noise1-primary-channel:   #AAAAAA;\n\t\t\t\t--noise1-secondary-note:    #A7A7A7;\n\t\t\t\t--noise1-primary-note:      #E0E0E0;\n\t\t\t\t--noise2-secondary-channel: #996633;\n\t\t\t\t--noise2-primary-channel:   #DDAA77;\n\t\t\t\t--noise2-secondary-note:    #CC9966;\n\t\t\t\t--noise2-primary-note:      #F0D0BB;\n\t\t\t\t--noise3-secondary-channel: #4A6D8F;\n\t\t\t\t--noise3-primary-channel:   #77AADD;\n\t\t\t\t--noise3-secondary-note:    #6F9FCF;\n\t\t\t\t--noise3-primary-note:      #BBD7FF;\n\t\t\t\t--noise4-secondary-channel: #7A4F9A;\n\t\t\t\t--noise4-primary-channel:   #AF82D2;\n\t\t\t\t--noise4-secondary-note:    #9E71C1;\n\t\t\t\t--noise4-primary-note:      #D4C1EA;\n\t\t\t\t--noise5-secondary-channel: #607837;\n\t\t\t\t--noise5-primary-channel:   #A2BB77;\n\t\t\t\t--noise5-secondary-note:    #91AA66;\n\t\t\t\t--noise5-primary-note:      #C5E2B2;\n          --mod1-secondary-channel:   #339955;\n\t\t\t\t\t--mod1-primary-channel:     #77fc55;\n\t\t\t\t\t--mod1-secondary-note:      #77ff8a;\n\t\t\t\t\t--mod1-primary-note:        #cdffee;\n\t\t\t\t\t--mod2-secondary-channel:   #993355;\n\t\t\t\t\t--mod2-primary-channel:     #f04960;\n\t\t\t\t\t--mod2-secondary-note:      #f057a0;\n\t\t\t\t\t--mod2-primary-note:        #ffb8de;\n\t\t\t\t\t--mod3-secondary-channel:   #553399;\n\t\t\t\t\t--mod3-primary-channel:     #8855fc;\n\t\t\t\t\t--mod3-secondary-note:      #aa64ff;\n\t\t\t\t\t--mod3-primary-note:\t    #f8ddff;\n\t\t\t\t\t--mod4-secondary-channel:   #a86436;\n\t\t\t\t\t--mod4-primary-channel:     #c8a825;\n\t\t\t\t\t--mod4-secondary-note:      #e8ba46;\n\t\t\t\t\t--mod4-primary-note:        #fff6d3;\n\t\t\t\t\t--mod-label-primary:        #999;\n\t\t\t\t\t--mod-label-secondary-text: #333;\n\t\t\t\t\t--mod-label-primary-text:   black;\n\t\t\t\t\t--disabled-note-primary:    #999;\n\t\t\t\t\t--disabled-note-secondary:  #666;\n\t\t\t\t}\n\t\t\t`,\n\t\t\t\"foxbox\": `\n\t\t\t:root {\n\t\t\t\t--page-margin: #ADD8E6;\n\t\t\t\t--editor-background: black;\n\t\t\t\t--hover-preview: white;\n\t\t\t\t--playhead: white;\n\t\t\t\t--primary-text: white;\n\t\t\t\t--secondary-text: #999;\n\t\t\t\t--inverted-text: black;\n\t\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\n\t\t\t\t--loop-accent: #74f;\n\t\t\t\t--link-accent: #98f;\n\t\t\t\t--ui-widget-background: #444;\n\t\t\t\t--ui-widget-focus: #777;\n\t\t\t\t--pitch-background: #444;\n\t\t\t\t--tonic: #864;\n\t\t\t\t--fifth-note: #468;\n\t\t\t\t--white-piano-key: #bbb;\n\t\t\t\t--black-piano-key: #444;\n\t\t\t\t--white-piano-key-text: #131200;\n\t\t\t\t--black-piano-key-text: #fff;\n\t\t\t\t\t--use-color-formula: false;\n\t\t\t\t\t--track-editor-bg-pitch: #444;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #333;\n\t\t\t\t\t--track-editor-bg-noise: #444;\n\t\t\t\t\t--track-editor-bg-noise-dim: #333;\n\t\t\t\t\t--track-editor-bg-mod: #234;\n\t\t\t\t\t--track-editor-bg-mod-dim: #123;\n\t\t\t\t\t--multiplicative-mod-slider: #456;\n\t\t\t\t\t--overwriting-mod-slider: #654;\n\t\t\t\t\t--indicator-primary: #74f;\n\t\t\t\t\t--indicator-secondary: #444;\n\t\t\t\t\t--select2-opt-group: #585858;\n\t\t\t\t\t--input-box-outline: #333;\n\t\t\t\t\t--mute-button-normal: #ffa033;\n\t\t\t\t\t--mute-button-mod: #9a6bff;\n\t\t\t\t--pitch1-secondary-channel: #0099A1;\n\t\t\t\t--pitch1-primary-channel:   #25F3FF;\n\t\t\t\t--pitch1-secondary-note:    #00BDC7;\n\t\t\t\t--pitch1-primary-note:      #92F9FF;\n\t\t\t\t--pitch2-secondary-channel: #A1A100;\n\t\t\t\t--pitch2-primary-channel:   #FFFF25;\n\t\t\t\t--pitch2-secondary-note:    #C7C700;\n\t\t\t\t--pitch2-primary-note:      #FFFF92;\n\t\t\t\t--pitch3-secondary-channel: #C75000;\n\t\t\t\t--pitch3-primary-channel:   #FF9752;\n\t\t\t\t--pitch3-secondary-note:    #FF771C;\n\t\t\t\t--pitch3-primary-note:      #FFCDAB;\n\t\t\t\t--pitch4-secondary-channel: #00A100;\n\t\t\t\t--pitch4-primary-channel:   #50FF50;\n\t\t\t\t--pitch4-secondary-note:    #00C700;\n\t\t\t\t--pitch4-primary-note:      #A0FFA0;\n\t\t\t\t--pitch5-secondary-channel: #D020D0;\n\t\t\t\t--pitch5-primary-channel:   #FF90FF;\n\t\t\t\t--pitch5-secondary-note:    #E040E0;\n\t\t\t\t--pitch5-primary-note:      #FFC0FF;\n\t\t\t\t--pitch6-secondary-channel: #7777B0;\n\t\t\t\t--pitch6-primary-channel:   #A0A0FF;\n\t\t\t\t--pitch6-secondary-note:    #8888D0;\n\t\t\t\t--pitch6-primary-note:      #D0D0FF;\n\t\t\t\t--pitch7-secondary-channel: #8AA100;\n\t\t\t\t--pitch7-primary-channel:   #DEFF25;\n\t\t\t\t--pitch7-secondary-note:    #AAC700;\n\t\t\t\t--pitch7-primary-note:      #E6FF92;\n\t\t\t\t--pitch8-secondary-channel: #DF0019;\n\t\t\t\t--pitch8-primary-channel:   #FF98A4;\n\t\t\t\t--pitch8-secondary-note:    #FF4E63;\n\t\t\t\t--pitch8-primary-note:      #FFB2BB;\n\t\t\t\t--pitch9-secondary-channel: #00A170;\n\t\t\t\t--pitch9-primary-channel:   #50FFC9;\n\t\t\t\t--pitch9-secondary-note:    #00C78A;\n\t\t\t\t--pitch9-primary-note:      #83FFD9;\n\t\t\t\t--pitch10-secondary-channel:#A11FFF;\n\t\t\t\t--pitch10-primary-channel:  #CE8BFF;\n\t\t\t\t--pitch10-secondary-note:   #B757FF;\n\t\t\t\t--pitch10-primary-note:     #DFACFF;\n\t\t\t\t--noise1-secondary-channel: #6F6F6F;\n\t\t\t\t--noise1-primary-channel:   #AAAAAA;\n\t\t\t\t--noise1-secondary-note:    #A7A7A7;\n\t\t\t\t--noise1-primary-note:      #E0E0E0;\n\t\t\t\t--noise2-secondary-channel: #996633;\n\t\t\t\t--noise2-primary-channel:   #DDAA77;\n\t\t\t\t--noise2-secondary-note:    #CC9966;\n\t\t\t\t--noise2-primary-note:      #F0D0BB;\n\t\t\t\t--noise3-secondary-channel: #4A6D8F;\n\t\t\t\t--noise3-primary-channel:   #77AADD;\n\t\t\t\t--noise3-secondary-note:    #6F9FCF;\n\t\t\t\t--noise3-primary-note:      #BBD7FF;\n\t\t\t\t--noise4-secondary-channel: #7A4F9A;\n\t\t\t\t--noise4-primary-channel:   #AF82D2;\n\t\t\t\t--noise4-secondary-note:    #9E71C1;\n\t\t\t\t--noise4-primary-note:      #D4C1EA;\n\t\t\t\t--noise5-secondary-channel: #607837;\n\t\t\t\t--noise5-primary-channel:   #A2BB77;\n\t\t\t\t--noise5-secondary-note:    #91AA66;\n\t\t\t\t--noise5-primary-note:      #C5E2B2;\n          --mod1-secondary-channel:   #339955;\n\t\t\t\t\t--mod1-primary-channel:     #77fc55;\n\t\t\t\t\t--mod1-secondary-note:      #77ff8a;\n\t\t\t\t\t--mod1-primary-note:        #cdffee;\n\t\t\t\t\t--mod2-secondary-channel:   #993355;\n\t\t\t\t\t--mod2-primary-channel:     #f04960;\n\t\t\t\t\t--mod2-secondary-note:      #f057a0;\n\t\t\t\t\t--mod2-primary-note:        #ffb8de;\n\t\t\t\t\t--mod3-secondary-channel:   #553399;\n\t\t\t\t\t--mod3-primary-channel:     #8855fc;\n\t\t\t\t\t--mod3-secondary-note:      #aa64ff;\n\t\t\t\t\t--mod3-primary-note:\t    #f8ddff;\n\t\t\t\t\t--mod4-secondary-channel:   #a86436;\n\t\t\t\t\t--mod4-primary-channel:     #c8a825;\n\t\t\t\t\t--mod4-secondary-note:      #e8ba46;\n\t\t\t\t\t--mod4-primary-note:        #fff6d3;\n\t\t\t\t\t--mod-label-primary:        #999;\n\t\t\t\t\t--mod-label-secondary-text: #333;\n\t\t\t\t\t--mod-label-primary-text:   black;\n\t\t\t\t\t--disabled-note-primary:    #999;\n\t\t\t\t\t--disabled-note-secondary:  #666;\t\n\t\t\t\t}\n\t\t\t`,\n\t\t\t \"wackybox\": `\n\t\t\t\n\t\t\t:root {\n\t\t\t\tcursor: url('wackybox_cursor.png'), auto;\n\t\t\t\t--page-margin: black;\n\t\t\t\t--editor-background: black;\n\t\t\t\t--hover-preview: white;\n\t\t\t\t--playhead: white;\n\t\t\t\t--primary-text: white;\n\t\t\t\t--secondary-text: #999;\n\t\t\t\t--inverted-text: black;\n\t\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\n\t\t\t\t--loop-accent: #74f;\n\t\t\t\t--link-accent: #98f;\n\t\t\t\t--ui-widget-background: #444;\n\t\t\t\t--ui-widget-focus: #777;\n\t\t\t\t--pitch-background: #444;\n\t\t\t\t--tonic: #864;\n\t\t\t\t--fifth-note: #468;\n\t\t\t\t--white-piano-key: #bbb;\n\t\t\t\t--black-piano-key: #444;\n\t\t\t\t--white-piano-key-text: #131200;\n\t\t\t\t--black-piano-key-text: #fff;\n\t\t\t\t\t--use-color-formula: false;\n\t\t\t\t\t--track-editor-bg-pitch: #444;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #333;\n\t\t\t\t\t--track-editor-bg-noise: #444;\n\t\t\t\t\t--track-editor-bg-noise-dim: #333;\n\t\t\t\t\t--track-editor-bg-mod: #234;\n\t\t\t\t\t--track-editor-bg-mod-dim: #123;\n\t\t\t\t\t--multiplicative-mod-slider: #456;\n\t\t\t\t\t--overwriting-mod-slider: #654;\n\t\t\t\t\t--indicator-primary: #74f;\n\t\t\t\t\t--indicator-secondary: #444;\n\t\t\t\t\t--select2-opt-group: #585858;\n\t\t\t\t\t--input-box-outline: #333;\n\t\t\t\t\t--mute-button-normal: #ffa033;\n\t\t\t\t\t--mute-button-mod: #9a6bff;\n\t\t\t\t\t--pitch-channel-limit: 6;\n\t\t\t\t\t--noise-channel-limit: 3;\n\t\t\t\t--pitch1-secondary-channel: #0099A1;\n\t\t\t\t--pitch1-primary-channel:   #25F3FF;\n\t\t\t\t--pitch1-secondary-note:    #00BDC7;\n\t\t\t\t--pitch1-primary-note:      #92F9FF;\n\t\t\t\t--pitch2-secondary-channel: #A1A100;\n\t\t\t\t--pitch2-primary-channel:   #FFFF25;\n\t\t\t\t--pitch2-secondary-note:    #C7C700;\n\t\t\t\t--pitch2-primary-note:      #FFFF92;\n\t\t\t\t--pitch3-secondary-channel: #C75000;\n\t\t\t\t--pitch3-primary-channel:   #FF9752;\n\t\t\t\t--pitch3-secondary-note:    #FF771C;\n\t\t\t\t--pitch3-primary-note:      #FFCDAB;\n\t\t\t\t--pitch4-secondary-channel: #00A100;\n\t\t\t\t--pitch4-primary-channel:   #50FF50;\n\t\t\t\t--pitch4-secondary-note:    #00C700;\n\t\t\t\t--pitch4-primary-note:      #A0FFA0;\n\t\t\t\t--pitch5-secondary-channel: #D020D0;\n\t\t\t\t--pitch5-primary-channel:   #FF90FF;\n\t\t\t\t--pitch5-secondary-note:    #E040E0;\n\t\t\t\t--pitch5-primary-note:      #FFC0FF;\n\t\t\t\t--pitch6-secondary-channel: #7777B0;\n\t\t\t\t--pitch6-primary-channel:   #A0A0FF;\n\t\t\t\t--pitch6-secondary-note:    #8888D0;\n\t\t\t\t--pitch6-primary-note:      #D0D0FF;\n\t\t\t\t--pitch7-secondary-channel: #8AA100;\n\t\t\t\t--pitch7-primary-channel:   #DEFF25;\n\t\t\t\t--pitch7-secondary-note:    #AAC700;\n\t\t\t\t--pitch7-primary-note:      #E6FF92;\n\t\t\t\t--pitch8-secondary-channel: #DF0019;\n\t\t\t\t--pitch8-primary-channel:   #FF98A4;\n\t\t\t\t--pitch8-secondary-note:    #FF4E63;\n\t\t\t\t--pitch8-primary-note:      #FFB2BB;\n\t\t\t\t--pitch9-secondary-channel: #00A170;\n\t\t\t\t--pitch9-primary-channel:   #50FFC9;\n\t\t\t\t--pitch9-secondary-note:    #00C78A;\n\t\t\t\t--pitch9-primary-note:      #83FFD9;\n\t\t\t\t--pitch10-secondary-channel:#A11FFF;\n\t\t\t\t--pitch10-primary-channel:  #CE8BFF;\n\t\t\t\t--pitch10-secondary-note:   #B757FF;\n\t\t\t\t--pitch10-primary-note:     #DFACFF;\n\t\t\t\t--noise1-secondary-channel: #6F6F6F;\n\t\t\t\t--noise1-primary-channel:   #AAAAAA;\n\t\t\t\t--noise1-secondary-note:    #A7A7A7;\n\t\t\t\t--noise1-primary-note:      #E0E0E0;\n\t\t\t\t--noise2-secondary-channel: #996633;\n\t\t\t\t--noise2-primary-channel:   #DDAA77;\n\t\t\t\t--noise2-secondary-note:    #CC9966;\n\t\t\t\t--noise2-primary-note:      #F0D0BB;\n\t\t\t\t--noise3-secondary-channel: #4A6D8F;\n\t\t\t\t--noise3-primary-channel:   #77AADD;\n\t\t\t\t--noise3-secondary-note:    #6F9FCF;\n\t\t\t\t--noise3-primary-note:      #BBD7FF;\n\t\t\t\t--noise4-secondary-channel: #7A4F9A;\n\t\t\t\t--noise4-primary-channel:   #AF82D2;\n\t\t\t\t--noise4-secondary-note:    #9E71C1;\n\t\t\t\t--noise4-primary-note:      #D4C1EA;\n\t\t\t\t--noise5-secondary-channel: #607837;\n\t\t\t\t--noise5-primary-channel:   #A2BB77;\n\t\t\t\t--noise5-secondary-note:    #91AA66;\n\t\t\t\t--noise5-primary-note:      #C5E2B2;\n          --mod1-secondary-channel:   #339955;\n\t\t\t\t\t--mod1-primary-channel:     #77fc55;\n\t\t\t\t\t--mod1-secondary-note:      #77ff8a;\n\t\t\t\t\t--mod1-primary-note:        #cdffee;\n\t\t\t\t\t--mod2-secondary-channel:   #993355;\n\t\t\t\t\t--mod2-primary-channel:     #f04960;\n\t\t\t\t\t--mod2-secondary-note:      #f057a0;\n\t\t\t\t\t--mod2-primary-note:        #ffb8de;\n\t\t\t\t\t--mod3-secondary-channel:   #553399;\n\t\t\t\t\t--mod3-primary-channel:     #8855fc;\n\t\t\t\t\t--mod3-secondary-note:      #aa64ff;\n\t\t\t\t\t--mod3-primary-note:\t    #f8ddff;\n\t\t\t\t\t--mod4-secondary-channel:   #a86436;\n\t\t\t\t\t--mod4-primary-channel:     #c8a825;\n\t\t\t\t\t--mod4-secondary-note:      #e8ba46;\n\t\t\t\t\t--mod4-primary-note:        #fff6d3;\n\t\t\t\t\t--mod-label-primary:        #999;\n\t\t\t\t\t--mod-label-secondary-text: #333;\n\t\t\t\t\t--mod-label-primary-text:   black;\n\t\t\t\t\t--disabled-note-primary:    #999;\n\t\t\t\t\t--disabled-note-secondary:  #666;\n\t\t\t\t}\n\n.beepboxEditor {\n\tcursor: url('wackybox_cursor.png'), auto !important;;\n}\n\t\t\n.beepboxEditor .tip {\n\tcursor: url('wackybox_cursor.png'), auto !important;;\n}\n\n.beepboxEditor .prompt label {\n\tcursor: url('wackybox_cursor.png'), auto !important;;\n}\n\n.beepboxEditor .layout-option {\n\tcursor: url('wackybox_cursor.png'), auto !important;;\n}\n\n.beepboxEditor select {\n\tcursor: url('wackybox_cursor.png'), auto !important;;\n}\n\n.select2-selection__rendered {\n\tcursor: url('wackybox_cursor.png'), auto !important;;\n}\n\n.select2-container--default .select2-results__group {\n    cursor: url('wackybox_cursor.png'), auto !important;;\n}\n\n.beepboxEditor button {\n\t cursor: url('wackybox_cursor.png'), auto !important;;\n}\n\n.beepboxEditor canvas {\n\tcursor: url('wackybox_cursor.png'), auto !important;;\n}\n\n.beepboxEditor input {\n\tcursor: url('wackybox_cursor.png'), auto !important;;\n}\n\n\t\t\t`,\n\t\t\t \"microbox\": `\n\t\t\t\t:root {\n\t\t\t\t\t--page-margin: #000000;\n\t\t\t\t\t--editor-background: #000000;\n\t\t\t\t\t--hover-preview: white;\n\t\t\t\t\t--playhead: rgba(255, 255, 255, 0.9);\n\t\t\t\t\t--primary-text: white;\n\t\t\t\t\t--secondary-text: #93B6AD;\n\t\t\t\t\t--inverted-text: black;\n\t\t\t\t\t--text-selection: rgba(47,255,250,0.99);\n\t\t\t\t\t--box-selection-fill: #03B068;\n\t\t\t\t\t--loop-accent: #FF0061;\n\t\t\t\t\t--link-accent: #FFC800;\n\t\t\t\t\t--ui-widget-background: #38554E;\n\t\t\t\t\t--ui-widget-focus: #2A7E69;\n\t\t\t\t\t--pitch-background: #281F23;\n\t\t\t\t\t--tonic: #004634;\n\t\t\t\t\t--fifth-note: #463400;\n\t\t\t\t\t--white-piano-key: #edc;\n\t\t\t\t\t--black-piano-key: #456;\n\t\t\t\t\t--use-color-formula: true;\n\t\t\t\t\t--track-editor-bg-pitch: #333333;\n\t\t\t\t\t--track-editor-bg-pitch-dim: #000000;\n\t\t\t\t\t--track-editor-bg-noise: #463400;\n\t\t\t\t\t--track-editor-bg-noise-dim: #000000;\n\t\t\t\t\t--track-editor-bg-mod: #004634;\n\t\t\t\t\t--track-editor-bg-mod-dim: #000000;\n\t\t\t\t\t--multiplicative-mod-slider: #FFC800;\n\t\t\t\t\t--overwriting-mod-slider: #00ffc0;\n\t\t\t\t\t--indicator-primary: #333333;\n\t\t\t\t\t--indicator-secondary: #00ffc0;\n\t\t\t\t\t--select2-opt-group: #2B2B2B;\n\t\t\t\t\t--input-box-outline: #69BFC6;\n\t\t\t\t\t--mute-button-normal: #00ffc0;\n\t\t\t\t\t--mute-button-mod: #FFC800;\n\t\t\t\t\t--mod-label-primary: #38554E;\n\t\t\t\t\t--mod-label-secondary-text: rgb(0, 43, 45);\n\t\t\t\t\t--mod-label-primary-text: white;\n\t\t\t\t\t--pitch-secondary-channel-hue: 0;\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 6.1;\n\t\t\t\t\t--pitch-secondary-channel-sat: 83.3;\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-channel-lum: 40;\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\n\t\t\t\t\t--pitch-primary-channel-hue: 0;\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 6.1;\n\t\t\t\t\t--pitch-primary-channel-sat: 100;\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t\t\t--pitch-primary-channel-lum: 67.5;\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.05;\n\t\t\t\t\t--pitch-secondary-note-hue: 0;\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 6.1;\n\t\t\t\t\t--pitch-secondary-note-sat: 93.9;\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t\t\t--pitch-secondary-note-lum: 25;\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-hue: 0;\n\t\t\t\t\t--pitch-primary-note-hue-scale: 6.1;\n\t\t\t\t\t--pitch-primary-note-sat: 100;\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t\t\t--pitch-primary-note-lum: 85.6;\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t\t\t--noise-secondary-channel-hue: 0;\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-channel-lum: 42;\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-primary-channel-hue: 0;\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\n\t\t\t\t\t--noise-primary-channel-sat: 33;\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t\t\t--noise-primary-channel-lum: 63.5;\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t\t\t--noise-secondary-note-hue: 0;\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t\t\t--noise-secondary-note-lum: 55;\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t\t\t--noise-primary-note-hue: 0;\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t\t\t--noise-primary-note-lum: 74;\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-hue: 192;\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-primary-channel-hue: 192;\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-channel-sat: 96;\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t\t\t--mod-secondary-note-hue: 192;\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-secondary-note-sat: 92;\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t\t\t--mod-secondary-note-lum: 45;\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t\t\t--mod-primary-note-hue: 192;\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\n\t\t\t\t\t--mod-primary-note-sat: 96;\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t\t\t--mod-primary-note-lum: 85;\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t\t}\n\t\t\t`,\n\t\t\t\"paandorasbox\": `\n\t\t\t:root {\n\t\t\t --page-margin: #200000;\n\t\t\t  --editor-background: #200000;\n\t\t\t  --hover-preview: white;\n\t\t\t  --playhead: white;\n\t\t\t  --primary-text: white;\n\t\t\t  --secondary-text: #999;\n\t\t\t  --inverted-text: black;\n\t\t\t  --text-selection: #FF5100;\n\t\t\t  --box-selection-fill: rgba(255,255,255,0.2);\n\t\t\t  --loop-accent: #FF5100;\n\t\t\t  --link-accent: #0F0;\n\t\t\t  --ui-widget-background: #562334;\n\t\t\t  --ui-widget-focus: #6D1B36;\n\t\t\t  --pitch-background: #6D1B36;\n\t\t\t  --tonic: #FF5100;\n\t\t\t  --fifth-note: #00B6FF;\n\t\t\t  --white-piano-key: #bbb;\n\t\t\t  --black-piano-key: #444;\n\t\t\t  --use-color-formula: false;\n\t\t\t  --track-editor-bg-pitch: #380C14;\n\t\t\t  --track-editor-bg-pitch-dim: #200000;\n\t\t\t  --track-editor-bg-noise: #233323;\n\t\t\t  --track-editor-bg-noise-dim: #101A0F;\n\t\t\t  --track-editor-bg-mod: #234C82;\n\t\t\t  --track-editor-bg-mod-dim: #0D1D33;\n\t\t\t  --multiplicative-mod-slider: #456;\n\t\t\t  --overwriting-mod-slider: #654;\n\t\t\t  --indicator-primary: #FF5100;\n\t\t\t  --indicator-secondary: #444;\n\t\t\t  --select2-opt-group: #585858;\n\t\t\t  --input-box-outline: #333;\n\t\t\t  --mute-button-normal: #ffa033;\n\t\t\t  --mute-button-mod: #9a6bff;\n\t\t\t  --pitch1-secondary-channel: #00B200;\n\t\t\t  --pitch1-primary-channel: #0F0;\n\t\t\t  --pitch1-secondary-note: #00B200;\n\t\t\t  --pitch1-primary-note: #0F0;\n\t\t\t  --pitch2-secondary-channel: #00B282;\n\t\t\t  --pitch2-primary-channel: #00FFBF;\n\t\t\t  --pitch2-secondary-note: #00B282;\n\t\t\t  --pitch2-primary-note: #00FFBF;\n\t\t\t  --pitch3-secondary-channel: #00B2B2;\n\t\t\t  --pitch3-primary-channel: #0FF;\n\t\t\t  --pitch3-secondary-note: #00B2B2;\n\t\t\t  --pitch3-primary-note: #0FF;\n\t\t\t  --pitch4-secondary-channel: #2623B2;\n\t\t\t  --pitch4-primary-channel: #3631FF;\n\t\t\t  --pitch4-secondary-note: #2623B2;\n\t\t\t  --pitch4-primary-note: #3631FF;\n\t\t\t  --pitch5-secondary-channel: #7700B2;\n\t\t\t  --pitch5-primary-channel: #A0F;\n\t\t\t  --pitch5-secondary-note: #7700B2;\n\t\t\t  --pitch5-primary-note: #A0F;\n\t\t\t  --pitch6-secondary-channel: #B200B2;\n\t\t\t  --pitch6-primary-channel: #F0F;\n\t\t\t  --pitch6-secondary-note: #B200B2;\n\t\t\t  --pitch6-primary-note: #F0F;\n\t\t\t  --pitch7-secondary-channel: #B20000;\n\t\t\t  --pitch7-primary-channel: #F00;\n\t\t\t  --pitch7-secondary-note: #B20000;\n\t\t\t  --pitch7-primary-note: #F00;\n\t\t\t  --pitch8-secondary-channel: #00B200;\n\t\t\t  --pitch8-primary-channel: #0F0;\n\t\t\t  --pitch8-secondary-note: #00B200;\n\t\t\t  --pitch8-primary-note: #0F0;\n\t\t\t  --pitch9-secondary-channel: #00B282;\n\t\t\t  --pitch9-primary-channel: #0FF;\n\t\t\t  --pitch9-secondary-note: #00B282;\n\t\t\t  --pitch9-primary-note: #0FF;\n\t\t\t  --pitch10-secondary-channel: #0071B2;\n\t\t\t  --pitch10-primary-channel: #009EFF;\n\t\t\t  --pitch10-secondary-note: #0071B2;\n\t\t\t  --pitch10-primary-note: #009EFF;\n\t\t\t  --noise1-secondary-channel: #32B221;\n\t\t\t  --noise1-primary-channel: #44FF2F;\n\t\t\t  --noise1-secondary-note: #32B221;\n\t\t\t  --noise1-primary-note: #44FF2F;\n\t\t\t  --noise2-secondary-channel: #216FB2;\n\t\t\t  --noise2-primary-channel: #2F9DFF;\n\t\t\t  --noise2-secondary-note: #216FB2;\n\t\t\t  --noise2-primary-note: #2F9DFF;\n\t\t\t  --noise3-secondary-channel: #2623B2;\n\t\t\t  --noise3-primary-channel: #3631FF;\n\t\t\t  --noise3-secondary-note: #2623B2;\n\t\t\t  --noise3-primary-note: #3631FF;\n\t\t\t  --noise4-secondary-channel: #7223B2;\n\t\t\t  --noise4-primary-channel: #A531FF;\n\t\t\t  --noise4-secondary-note: #7223B2;\n\t\t\t  --noise4-primary-note: #A531FF;\n\t\t\t  --noise5-secondary-channel: #B2235A;\n\t\t\t  --noise5-primary-channel: #FF317E;\n\t\t\t  --noise5-secondary-note: #B2235A;\n\t\t\t  --noise5-primary-note: #FF317E;\n\t\t\t  --mod1-secondary-channel: #17B274;\n\t\t\t  --mod1-primary-channel: #21FFA8;\n\t\t\t  --mod1-secondary-note: #17B274;\n\t\t\t  --mod1-primary-note: #21FFA8;\n\t\t\t  --mod2-secondary-channel: #1783B2;\n\t\t\t  --mod2-primary-channel: #1FBAFF;\n\t\t\t  --mod2-secondary-note: #1783B2;\n\t\t\t  --mod2-primary-note: #1FBAFF;\n\t\t\t  --mod3-secondary-channel: #553399;\n\t\t\t  --mod3-primary-channel: #8855fc;\n\t\t\t  --mod3-secondary-note: #aa64ff;\n\t\t\t  --mod3-primary-note: #f8ddff;\n\t\t\t  --mod4-secondary-channel: #B20E6B;\n\t\t\t  --mod4-primary-channel: #FF1291;\n\t\t\t  --mod4-secondary-note: #B20E6B;\n\t\t\t  --mod4-primary-note: #FF1291;\n\t\t\t  --mod-label-primary: #994038;\n\t\t\t  --mod-label-secondary-text: #331512;\n\t\t\t  --mod-label-primary-text: #331512;\n\t\t\t  --disabled-note-primary: #994038;\n\t\t\t  --disabled-note-secondary: #331512;\n\t\t\t}\n\t\t\t`,\n\t\t\t \"slushie\": `\n\t\t\t:root {\n\t\t\t\t--page-margin: #040814;\n    --editor-background: #040814;\n    --hover-preview: #c6f7ff;\n    --playhead: white;\n    --primary-text: #d3f3ff;\n    --secondary-text: #6f72b5;\n    --inverted-text: black;\n    --text-selection: rgba(119,68,255,0.99);\n    --box-selection-fill: rgb(43 70 171 / 62%);\n    --loop-accent: #573ebb;\n    --link-accent: #98f;\n    --ui-widget-background: #2e2f44;\n    --ui-widget-focus: #2b2c46;\n    --pitch-background: #353654;\n    --tonic: #716fe3;\n    --fifth-note: #76469b;\n    --white-piano-key: #abbce3;\n    --black-piano-key: #2f235e;\n    --use-color-formula: false;\n    --track-editor-bg-pitch: #3a3b5c;\n    --track-editor-bg-pitch-dim: #1f2036;\n    --track-editor-bg-noise: #3c3554;\n    --track-editor-bg-noise-dim: #1e1834;\n    --track-editor-bg-mod: #30335e;\n    --track-editor-bg-mod-dim: #161938;\n    --multiplicative-mod-slider: #e29cff;\n    --overwriting-mod-slider: #495789;\n    --indicator-primary: #e1a6ff;\n    --indicator-secondary: #415187;\n    --select2-opt-group: #22223a;\n    --input-box-outline: #2d2648;\n    --mute-button-normal: #7aceff;\n    --mute-button-mod: #9d6bff;\n    --pitch1-secondary-channel: #5f3ea5;\n    --pitch1-primary-channel: #c1a4ff;\n    --pitch1-secondary-note: #794fd3;\n    --pitch1-primary-note: #d8c6ff;\n    --pitch2-secondary-channel: #4f44bf;\n    --pitch2-primary-channel: #9287ff;\n    --pitch2-secondary-note: #5e51d9;\n    --pitch2-primary-note: #b6afff;\n    --pitch3-secondary-channel: #374eb9;\n    --pitch3-primary-channel: #8097ff;\n    --pitch3-secondary-note: #445cc9;\n    --pitch3-primary-note: #a0b2ff;\n    --pitch4-secondary-channel: #2867cf;\n    --pitch4-primary-channel: #6fa5ff;\n    --pitch4-secondary-note: #2e6ed7;\n    --pitch4-primary-note: #a6c7ff;\n    --pitch5-secondary-channel: #3175a7;\n    --pitch5-primary-channel: #7ec9ff;\n    --pitch5-secondary-note: #367eb3;\n    --pitch5-primary-note: #9fd7ff;\n    --pitch6-secondary-channel: #3993a9;\n    --pitch6-primary-channel: #8ce9ff;\n    --pitch6-secondary-note: #386da3;\n    --pitch6-primary-note: #9eecff;\n    --pitch7-secondary-channel: #369d8a;\n    --pitch7-primary-channel: #8bfce7;\n    --pitch7-secondary-note: #1c93a7;\n    --pitch7-primary-note: #abffef;\n    --pitch8-secondary-channel: #00A170;\n    --pitch8-primary-channel: #50FFC9;\n    --pitch8-secondary-note: #00C78A;\n    --pitch8-primary-note: #83FFD9;\n    --pitch9-secondary-channel: #49b374;\n    --pitch9-primary-channel: #8affa9;\n    --pitch9-secondary-note: #26815f;\n    --pitch9-primary-note: #c8ffde;\n    --pitch10-secondary-channel: #58a747;\n    --pitch10-primary-channel: #bbffaa;\n    --pitch10-secondary-note: #1d7c48;\n    --pitch10-primary-note: #c7ffbc;\n    --noise1-secondary-channel: #42829b;\n    --noise1-primary-channel: #97d3fc;\n    --noise1-secondary-note: #3f53b3;\n    --noise1-primary-note: #97d3fc;\n    --noise2-secondary-channel: #6354bb;\n    --noise2-primary-channel: #9a89ff;\n    --noise2-secondary-note: #5f4dcd;\n    --noise2-primary-note: #c6bcff;\n    --noise3-secondary-channel: #704a95;\n    --noise3-primary-channel: #c285ff;\n    --noise3-secondary-note: #ad5aff;\n    --noise3-primary-note: #d3a6ff;\n    --noise4-secondary-channel: #a53c65;\n    --noise4-primary-channel: #f794bb;\n    --noise4-secondary-note: #cb5080;\n    --noise4-primary-note: #f794bb;\n    --noise5-secondary-channel: #9b2d2d;\n    --noise5-primary-channel: #ff7676;\n    --noise5-secondary-note: #cb4444;\n    --noise5-primary-note: #ff9999;\n    --mod1-secondary-channel: #b7613c;\n    --mod1-primary-channel: #ff9f76;\n    --mod1-secondary-note: #e77e52;\n    --mod1-primary-note: #ffb99b;\n    --mod2-secondary-channel: #916d34;\n    --mod2-primary-channel: #fece80;\n    --mod2-secondary-note: #c58b35;\n    --mod2-primary-note: #ffdda5;\n    --mod3-secondary-channel: #83761a;\n    --mod3-primary-channel: #fdf68c;\n    --mod3-secondary-note: #c18e00;\n    --mod3-primary-note: #fdf68c;\n    --mod4-secondary-channel: #a86436;\n    --mod4-primary-channel: #c8a825;\n    --mod4-secondary-note: #e8ba46;\n    --mod4-primary-note: #c8a825;\n    --mod-label-primary: #37325e;\n    --mod-label-secondary-text: #6e8aa7;\n    --mod-label-primary-text: #c1ffff;\n    --disabled-note-primary: #999;\n    --disabled-note-secondary: #666;\n\t\t\t\t}\n\t\t\t`,\n\t\t\t\"midbox\":\n\t\t`:root {\n\t\t\t--page-margin: #010a1e;\n\t\t\t--editor-background: #010a1e;\n\t\t\t--hover-preview: #dfe9fe;\n\t\t\t--playhead: #e7f5f6;\n\t\t\t--primary-text: #f0fdff;\n\t\t\t--secondary-text: #c4c7d7;\n\t\t\t--inverted-text: #0f0623;\n\t\t\t--text-selection: #3f0ab4;\n\t\t\t--box-selection-fill: #32afb3;\n\t\t\t--loop-accent: #1719ff;\n\t\t\t--link-accent: #83a6ed;\n\t\t\t--ui-widget-background: #222856;\n\t\t\t--ui-widget-focus: #21417c;\n\t\t\t--pitch-background: #10264a;\n\t\t\t--tonic: #0797ce;\n\t\t\t--fifth-note: #3e2fb5;\n\t\t\t--white-piano-key: #ebf3f4;\n\t\t\t--black-piano-key: #253353;\n\t\t\t--oscilloscope-line-L: #72dcfc;\n\t\t\t--oscilloscope-line-R: #304eff;\n\t\t\t--use-color-formula: true;\n\t\t\t--track-editor-bg-pitch: #183b65; \n\t\t\t--track-editor-bg-pitch-dim: #1f2c3d;\n\t\t\t--track-editor-bg-noise: #2e196d;\n\t\t\t--track-editor-bg-noise-dim: #212038;\n\t\t\t--track-editor-bg-mod: #066433;\n\t\t\t--track-editor-bg-mod-dim: #152b1f;\n\t\t\t--multiplicative-mod-slider: #1242a4;\n\t\t\t--overwriting-mod-slider: #2218db;\n\t\t\t--indicator-primary: #1698d3;\n\t\t\t--indicator-secondary: #1b478e;\n\t\t\t--select2-opt-group: #312f6d;\n\t\t\t--input-box-outline: #788b96;\n\t\t\t--mute-button-normal: #1d34f2;\n\t\t\t--mute-button-mod: #06bad6;\n\t\t\t--mod-label-primary: #14383f;\n\t\t\t--mod-label-secondary-text: #1d7080;\n\t\t\t--mod-label-primary-text: #b7e9f2;\n\t\t\t--pitch-secondary-channel-hue: 0;\n\t\t\t--pitch-secondary-channel-hue-scale: 6.1;\n\t\t\t--pitch-secondary-channel-sat: 83.3;\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t--pitch-secondary-channel-lum: 40;\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\n\t\t\t--pitch-primary-channel-hue: 0;\n\t\t\t--pitch-primary-channel-hue-scale: 6.1;\n\t\t\t--pitch-primary-channel-sat: 100;\n\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t--pitch-primary-channel-lum: 67.5;\n\t\t\t--pitch-primary-channel-lum-scale: 0.05;\n\t\t\t--pitch-secondary-note-hue: 0;\n\t\t\t--pitch-secondary-note-hue-scale: 6.1;\n\t\t\t--pitch-secondary-note-sat: 93.9;\n\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t--pitch-secondary-note-lum: 25;\n\t\t\t--pitch-secondary-note-lum-scale: 0.05;\n\t\t\t--pitch-primary-note-hue: 0;\n\t\t\t--pitch-primary-note-hue-scale: 6.1;\n\t\t\t--pitch-primary-note-sat: 100;\n\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t--pitch-primary-note-lum: 85.6;\n\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t--noise-secondary-channel-hue: 0;\n\t\t\t--noise-secondary-channel-hue-scale: 2;\n\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t--noise-secondary-channel-lum: 42;\n\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t--noise-primary-channel-hue: 0;\n\t\t\t--noise-primary-channel-hue-scale: 2;\n\t\t\t--noise-primary-channel-sat: 33;\n\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t--noise-primary-channel-lum: 63.5;\n\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t--noise-secondary-note-hue: 0;\n\t\t\t--noise-secondary-note-hue-scale: 2;\n\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t--noise-secondary-note-lum: 55;\n\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t--noise-primary-note-hue: 0;\n\t\t\t--noise-primary-note-hue-scale: 2;\n\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t--noise-primary-note-lum: 74;\n\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t--mod-secondary-channel-hue: 192;\n\t\t\t--mod-secondary-channel-hue-scale: 1.5;\n\t\t\t--mod-secondary-channel-sat: 88;\n\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t--mod-secondary-channel-lum: 50;\n\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t--mod-primary-channel-hue: 192;\n\t\t\t--mod-primary-channel-hue-scale: 1.5;\n\t\t\t--mod-primary-channel-sat: 96;\n\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t--mod-secondary-note-hue: 192;\n\t\t\t--mod-secondary-note-hue-scale: 1.5;\n\t\t\t--mod-secondary-note-sat: 92;\n\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t--mod-secondary-note-lum: 45;\n\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t--mod-primary-note-hue: 192;\n\t\t\t--mod-primary-note-hue-scale: 1.5;\n\t\t\t--mod-primary-note-sat: 96;\n\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t--mod-primary-note-lum: 85;\n\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t--disabled-note-primary:    #53527b;\n\t\t\t--disabled-note-secondary:  #1c1b30;\n\t\t}`,\n\t\t\"dogebox2\": `\n\t\t\t:root {\n\t\t\t\t--page-margin: #000015;\n\t\t\t\t--editor-background: #000015;\n\t\t\t\t--hover-preview: #00ffff;\n\t\t\t\t--playhead: #00ffff;\n\t\t\t\t--primary-text: white;\n\t\t\t\t--secondary-text: #999;\n\t\t\t\t--inverted-text: black;\n\t\t\t\t--text-selection: rgba(255, 127, 80, 0.99);\n\t\t\t\t--box-selection-fill: rgba(255, 255, 255, 0.2);\n\t\t\t\t--loop-accent: #ff00ff;\n\t\t\t\t--link-accent: #00ffff;\n\t\t\t\t--ui-widget-background: #222222;\n\t\t\t\t--ui-widget-focus: #444444;\n\t\t\t\t--pitch-background: #222222;\n\t\t\t\t--tonic: #ab382c;\n\t\t\t\t--fifth-note: #2a76a8;\n\t\t\t\t--white-piano-key: #ffffff;\n\t\t\t\t--black-piano-key: #222222;\n\t\t\t\t--white-piano-key-text: #000000;\n\t\t\t\t--use-color-formula: false;\n\t\t\t\t--track-editor-bg-pitch: #222222;\n\t\t\t\t--track-editor-bg-pitch-dim: #111111;\n\t\t\t\t--track-editor-bg-noise: #222222;\n\t\t\t\t--track-editor-bg-noise-dim: #111111;\n\t\t\t\t--track-editor-bg-mod: #333333;\n\t\t\t\t--track-editor-bg-mod-dim: #111111;\n\t\t\t\t--multiplicative-mod-slider: #666666;\n\t\t\t\t--overwriting-mod-slider: #666666;\n\t\t\t\t--indicator-primary: #ff00ff;\n\t\t\t\t--indicator-secondary: #00ffff;\n\t\t\t\t--select2-opt-group: #333333;\n\t\t\t\t--input-box-outline: #444444;\n\t\t\t\t--mute-button-normal: #ff00ff;\n\t\t\t\t--mute-button-mod: #00ffff;\n\t\t\t\t--mod-label-primary: #282840;\n\t\t\t\t--mod-label-secondary-text: rgb(87, 86, 120);\n\t\t\t\t--mod-label-primary-text: white;\n\t\t\t\t--pitch1-secondary-channel: #bd9909;\n\t\t\t\t--pitch1-primary-channel: #fbff8e;\n\t\t\t\t--pitch1-secondary-note: #c79d3a;\n\t\t\t\t--pitch1-primary-note: #fdffb2;\n\t\t\t\t--pitch2-secondary-channel: #b86e0d;\n\t\t\t\t--pitch2-primary-channel: #ffb28e;\n\t\t\t\t--pitch2-secondary-note: #ba643a;\n\t\t\t\t--pitch2-primary-note: #fbac92;\n\t\t\t\t--pitch3-secondary-channel: #a81b08;\n\t\t\t\t--pitch3-primary-channel: #f56c67;\n\t\t\t\t--pitch3-secondary-note: #94352b;\n\t\t\t\t--pitch3-primary-note: #f56147;\n\t\t\t\t--pitch4-secondary-channel: #2a7722;\n\t\t\t\t--pitch4-primary-channel: #6ebf5e;\n\t\t\t\t--pitch4-secondary-note: #1c5c18;\n\t\t\t\t--pitch4-primary-note: #88cf82;\n\t\t\t\t--pitch5-secondary-channel: #8c8b3c;\n\t\t\t\t--pitch5-primary-channel: #c3c168;\n\t\t\t\t--pitch5-secondary-note: #747330;\n\t\t\t\t--pitch5-primary-note: #d4d394;\n\t\t\t\t--pitch6-secondary-channel: #3f9577;\n\t\t\t\t--pitch6-primary-channel: #6fc4b4;\n\t\t\t\t--pitch6-secondary-note: #2c6a5c;\n\t\t\t\t--pitch6-primary-note: #8fdad0;\n\t\t\t\t--pitch7-secondary-channel: #204a80;\n\t\t\t\t--pitch7-primary-channel: #6d9fc2;\n\t\t\t\t--pitch7-secondary-note: #132f5a;\n\t\t\t\t--pitch7-primary-note: #9dbed8;\n\t\t\t\t--pitch8-secondary-channel: #a531ad;\n\t\t\t\t--pitch8-primary-channel: #db68e3;\n\t\t\t\t--pitch8-secondary-note: #8d2f94;\n\t\t\t\t--pitch8-primary-note: #e66cbf;\n\t\t\t\t--pitch9-secondary-channel: #03a1a1;\n\t\t\t\t--pitch9-primary-channel: #52fffb;\n\t\t\t\t--pitch9-secondary-note: #34baba;\n\t\t\t\t--pitch9-primary-note: #60fbfb;\n\t\t\t\t--pitch10-secondary-channel: #4208a1;\n\t\t\t\t--pitch10-primary-channel: #9282ff;\n\t\t\t\t--pitch10-secondary-note: #5735b5;\n\t\t\t\t--pitch10-primary-note: #ab52fb;\n\t\t\t\t--noise1-secondary-channel: #2a5555;\n\t\t\t\t--noise1-primary-channel: #4c7878;\n\t\t\t\t--noise1-secondary-note: #6e9a9a;\n\t\t\t\t--noise1-primary-note: #90bcbc;\n\t\t\t\t--noise2-secondary-channel: #553355;\n\t\t\t\t--noise2-primary-channel: #775577;\n\t\t\t\t--noise2-secondary-note: #997799;\n\t\t\t\t--noise2-primary-note: #bbaa99;\n\t\t\t\t--noise3-secondary-channel: #2a6622;\n\t\t\t\t--noise3-primary-channel: #4c8844;\n\t\t\t\t--noise3-secondary-note: #6eaa66;\n\t\t\t\t--noise3-primary-note: #90cc88;\n\t\t\t\t--noise4-secondary-channel: #664400;\n\t\t\t\t--noise4-primary-channel: #886600;\n\t\t\t\t--noise4-secondary-note: #aa8800;\n\t\t\t\t--noise4-primary-note: #cccc00;\n\t\t\t\t--noise5-secondary-channel: #006633;\n\t\t\t\t--noise5-primary-channel: #008855;\n\t\t\t\t--noise5-secondary-note: #00aa77;\n\t\t\t\t--noise5-primary-note: #00cc99;\n\t\t\t\t--mod1-secondary-channel: #fe00ff;\n\t\t\t\t--mod1-primary-channel: #ff72ff;\n\t\t\t\t--mod1-secondary-note: #ff92ff;\n\t\t\t\t--mod1-primary-note: #ffb2fb;\n\t\t\t\t--mod2-secondary-channel: #00fe00;\n\t\t\t\t--mod2-primary-channel: #8eff8e;\n\t\t\t\t--mod2-secondary-note: #92ff92;\n\t\t\t\t--mod2-primary-note: #b2ffb2;\n\t\t\t\t--mod3-secondary-channel: #feff00;\n\t\t\t\t--mod3-primary-channel: #fffb8e;\n\t\t\t\t--mod3-secondary-note: #fffd92;\n\t\t\t\t--mod3-primary-note: #fffe92;\n\t\t\t\t--mod4-secondary-channel: #00fffe;\n\t\t\t\t--mod4-primary-channel: #82fffb;\n\t\t\t\t--mod4-secondary-note: #92ffff;\n\t\t\t\t--mod4-primary-note: #b2fffb;\n\t\t\t\t--disabled-note-primary: #c6c6c6;\n\t\t\t\t--disabled-note-secondary: #8c8c8c;\n\t\t\t\t}`,\n\t\t\"azur lane\":`\n\t\t:root {\n\t\t\t--page-margin: #19337e;\n\t\t\t--editor-background: #000333cf;\n\t\t\t--hover-preview: white;\n\t\t\t--playhead: rgba(255, 255, 255, 0.9);\n\t\t\t--primary-text: #9af9ff;\n\t\t\t--secondary-text: #4072dd;\n\t\t\t--inverted-text: black;\n\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t--box-selection-fill: #044b94;\n\t\t\t--loop-accent: #950d0d;\n\t\t\t--link-accent: #0072ff;\n\t\t\t--ui-widget-background: #255bb3;\n\t\t\t--ui-widget-focus: #757575;\n\t\t\t--pitch-background: #20468b73;\n\t\t\t--tonic: #c9c9c9;\n\t\t\t--fifth-note: #731d1d;\n\t\t\t--white-piano-key: #eee;\n\t\t\t--black-piano-key: #000;\n\t\t\t--white-piano-key-text: #131200;\n\t\t\t--black-piano-key-text: #fff;\n\t\t\t--use-color-formula: false;\n\t\t\t--track-editor-bg-pitch: #535a73;\n\t\t\t--track-editor-bg-pitch-dim: #353643;\n\t\t\t--track-editor-bg-noise: #770000;\n\t\t\t--track-editor-bg-noise-dim: #430000;\n\t\t\t--track-editor-bg-mod: #5d1d06;\n\t\t\t--track-editor-bg-mod-dim: #270000;\n\t\t\t--multiplicative-mod-slider: #bb0000;\n\t\t\t--overwriting-mod-slider: #ad0000;\n\t\t\t--indicator-primary: #9c64f7;\n\t\t\t--indicator-secondary: #393e4f;\n\t\t\t--select2-opt-group: #5d576f;\n\t\t\t--input-box-outline: #002957;\n\t\t\t--mute-button-normal: #ffffff;\n\t\t\t--mute-button-mod: #4f4f4f;\n\t\t\t--mod-label-primary: #531313;\n\t\t\t--pitch1-secondary-channel: #80858d;\n\t\t  --pitch1-primary-channel: #f2f7ff;\n\t\t  --pitch1-secondary-note: #80858d;\n\t\t  --pitch1-primary-note: #f2f7ff;\n\t\t  --pitch2-secondary-channel: #7392ad;\n\t\t  --pitch2-primary-channel: #a8d6ff;\n\t\t  --pitch2-secondary-note: #7392ad;\n\t\t  --pitch2-primary-note: #a8d6ff;\n\t\t  --pitch3-secondary-channel: #4b7eaa;\n\t\t  --pitch3-primary-channel: #71bdff;\n\t\t  --pitch3-secondary-note: #4b7eaa;\n\t\t  --pitch3-primary-note: #71bdff;\n\t\t  --pitch4-secondary-channel: #3594b1;\n\t\t  --pitch4-primary-channel: #48d4ff;\n\t\t  --pitch4-secondary-note: #3594b1;\n\t\t  --pitch4-primary-note: #48d4ff;\n\t\t  --pitch5-secondary-channel: #1b98b1;\n\t\t  --pitch5-primary-channel: #30f1ff;\n\t\t  --pitch5-secondary-note: #1b98b1;\n\t\t  --pitch5-primary-note: #30f1ff;\n\t\t  --pitch6-secondary-channel: #9e0000;\n\t\t  --pitch6-primary-channel: #db0000;\n\t\t  --pitch6-secondary-note: #9e0000;\n\t\t  --pitch6-primary-note: #db0000;\n\t\t  --pitch7-secondary-channel: #7c1717;\n\t\t  --pitch7-primary-channel: #9e0000;\n\t\t  --pitch7-secondary-note: #7c1717;\n\t\t  --pitch7-primary-note: #9e0000;\n\t\t  --pitch8-secondary-channel: #5c1f1f;\n\t\t  --pitch8-primary-channel: #7c1717;\n\t\t  --pitch8-secondary-note: #5c1f1f;\n\t\t  --pitch8-primary-note: #7c1717;\n\t\t  --pitch9-secondary-channel: #3e2020;\n\t\t  --pitch9-primary-channel: #5c1f1f;\n\t\t  --pitch9-secondary-note: #3e2020;\n\t\t  --pitch9-primary-note: #5c1f1f;\n\t\t  --pitch10-secondary-channel: #2f1c1c;\n\t\t  --pitch10-primary-channel: #5c1f1f;\n\t\t  --pitch10-secondary-note: #2f1c1c;\n\t\t  --pitch10-primary-note: #5c1f1f;\n\t\t  --noise1-secondary-channel: #828282;\n\t\t  --noise1-primary-channel: #cacaca;\n\t\t  --noise1-secondary-note: #828282;\n\t\t  --noise1-primary-note: #cacaca;\n\t\t  --noise2-secondary-channel: #2f8baf;\n\t\t  --noise2-primary-channel: #3de2ff;\n\t\t  --noise2-secondary-note: #2f8baf;\n\t\t  --noise2-primary-note: #3de2ff;\n\t\t  --noise3-secondary-channel: #6f50b1;\n\t\t  --noise3-primary-channel: #8567ff;\n\t\t  --noise3-secondary-note: #6f50b1;\n\t\t  --noise3-primary-note: #8567ff;\n\t\t  --noise4-secondary-channel: #d38900;\n\t\t  --noise4-primary-channel: #ffb500;\n\t\t  --noise4-secondary-note: #d38900;\n\t\t  --noise4-primary-note: #ffb500;\n\t\t  --noise5-secondary-channel: #af0008;\n\t\t  --noise5-primary-channel: #00d70e;\n\t\t  --noise5-secondary-note: #29b700;\n\t\t  --noise5-primary-note: #00f7ff;\n\t\t  --mod1-secondary-channel: #9d5bb9;\n\t\t  --mod1-primary-channel: #e16bff;\n\t\t  --mod1-secondary-note: #3a3ea4;\n\t\t  --mod1-primary-note: #fff;\n\t\t  --mod2-secondary-channel: #3a8d58;\n\t\t  --mod2-primary-channel: #42ffff;\n\t\t  --mod2-secondary-note: #3a8d58;\n\t\t  --mod2-primary-note: #42ffff;\n\t\t  --mod3-secondary-channel: #af6c00;\n\t\t  --mod3-primary-channel: #fa0;\n\t\t  --mod3-secondary-note: #0001a2;\n\t\t  --mod3-primary-note: #970000;\n\t\t  --mod4-secondary-channel: #d3d3d3;\n\t\t  --mod4-primary-channel: #759bff;\n\t\t  --mod4-secondary-note: #a00000;\n\t\t  --mod4-primary-note: #fff;\n\t\t  --disabled-note-primary: #3a3a3a;\n\t\t  --disabled-note-secondary: #000;\n\t\t\t}\n\t\t/* replaces hotdog (in a hacky way) with an image of the girls using the same scratch sprites from the 404 page*/\n\t\t#Hotdog {\n\t\tdisplay: none;\n\t\t}\n\t\t.instructions-column > section:first-of-type > p:first-of-type:after {\n\t\tdisplay: block;\n\t\tcontent: url(\"UltraboxAzurLaneThemeStarterSquad.png\");\n\t\twidth: 100%;\n\t\ttext-align: center;\n\t\tmargin-top: 25px;\n\t\t}\n\t\t/* sets cursor */\n\t\t* {\n\t\tcursor: url(\"UltraBoxAzurLaneThemeMouse.png\"), auto !important;\n\t\t}\n\t\t/* sets background image */\n\t\tbody {\n\t\tbackground-image: url(\"UltraBoxAzurLaneThemeMemoryTaskBackground.png\") !important;\n\t\tbackground-size: cover;\n\t\tbackground-position: center;\n\t\tbackground-repeat: no-repeat;\n\t\t\t}\n\t\t\t/* make editor background transparent */\n\t\t#beepboxEditorContainer, .beepboxEditor, #text-content {\n\t\tbackground: #0400257d !important;\n\t\t}\n\t\t\t#text-content > section > h1 > font {\n\t\tdisplay: none;\n\t\t}\n\t\t#text-content > section > h1 {\n\t\tmargin: auto;\n\t\tcontent: url(\"UltraBoxALThemeLogo.png\");\n\t\t}\n\t}`,\n\t\t\t  \"custom\": `${localStorage.getItem(\"customColors\") || `:root {\n\t\t\t\t--page-margin: #040410;\n\t\t\t\t--editor-background: #040410;\n\t\t\t\t--hover-preview: white;\n\t\t\t\t--playhead: rgba(255, 255, 255, 0.9);\n\t\t\t\t--primary-text: white;\n\t\t\t\t--secondary-text: #84859a;\n\t\t\t\t--inverted-text: black;\n\t\t\t\t--text-selection: rgba(119,68,255,0.99);\n\t\t\t\t--box-selection-fill: #044b94;\n\t\t\t\t--loop-accent: #74f;\n\t\t\t\t--link-accent: #98f;\n\t\t\t\t--ui-widget-background: #393e4f;\n\t\t\t\t--ui-widget-focus: #6d6886;\n\t\t\t\t--pitch-background: #393e4f99;\n\t\t\t\t--tonic: #725491;\n\t\t\t\t--fifth-note: #54547a;\n\t\t\t\t--white-piano-key: #eee;\n\t\t\t\t--black-piano-key: #666;\n\t\t\t\t--use-color-formula: true;\n\t\t\t\t--track-editor-bg-pitch: #393e4f;\n\t\t\t\t--track-editor-bg-pitch-dim: #1c1d28;\n\t\t\t\t--track-editor-bg-noise: #3d3535;\n\t\t\t\t--track-editor-bg-noise-dim: #161313;\n\t\t\t\t--track-editor-bg-mod: #283560;\n\t\t\t\t--track-editor-bg-mod-dim: #0a101f;\n\t\t\t\t--multiplicative-mod-slider: #606c9f;\n\t\t\t\t--overwriting-mod-slider: #6850b5;\n\t\t\t\t--indicator-primary: #9c64f7;\n\t\t\t\t--indicator-secondary: #393e4f;\n\t\t\t\t--select2-opt-group: #5d576f;\n\t\t\t\t--input-box-outline: #222;\n\t\t\t\t--mute-button-normal: #dda85d;\n\t\t\t\t--mute-button-mod: #886eae;\n\t\t\t\t--mod-label-primary: #282840;\n\t\t\t\t--mod-label-secondary-text: rgb(87, 86, 120);\n\t\t\t\t--mod-label-primary-text: white;\n\t\t\t\t--pitch-secondary-channel-hue: 0;\n\t\t\t\t--pitch-secondary-channel-hue-scale: 6.1;\n\t\t\t\t--pitch-secondary-channel-sat: 83.3;\n\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\n\t\t\t\t--pitch-secondary-channel-lum: 40;\n\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\n\t\t\t\t--pitch-primary-channel-hue: 0;\n\t\t\t\t--pitch-primary-channel-hue-scale: 6.1;\n\t\t\t\t--pitch-primary-channel-sat: 100;\n\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\n\t\t\t\t--pitch-primary-channel-lum: 67.5;\n\t\t\t\t--pitch-primary-channel-lum-scale: 0.05;\n\t\t\t\t--pitch-secondary-note-hue: 0;\n\t\t\t\t--pitch-secondary-note-hue-scale: 6.1;\n\t\t\t\t--pitch-secondary-note-sat: 93.9;\n\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\n\t\t\t\t--pitch-secondary-note-lum: 25;\n\t\t\t\t--pitch-secondary-note-lum-scale: 0.05;\n\t\t\t\t--pitch-primary-note-hue: 0;\n\t\t\t\t--pitch-primary-note-hue-scale: 6.1;\n\t\t\t\t--pitch-primary-note-sat: 100;\n\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\n\t\t\t\t--pitch-primary-note-lum: 85.6;\n\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\n\t\t\t\t--noise-secondary-channel-hue: 0;\n\t\t\t\t--noise-secondary-channel-hue-scale: 2;\n\t\t\t\t--noise-secondary-channel-sat: 25;\n\t\t\t\t--noise-secondary-channel-sat-scale: 0;\n\t\t\t\t--noise-secondary-channel-lum: 42;\n\t\t\t\t--noise-secondary-channel-lum-scale: 0;\n\t\t\t\t--noise-primary-channel-hue: 0;\n\t\t\t\t--noise-primary-channel-hue-scale: 2;\n\t\t\t\t--noise-primary-channel-sat: 33;\n\t\t\t\t--noise-primary-channel-sat-scale: 0;\n\t\t\t\t--noise-primary-channel-lum: 63.5;\n\t\t\t\t--noise-primary-channel-lum-scale: 0;\n\t\t\t\t--noise-secondary-note-hue: 0;\n\t\t\t\t--noise-secondary-note-hue-scale: 2;\n\t\t\t\t--noise-secondary-note-sat: 33.5;\n\t\t\t\t--noise-secondary-note-sat-scale: 0;\n\t\t\t\t--noise-secondary-note-lum: 55;\n\t\t\t\t--noise-secondary-note-lum-scale: 0;\n\t\t\t\t--noise-primary-note-hue: 0;\n\t\t\t\t--noise-primary-note-hue-scale: 2;\n\t\t\t\t--noise-primary-note-sat: 46.5;\n\t\t\t\t--noise-primary-note-sat-scale: 0;\n\t\t\t\t--noise-primary-note-lum: 74;\n\t\t\t\t--noise-primary-note-lum-scale: 0;\n\t\t\t\t--mod-secondary-channel-hue: 192;\n\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\n\t\t\t\t--mod-secondary-channel-sat: 88;\n\t\t\t\t--mod-secondary-channel-sat-scale: 0;\n\t\t\t\t--mod-secondary-channel-lum: 50;\n\t\t\t\t--mod-secondary-channel-lum-scale: 0;\n\t\t\t\t--mod-primary-channel-hue: 192;\n\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\n\t\t\t\t--mod-primary-channel-sat: 96;\n\t\t\t\t--mod-primary-channel-sat-scale: 0;\n\t\t\t\t--mod-primary-channel-lum: 80;\n\t\t\t\t--mod-primary-channel-lum-scale: 0;\n\t\t\t\t--mod-secondary-note-hue: 192;\n\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\n\t\t\t\t--mod-secondary-note-sat: 92;\n\t\t\t\t--mod-secondary-note-sat-scale: 0;\n\t\t\t\t--mod-secondary-note-lum: 45;\n\t\t\t\t--mod-secondary-note-lum-scale: 0;\n\t\t\t\t--mod-primary-note-hue: 192;\n\t\t\t\t--mod-primary-note-hue-scale: 1.5;\n\t\t\t\t--mod-primary-note-sat: 96;\n\t\t\t\t--mod-primary-note-sat-scale: 0;\n\t\t\t\t--mod-primary-note-lum: 85;\n\t\t\t\t--mod-primary-note-lum-scale: 0;\n\t\t\t}`}`,\n    };\n\n    public static readonly pageMargin: string = \"var(--page-margin)\";\n    public static readonly editorBackground: string = \"var(--editor-background)\";\n    public static readonly hoverPreview: string = \"var(--hover-preview)\";\n    public static readonly playhead: string = \"var(--playhead)\";\n    public static readonly primaryText: string = \"var(--primary-text)\";\n    public static readonly secondaryText: string = \"var(--secondary-text)\";\n    public static readonly invertedText: string = \"var(--inverted-text)\";\n    public static readonly textSelection: string = \"var(--text-selection)\";\n    public static readonly boxSelectionFill: string = \"var(--box-selection-fill)\";\n    public static readonly loopAccent: string = \"var(--loop-accent)\";\n    public static readonly linkAccent: string = \"var(--link-accent)\";\n    public static readonly uiWidgetBackground: string = \"var(--ui-widget-background)\";\n    public static readonly uiWidgetFocus: string = \"var(--ui-widget-focus)\";\n    public static readonly pitchBackground: string = \"var(--pitch-background)\";\n    public static readonly tonic: string = \"var(--tonic)\";\n    public static readonly fifthNote: string = \"var(--fifth-note)\";\n    public static readonly whitePianoKey: string = \"var(--white-piano-key)\";\n    public static readonly blackPianoKey: string = \"var(--black-piano-key)\";\n    public static readonly whitePianoKeyText: string = \"var(--white-piano-key-text)\";\n    public static readonly blackPianoKeyText: string = \"var(--black-piano-key-text)\";\n\tpublic static readonly oscilloscopeLineL: string = \"var(--oscilloscope-line-L)\";\n\tpublic static readonly oscilloscopeLineR: string = \"var(--oscilloscope-line-R)\";\n\tpublic static readonly modTitle: string = \"var(--mod-title)\";\n    public static readonly useColorFormula: string = \"var(--use-color-formula)\";\n    public static readonly pitchSecondaryChannelHue: string = \"var(--pitch-secondary-channel-hue)\";\n    public static readonly pitchSecondaryChannelHueScale: string = \"var(--pitch-secondary-channel-hue-scale)\";\n    public static readonly pitchSecondaryChannelSat: string = \"var(--pitch-secondary-channel-sat)\";\n    public static readonly pitchSecondaryChannelSatScale: string = \"var(--pitch-secondary-channel-sat-scale)\";\n    public static readonly pitchSecondaryChannelLum: string = \"var(--pitch-secondary-channel-lum)\";\n    public static readonly pitchSecondaryChannelLumScale: string = \"var(--pitch-secondary-channel-lum-scale)\";\n    public static readonly pitchPrimaryChannelHue: string = \"var(--pitch-primary-channel-hue)\";\n    public static readonly pitchPrimaryChannelHueScale: string = \"var(--pitch-primary-channel-hue-scale)\";\n    public static readonly pitchPrimaryChannelSat: string = \"var(--pitch-primary-channel-sat)\";\n    public static readonly pitchPrimaryChannelSatScale: string = \"var(--pitch-primary-channel-sat-scale)\";\n    public static readonly pitchPrimaryChannelLum: string = \"var(--pitch-primary-channel-lum)\";\n    public static readonly pitchPrimaryChannelLumScale: string = \"var(--pitch-primary-channel-lum-scale)\";\n    public static readonly pitchSecondaryNoteHue: string = \"var(--pitch-secondary-note-hue)\";\n    public static readonly pitchSecondaryNoteHueScale: string = \"var(--pitch-secondary-note-hue-scale)\";\n    public static readonly pitchSecondaryNoteSat: string = \"var(--pitch-secondary-note-sat)\";\n    public static readonly pitchSecondaryNoteSatScale: string = \"var(--pitch-secondary-note-sat-scale)\";\n    public static readonly pitchSecondaryNoteLum: string = \"var(--pitch-secondary-note-lum)\";\n    public static readonly pitchSecondaryNoteLumScale: string = \"var(--pitch-secondary-note-lum-scale)\";\n    public static readonly pitchPrimaryNoteHue: string = \"var(--pitch-primary-note-hue)\";\n    public static readonly pitchPrimaryNoteHueScale: string = \"var(--pitch-primary-note-hue-scale)\";\n    public static readonly pitchPrimaryNoteSat: string = \"var(--pitch-primary-note-sat)\";\n    public static readonly pitchPrimaryNoteSatScale: string = \"var(--pitch-primary-note-sat-scale)\";\n    public static readonly pitchPrimaryNoteLum: string = \"var(--pitch-primary-note-lum)\";\n    public static readonly pitchPrimaryNoteLumScale: string = \"var(--pitch-primary-note-lum-scale)\";\n    public static readonly modSecondaryChannelHue: string = \"var(--mod-secondary-channel-hue)\";\n    public static readonly modSecondaryChannelHueScale: string = \"var(--mod-secondary-channel-hue-scale)\";\n    public static readonly modSecondaryChannelSat: string = \"var(--mod-secondary-channel-sat)\";\n    public static readonly modSecondaryChannelSatScale: string = \"var(--mod-secondary-channel-sat-scale)\";\n    public static readonly modSecondaryChannelLum: string = \"var(--mod-secondary-channel-lum)\";\n    public static readonly modSecondaryChannelLumScale: string = \"var(--mod-secondary-channel-lum-scale)\";\n    public static readonly modPrimaryChannelHue: string = \"var(--mod-primary-channel-hue)\";\n    public static readonly modPrimaryChannelHueScale: string = \"var(--mod-primary-channel-hue-scale)\";\n    public static readonly modPrimaryChannelSat: string = \"var(--mod-primary-channel-sat)\";\n    public static readonly modPrimaryChannelSatScale: string = \"var(--mod-primary-channel-sat-scale)\";\n    public static readonly modPrimaryChannelLum: string = \"var(--mod-primary-channel-lum)\";\n    public static readonly modPrimaryChannelLumScale: string = \"var(--mod-primary-channel-lum-scale)\";\n    public static readonly modSecondaryNoteHue: string = \"var(--mod-secondary-note-hue)\";\n    public static readonly modSecondaryNoteHueScale: string = \"var(--mod-secondary-note-hue-scale)\";\n    public static readonly modSecondaryNoteSat: string = \"var(--mod-secondary-note-sat)\";\n    public static readonly modSecondaryNoteSatScale: string = \"var(--mod-secondary-note-sat-scale)\";\n    public static readonly modSecondaryNoteLum: string = \"var(--mod-secondary-note-lum)\";\n    public static readonly modSecondaryNoteLumScale: string = \"var(--mod-secondary-note-lum-scale)\";\n    public static readonly modPrimaryNoteHue: string = \"var(--mod-primary-note-hue)\";\n    public static readonly modPrimaryNoteHueScale: string = \"var(--mod-primary-note-hue-scale)\";\n    public static readonly modPrimaryNoteSat: string = \"var(--mod-primary-note-sat)\";\n    public static readonly modPrimaryNoteSatScale: string = \"var(--mod-primary-note-sat-scale)\";\n    public static readonly modPrimaryNoteLum: string = \"var(--mod-primary-note-lum)\";\n    public static readonly modPrimaryNoteLumScale: string = \"var(--mod-primary-note-lum-scale)\";\n    public static readonly noiseSecondaryChannelHue: string = \"var(--noise-secondary-channel-hue)\";\n    public static readonly noiseSecondaryChannelHueScale: string = \"var(--noise-secondary-channel-hue-scale)\";\n    public static readonly noiseSecondaryChannelSat: string = \"var(--noise-secondary-channel-sat)\";\n    public static readonly noiseSecondaryChannelSatScale: string = \"var(--noise-secondary-channel-sat-scale)\";\n    public static readonly noiseSecondaryChannelLum: string = \"var(--noise-secondary-channel-lum)\";\n    public static readonly noiseSecondaryChannelLumScale: string = \"var(--noise-secondary-channel-lum-scale)\";\n    public static readonly noisePrimaryChannelHue: string = \"var(--noise-primary-channel-hue)\";\n    public static readonly noisePrimaryChannelHueScale: string = \"var(--noise-primary-channel-hue-scale)\";\n    public static readonly noisePrimaryChannelSat: string = \"var(--noise-primary-channel-sat)\";\n    public static readonly noisePrimaryChannelSatScale: string = \"var(--noise-primary-channel-sat-scale)\";\n    public static readonly noisePrimaryChannelLum: string = \"var(--noise-primary-channel-lum)\";\n    public static readonly noisePrimaryChannelLumScale: string = \"var(--noise-primary-channel-lum-scale)\";\n    public static readonly noiseSecondaryNoteHue: string = \"var(--noise-secondary-note-hue)\";\n    public static readonly noiseSecondaryNoteHueScale: string = \"var(--noise-secondary-note-hue-scale)\";\n    public static readonly noiseSecondaryNoteSat: string = \"var(--noise-secondary-note-sat)\";\n    public static readonly noiseSecondaryNoteSatScale: string = \"var(--noise-secondary-note-sat-scale)\";\n    public static readonly noiseSecondaryNoteLum: string = \"var(--noise-secondary-note-lum)\";\n    public static readonly noiseSecondaryNoteLumScale: string = \"var(--noise-secondary-note-lum-scale)\";\n    public static readonly noisePrimaryNoteHue: string = \"var(--noise-primary-note-hue)\";\n    public static readonly noisePrimaryNoteHueScale: string = \"var(--noise-primary-note-hue-scale)\";\n    public static readonly noisePrimaryNoteSat: string = \"var(--noise-primary-note-sat)\";\n    public static readonly noisePrimaryNoteSatScale: string = \"var(--noise-primary-note-sat-scale)\";\n    public static readonly noisePrimaryNoteLum: string = \"var(--noise-primary-note-lum)\";\n    public static readonly noisePrimaryNoteLumScale: string = \"var(--noise-primary-note-lum-scale)\";\n    public static readonly trackEditorBgPitch: string = \"var(--track-editor-bg-pitch)\";\n    public static readonly trackEditorBgPitchDim: string = \"var(--track-editor-bg-pitch-dim)\";\n    public static readonly trackEditorBgNoise: string = \"var(--track-editor-bg-noise)\";\n    public static readonly trackEditorBgNoiseDim: string = \"var(--track-editor-bg-noise-dim)\";\n    public static readonly trackEditorBgMod: string = \"var(--track-editor-bg-mod)\";\n    public static readonly trackEditorBgModDim: string = \"var(--track-editor-bg-mod-dim)\";\n    public static readonly multiplicativeModSlider: string = \"var(--multiplicative-mod-slider)\";\n    public static readonly overwritingModSlider: string = \"var(--overwriting-mod-slider)\";\n    public static readonly indicatorPrimary: string = \"var(--indicator-primary)\";\n    public static readonly indicatorSecondary: string = \"var(--indicator-secondary)\";\n    public static readonly select2OptGroup: string = \"var(--select2-opt-group)\";\n    public static readonly inputBoxOutline: string = \"var(--input-box-outline)\";\n    public static readonly muteButtonNormal: string = \"var(--mute-button-normal)\";\n    public static readonly muteButtonMod: string = \"var(--mute-button-mod)\";\n    public static readonly modLabelPrimary: string = \"var(--mod-label-primary)\";\n    public static readonly modLabelSecondaryText: string = \"var(--mod-label-secondary-text)\";\n    public static readonly modLabelPrimaryText: string = \"var(--mod-label-primary-text)\";\n    public static readonly disabledNotePrimary: string = \"var(--disabled-note-primary)\";\n    public static readonly disabledNoteSecondary: string = \"var(--disabled-note-secondary)\";\n\n    public static readonly pitchChannels: DictionaryArray<ChannelColors> = toNameMap([\n        {\n            name: \"pitch1\", // cyan\n            secondaryChannel: \"var(--pitch1-secondary-channel)\",\n            primaryChannel: \"var(--pitch1-primary-channel)\",\n            secondaryNote: \"var(--pitch1-secondary-note)\",\n            primaryNote: \"var(--pitch1-primary-note)\",\n        }, {\n            name: \"pitch2\", // yellow\n            secondaryChannel: \"var(--pitch2-secondary-channel)\",\n            primaryChannel: \"var(--pitch2-primary-channel)\",\n            secondaryNote: \"var(--pitch2-secondary-note)\",\n            primaryNote: \"var(--pitch2-primary-note)\",\n        }, {\n            name: \"pitch3\", // orange\n            secondaryChannel: \"var(--pitch3-secondary-channel)\",\n            primaryChannel: \"var(--pitch3-primary-channel)\",\n            secondaryNote: \"var(--pitch3-secondary-note)\",\n            primaryNote: \"var(--pitch3-primary-note)\",\n        }, {\n            name: \"pitch4\", // green\n            secondaryChannel: \"var(--pitch4-secondary-channel)\",\n            primaryChannel: \"var(--pitch4-primary-channel)\",\n            secondaryNote: \"var(--pitch4-secondary-note)\",\n            primaryNote: \"var(--pitch4-primary-note)\",\n        }, {\n            name: \"pitch5\", // magenta\n            secondaryChannel: \"var(--pitch5-secondary-channel)\",\n            primaryChannel: \"var(--pitch5-primary-channel)\",\n            secondaryNote: \"var(--pitch5-secondary-note)\",\n            primaryNote: \"var(--pitch5-primary-note)\",\n        }, {\n            name: \"pitch6\", // blue\n            secondaryChannel: \"var(--pitch6-secondary-channel)\",\n            primaryChannel: \"var(--pitch6-primary-channel)\",\n            secondaryNote: \"var(--pitch6-secondary-note)\",\n            primaryNote: \"var(--pitch6-primary-note)\",\n        }, {\n            name: \"pitch7\", // olive\n            secondaryChannel: \"var(--pitch7-secondary-channel)\",\n            primaryChannel: \"var(--pitch7-primary-channel)\",\n            secondaryNote: \"var(--pitch7-secondary-note)\",\n            primaryNote: \"var(--pitch7-primary-note)\",\n        }, {\n            name: \"pitch8\", // red\n            secondaryChannel: \"var(--pitch8-secondary-channel)\",\n            primaryChannel: \"var(--pitch8-primary-channel)\",\n            secondaryNote: \"var(--pitch8-secondary-note)\",\n            primaryNote: \"var(--pitch8-primary-note)\",\n        }, {\n            name: \"pitch9\", // teal\n            secondaryChannel: \"var(--pitch9-secondary-channel)\",\n            primaryChannel: \"var(--pitch9-primary-channel)\",\n            secondaryNote: \"var(--pitch9-secondary-note)\",\n            primaryNote: \"var(--pitch9-primary-note)\",\n        }, {\n            name: \"pitch10\", // purple\n            secondaryChannel: \"var(--pitch10-secondary-channel)\",\n            primaryChannel: \"var(--pitch10-primary-channel)\",\n            secondaryNote: \"var(--pitch10-secondary-note)\",\n            primaryNote: \"var(--pitch10-primary-note)\",\n        },\n    ]);\n    public static readonly noiseChannels: DictionaryArray<ChannelColors> = toNameMap([\n        {\n            name: \"noise1\", // gray\n            secondaryChannel: \"var(--noise1-secondary-channel)\",\n            primaryChannel: \"var(--noise1-primary-channel)\",\n            secondaryNote: \"var(--noise1-secondary-note)\",\n            primaryNote: \"var(--noise1-primary-note)\",\n        }, {\n            name: \"noise2\", // brown\n            secondaryChannel: \"var(--noise2-secondary-channel)\",\n            primaryChannel: \"var(--noise2-primary-channel)\",\n            secondaryNote: \"var(--noise2-secondary-note)\",\n            primaryNote: \"var(--noise2-primary-note)\",\n        }, {\n            name: \"noise3\", // azure\n            secondaryChannel: \"var(--noise3-secondary-channel)\",\n            primaryChannel: \"var(--noise3-primary-channel)\",\n            secondaryNote: \"var(--noise3-secondary-note)\",\n            primaryNote: \"var(--noise3-primary-note)\",\n        }, {\n            name: \"noise4\", // purple\n            secondaryChannel: \"var(--noise4-secondary-channel)\",\n            primaryChannel: \"var(--noise4-primary-channel)\",\n            secondaryNote: \"var(--noise4-secondary-note)\",\n            primaryNote: \"var(--noise4-primary-note)\",\n        }, {\n            name: \"noise5\", // sage\n            secondaryChannel: \"var(--noise5-secondary-channel)\",\n            primaryChannel: \"var(--noise5-primary-channel)\",\n            secondaryNote: \"var(--noise5-secondary-note)\",\n            primaryNote: \"var(--noise5-primary-note)\",\n        },\n    ]);\n    public static readonly modChannels: DictionaryArray<ChannelColors> = toNameMap([\n        {\n            name: \"mod1\",\n            secondaryChannel: \"var(--mod1-secondary-channel)\",\n            primaryChannel: \"var(--mod1-primary-channel)\",\n            secondaryNote: \"var(--mod1-secondary-note)\",\n            primaryNote: \"var(--mod1-primary-note)\",\n        }, {\n            name: \"mod2\",\n            secondaryChannel: \"var(--mod2-secondary-channel)\",\n            primaryChannel: \"var(--mod2-primary-channel)\",\n            secondaryNote: \"var(--mod2-secondary-note)\",\n            primaryNote: \"var(--mod2-primary-note)\",\n        }, {\n            name: \"mod3\",\n            secondaryChannel: \"var(--mod3-secondary-channel)\",\n            primaryChannel: \"var(--mod3-primary-channel)\",\n            secondaryNote: \"var(--mod3-secondary-note)\",\n            primaryNote: \"var(--mod3-primary-note)\",\n        }, {\n            name: \"mod4\",\n            secondaryChannel: \"var(--mod4-secondary-channel)\",\n            primaryChannel: \"var(--mod4-primary-channel)\",\n            secondaryNote: \"var(--mod4-secondary-note)\",\n            primaryNote: \"var(--mod4-primary-note)\",\n        },\n    ]);\n\n    public static resetColors() {\n        this.colorLookup.clear();\n    }\n\n\tpublic static getArbitaryChannelColor(type: string, channel: number): ChannelColors {\n\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--use-color-formula\").trim() == \"false\") {\n            let base: ChannelColors;\n            switch (type) {\n                case (\"noise\"): {\n                    base = ColorConfig.getComputed(\"--noise-channel-limit\") == \"\"\n\t\t\t\t\t? ColorConfig.noiseChannels[channel % ColorConfig.noiseChannels.length] \n\t\t\t\t\t: ColorConfig.noiseChannels[channel % (Number(ColorConfig.getComputed(\"--noise-channel-limit\")) % ColorConfig.noiseChannels.length)];\n                    break;\n                }\n                case (\"mod\"): {\n                    base = ColorConfig.getComputed(\"--mod-channel-limit\") == \"\"\n\t\t\t\t\t? ColorConfig.modChannels[channel % ColorConfig.modChannels.length] \n\t\t\t\t\t: ColorConfig.modChannels[channel % (Number(ColorConfig.getComputed(\"--mod-channel-limit\")) % ColorConfig.modChannels.length)];\n                    break;\n                }\n                case (\"pitch\"):\n                default: {\n                    base = ColorConfig.getComputed(\"--pitch-channel-limit\") == \"\"\n\t\t\t\t\t? ColorConfig.pitchChannels[channel % ColorConfig.pitchChannels.length] \n\t\t\t\t\t: ColorConfig.pitchChannels[channel % (Number(ColorConfig.getComputed(\"--pitch-channel-limit\")) % ColorConfig.pitchChannels.length)];\n                    break;\n                }\n            }\n            var regex = /\\(([^)]+)\\)/;\n            let newChannelSecondary: string = ColorConfig.getComputed((regex.exec(base.secondaryChannel) as RegExpExecArray)[1] as string);\n            let newChannelPrimary: string = ColorConfig.getComputed((regex.exec(base.primaryChannel) as RegExpExecArray)[1] as string);\n            let newNoteSecondary: string = ColorConfig.getComputed((regex.exec(base.secondaryNote) as RegExpExecArray)[1] as string);\n            let newNotePrimary: string = ColorConfig.getComputed((regex.exec(base.primaryNote) as RegExpExecArray)[1] as string);\n            return <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\n        }\n        switch (type) {\n            case (\"noise\"): {\n                const noiseSecondaryChannelHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-hue\");\n                const noiseSecondaryChannelHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-hue-scale\");\n                const noiseSecondaryChannelSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-sat\");\n                const noiseSecondaryChannelSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-sat-scale\");\n                const noiseSecondaryChannelLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-lum\");\n                const noiseSecondaryChannelLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-lum-scale\");\n                const noisePrimaryChannelHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-hue\");\n                const noisePrimaryChannelHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-hue-scale\");\n                const noisePrimaryChannelSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-sat\");\n                const noisePrimaryChannelSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-sat-scale\");\n                const noisePrimaryChannelLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-lum\");\n                const noisePrimaryChannelLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-lum-scale\");\n                const noiseSecondaryNoteHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-hue\");\n                const noiseSecondaryNoteHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-hue-scale\");\n                const noiseSecondaryNoteSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-sat\");\n                const noiseSecondaryNoteSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-sat-scale\");\n                const noiseSecondaryNoteLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-lum\");\n                const noiseSecondaryNoteLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-lum-scale\");\n                const noisePrimaryNoteHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-hue\");\n                const noisePrimaryNoteHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-hue-scale\");\n                const noisePrimaryNoteSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-sat\");\n                const noisePrimaryNoteSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-sat-scale\");\n                const noisePrimaryNoteLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-lum\");\n                const noisePrimaryNoteLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-lum-scale\");\n\n                let newChannelSecondary: string = \"hsl(\" + ((+noiseSecondaryChannelHue + ((channel * +noiseSecondaryChannelHueScale) / Config.noiseChannelCountMax) * 256) % 256) + \",\"\n                    + (+noiseSecondaryChannelSat + channel * +noiseSecondaryChannelSatScale) + \"%,\"\n                    + (+noiseSecondaryChannelLum + channel * +noiseSecondaryChannelLumScale) + \"%)\";\n                let newChannelPrimary: string = \"hsl(\" + ((+noisePrimaryChannelHue + ((channel * +noisePrimaryChannelHueScale) / Config.noiseChannelCountMax) * 256) % 256) + \",\"\n                    + (+noisePrimaryChannelSat + channel * +noisePrimaryChannelSatScale) + \"%,\"\n                    + (+noisePrimaryChannelLum + channel * +noisePrimaryChannelLumScale) + \"%)\";\n                let newNoteSecondary: string = \"hsl(\" + ((+noiseSecondaryNoteHue + ((channel * +noiseSecondaryNoteHueScale) / Config.noiseChannelCountMax) * 256) % 256) + \",\"\n                    + (+noiseSecondaryNoteSat + channel * +noiseSecondaryNoteSatScale) + \"%,\"\n                    + (+noiseSecondaryNoteLum + channel * +noiseSecondaryNoteLumScale) + \"%)\";\n                let newNotePrimary: string = \"hsl(\" + ((+noisePrimaryNoteHue + ((channel * +noisePrimaryNoteHueScale) / Config.noiseChannelCountMax) * 256) % 256) + \",\"\n                    + (+noisePrimaryNoteSat + channel * +noisePrimaryNoteSatScale) + \"%,\"\n                    + (+noisePrimaryNoteLum + channel * +noisePrimaryNoteLumScale) + \"%)\";\n\n                let newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\n                ColorConfig.colorLookup.set(channel, newChannelColors);\n                return newChannelColors;\n            } case (\"mod\"): {\n                // Mod formula\n                const modSecondaryChannelHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-hue\");\n                const modSecondaryChannelHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-hue-scale\");\n                const modSecondaryChannelSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-sat\");\n                const modSecondaryChannelSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-sat-scale\");\n                const modSecondaryChannelLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-lum\");\n                const modSecondaryChannelLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-lum-scale\");\n                const modPrimaryChannelHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-hue\");\n                const modPrimaryChannelHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-hue-scale\");\n                const modPrimaryChannelSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-sat\");\n                const modPrimaryChannelSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-sat-scale\");\n                const modPrimaryChannelLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-lum\");\n                const modPrimaryChannelLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-lum-scale\");\n                const modSecondaryNoteHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-hue\");\n                const modSecondaryNoteHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-hue-scale\");\n                const modSecondaryNoteSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-sat\");\n                const modSecondaryNoteSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-sat-scale\");\n                const modSecondaryNoteLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-lum\");\n                const modSecondaryNoteLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-lum-scale\");\n                const modPrimaryNoteHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-hue\");\n                const modPrimaryNoteHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-hue-scale\");\n                const modPrimaryNoteSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-sat\");\n                const modPrimaryNoteSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-sat-scale\");\n                const modPrimaryNoteLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-lum\");\n                const modPrimaryNoteLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-lum-scale\");\n\n                let newChannelSecondary: string = \"hsl(\" + ((+modSecondaryChannelHue + ((channel * +modSecondaryChannelHueScale) / Config.modChannelCountMax) * 256) % 256) + \",\"\n                    + (+modSecondaryChannelSat + channel * +modSecondaryChannelSatScale) + \"%,\"\n                    + (+modSecondaryChannelLum + channel * +modSecondaryChannelLumScale) + \"%)\";\n                let newChannelPrimary: string = \"hsl(\" + ((+modPrimaryChannelHue + ((channel * +modPrimaryChannelHueScale) / Config.modChannelCountMax) * 256) % 256) + \",\"\n                    + (+modPrimaryChannelSat + channel * +modPrimaryChannelSatScale) + \"%,\"\n                    + (+modPrimaryChannelLum + channel * +modPrimaryChannelLumScale) + \"%)\";\n                let newNoteSecondary: string = \"hsl(\" + ((+modSecondaryNoteHue + ((channel * +modSecondaryNoteHueScale) / Config.modChannelCountMax) * 256) % 256) + \",\"\n                    + (+modSecondaryNoteSat + channel * +modSecondaryNoteSatScale) + \"%,\"\n                    + (+modSecondaryNoteLum + channel * +modSecondaryNoteLumScale) + \"%)\";\n                let newNotePrimary: string = \"hsl(\" + ((+modPrimaryNoteHue + ((channel * +modPrimaryNoteHueScale) / Config.modChannelCountMax) * 256) % 256) + \",\"\n                    + (+modPrimaryNoteSat + channel * +modPrimaryNoteSatScale) + \"%,\"\n                    + (+modPrimaryNoteLum + channel * +modPrimaryNoteLumScale) + \"%)\";\n\n                let newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\n                ColorConfig.colorLookup.set(channel, newChannelColors);\n                return newChannelColors;\n            }\n            case (\"pitch\"):\n            default: {\n                const pitchSecondaryChannelHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-hue\");\n                const pitchSecondaryChannelHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-hue-scale\");\n                const pitchSecondaryChannelSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-sat\");\n                const pitchSecondaryChannelSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-sat-scale\");\n                const pitchSecondaryChannelLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-lum\");\n                const pitchSecondaryChannelLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-lum-scale\");\n                const pitchPrimaryChannelHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-hue\");\n                const pitchPrimaryChannelHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-hue-scale\");\n                const pitchPrimaryChannelSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-sat\");\n                const pitchPrimaryChannelSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-sat-scale\");\n                const pitchPrimaryChannelLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-lum\");\n                const pitchPrimaryChannelLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-lum-scale\");\n                const pitchSecondaryNoteHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-hue\");\n                const pitchSecondaryNoteHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-hue-scale\");\n                const pitchSecondaryNoteSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-sat\");\n                const pitchSecondaryNoteSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-sat-scale\");\n                const pitchSecondaryNoteLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-lum\");\n                const pitchSecondaryNoteLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-lum-scale\");\n                const pitchPrimaryNoteHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-hue\");\n                const pitchPrimaryNoteHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-hue-scale\");\n                const pitchPrimaryNoteSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-sat\");\n                const pitchPrimaryNoteSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-sat-scale\");\n                const pitchPrimaryNoteLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-lum\");\n                const pitchPrimaryNoteLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-lum-scale\");\n\n                let newChannelSecondary: string = \"hsl(\" + ((+pitchSecondaryChannelHue + (channel * +pitchSecondaryChannelHueScale / Config.pitchChannelCountMax) * 256) % 256) + \",\"\n                    + (+pitchSecondaryChannelSat * (1 - (+pitchSecondaryChannelSatScale * Math.floor(channel / 7)))) + \"%,\"\n                    + (+pitchSecondaryChannelLum * (1 - (+pitchSecondaryChannelLumScale * Math.floor(channel / 7)))) + \"%)\";\n                let newChannelPrimary: string = \"hsl(\" + ((+pitchPrimaryChannelHue + (channel * +pitchPrimaryChannelHueScale / Config.pitchChannelCountMax) * 256) % 256) + \",\"\n                    + (+pitchPrimaryChannelSat * (1 - (+pitchPrimaryChannelSatScale * Math.floor(channel / 7)))) + \"%,\"\n                    + (+pitchPrimaryChannelLum * (1 - (+pitchPrimaryChannelLumScale * Math.floor(channel / 7)))) + \"%)\";\n                let newNoteSecondary: string = \"hsl(\" + ((+pitchSecondaryNoteHue + (channel * +pitchSecondaryNoteHueScale / Config.pitchChannelCountMax) * 256) % 256) + \",\"\n                    + (+pitchSecondaryNoteSat * (1 - (+pitchSecondaryNoteSatScale * Math.floor(channel / 7)))) + \"%,\"\n                    + (+pitchSecondaryNoteLum * (1 - (+pitchSecondaryNoteLumScale * Math.floor(channel / 7)))) + \"%)\";\n                let newNotePrimary: string = \"hsl(\" + ((+pitchPrimaryNoteHue + (channel * +pitchPrimaryNoteHueScale / Config.pitchChannelCountMax) * 256) % 256) + \",\"\n                    + (+pitchPrimaryNoteSat * (1 - (+pitchPrimaryNoteSatScale * Math.floor(channel / 7)))) + \"%,\"\n                    + (+pitchPrimaryNoteLum * (1 - (+pitchPrimaryNoteLumScale * Math.floor(channel / 7)))) + \"%)\";\n\n                let newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\n                ColorConfig.colorLookup.set(channel, newChannelColors);\n                return newChannelColors;\n            }\n        }\n    }\n\n    // Same as below, but won't return var colors\n    public static getComputedChannelColor(song: Song, channel: number): ChannelColors {\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--use-color-formula\").trim() == \"false\") {\n            let base: ChannelColors = ColorConfig.getChannelColor(song, channel);\n            // Trim away \"var(...)\"\n            var regex = /\\(([^)]+)\\)/;\n            let newChannelSecondary: string = ColorConfig.getComputed((regex.exec(base.secondaryChannel) as RegExpExecArray)[1] as string);\n            let newChannelPrimary: string = ColorConfig.getComputed((regex.exec(base.primaryChannel) as RegExpExecArray)[1] as string);\n            let newNoteSecondary: string = ColorConfig.getComputed((regex.exec(base.secondaryNote) as RegExpExecArray)[1] as string);\n            let newNotePrimary: string = ColorConfig.getComputed((regex.exec(base.primaryNote) as RegExpExecArray)[1] as string);\n            return <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\n        }\n        else {\n            return ColorConfig.getChannelColor(song, channel);\n        }\n    };\n\n    public static getChannelColor(song: Song, channel: number): ChannelColors {\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--use-color-formula\").trim() == \"false\") {\n            // Set colors, not defined by formula\n            if (channel < song.pitchChannelCount) {\n\t\t\t\treturn ColorConfig.getComputed(\"--pitch-channel-limit\") == \"\"\n\t\t\t\t? ColorConfig.pitchChannels[channel % ColorConfig.pitchChannels.length] \n\t\t\t\t: ColorConfig.pitchChannels[channel % (Number(ColorConfig.getComputed(\"--pitch-channel-limit\")) % ColorConfig.pitchChannels.length)];\n            } else if (channel < song.pitchChannelCount + song.noiseChannelCount) {\n                return ColorConfig.getComputed(\"--noise-channel-limit\") == \"\"\n\t\t\t\t? ColorConfig.noiseChannels[(channel - song.pitchChannelCount) % ColorConfig.noiseChannels.length] \n\t\t\t\t: ColorConfig.noiseChannels[(channel - song.pitchChannelCount) % (Number(ColorConfig.getComputed(\"--noise-channel-limit\")) % ColorConfig.noiseChannels.length)];\n            } else {\n                return ColorConfig.getComputed(\"--mod-channel-limit\") == \"\"\n\t\t\t\t? ColorConfig.modChannels[(channel - song.pitchChannelCount - song.noiseChannelCount) % ColorConfig.modChannels.length] \n\t\t\t\t: ColorConfig.modChannels[(channel - song.pitchChannelCount - song.noiseChannelCount) % (Number(ColorConfig.getComputed(\"--mod-channel-limit\")) % ColorConfig.modChannels.length)];\n            }\n        }\n        else {\n            // Determine if color is cached\n            if (ColorConfig.colorLookup.has(channel)) {\n                return ColorConfig.colorLookup.get(channel) as ChannelColors;\n            }\n            else {\n                // Formulaic color definition\n                if (channel < song.pitchChannelCount) {\n                    // Pitch formula\n                    const pitchSecondaryChannelHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-hue\");\n                    const pitchSecondaryChannelHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-hue-scale\");\n                    const pitchSecondaryChannelSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-sat\");\n                    const pitchSecondaryChannelSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-sat-scale\");\n                    const pitchSecondaryChannelLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-lum\");\n                    const pitchSecondaryChannelLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-lum-scale\");\n                    const pitchPrimaryChannelHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-hue\");\n                    const pitchPrimaryChannelHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-hue-scale\");\n                    const pitchPrimaryChannelSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-sat\");\n                    const pitchPrimaryChannelSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-sat-scale\");\n                    const pitchPrimaryChannelLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-lum\");\n                    const pitchPrimaryChannelLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-lum-scale\");\n                    const pitchSecondaryNoteHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-hue\");\n                    const pitchSecondaryNoteHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-hue-scale\");\n                    const pitchSecondaryNoteSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-sat\");\n                    const pitchSecondaryNoteSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-sat-scale\");\n                    const pitchSecondaryNoteLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-lum\");\n                    const pitchSecondaryNoteLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-lum-scale\");\n                    const pitchPrimaryNoteHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-hue\");\n                    const pitchPrimaryNoteHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-hue-scale\");\n                    const pitchPrimaryNoteSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-sat\");\n                    const pitchPrimaryNoteSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-sat-scale\");\n                    const pitchPrimaryNoteLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-lum\");\n                    const pitchPrimaryNoteLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-lum-scale\");\n\n                    let newChannelSecondary: string = \"hsl(\" + ((+pitchSecondaryChannelHue + (channel * +pitchSecondaryChannelHueScale / Config.pitchChannelCountMax) * 256) % 256) + \",\"\n                        + (+pitchSecondaryChannelSat * (1 - (+pitchSecondaryChannelSatScale * Math.floor(channel / 7)))) + \"%,\"\n                        + (+pitchSecondaryChannelLum * (1 - (+pitchSecondaryChannelLumScale * Math.floor(channel / 7)))) + \"%)\";\n                    let newChannelPrimary: string = \"hsl(\" + ((+pitchPrimaryChannelHue + (channel * +pitchPrimaryChannelHueScale / Config.pitchChannelCountMax) * 256) % 256) + \",\"\n                        + (+pitchPrimaryChannelSat * (1 - (+pitchPrimaryChannelSatScale * Math.floor(channel / 7)))) + \"%,\"\n                        + (+pitchPrimaryChannelLum * (1 - (+pitchPrimaryChannelLumScale * Math.floor(channel / 7)))) + \"%)\";\n                    let newNoteSecondary: string = \"hsl(\" + ((+pitchSecondaryNoteHue + (channel * +pitchSecondaryNoteHueScale / Config.pitchChannelCountMax) * 256) % 256) + \",\"\n                        + (+pitchSecondaryNoteSat * (1 - (+pitchSecondaryNoteSatScale * Math.floor(channel / 7)))) + \"%,\"\n                        + (+pitchSecondaryNoteLum * (1 - (+pitchSecondaryNoteLumScale * Math.floor(channel / 7)))) + \"%)\";\n                    let newNotePrimary: string = \"hsl(\" + ((+pitchPrimaryNoteHue + (channel * +pitchPrimaryNoteHueScale / Config.pitchChannelCountMax) * 256) % 256) + \",\"\n                        + (+pitchPrimaryNoteSat * (1 - (+pitchPrimaryNoteSatScale * Math.floor(channel / 7)))) + \"%,\"\n                        + (+pitchPrimaryNoteLum * (1 - (+pitchPrimaryNoteLumScale * Math.floor(channel / 7)))) + \"%)\";\n\n                    let newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\n                    ColorConfig.colorLookup.set(channel, newChannelColors);\n                    return newChannelColors;\n\n                }\n                else if (channel < song.pitchChannelCount + song.noiseChannelCount) {\n                    // Noise formula\n                    const noiseSecondaryChannelHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-hue\");\n                    const noiseSecondaryChannelHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-hue-scale\");\n                    const noiseSecondaryChannelSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-sat\");\n                    const noiseSecondaryChannelSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-sat-scale\");\n                    const noiseSecondaryChannelLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-lum\");\n                    const noiseSecondaryChannelLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-lum-scale\");\n                    const noisePrimaryChannelHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-hue\");\n                    const noisePrimaryChannelHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-hue-scale\");\n                    const noisePrimaryChannelSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-sat\");\n                    const noisePrimaryChannelSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-sat-scale\");\n                    const noisePrimaryChannelLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-lum\");\n                    const noisePrimaryChannelLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-lum-scale\");\n                    const noiseSecondaryNoteHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-hue\");\n                    const noiseSecondaryNoteHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-hue-scale\");\n                    const noiseSecondaryNoteSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-sat\");\n                    const noiseSecondaryNoteSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-sat-scale\");\n                    const noiseSecondaryNoteLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-lum\");\n                    const noiseSecondaryNoteLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-lum-scale\");\n                    const noisePrimaryNoteHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-hue\");\n                    const noisePrimaryNoteHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-hue-scale\");\n                    const noisePrimaryNoteSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-sat\");\n                    const noisePrimaryNoteSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-sat-scale\");\n                    const noisePrimaryNoteLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-lum\");\n                    const noisePrimaryNoteLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-lum-scale\");\n\n                    let newChannelSecondary: string = \"hsl(\" + ((+noiseSecondaryChannelHue + (((channel - song.pitchChannelCount) * +noiseSecondaryChannelHueScale) / Config.noiseChannelCountMax) * 256) % 256) + \",\"\n                        + (+noiseSecondaryChannelSat + channel * +noiseSecondaryChannelSatScale) + \"%,\"\n                        + (+noiseSecondaryChannelLum + channel * +noiseSecondaryChannelLumScale) + \"%)\";\n                    let newChannelPrimary: string = \"hsl(\" + ((+noisePrimaryChannelHue + (((channel - song.pitchChannelCount) * +noisePrimaryChannelHueScale) / Config.noiseChannelCountMax) * 256) % 256) + \",\"\n                        + (+noisePrimaryChannelSat + channel * +noisePrimaryChannelSatScale) + \"%,\"\n                        + (+noisePrimaryChannelLum + channel * +noisePrimaryChannelLumScale) + \"%)\";\n                    let newNoteSecondary: string = \"hsl(\" + ((+noiseSecondaryNoteHue + (((channel - song.pitchChannelCount) * +noiseSecondaryNoteHueScale) / Config.noiseChannelCountMax) * 256) % 256) + \",\"\n                        + (+noiseSecondaryNoteSat + channel * +noiseSecondaryNoteSatScale) + \"%,\"\n                        + (+noiseSecondaryNoteLum + channel * +noiseSecondaryNoteLumScale) + \"%)\";\n                    let newNotePrimary: string = \"hsl(\" + ((+noisePrimaryNoteHue + (((channel - song.pitchChannelCount) * +noisePrimaryNoteHueScale) / Config.noiseChannelCountMax) * 256) % 256) + \",\"\n                        + (+noisePrimaryNoteSat + channel * +noisePrimaryNoteSatScale) + \"%,\"\n                        + (+noisePrimaryNoteLum + channel * +noisePrimaryNoteLumScale) + \"%)\";\n\n                    let newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\n                    ColorConfig.colorLookup.set(channel, newChannelColors);\n                    return newChannelColors;\n                }\n                else {\n                    // Mod formula\n                    const modSecondaryChannelHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-hue\");\n                    const modSecondaryChannelHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-hue-scale\");\n                    const modSecondaryChannelSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-sat\");\n                    const modSecondaryChannelSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-sat-scale\");\n                    const modSecondaryChannelLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-lum\");\n                    const modSecondaryChannelLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-lum-scale\");\n                    const modPrimaryChannelHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-hue\");\n                    const modPrimaryChannelHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-hue-scale\");\n                    const modPrimaryChannelSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-sat\");\n                    const modPrimaryChannelSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-sat-scale\");\n                    const modPrimaryChannelLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-lum\");\n                    const modPrimaryChannelLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-lum-scale\");\n                    const modSecondaryNoteHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-hue\");\n                    const modSecondaryNoteHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-hue-scale\");\n                    const modSecondaryNoteSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-sat\");\n                    const modSecondaryNoteSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-sat-scale\");\n                    const modSecondaryNoteLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-lum\");\n                    const modSecondaryNoteLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-lum-scale\");\n                    const modPrimaryNoteHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-hue\");\n                    const modPrimaryNoteHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-hue-scale\");\n                    const modPrimaryNoteSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-sat\");\n                    const modPrimaryNoteSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-sat-scale\");\n                    const modPrimaryNoteLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-lum\");\n                    const modPrimaryNoteLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-lum-scale\");\n\n                    let newChannelSecondary: string = \"hsl(\" + ((+modSecondaryChannelHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * +modSecondaryChannelHueScale) / Config.modChannelCountMax) * 256) % 256) + \",\"\n                        + (+modSecondaryChannelSat + channel * +modSecondaryChannelSatScale) + \"%,\"\n                        + (+modSecondaryChannelLum + channel * +modSecondaryChannelLumScale) + \"%)\";\n                    let newChannelPrimary: string = \"hsl(\" + ((+modPrimaryChannelHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * +modPrimaryChannelHueScale) / Config.modChannelCountMax) * 256) % 256) + \",\"\n                        + (+modPrimaryChannelSat + channel * +modPrimaryChannelSatScale) + \"%,\"\n                        + (+modPrimaryChannelLum + channel * +modPrimaryChannelLumScale) + \"%)\";\n                    let newNoteSecondary: string = \"hsl(\" + ((+modSecondaryNoteHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * +modSecondaryNoteHueScale) / Config.modChannelCountMax) * 256) % 256) + \",\"\n                        + (+modSecondaryNoteSat + channel * +modSecondaryNoteSatScale) + \"%,\"\n                        + (+modSecondaryNoteLum + channel * +modSecondaryNoteLumScale) + \"%)\";\n                    let newNotePrimary: string = \"hsl(\" + ((+modPrimaryNoteHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * +modPrimaryNoteHueScale) / Config.modChannelCountMax) * 256) % 256) + \",\"\n                        + (+modPrimaryNoteSat + channel * +modPrimaryNoteSatScale) + \"%,\"\n                        + (+modPrimaryNoteLum + channel * +modPrimaryNoteLumScale) + \"%)\";\n\n                    let newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\n                    ColorConfig.colorLookup.set(channel, newChannelColors);\n                    return newChannelColors;\n                }\n            }\n        }\n    }\n\n    private static readonly _styleElement: HTMLStyleElement = document.head.appendChild(HTML.style({ type: \"text/css\" }));\n\n    public static setTheme(name: string): void {\n\t\tlet theme: string = this.themes[name];\n\t\tif (theme == undefined) theme = this.themes[\"dark classic\"];\n\t\tthis._styleElement.textContent = theme;\n\n        const themeColor = <HTMLMetaElement>document.querySelector(\"meta[name='theme-color']\");\n        if (themeColor != null) {\n            themeColor.setAttribute(\"content\", getComputedStyle(document.documentElement).getPropertyValue('--ui-widget-background'));\n        }\n\n        this.resetColors();\n    }\n\n    public static getComputed(name: string): string {\n        return getComputedStyle(this._styleElement).getPropertyValue(name);\n    }\n}\n\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { DictionaryArray, BeepBoxOption, InstrumentType, toNameMap, TypePresets } from \"../synth/SynthConfig\";\n\nexport interface PresetCategory extends BeepBoxOption {\n    readonly presets: DictionaryArray<Preset>;\n}\n\nexport interface Preset extends BeepBoxOption {\n    readonly isNoise?: boolean;\n    readonly isMod?: boolean;\n    readonly generalMidi?: boolean;\n    readonly midiProgram?: number;\n    readonly midiSubharmonicOctaves?: number;\n    readonly customType?: InstrumentType;\n    readonly settings?: any;\n}\n\nexport const isMobile: boolean = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);\n\nexport function prettyNumber(value: number): string {\n    return value.toFixed(2).replace(/\\.?0*$/, \"\");\n}\n\nexport class EditorConfig {\n    public static readonly version: string = \"0.9.0\"; // Using patch versions in display right now, maybe TODAY.\n    public static readonly versionDisplayName: string = \"AbyssBox \" + EditorConfig.version;\n\n    public static readonly releaseNotesURL: string = \"./patch_notes.html\";\n\n    public static readonly isOnMac: boolean = /^Mac/i.test(navigator.platform) || /Mac OS X/i.test(navigator.userAgent) || /^(iPhone|iPad|iPod)/i.test(navigator.platform) || /(iPhone|iPad|iPod)/i.test(navigator.userAgent);\n    public static readonly ctrlSymbol: string = EditorConfig.isOnMac ? \"⌘\" : \"Ctrl+\";\n    public static readonly ctrlName: string = EditorConfig.isOnMac ? \"command\" : \"control\";\n\n    public static customSamples: string[] | null;\n\t//is this how you do it????\n\t\n    public static readonly presetCategories: DictionaryArray<PresetCategory> = toNameMap([\n        {\n            name: \"Custom Instruments\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: TypePresets[InstrumentType.chip], customType: InstrumentType.chip },\n                { name: TypePresets[InstrumentType.fm], customType: InstrumentType.fm },\n                { name: TypePresets[InstrumentType.noise], customType: InstrumentType.noise },\n                { name: TypePresets[InstrumentType.spectrum], customType: InstrumentType.spectrum },\n                { name: TypePresets[InstrumentType.drumset], customType: InstrumentType.drumset },\n                { name: TypePresets[InstrumentType.harmonics], customType: InstrumentType.harmonics },\n                { name: TypePresets[InstrumentType.pwm], customType: InstrumentType.pwm },\n                { name: TypePresets[InstrumentType.pickedString], customType: InstrumentType.pickedString },\n                { name: TypePresets[InstrumentType.customChipWave], customType: InstrumentType.customChipWave },\n                { name: TypePresets[InstrumentType.fm6op], customType: InstrumentType.fm6op },\n                { name: TypePresets[InstrumentType.supersaw], customType: InstrumentType.supersaw },\n            ])\n        },\n        {\n            name: \"Retro Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"square wave\", midiProgram: 80, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"square\", \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"triangle wave\", midiProgram: 71, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"triangle\", \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"square lead\", midiProgram: 80, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"square\", \"unison\": \"hum\", \"envelopes\": [] } },\n                { name: \"sawtooth lead 1\", midiProgram: 81, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"shimmer\", \"envelopes\": [] } },\n                { name: \"sawtooth lead 2\", midiProgram: 81, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }], \"effects\": [\"vibrato\", \"aliasing\"], \"vibrato\": \"light\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"hum\", \"envelopes\": [] } },\n                { name: \"chip noise\", midiProgram: 116, isNoise: true, settings: { \"type\": \"noise\", \"transition\": \"hard\", \"effects\": [\"aliasing\"], \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"retro\" } },\n                { name: \"FM twang\", midiProgram: 32, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }] } },\n                { name: \"FM bass\", midiProgram: 36, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"20×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 3 }] } },\n                { name: \"FM flute\", midiProgram: 73, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }] } },\n                { name: \"FM organ\", midiProgram: 16, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\"], \"vibrato\": \"delayed\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"2×\", \"amplitude\": 14 }, { \"frequency\": \"1×\", \"amplitude\": 11 }, { \"frequency\": \"2×\", \"amplitude\": 11 }], \"envelopes\": [] } },\n                { name: \"NES Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"vibrato\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -24, -23, -23, -23, -23, -22, -22, -22, -22, -21, -21, -21, -21, -20, -20, -20, -20, -19, -19, -19, -19, -18, -18, -18, -18, -17, -17, -17, -17, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17] } },\n                { name: \"Gameboy Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -20, -17, -15, -13, -13, -11, -11, -11, -9, -9, -9, -9, -7, -7, -7, -7, -7, -5, -5, -5, -5, -5, -5, -3, -3, -3, -3, -3, -3, -3, -3, 24, 20, 17, 15, 13, 13, 11, 11, 11, 9, 9, 9, 9, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3] } },\n                { name: \"VRC6 Sawtooth\", midiProgram: 81, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -20, -16, -13, -10, -8, -6, -5, -4, -4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24] } },\n                { name: \"Atari Square\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -23, -23, -23, -22, -22, -22, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -14, -14, -14, -13, -13, -13, 24, 24, 24, 23, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 15, 15] } },\n                { name: \"Atari Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, 24, 24, 24, 24, 24, -24, -24, -24, -24, 24, 24, -24, -24, 24, 24] } },\n                { name: \"Sunsoft Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [24, 24, 15, 15, 9, 9, -4, -4, 0, 0, -13, -13, -19, -19, -24, -24, -24, -24, -10, -10, 0, 0, -7, -7, -7, -7, 0, 0, 6, 6, -4, -4, 3, 3, -4, -4, 3, 3, 3, 3, 9, 9, 15, 15, 15, 15, 6, 6, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, 3, 3, 12, 12, 24, 24] } },\n                { name: \"FM sine\", midiProgram: 55, settings: { \"type\": \"FM\", \"transition\": \"seemless\", \"effects\": \"none\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n\n            ])\n        },\n        {\n            name: \"Keyboard Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"grand piano 1\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.125 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 86, 86, 71, 71, 71, 0, 86, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\n                { name: \"bright piano\", midiProgram: 1, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 1.4142 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 86, 71, 71, 0, 71, 71, 71, 71, 71, 71, 14, 57, 57, 57, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"piano\", \"stringSustain\": 86, \"envelopes\": [] } },\n                { name: \"electric grand\", midiProgram: 2, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"1/8 pulse\", \"unison\": \"shimmer\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n                { name: \"honky-tonk piano\", midiProgram: 3, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 71, 86, 71, 43, 71, 43, 43, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 43, 57, 57, 57, 43, 43, 43, 43], \"unison\": \"honky tonk\", \"stringSustain\": 71, \"envelopes\": [] } },\n                { name: \"electric piano 1\", midiProgram: 4, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"harmonics\": [86, 100, 100, 71, 71, 57, 57, 43, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n                { name: \"electric piano 2\", midiProgram: 5, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"16×\", \"amplitude\": 6 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 3 }] } },\n                { name: \"harpsichord\", midiProgram: 6, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 2.8284 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 100, 86, 57, 86, 86, 86, 86, 57, 57, 71, 71, 86, 86, 71, 71, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71], \"unison\": \"none\", \"stringSustain\": 79, \"envelopes\": [] } },\n                { name: \"clavinet\", midiProgram: 7, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.3536 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }, { \"frequency\": \"8×\", \"amplitude\": 4 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 2\" }] } },\n                { name: \"dulcimer\", midiProgram: 15, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 100, 100, 86, 100, 86, 57, 100, 100, 86, 100, 86, 100, 86, 100, 71, 57, 71, 71, 100, 86, 71, 86, 86, 100, 86, 86, 86], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [] } },\n                { name: \"grand piano 2\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.125 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 86, 86, 86, 86, 71, 71, 57, 0, 57, 29, 43, 57, 57, 57, 43, 43, 0, 29, 43, 43, 43, 43, 43, 43, 29, 0, 29], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\n\n            ])\n        },\n        {\n            name: \"Idiophone Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"celesta\", midiProgram: 8, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"3×\", \"amplitude\": 1, \"envelope\": \"twang 2\" }] } },\n                { name: \"glockenspiel\", midiProgram: 9, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 2, \"envelope\": \"twang 1\" }] } },\n                { name: \"music box 1\", midiProgram: 10, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 71, 0], \"unison\": \"none\", \"stringSustain\": 64, \"envelopes\": [] } },\n                { name: \"music box 2\", midiProgram: 10, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.7071 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 57, 57, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"stringSustain\": 29, \"envelopes\": [] } },\n                { name: \"vibraphone\", midiProgram: 11, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\n                { name: \"marimba\", midiProgram: 12, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"kalimba\", midiProgram: 108, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 3, \"envelope\": \"twang 2\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"xylophone\", midiProgram: 13, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }] } },\n                { name: \"tubular bell\", midiProgram: 14, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"chord\": \"strum\", \"harmonics\": [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14], \"unison\": \"shimmer\", \"stringSustain\": 86, \"envelopes\": [] } },\n                { name: \"bell synth\", midiProgram: 14, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 6, \"envelope\": \"twang 3\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"rain drop\", midiProgram: 96, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"tremolo1\" }] } },\n                { name: \"crystal\", midiProgram: 98, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }] } },\n                { name: \"tinkle bell\", midiProgram: 112, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 7, \"envelope\": \"custom\" }] } },\n                { name: \"agogo\", midiProgram: 113, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 11, \"envelope\": \"custom\" }] } },\n            ])\n        },\n        {\n            name: \"Guitar Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"nylon guitar\", midiProgram: 24, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\n                { name: \"steel guitar\", midiProgram: 25, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 100, 86, 71, 71, 71, 86, 86, 71, 57, 43, 43, 43, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [] } },\n                { name: \"jazz guitar\", midiProgram: 26, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 57, 71, 71, 43, 57, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\n                { name: \"clean guitar\", midiProgram: 27, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 100, 86, 57, 86, 100, 100, 100, 71, 57, 43, 71, 86, 71, 57, 57, 71, 71, 71, 71, 57, 57, 57, 57, 57, 43] } },\n                { name: \"muted guitar\", midiProgram: 28, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }] } },\n            ])\n        },\n        {\n            name: \"Picked Bass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"acoustic bass\", midiProgram: 32, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14] } },\n                { name: \"fingered bass\", midiProgram: 33, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 57, 71, 43, 57, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0] } },\n                { name: \"picked bass\", midiProgram: 34, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 1, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }] } },\n                { name: \"fretless bass\", midiProgram: 35, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 57, 57, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 14] } },\n                { name: \"slap bass 1\", midiProgram: 36, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 100, 86, 71, 57, 29, 29, 43, 43, 57, 71, 57, 29, 29, 43, 57, 57, 57, 43, 43, 43, 57, 71, 71, 71, 71] } },\n                { name: \"slap bass 2\", midiProgram: 37, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"13×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n                { name: \"bass synth 1\", midiProgram: 38, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"twang 2\" }] } },\n                { name: \"bass synth 2\", midiProgram: 39, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 57, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"bass & lead\", midiProgram: 87, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 2\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\n                { name: \"dubstep yoi yoi\", midiProgram: 87, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.7071 }], \"effects\": [\"note filter\", \"bitcrusher\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 594.6, \"linearGain\": 11.3137 }], \"bitcrusherOctave\": 1.5, \"bitcrusherQuantization\": 0, \"transition\": \"slide\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"wave\": \"sawtooth\", \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"flare 2\", \"index\": 0 }] } },\n            ])\n        },\n        {\n            name: \"Picked String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"pizzicato strings\", midiProgram: 45, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"steady\" }] } },\n                { name: \"harp\", midiProgram: 46, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\n                { name: \"sitar\", midiProgram: 104, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 57, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 3\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"16×\", \"amplitude\": 9, \"envelope\": \"swell 3\" }] } },\n                { name: \"banjo\", midiProgram: 105, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n                { name: \"ukulele\", midiProgram: 105, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"9×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n                { name: \"shamisen\", midiProgram: 106, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\n                { name: \"koto\", midiProgram: 107, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }] } },\n            ])\n        },\n        {\n            name: \"Distortion Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"overdrive guitar\", midiProgram: 29, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.5 }], \"effects\": [\"note filter\", \"distortion\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.7071 }], \"distortion\": 71, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"chord\": \"strum\", \"harmonics\": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 1 }] } },\n                { name: \"distortion guitar\", midiProgram: 30, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.25 }], \"effects\": [\"note filter\", \"distortion\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 1 }], \"distortion\": 86, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"chord\": \"strum\", \"harmonics\": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 1 }] } },\n                { name: \"charango synth\", midiProgram: 84, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 1 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13 }, { \"frequency\": \"~1×\", \"amplitude\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 6 }, { \"frequency\": \"3×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"guitar harmonics\", midiProgram: 31, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12 }, { \"frequency\": \"16×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 2 }, { \"frequency\": \"~1×\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 3 }] } },\n                { name: \"PWM overdrive\", midiProgram: 29, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1.4142 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"pulseWidth\": 17.67767, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"punch\" }] } },\n                { name: \"PWM distortion\", midiProgram: 30, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 2 }], \"effects\": [\"vibrato\"], \"vibrato\": \"delayed\", \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"pulseWidth\": 50, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"swell 1\" }] } },\n                { name: \"FM overdrive\", midiProgram: 29, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"~2×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"punch\" }] } },\n                { name: \"FM distortion\", midiProgram: 30, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 11 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"~2×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 3 }] } },\n            ])\n        },\n        {\n            name: \"Bellows Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"drawbar organ 1\", midiProgram: 16, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 0, 86, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n                { name: \"drawbar organ 2\", midiProgram: 16, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 29, 71, 86, 71, 14, 0, 100, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 0, 29, 0, 0, 0, 0] } },\n                { name: \"percussive organ\", midiProgram: 17, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"light\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→3 2→4\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\n                { name: \"rock organ\", midiProgram: 18, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\n                { name: \"pipe organ\", midiProgram: 19, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\n                { name: \"reed organ\", midiProgram: 20, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 100, 86, 71, 100, 57, 71, 71, 71, 43, 43, 43, 71, 43, 71, 57, 57, 57, 57, 57, 57, 57, 29, 43, 29, 29, 14] } },\n                { name: \"accordion\", midiProgram: 21, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"swell 1\", \"wave\": \"double saw\", \"interval\": \"honky tonk\", \"vibrato\": \"none\" } },\n                { name: \"bandoneon\", midiProgram: 23, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 86, 57, 71, 86, 57, 71, 71, 71, 57, 43, 57, 43, 71, 43, 71, 57, 57, 43, 43, 43, 57, 43, 43, 29, 29, 29] } },\n                { name: \"bagpipe\", midiProgram: 109, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"punch\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 86, 100, 100, 86, 57, 100, 86, 71, 71, 71, 57, 57, 57, 71, 57, 71, 57, 71, 43, 57, 57, 43, 43, 43, 43, 43] } },\n            ])\n        },\n        {\n            name: \"String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"violin 1\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"delayed\", \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9 }, { \"frequency\": \"3×\", \"amplitude\": 9 }, { \"frequency\": \"2×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"viola\", midiProgram: 41, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\n                { name: \"cello\", midiProgram: 42, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 5.6569 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.0884 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 12, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 10 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"6×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }] } },\n                { name: \"contrabass\", midiProgram: 43, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\n                { name: \"fiddle\", midiProgram: 110, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\n                { name: \"tremolo strings\", midiProgram: 44, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"tremolo4\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\n                { name: \"strings\", midiProgram: 48, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\n                { name: \"slow strings\", midiProgram: 49, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 0, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }] } },\n                { name: \"strings synth 1\", midiProgram: 50, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"soft fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\n                { name: \"strings synth 2\", midiProgram: 51, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\n                { name: \"orchestra hit 1\", midiProgram: 55, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"custom\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"twang 3\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"flare 3\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"flare 2\" }, { \"frequency\": \"8×\", \"amplitude\": 15, \"envelope\": \"flare 1\" }] } },\n                { name: \"violin 2\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"swell 1\" }] } },\n                { name: \"orchestra hit 2\", midiProgram: 55, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }] } },\n            ])\n        },\n        {\n            name: \"Vocal Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"choir soprano\", midiProgram: 94, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 24, \"harmonics\": [100, 100, 86, 57, 29, 29, 57, 71, 57, 29, 14, 14, 14, 29, 43, 57, 43, 29, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"choir tenor\", midiProgram: 52, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"choir bass\", midiProgram: 52, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"solo soprano\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"solo tenor\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"harmonics\": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"solo bass\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 8 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1.4142 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 12, \"chord\": \"simultaneous\", \"harmonics\": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"voice ooh\", midiProgram: 53, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [100, 57, 43, 43, 14, 14, 0, 0, 0, 14, 29, 29, 14, 0, 14, 29, 29, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n                { name: \"voice synth\", midiProgram: 54, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"medium fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"wave\": \"rounded\", \"interval\": \"union\", \"vibrato\": \"light\" } },\n                { name: \"vox synth lead\", midiProgram: 85, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\n                { name: \"tiny robot\", midiProgram: 85, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"delayed\", \"reverb\": 33, \"transition\": \"slide\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"~1×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"yowie\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"tremolo5\", \"vibrato\": \"none\", \"algorithm\": \"1←2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"tremolo3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"mouse\", midiProgram: 85, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"reverb\": 33, \"transition\": \"slide in pattern\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 13 }, { \"frequency\": \"5×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 2\" }] } },\n                { name: \"gumdrop\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"7×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"twang 1\" }] } },\n                { name: \"echo drop\", midiProgram: 102, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\n                { name: \"dark choir\", midiProgram: 85, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"spectrum\": [43, 14, 14, 14, 14, 14, 14, 100, 14, 14, 14, 57, 14, 14, 100, 14, 43, 14, 43, 14, 14, 43, 14, 29, 14, 29, 14, 14, 29, 0] } },\n            ])\n        },\n        {\n            name: \"Brass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"trumpet\", midiProgram: 56, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"trombone\", midiProgram: 57, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"tuba\", midiProgram: 58, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"muted trumpet\", midiProgram: 59, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13 }, { \"frequency\": \"1×\", \"amplitude\": 5 }, { \"frequency\": \"9×\", \"amplitude\": 5 }, { \"frequency\": \"13×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 2\" }] } },\n                { name: \"french horn\", midiProgram: 60, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 2.8284 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"~1×\", \"amplitude\": 8 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 1\" }] } },\n                { name: \"brass section\", midiProgram: 61, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }] } },\n                { name: \"brass synth 1\", midiProgram: 62, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 11, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\n                { name: \"brass synth 2\", midiProgram: 63, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 7, \"envelope\": \"flare 1\" }] } },\n                { name: \"pulse brass\", midiProgram: 62, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"pulseWidth\": 50, \"pulseEnvelope\": \"flare 3\", \"vibrato\": \"none\" } },\n            ])\n        },\n        {\n            name: \"Reed Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"soprano sax\", midiProgram: 64, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\n                { name: \"alto sax\", midiProgram: 65, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\n                { name: \"tenor sax\", midiProgram: 66, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"8×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\n                { name: \"baritone sax\", midiProgram: 67, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\n                { name: \"sax synth\", midiProgram: 64, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"shehnai\", midiProgram: 111, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"oboe\", midiProgram: 68, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"steady\" }] } },\n                { name: \"english horn\", midiProgram: 69, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"punch\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\n                { name: \"bassoon\", midiProgram: 70, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"clarinet\", midiProgram: 71, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\n                { name: \"harmonica\", midiProgram: 22, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"~2×\", \"amplitude\": 2, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            ])\n        },\n        {\n            name: \"Flute Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"flute 1\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"~1×\", \"amplitude\": 1, \"envelope\": \"punch\" }] } },\n                { name: \"recorder\", midiProgram: 74, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 57, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\n                { name: \"whistle\", midiProgram: 78, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n                { name: \"ocarina\", midiProgram: 79, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 14, 57, 14, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n                { name: \"piccolo\", midiProgram: 72, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"punch\" }] } },\n                { name: \"shakuhachi\", midiProgram: 77, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }, { \"frequency\": \"20×\", \"amplitude\": 15, \"envelope\": \"steady\" }] } },\n                { name: \"pan flute\", midiProgram: 75, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 5.6569 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }], \"reverb\": 33, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 71, 0, 0, 14, 0, 57, 0, 29, 14, 29, 14, 14, 29, 14, 29, 14, 14, 29, 14], \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"punch\" }] } },\n                { name: \"blown bottle\", midiProgram: 76, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"custom\" }] } },\n                { name: \"calliope\", midiProgram: 82, generalMidi: true, settings: { \"type\": \"spectrum\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 57, 0, 43, 0, 29, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14] } },\n                { name: \"chiffer\", midiProgram: 83, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"spectrum\": [86, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 71, 0, 0, 57, 0, 57, 0, 43, 14, 14, 43, 14, 29, 14, 29, 29, 29, 29, 14] } },\n                { name: \"breath noise\", midiProgram: 121, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }], \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"spectrum\": [71, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 71, 0, 0, 29, 0, 100, 29, 14, 29, 100, 29, 100, 14, 14, 71, 0, 29, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }] } },\n                { name: \"flute 2\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\n            ])\n        },\n        {\n            name: \"Pad Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"new age pad\", midiProgram: 88, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 4 }, { \"frequency\": \"6×\", \"amplitude\": 3 }, { \"frequency\": \"13×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 3\" }] } },\n                { name: \"warm pad\", midiProgram: 89, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 1 }] } },\n                { name: \"polysynth pad\", midiProgram: 90, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"note filter\", \"chorus\"], \"vibrato\": \"delayed\", \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"honky tonk\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n                { name: \"space voice pad\", midiProgram: 91, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.1768 }], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"2×\", \"amplitude\": 8 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"11×\", \"amplitude\": 2 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 2\" }] } },\n                { name: \"bowed glass pad\", midiProgram: 92, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"2×\", \"amplitude\": 12 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 3\", \"index\": 3 }] } },\n                { name: \"metallic pad\", midiProgram: 93, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 13, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 9 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"11×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"sweep pad\", midiProgram: 95, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 4 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"hum\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 3\" }] } },\n                { name: \"atmosphere\", midiProgram: 99, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"effects\": [\"chorus\", \"reverb\"], \"chorus\": 100, \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 10 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 3 }] } },\n                { name: \"brightness\", midiProgram: 100, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 2 }], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"harmonics\": [100, 86, 86, 86, 43, 57, 43, 71, 43, 43, 43, 57, 43, 43, 57, 71, 57, 43, 29, 43, 57, 57, 43, 29, 29, 29, 29, 14], \"unison\": \"octave\", \"stringSustain\": 86, \"envelopes\": [] } },\n                { name: \"goblins\", midiProgram: 101, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 10, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"4×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 2\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 3\" }] } },\n                { name: \"sci-fi\", midiProgram: 103, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13 }, { \"frequency\": \"2×\", \"amplitude\": 10 }, { \"frequency\": \"5×\", \"amplitude\": 5 }, { \"frequency\": \"11×\", \"amplitude\": 8 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo5\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"flutter pad\", midiProgram: 90, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"note filter\", \"chorus\"], \"vibrato\": \"delayed\", \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 4 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13 }, { \"frequency\": \"5×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 3 }] } },\n                { name: \"feedback pad\", midiProgram: 89, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 8 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"custom interval\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 15 }], \"envelopes\": [{ \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 2\" }] } },\n            ])\n        },\n        {\n            name: \"Drum Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"standard drumset\", midiProgram: 116, isNoise: true, settings: { \"type\": \"drumset\", \"effects\": \"reverb\", \"drums\": [{ \"filterEnvelope\": \"twang 1\", \"spectrum\": [57, 71, 71, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 100, 71, 71, 57, 86, 57, 57, 57, 71, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 100, 57, 43, 43, 29, 57, 43, 29, 71, 43, 43, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 0, 71, 57, 43, 43, 43, 57, 57, 43, 29, 57, 43, 43, 43, 29, 43, 57, 43, 43, 43, 43, 43, 43, 29, 43, 43] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [0, 14, 29, 43, 86, 71, 29, 43, 43, 43, 43, 29, 71, 29, 71, 29, 43, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 57, 57, 57] }, { \"filterEnvelope\": \"decay 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 43, 43, 71, 29, 29, 43, 43, 43, 29, 43, 43, 43, 29, 29, 43, 43, 29, 29, 29, 57, 14, 57, 43, 43, 57, 43, 43, 57, 57] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [29, 43, 43, 43, 43, 29, 29, 43, 29, 29, 43, 29, 14, 29, 43, 29, 43, 29, 57, 29, 43, 57, 43, 71, 43, 71, 57, 57, 71, 71] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 29, 29, 43, 29, 29, 29, 57, 29, 29, 29, 57, 43, 43, 29, 29, 57, 43, 43, 43, 71, 43, 43, 71, 57, 71, 71, 71, 71, 71] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [57, 57, 57, 43, 57, 57, 43, 43, 57, 43, 43, 43, 71, 57, 43, 57, 86, 71, 57, 86, 71, 57, 86, 100, 71, 86, 86, 86, 86, 86] }, { \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 71, 71, 86, 86, 100, 100, 100, 100, 100, 100, 100, 100, 86, 57, 29, 0] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [14, 14, 14, 14, 29, 14, 14, 29, 14, 43, 14, 43, 57, 86, 57, 57, 100, 57, 43, 43, 57, 100, 57, 43, 29, 14, 0, 0, 0, 0] }] } },\n                { name: \"steel pan\", midiProgram: 114, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\", \"chorus\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"chorus\": 67, \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 14 }, { \"frequency\": \"7×\", \"amplitude\": 3 }, { \"frequency\": \"3×\", \"amplitude\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay 2\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 3 }] } },\n                { name: \"steel pan synth\", midiProgram: 114, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1 2 3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12 }, { \"frequency\": \"2×\", \"amplitude\": 15 }, { \"frequency\": \"4×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 1\" }] } },\n                { name: \"timpani\", midiProgram: 47, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }], \"effects\": [\"pitch shift\", \"note filter\", \"reverb\"], \"pitchShiftSemitones\": 15, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.5 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"spectrum\": [100, 0, 0, 0, 86, 0, 0, 71, 0, 14, 43, 14, 43, 43, 0, 29, 43, 29, 29, 29, 43, 29, 43, 29, 43, 43, 43, 43, 43, 43], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }, { \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }] } },\n                { name: \"dark strike\", midiProgram: 47, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"spectrum\": [0, 0, 14, 14, 14, 29, 29, 43, 43, 86, 43, 43, 43, 29, 86, 29, 29, 29, 86, 29, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n                { name: \"woodblock\", midiProgram: 115, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 14, 29, 43, 43, 57, 86, 86, 71, 57, 57, 43, 43, 57, 86, 86, 43, 43, 71, 57, 57, 57, 57, 57, 86, 86, 71, 71, 71, 71] } },\n                { name: \"taiko drum\", midiProgram: 116, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 100, 100, 43, 43, 71, 71, 43, 43, 43, 43, 43, 43, 57, 29, 57, 43, 57, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\n                { name: \"melodic drum\", midiProgram: 117, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 71, 71, 57, 57, 43, 43, 71, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\n                { name: \"drum synth\", midiProgram: 118, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"decay 1\", \"spectrum\": [100, 86, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\n                { name: \"tom-tom\", midiProgram: 116, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 29, 14, 0, 0, 86, 14, 43, 29, 86, 29, 14, 29, 57, 43, 43, 43, 43, 57, 43, 43, 43, 29, 57, 43, 43, 43, 43, 43, 43] } },\n                { name: \"metal pipe\", midiProgram: 117, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [29, 43, 86, 43, 43, 43, 43, 43, 100, 29, 14, 14, 100, 14, 14, 0, 0, 0, 0, 0, 14, 29, 29, 14, 0, 0, 14, 29, 0, 0] } },\n                { name: \"synth kick\", midiProgram: 47, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"8×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\n            ])\n        },\n        {\n            name: \"Novelty Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"guitar fret noise\", midiProgram: 120, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"spectrum\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 29, 14, 0, 0, 43, 0, 43, 0, 71, 43, 0, 57, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 1\" }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\n                { name: \"fifth saw lead\", midiProgram: 86, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1.4142 }], \"chorus\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n                { name: \"fifth swell\", midiProgram: 86, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 2 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 3\" }] } },\n                { name: \"soundtrack\", midiProgram: 97, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"chorus\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 3\" }] } },\n                { name: \"reverse cymbal\", midiProgram: 119, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"none\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [29, 57, 57, 29, 57, 57, 29, 29, 43, 29, 29, 43, 29, 29, 57, 57, 14, 57, 14, 57, 71, 71, 57, 86, 57, 100, 86, 86, 86, 86] } },\n                { name: \"seashore\", midiProgram: 122, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"transition\": \"soft fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 43, 43, 43, 57, 57, 57, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57] } },\n                { name: \"bird tweet\", midiProgram: 123, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"chord type\", \"vibrato\", \"reverb\"], \"chord\": \"strum\", \"vibrato\": \"heavy\", \"reverb\": 67, \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"harmonics\": [0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"hum\", \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"decay 1\" }] } },\n                { name: \"telephone ring\", midiProgram: 124, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 4 }, { \"frequency\": \"20×\", \"amplitude\": 1 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"tremolo4\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 1 }] } },\n                { name: \"helicopter\", midiProgram: 125, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"spectrum\": [14, 43, 43, 57, 57, 57, 71, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 57, 57] } },\n                { name: \"applause\", midiProgram: 126, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 29, 43, 43, 57, 71, 71, 86, 86, 86, 71, 71, 57, 57, 57, 71, 86, 86, 86, 86, 86, 71, 71, 57, 57, 57, 57] } },\n                { name: \"gunshot\", midiProgram: 127, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1414, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [14, 29, 43, 43, 57, 57, 57, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43] } },\n                { name: \"scoot\", midiProgram: 92, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 707.11, \"linearGain\": 4 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"double saw\", \"unison\": \"shimmer\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 1\" }] } },\n                { name: \"buzz saw\", midiProgram: 30, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"5×\", \"amplitude\": 13 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }, { \"frequency\": \"11×\", \"amplitude\": 12 }], \"envelopes\": [] } },\n                { name: \"mosquito\", midiProgram: 93, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }], \"effects\": [\"vibrato\"], \"vibrato\": \"shaky\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"pulseWidth\": 4.41942, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"tremolo6\" }] } },\n                { name: \"breathing\", midiProgram: 126, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"spectrum\": [14, 14, 14, 29, 29, 29, 29, 29, 43, 29, 29, 43, 43, 43, 29, 29, 71, 43, 86, 86, 57, 100, 86, 86, 86, 86, 71, 86, 71, 57] } },\n                { name: \"klaxon synth\", midiProgram: 125, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"noise\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"wave\": \"buzz\" } },\n                { name: \"theremin\", midiProgram: 40, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.7071 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"heavy\", \"reverb\": 33, \"transition\": \"slide in pattern\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"harmonics\": [100, 71, 57, 43, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"sonar ping\", midiProgram: 121, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"spectrum\": [100, 43, 29, 29, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n            ])\n        },\n         { name: \"Modbox Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n\t\t\t{ name: \"modbox theepsynth\", settings: { \"type\": \"FM\", \"effects\": \"none\", \"transition\": \"hard\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"custom\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 11, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n               ]) },\n\t\t\t   { name: \"Sandbox Presets\", presets: toNameMap([\n                { name: \"sandbox netsky hollow\", generalMidi: false, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45] } },\n                { name: \"sandbox abnormality\", generalMidi: false, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"effects\": \"none\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"spiky\", \"interval\": \"fifth\", \"vibrato\": \"none\" } },\n                { name: \"sandbox playstation\", generalMidi: false, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"effects\": \"chorus\", \"transition\": \"seamless\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"wave\": \"glitch\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\n                { name: \"sandbox harmony pulse\", generalMidi: false, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"effects\": \"chorus\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"punch\", \"wave\": \"double pulse\", \"interval\": \"union\", \"vibrato\": \"none\" } },\n                { name: \"sandbox pink ping\", generalMidi: false, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 3000, \"filterResonance\": 0, \"filterEnvelope\": \"tripolo6\", \"spectrum\": [0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n                { name: \"sandbox tv static\", generalMidi: false, isNoise: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"noise\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 40, \"filterEnvelope\": \"steady\", \"wave\": \"static\" } },\n                { name: \"sandbox clean pulse\", generalMidi: false, settings: { \"type\": \"custom chip\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] } },\n\t\t\t\t{ name: \"sandbox snp chorus\", generalMidi: false, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"chorus & reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 1, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"custom\" }] } },\n\t\t\t\t{ name: \"sandbox snp echo\", generalMidi: false, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"chorus\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"decay 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 9, \"envelope\": \"twang 1\" }, { \"frequency\": \"20×\", \"amplitude\": 5, \"envelope\": \"twang 2\" }] } },\n                { name: \"sandbox tori synth lead\", generalMidi: false, settings: { \"type\": \"harmonics\", \"effects\": \"chorus\", \"transition\": \"seamless\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 100, 71, 71, 43, 43, 43, 29, 29, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 29, 14, 0, 0, 0, 86] } },\n                { name: \"sandbox glorious piano 1\", generalMidi: false, settings: { \"type\": \"custom chip\", \"transition\": \"hard fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [24, 24, -16, -15, -15, -14, -13, -13, -12, -11, -11, -10, -9, -8, -8, -7, -6, -5, -5, -4, -3, -2, -2, 23, 22, 22, 21, 20, 20, 19, 19, 18, 18, 17, 16, 15, 15, 14, 13, 12, 12, 11, 0, -1, -1, -2, -3, -3, -4, -5, -5, -6, -20, -19, -17, -17, -14, -11, -8, -5, -2, -23, -24, -24] } },\n                { name: \"sandbox glorious piano 2\", generalMidi: false, settings: { \"type\": \"custom chip\", \"transition\": \"hard fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"interval\": \"shimmer\", \"vibrato\": \"light\", \"customChipWave\": [24, 24, -16, -15, -15, -14, -13, -13, -12, 12, 9, 5, 2, -3, -7, -10, -6, -5, -5, -4, -3, -2, -2, 23, 22, 22, 21, 20, 20, 19, 19, 18, 18, 17, 16, 15, 15, 0, 4, 8, 15, 21, 0, -1, -1, -2, -3, -3, -4, -5, -5, -6, -20, -19, -17, -17, -2, -2, -8, 2, -2, -5, -24, -24] } },\n                { name: \"sandbox muffled katrumpet\", generalMidi: false, settings: { \"type\": \"custom chip\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"light\", \"customChipWave\": [24, 23, 22, 22, 22, 22, 22, 21, 21, 19, 19, 15, 11, 7, 5, -2, -5, -11, -13, -14, -16, -17, -17, -17, -17, -17, -17, -17, -17, -13, -10, -1, 4, 6, 8, 10, 11, 14, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 15, 15, 14, 11, 8, 4, 2, -4, -7, -11, -12, -13, -14, -15, -15, -15] } },\n                { name: \"sandbox ehruthing\", generalMidi: false, settings: { \"type\": \"custom chip\", \"hard fade\": \"seamless\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [24, 24, 23, 22, 21, 21, 20, 19, 18, 18, 17, 16, 15, -22, -20, -18, -16, -14, -13, -11, -10, -7, -6, -4, -3, -2, 0, 2, 4, 17, 16, 15, 13, 12, 11, 9, 8, 6, 5, 4, 3, 2, 1, -1, -1, -2, -3, -4, -6, -6, -7, -8, -8, -9, -10, -10, -11, -13, -15, -16, -17, -3, -4, -5] } },\n\t\t\t\t{ name: \"sandbox wurtz organ\", generalMidi: false, settings: { \"type\": \"FM\", \"transition\": \"seamless\", \"effects\": \"chorus\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 0, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"decay 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"tremolo6\" }, { \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"tripolo3\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"pentolo3\" }, { \"frequency\": \"8×\", \"amplitude\": 2, \"envelope\": \"pentolo6\" }] } },\n            //some of these dont load, I need to fix them\n\t\t\t]) },\n     { name: \"Blackbox Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n               \t{ name: \"blackbox deep key\", midiProgram: 9, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 32, \"filterEnvelope\": \"twang 1\", \"interval\": \"shimmer\", \"vibrato\": \"light\", \"harmonics\": [100, 86, 86, 86, 86, 71, 71, 57, 0, 57, 29, 43, 57, 57, 57, 43, 43, 0, 29, 43, 43, 43, 43, 43, 43, 29, 0, 30] } },\n\t\t\t\t{ name: \"blackbox ring ding\", midiProgram: 78, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 1500, \"filterResonance\": 16, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"12×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"22×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }] } },\n\t\t\t\t//blackbox adds LITERALLY TWO presets. that's it.\n\t\t\t  ]) },\n\t\t\t  { name: \"Todbox Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n        { name: \"todbox accordion\", midiProgram: 21, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"swell 1\", \"wave\": \"todbox accordian\", \"interval\": \"honky tonk\", \"vibrato\": \"none\" } },\n\t\t\t{ name: \"todbox wind\", generalMidi: false, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"harmony\", \"filterCutoffHz\": 200, \"filterResonance\": 2950, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1→3 2→4\", \"feedbackType\": \"1→3 2→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 0, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 0, \"envelope\": \"flare 2\" }] } },\n\t\t\t ]) },\n\t\t\t { name: \"Old Beepbox Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"old grand piano\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"piano\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 86, 86, 71, 71, 71, 0, 86, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57] } },\n\t\t\t\t{ name: \"old bright piano\", midiProgram: 1, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"piano\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 86, 71, 71, 0, 71, 86, 86, 71, 71, 71, 14, 57, 57, 57, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 57] } },\n              { name: \"old honky-tonk piano\", midiProgram: 3, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"twang 2\", \"interval\": \"honky tonk\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 86, 71, 43, 71, 43, 43, 57, 57, 57, 29, 57, 43, 43, 43, 43, 43, 29, 43, 43, 43, 29, 29, 29, 29] } },\n              //  { name: \"old electric piano 1\", midiProgram: 4, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 71, 71, 57, 57, 43, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0] } },\n              //  { name: \"old electric piano 2\", midiProgram: 5, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 6, \"envelope\": \"twang 3\" }] } },\n                { name: \"old harpsichord\", midiProgram: 6, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\n                { name: \"old dulcimer\", midiProgram: 15, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"piano\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 86, 100, 86, 57, 100, 100, 86, 100, 86, 100, 86, 100, 71, 57, 71, 71, 100, 86, 71, 86, 86, 100, 86, 86, 86] } },\n\t\t\t                { name: \"old music box 1\", midiProgram: 10, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 71, 0] } },\n                { name: \"old music box 2\", midiProgram: 10, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 57, 57, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 14, 14, 14, 14, 14, 14, 43, 14, 14, 14, 14, 14, 14, 14, 14] } },\n\t\t\t { name: \"old tubular bell\", midiProgram: 14, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14] } },\n\t\t\t { name: \"old steel guitar\", midiProgram: 25, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 71, 86, 86, 71, 57, 43, 43, 43, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\n\t\t\t     { name: \"old cello\", midiProgram: 42, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\n\t\t\t                { name: \"old choir soprano\", midiProgram: 94, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0] } },\n                { name: \"old choir tenor\", midiProgram: 52, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 100, 86, 71, 57, 29, 14, 14, 14, 29, 43, 43, 43, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n                { name: \"old choir bass\", midiProgram: 52, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [71, 86, 86, 100, 86, 100, 57, 43, 14, 14, 14, 14, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 0, 0] } },\n                { name: \"old solo soprano\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 71, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0] } },\n                { name: \"old solo tenor\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 100, 86, 71, 57, 29, 14, 14, 14, 29, 43, 43, 43, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n                { name: \"old solo bass\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [71, 86, 86, 100, 86, 100, 57, 43, 14, 14, 14, 14, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 0, 0] } },\n\t\t\t { name: \"old pan flute\", midiProgram: 75, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 71, 0, 0, 14, 0, 57, 0, 29, 14, 29, 14, 14, 29, 14, 29, 14, 14, 29, 14] } },\n\t\t\t  { name: \"old timpani\", midiProgram: 47, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 2\", \"spectrum\": [100, 0, 0, 0, 86, 0, 0, 71, 0, 14, 43, 14, 43, 43, 0, 29, 43, 29, 29, 29, 43, 29, 43, 29, 43, 43, 43, 43, 43, 43] } },\n\t\t\t\t\t\t\t\t//meant for old beepbox presets that changed in the latest beepbox version to be more 'realistic'\n\t\t\t\t\t\t\t\t//probably need to add more\n\t\t\t\t\t\t\t\t//timpani and pan flute act strangely...?\n\t\t\t]) },\n\t\t\t{ name: \"UltraBox Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n              \t\t\t{ name: \"vrc6 sawtooth\", generalMidi: false, settings: { \"type\": \"custom chip\", \"volume\": 0, \"eqFilter\": [ { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.5 } ], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [ { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.5 } ], \"effects\": [ \"panning\", \"transition type\", \"chord type\", \"detune\", \"vibrato\" ], \"transition\": \"normal\", \"clicklessTransition\": true, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"detuneCents\": 0, \"vibrato\": \"none\", \"vibratoDepth\": 0, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"wave\": \"square\", \"unison\": \"none\", \"customChipWave\": { \"0\": -1, \"1\": -1, \"2\": -1, \"3\": -1, \"4\": -1, \"5\": -1, \"6\": -1, \"7\": -1, \"8\": -1, \"9\": -5, \"10\": -5, \"11\": -5, \"12\": -4, \"13\": -4, \"14\": -4, \"15\": -3, \"16\": -3, \"17\": -3, \"18\": -7, \"19\": -7, \"20\": -6, \"21\": -6, \"22\": -5, \"23\": -5, \"24\": -4, \"25\": -4, \"26\": -4, \"27\": -7, \"28\": -7, \"29\": -6, \"30\": -6, \"31\": -5, \"32\": -5, \"33\": -4, \"34\": -4, \"35\": -4, \"36\": -8, \"37\": -8, \"38\": -7, \"39\": -7, \"40\": -6, \"41\": -6, \"42\": -5, \"43\": -5, \"44\": -4, \"45\": -4, \"46\": 21, \"47\": 20, \"48\": 18, \"49\": 17, \"50\": 16, \"51\": 14, \"52\": 13, \"53\": 12, \"54\": 11, \"55\": 7, \"56\": 6, \"57\": 6, \"58\": 5, \"59\": 5, \"60\": 5, \"61\": 4, \"62\": 4, \"63\": 4 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [] } },\n               { name: \"nes white\", midiProgram: 116, generalMidi: true, isNoise: true, settings: { \"type\": \"noise\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 8, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [ \"panning\" ], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 0, \"wave\": \"1-bit white\", \"envelopes\": [] } }, \n\t\t\t\t { name: \"nes ping\", midiProgram: 116, generalMidi: true, isNoise: true, settings: { \"type\": \"noise\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 8, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [ \"panning\" ], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 0, \"wave\": \"1-bit metallic\", \"envelopes\": [] } }, \n\t\t\t\t{ name: \"distorted pulse vocal\", generalMidi: false, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 } ], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [ { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 } ], \"effects\": [ \"panning\", \"transition type\", \"pitch shift\", \"vibrato\", \"note filter\", \"bitcrusher\", \"echo\", \"reverb\" ], \"transition\": \"normal\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 0, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [ { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 176.78, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 11.3137 } ], \"noteSubFilters0\": [ { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 176.78, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 11.3137 } ], \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 71, \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 14, \"echoDelayBeats\": 0.167, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"1/8 pulse\", \"unison\": \"none\", \"envelopes\": [] } },\n              { name: \"dubsteb bwah\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 } ], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [ \"panning\", \"transition type\", \"chord type\" ], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"custom interval\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 10, \"operators\": [ { \"frequency\": \"2×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 } ], \"envelopes\": [ { \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 3 } ] } },\n { name: \"FM cool bass\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.7071 } ], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [ { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.7071 } ], \"effects\": [ \"panning\", \"transition type\", \"note filter\", \"reverb\" ], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 2, \"noteFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 } ], \"noteSubFilters1\": [ { \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 } ], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [ { \"frequency\": \"2×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"13×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 } ], \"envelopes\": [ { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 3 } ] } },\n                { name: \"FM funky bass\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.1768 } ], \"eqFilterType\": true, \"eqSimpleCut\": 5, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [ \"panning\", \"transition type\", \"reverb\" ], \"transition\": \"normal\", \"clicklessTransition\": false, \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [ { \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 } ], \"envelopes\": [ { \"target\": \"noteVolume\", \"envelope\": \"punch\" }, { \"target\": \"noteVolume\", \"envelope\": \"note size\" } ] } },\n                { name: \"mrow\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [], \"effects\": [ \"panning\", \"chord type\", \"reverb\" ], \"chord\": \"custom interval\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pan\": 0, \"panDelay\": 10, \"reverb\": 35, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"operators\": [ { \"frequency\": \"4×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 } ], \"envelopes\": [ { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 3\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 1\" } ] } },\n                { name: \"talking bass\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"effects\": [ \"chord type\" ], \"chord\": \"custom interval\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 15, \"operators\": [ { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"2×\", \"amplitude\": 8 }, { \"frequency\": \"2×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 12 } ], \"envelopes\": [ { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"note size\" } ] } },\n                { name: \"synth marimba\", generalMidi: false, settings: { \"type\": \"Picked String\", \"volume\": 0, \"eqFilter\": [ { \"type\": \"high-pass\", \"cutoffHz\": 176.78, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 0.5 } ], \"effects\": [ \"note filter\", \"echo\" ], \"noteFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1.4142 } ], \"echoSustain\": 71, \"echoDelayBeats\": 0.5, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"harmonics\": [ 86, 100, 29, 29, 0, 0, 0, 100, 0, 0, 0, 86, 29, 0, 14, 100, 0, 0, 0, 0, 0, 14, 0, 0, 14, 0, 0, 86 ], \"unison\": \"fifth\", \"stringSustain\": 7, \"envelopes\": [ { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" } ] } }, \n\t\t\t{ name: \"italian accordian\", generalMidi: false, settings: { \"type\": \"custom chip\", \"volume\": 0, \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 6000, \"linearGain\": 0.5 } ], \"eqFilterType\": true, \"eqSimpleCut\": 8, \"eqSimplePeak\": 1, \"eqSubFilters1\": [], \"effects\": [ \"panning\", \"chorus\", \"reverb\" ], \"pan\": 0, \"panDelay\": 10, \"chorus\": 71, \"reverb\": 45, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"wave\": \"square\", \"unison\": \"honky tonk\", \"customChipWave\": { \"0\": -24, \"1\": -24, \"2\": -24, \"3\": -24, \"4\": -24, \"5\": -24, \"6\": -24, \"7\": -24, \"8\": -24, \"9\": -24, \"10\": -24, \"11\": -24, \"12\": -24, \"13\": -24, \"14\": -24, \"15\": -24, \"16\": 24, \"17\": 24, \"18\": 24, \"19\": 24, \"20\": 24, \"21\": 24, \"22\": 24, \"23\": 24, \"24\": -24, \"25\": -24, \"26\": -24, \"27\": -24, \"28\": -24, \"29\": -24, \"30\": -24, \"31\": -24, \"32\": -24, \"33\": -24, \"34\": -24, \"35\": -24, \"36\": -24, \"37\": -24, \"38\": -24, \"39\": -24, \"40\": 24, \"41\": 24, \"42\": 24, \"43\": 24, \"44\": 24, \"45\": 24, \"46\": 24, \"47\": 24, \"48\": -24, \"49\": -24, \"50\": -24, \"51\": -24, \"52\": -24, \"53\": -24, \"54\": -24, \"55\": -24, \"56\": -24, \"57\": -24, \"58\": -24, \"59\": -24, \"60\": -24, \"61\": -24, \"62\": -24, \"63\": -24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [] } },\n              { name: \"custom chip supersaw\", generalMidi: false, settings: { \"type\": \"custom chip\", \"volume\": 0, \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 } ], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [ \"panning\", \"transition type\", \"vibrato\", \"chorus\", \"reverb\" ], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"pan\": 0, \"panDelay\": 10, \"chorus\": 29, \"reverb\": 29, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"wave\": \"square\", \"unison\": \"dissonant\", \"customChipWave\": { \"0\": 22, \"1\": 22, \"2\": 16, \"3\": 6, \"4\": 0, \"5\": -3, \"6\": -8, \"7\": -10, \"8\": -13, \"9\": -16, \"10\": -19, \"11\": -19, \"12\": -20, \"13\": -22, \"14\": -22, \"15\": -24, \"16\": -24, \"17\": -24, \"18\": -24, \"19\": -24, \"20\": -24, \"21\": -24, \"22\": -24, \"23\": -24, \"24\": -24, \"25\": -24, \"26\": -24, \"27\": -24, \"28\": -24, \"29\": -24, \"30\": -24, \"31\": 24, \"32\": 24, \"33\": 16, \"34\": 9, \"35\": 6, \"36\": 4, \"37\": 2, \"38\": 0, \"39\": -1, \"40\": -3, \"41\": -4, \"42\": -4, \"43\": -6, \"44\": -6, \"45\": -6, \"46\": -6, \"47\": -5, \"48\": -5, \"49\": -4, \"50\": -2, \"51\": -2, \"52\": 1, \"53\": 4, \"54\": 6, \"55\": 8, \"56\": 10, \"57\": 12, \"58\": 14, \"59\": 16, \"60\": 18, \"61\": 19, \"62\": 22, \"63\": 24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [] } },\n               { name: \"fm supersaw\", generalMidi: false, settings: { \"type\": \"FM6op\", \"volume\": 0, \"eqFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 } ], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [ { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 } ], \"effects\": [ \"panning\", \"transition type\", \"pitch shift\", \"note filter\", \"chorus\", \"reverb\" ], \"transition\": \"continue\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"noteSubFilters1\": [ { \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 } ], \"pan\": 0, \"panDelay\": 10, \"chorus\": 71, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1 2 3 4 5 6\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [ { \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 15, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 10, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"3×\", \"amplitude\": 7, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 9, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 6, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 } ], \"envelopes\": [] } },\n\t\t\t //THANKS ANSWEARING MACHINE\n\t\t\t { name: \"obama why\", generalMidi: false, settings:{ \"type\": \"harmonics\", \"volume\": 0, \"eqFilter\": [], \"effects\": [ \"note filter\", \"panning\", \"reverb\" ], \"noteFilter\": [ { \"type\": \"low-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 } ], \"pan\": 0, \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"harmonics\": [ 100, 86, 29, 29, 14, 14, 0, 14, 14, 43, 71, 100, 100, 86, 71, 71, 57, 57, 43, 43, 43, 43, 43, 0, 0, 0, 0, 0 ], \"unison\": \"octave\", \"envelopes\": [ { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" } ] } },\n\t\t\t //thanks to nobo ig? (this is from a beepcord inside joke)\n\t\t\t\n\t\t\t\n\t\t\t\t //custom presets from this mod\t\t \n\t\t\t]) },\n            {   name: \"Le choptop84's presets\", presets: <DictionaryArray<Preset>>toNameMap([ // weeb shit - me\n               { name: \"Demonic Bell\", generalMidi: false, settings:  {\"type\":\"Picked String\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":6727.17,\"linearGain\":0.7071},{\"type\":\"high-pass\",\"cutoffHz\":353.55,\"linearGain\":0.7071},{\"type\":\"peak\",\"cutoffHz\":1414.21,\"linearGain\":0.0884}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":6727.17,\"linearGain\":0.7071},{\"type\":\"high-pass\",\"cutoffHz\":353.55,\"linearGain\":0.7071},{\"type\":\"peak\",\"cutoffHz\":1414.21,\"linearGain\":0.0884}],\"effects\":[\"detune\",\"distortion\",\"bitcrusher\",\"echo\",\"reverb\"],\"detuneCents\":-52,\"distortion\":29,\"aliases\":false,\"bitcrusherOctave\":4.5,\"bitcrusherQuantization\":29,\"panDelay\":10,\"echoSustain\":43,\"echoDelayBeats\":1,\"reverb\":68,\"fadeInSeconds\":0,\"fadeOutTicks\":96,\"harmonics\":[43,71,71,100,86,100,43,86,71,57,86,29,14,71,14,14,57,14,14,43,14,14,43,14,14,43,14,14],\"unison\":\"shimmer\",\"stringSustain\":64,\"envelopes\":[]} },\n               { name: \"Spacey Triangle\", generalMidi: false, settings: {\"type\":\"chip\",\"eqFilter\":[{\"type\":\"low-pass\",\"cutoffHz\":6727.17,\"linearGain\":11.3137},{\"type\":\"high-pass\",\"cutoffHz\":176.78,\"linearGain\":4}],\"eqFilterType\":false,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"eqSubFilters0\":[{\"type\":\"low-pass\",\"cutoffHz\":6727.17,\"linearGain\":11.3137},{\"type\":\"high-pass\",\"cutoffHz\":176.78,\"linearGain\":4}],\"effects\":[\"transition type\",\"vibrato\",\"distortion\",\"bitcrusher\",\"chorus\",\"echo\",\"reverb\"],\"transition\":\"normal\",\"clicklessTransition\":false,\"vibrato\":\"shaky\",\"vibratoDepth\":0.1,\"vibratoDelay\":0,\"vibratoSpeed\":10,\"vibratoType\":1,\"distortion\":29,\"aliases\":false,\"bitcrusherOctave\":5.5,\"bitcrusherQuantization\":14,\"panDelay\":10,\"chorus\":86,\"echoSustain\":43,\"echoDelayBeats\":1,\"reverb\":26,\"fadeInSeconds\":0,\"fadeOutTicks\":96,\"wave\":\"triangle\",\"unison\":\"dirty\",\"isUsingAdvancedLoopControls\":false,\"chipWaveLoopStart\":0,\"chipWaveLoopEnd\":32,\"chipWaveLoopMode\":0,\"chipWavePlayBackwards\":false,\"chipWaveStartOffset\":0,\"envelopes\":[]} },\n\n            ])},\n\n    ]);\n\n    public static valueToPreset(presetValue: number): Preset | null {\n        const categoryIndex: number = presetValue >> 6;\n        const presetIndex: number = presetValue & 0x3F;\n        return EditorConfig.presetCategories[categoryIndex].presets[presetIndex];\n    }\n\n    public static midiProgramToPresetValue(program: number): number | null {\n        for (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\n            const category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\n            for (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\n                const preset: Preset = category.presets[presetIndex];\n                if (preset.generalMidi && preset.midiProgram == program) return (categoryIndex << 6) + presetIndex;\n            }\n        }\n        return null;\n    }\n\n    public static nameToPresetValue(presetName: string): number | null {\n        for (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\n            const category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\n            for (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\n                const preset: Preset = category.presets[presetIndex];\n                if (preset.name == presetName) return (categoryIndex << 6) + presetIndex;\n            }\n        }\n        return null;\n    }\n\n    public static instrumentToPreset(instrument: InstrumentType): Preset | null {\n        return EditorConfig.presetCategories[0].presets.dictionary?.[TypePresets?.[instrument]];\n    }\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\n// interface shared by number[], Float32Array, and other typed arrays in JavaScript.\ninterface NumberArray {\n\tlength: number;\n\t[index: number]: number;\n}\n\n// A basic FFT operation scales the overall magnitude of elements by the\n// square root of the length of the array, √N. Performing a forward FFT and\n// then an inverse FFT results in the original array, but multiplied by N.\n// This helper function can be used to compensate for that. \nexport function scaleElementsByFactor(array: NumberArray, factor: number): void {\n\tfor (let i: number = 0; i < array.length; i++) {\n\t\tarray[i] *= factor;\n\t}\n}\n\nfunction isPowerOf2(n: number): boolean {\n\treturn !!n && !(n & (n - 1));\n}\n\nfunction countBits(n: number): number {\n\tif (!isPowerOf2(n)) throw new Error(\"FFT array length must be a power of 2.\");\n\treturn Math.round(Math.log(n) / Math.log(2));\n}\n\n// Rearranges the elements of the array, swapping the element at an index\n// with an element at an index that is the bitwise reverse of the first\n// index in base 2. Useful for computing the FFT.\nfunction reverseIndexBits(array: NumberArray, fullArrayLength: number): void {\n\tconst bitCount: number = countBits(fullArrayLength);\n\tif (bitCount > 16) throw new Error(\"FFT array length must not be greater than 2^16.\");\n\tconst finalShift: number = 16 - bitCount;\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\n\t\t// Dear Javascript: Please support bit order reversal intrinsics. Thanks! :D\n\t\tlet j: number;\n\t\tj = ((i & 0xaaaa) >> 1) | ((i & 0x5555) << 1);\n\t\tj = ((j & 0xcccc) >> 2) | ((j & 0x3333) << 2);\n\t\tj = ((j & 0xf0f0) >> 4) | ((j & 0x0f0f) << 4);\n\t\t\tj = ((j           >> 8) | ((j &   0xff) << 8)) >> finalShift;\n\t\tif (j > i) {\n\t\t\tlet temp: number = array[i];\n\t\t\tarray[i] = array[j];\n\t\t\tarray[j] = temp;\n\t\t}\n\t}\n}\n\n// Provided for educational purposes. Easier to read than\n// fastFourierTransform(), but computes the same result.\n// Takes two parallel arrays representing the real and imaginary elements,\n// respectively, and returns an array containing two new arrays, which\n// contain the complex result of the transform.\nexport function discreteFourierTransform(realArray: NumberArray, imagArray: NumberArray): number[][] {\n\tconst fullArrayLength: number = realArray.length;\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\n\tconst realOut: number[] = [];\n\tconst imagOut: number[] = [];\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\n\t\trealOut[i] = 0.0;\n\t\timagOut[i] = 0.0;\n\t\tfor (let j: number = 0; j < fullArrayLength; j++) {\n\t\t\tconst radians: number = -6.2831853 * j * i / fullArrayLength;\n\t\t\tconst c: number = Math.cos(radians);\n\t\t\tconst s: number = Math.sin(radians);\n\t\t\trealOut[i] += realArray[j] * c - imagArray[j] * s;\n\t\t\timagOut[i] += realArray[j] * s + imagArray[j] * c;\n\t\t}\n\t}\n\treturn [realOut, imagOut];\n}\n\n// Performs a Fourier transform in O(N log(N)) operations. Overwrites the\n// input real and imaginary arrays. Can be used for both forward and inverse\n// transforms: swap the order of the arguments for the inverse.\nexport function fastFourierTransform(realArray: NumberArray, imagArray: NumberArray): void {\n\tconst fullArrayLength: number = realArray.length;\n\tif (!isPowerOf2(fullArrayLength)) throw new Error(\"FFT array length must be a power of 2.\");\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\n\t\t\n\treverseIndexBits(realArray, fullArrayLength);\n\treverseIndexBits(imagArray, fullArrayLength);\n\t\t\n\t// First two passes, with strides of 2 and 4, can be combined and optimized.\n\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += 4) {\n\t\tconst startIndex1: number = startIndex + 1;\n\t\tconst startIndex2: number = startIndex + 2;\n\t\tconst startIndex3: number = startIndex + 3;\n\t\t\tconst real0: number = realArray[startIndex ];\n\t\tconst real1: number = realArray[startIndex1];\n\t\tconst real2: number = realArray[startIndex2];\n\t\tconst real3: number = realArray[startIndex3];\n\t\t\tconst imag0: number = imagArray[startIndex ];\n\t\tconst imag1: number = imagArray[startIndex1];\n\t\tconst imag2: number = imagArray[startIndex2];\n\t\tconst imag3: number = imagArray[startIndex3];\n\t\tconst realTemp0: number = real0 + real1;\n\t\tconst realTemp1: number = real0 - real1;\n\t\tconst realTemp2: number = real2 + real3;\n\t\tconst realTemp3: number = real2 - real3;\n\t\tconst imagTemp0: number = imag0 + imag1;\n\t\tconst imagTemp1: number = imag0 - imag1;\n\t\tconst imagTemp2: number = imag2 + imag3;\n\t\tconst imagTemp3: number = imag2 - imag3;\n\t\t\trealArray[startIndex ] = realTemp0 + realTemp2;\n\t\trealArray[startIndex1] = realTemp1 + imagTemp3;\n\t\trealArray[startIndex2] = realTemp0 - realTemp2;\n\t\trealArray[startIndex3] = realTemp1 - imagTemp3;\n\t\t\timagArray[startIndex ] = imagTemp0 + imagTemp2;\n\t\timagArray[startIndex1] = imagTemp1 - realTemp3;\n\t\timagArray[startIndex2] = imagTemp0 - imagTemp2;\n\t\timagArray[startIndex3] = imagTemp1 + realTemp3;\n\t}\n\t\t\n\tfor (let stride: number = 8; stride <= fullArrayLength; stride += stride) {\n\t\tconst halfLength: number = stride >>> 1;\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\n\t\t\tlet c: number = 1.0;\n\t\t\tlet s: number = 0.0;\n\t\t\tlet cPrev: number = cosIncrement;\n\t\t\tlet sPrev: number = sinIncrement;\n\t\t\tconst secondHalf: number = startIndex + halfLength;\n\t\t\tfor (let i: number = startIndex; i < secondHalf; i++) {\n\t\t\t\tconst j: number = i + halfLength;\n\t\t\t\tconst real0: number = realArray[i];\n\t\t\t\tconst imag0: number = imagArray[i];\n\t\t\t\tconst real1: number = realArray[j] * c - imagArray[j] * s;\n\t\t\t\tconst imag1: number = realArray[j] * s + imagArray[j] * c;\n\t\t\t\trealArray[i] = real0 + real1;\n\t\t\t\timagArray[i] = imag0 + imag1;\n\t\t\t\trealArray[j] = real0 - real1;\n\t\t\t\timagArray[j] = imag0 - imag1;\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\n\t\t\t\tcPrev = c;\n\t\t\t\tsPrev = s;\n\t\t\t\tc = cTemp;\n\t\t\t\ts = sTemp;\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Computes the Fourier transform from an array of real-valued time-domain\n// samples. The output is specially formatted for space efficieny: elements\n// 0 through N/2 represent cosine wave amplitudes in ascending frequency,\n// and elements N/2+1 through N-1 represent sine wave amplitudes in\n// descending frequency. Overwrites the input array.\nexport function forwardRealFourierTransform(array: NumberArray): void {\n\tconst fullArrayLength: number = array.length;\n\tconst totalPasses: number = countBits(fullArrayLength);\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\n\t\t\n\treverseIndexBits(array, fullArrayLength);\n\t\t\n\t// First and second pass.\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\n\t\tconst index1: number = index + 1;\n\t\tconst index2: number = index + 2;\n\t\tconst index3: number = index + 3;\n\t\t\tconst real0: number = array[index ];\n\t\tconst real1: number = array[index1];\n\t\tconst real2: number = array[index2];\n\t\tconst real3: number = array[index3];\n\t\t// no imaginary elements yet since the input is fully real.\n\t\tconst tempA: number = real0 + real1;\n\t\tconst tempB: number = real2 + real3;\n\t\t\tarray[index ] = tempA + tempB;\n\t\tarray[index1] = real0 - real1;\n\t\tarray[index2] = tempA - tempB;\n\t\tarray[index3] = real2 - real3;\n\t}\n\t\t\n\t// Third pass.\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\n\t\tconst index1: number = index + 1;\n\t\tconst index3: number = index + 3;\n\t\tconst index4: number = index + 4;\n\t\tconst index5: number = index + 5;\n\t\tconst index7: number = index + 7;\n\t\t\tconst real0: number = array[index ];\n\t\tconst real1: number = array[index1];\n\t\tconst imag3: number = array[index3];\n\t\tconst real4: number = array[index4];\n\t\tconst real5: number = array[index5];\n\t\tconst imag7: number = array[index7];\n\t\tconst tempA: number = (real5 - imag7) * sqrt2over2;\n\t\tconst tempB: number = (real5 + imag7) * sqrt2over2;\n\t\t\tarray[index ] = real0 + real4;\n\t\tarray[index1] = real1 + tempA;\n\t\tarray[index3] = real1 - tempA;\n\t\tarray[index4] = real0 - real4;\n\t\tarray[index5] = tempB - imag3;\n\t\tarray[index7] = tempB + imag3;\n\t}\n\t\t\n\t// Handle remaining passes.\n\tfor (let pass: number = 3; pass < totalPasses; pass++) {\n\t\tconst subStride: number = 1 << pass;\n\t\tconst midSubStride: number = subStride >> 1;\n\t\tconst stride: number = subStride << 1;\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\n\t\t\tconst startIndexA: number = startIndex;\n\t\t\tconst startIndexB: number = startIndexA + subStride;\n\t\t\tconst stopIndex: number = startIndexB + subStride;\n\t\t\tconst realStartA: number = array[startIndexA];\n\t\t\tconst realStartB: number = array[startIndexB];\n\t\t\tarray[startIndexA] = realStartA + realStartB;\n\t\t\tarray[startIndexB] = realStartA - realStartB;\n\t\t\tlet c: number = cosIncrement;\n\t\t\tlet s: number = -sinIncrement;\n\t\t\tlet cPrev: number = 1.0;\n\t\t\tlet sPrev: number = 0.0;\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\n\t\t\t\tconst indexA0: number = startIndexA + index;\n\t\t\t\tconst indexA1: number = startIndexB - index;\n\t\t\t\tconst indexB0: number = startIndexB + index;\n\t\t\t\t\tconst indexB1: number = stopIndex   - index;\n\t\t\t\tconst real0: number = array[indexA0];\n\t\t\t\tconst imag0: number = array[indexA1];\n\t\t\t\tconst real1: number = array[indexB0];\n\t\t\t\tconst imag1: number = array[indexB1];\n\t\t\t\tconst tempA: number = real1 * c + imag1 * s;\n\t\t\t\tconst tempB: number = real1 * s - imag1 * c;\n\t\t\t\tarray[indexA0] = real0 + tempA;\n\t\t\t\tarray[indexA1] = real0 - tempA;\n\t\t\t\t\tarray[indexB0] =-imag0 - tempB;\n\t\t\t\tarray[indexB1] = imag0 - tempB;\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\n\t\t\t\tcPrev = c;\n\t\t\t\tsPrev = s;\n\t\t\t\tc = cTemp;\n\t\t\t\ts = sTemp;\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Computes the inverse Fourier transform from a specially formatted array of\n// scalar values. Elements 0 through N/2 are expected to be the real values of\n// the corresponding complex elements, representing cosine wave amplitudes in\n// ascending frequency, and elements N/2+1 through N-1 correspond to the\n// imaginary values, representing sine wave amplitudes in descending frequency.\n// Generates real-valued time-domain samples. Overwrites the input array.\nexport function inverseRealFourierTransform(array: NumberArray, fullArrayLength: number): void {\n\tconst totalPasses: number = countBits(fullArrayLength);\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\n\n\t// Perform all but the last few passes in reverse.\n\tfor (let pass: number = totalPasses - 1; pass >= 2; pass--) {\n\t\tconst subStride: number = 1 << pass;\n\t\tconst midSubStride: number = subStride >> 1;\n\t\tconst stride: number = subStride << 1;\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\n\t\t\t\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\n\t\t\tconst startIndexA: number = startIndex;\n\t\t\tconst midIndexA: number = startIndexA + midSubStride;\n\t\t\tconst startIndexB: number = startIndexA + subStride;\n\t\t\tconst midIndexB: number = startIndexB + midSubStride;\n\t\t\tconst stopIndex: number = startIndexB + subStride;\n\t\t\tconst realStartA: number = array[startIndexA];\n\t\t\tconst imagStartB: number = array[startIndexB];\n\t\t\tarray[startIndexA] = realStartA + imagStartB;\n\t\t\tarray[midIndexA] *= 2;\n\t\t\tarray[startIndexB] = realStartA - imagStartB;\n\t\t\tarray[midIndexB] *= 2;\n\t\t\tlet c: number = cosIncrement;\n\t\t\tlet s: number = -sinIncrement;\n\t\t\tlet cPrev: number = 1.0;\n\t\t\tlet sPrev: number = 0.0;\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\n\t\t\t\tconst indexA0: number = startIndexA + index;\n\t\t\t\tconst indexA1: number = startIndexB - index;\n\t\t\t\tconst indexB0: number = startIndexB + index;\n\t\t\t\t\tconst indexB1: number = stopIndex   - index;\n\t\t\t\tconst real0: number = array[indexA0];\n\t\t\t\tconst real1: number = array[indexA1];\n\t\t\t\tconst imag0: number = array[indexB0];\n\t\t\t\tconst imag1: number = array[indexB1];\n\t\t\t\tconst tempA: number = real0 - real1;\n\t\t\t\tconst tempB: number = imag0 + imag1;\n\t\t\t\tarray[indexA0] = real0 + real1;\n\t\t\t\tarray[indexA1] = imag1 - imag0;\n\t\t\t\tarray[indexB0] = tempA * c - tempB * s;\n\t\t\t\tarray[indexB1] = tempB * c + tempA * s;\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\n\t\t\t\tcPrev = c;\n\t\t\t\tsPrev = s;\n\t\t\t\tc = cTemp;\n\t\t\t\ts = sTemp;\n\t\t\t}\n\t\t}\n\t}\n\t/*\n\t// Commented out this block (and compensated with an extra pass above)\n\t// because it's slower in my testing so far.\n\t// Pass with stride 8.\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\n\t\tconst index1: number = index + 1;\n\t\tconst index2: number = index + 2;\n\t\tconst index3: number = index + 3;\n\t\tconst index4: number = index + 4;\n\t\tconst index5: number = index + 5;\n\t\tconst index6: number = index + 6;\n\t\tconst index7: number = index + 7;\n\t\tconst real0: number = array[index ];\n\t\tconst real1: number = array[index1];\n\t\tconst real2: number = array[index2];\n\t\tconst real3: number = array[index3];\n\t\tconst imag4: number = array[index4];\n\t\tconst imag5: number = array[index5];\n\t\tconst imag6: number = array[index6];\n\t\tconst imag7: number = array[index7];\n\t\tconst tempA: number = real1 - real3;\n\t\tconst tempB: number = imag5 + imag7;\n\t\tarray[index ] = real0 + imag4;\n\t\tarray[index1] = real1 + real3;\n\t\tarray[index2] = real2 * 2;\n\t\tarray[index3] = imag7 - imag5;\n\t\tarray[index4] = real0 - imag4;\n\t\tarray[index5] = (tempA + tempB) * sqrt2over2;\n\t\tarray[index6] = imag6 * 2;\n\t\tarray[index7] = (tempB - tempA) * sqrt2over2;\n\t}\n\t*/\n\t// The final passes with strides 4 and 2, combined into one loop.\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\n\t\tconst index1: number = index + 1;\n\t\tconst index2: number = index + 2;\n\t\tconst index3: number = index + 3;\n\t\t\tconst real0: number = array[index ];\n\t\tconst real1: number = array[index1] * 2;\n\t\tconst imag2: number = array[index2];\n\t\tconst imag3: number = array[index3] * 2;\n\t\tconst tempA: number = real0 + imag2;\n\t\tconst tempB: number = real0 - imag2;\n\t\t\tarray[index ] = tempA + real1;\n\t\tarray[index1] = tempA - real1;\n\t\tarray[index2] = tempB + imag3;\n\t\tarray[index3] = tempB - imag3;\n\t}\n\t\t\n\treverseIndexBits(array, fullArrayLength);\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nexport class Deque<T> {\n\tprivate _capacity: number = 1;\n\tprivate _buffer: Array<T | undefined> = [undefined];\n\tprivate _mask: number = 0;\n\tprivate _offset: number = 0;\n\tprivate _count: number = 0;\n\n\tpublic pushFront(element: T): void {\n\t\tif (this._count >= this._capacity) this._expandCapacity();\n\t\tthis._offset = (this._offset - 1) & this._mask;\n\t\tthis._buffer[this._offset] = element;\n\t\tthis._count++;\n\t}\n\tpublic pushBack(element: T): void {\n\t\tif (this._count >= this._capacity) this._expandCapacity();\n\t\tthis._buffer[(this._offset + this._count) & this._mask] = element;\n\t\tthis._count++;\n\t}\n\tpublic popFront(): T {\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\n\t\tconst element: T = <T>this._buffer[this._offset];\n\t\tthis._buffer[this._offset] = undefined;\n\t\tthis._offset = (this._offset + 1) & this._mask;\n\t\tthis._count--;\n\t\treturn element;\n\t}\n\tpublic popBack(): T {\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\n\t\tthis._count--;\n\t\tconst index: number = (this._offset + this._count) & this._mask;\n\t\tconst element: T = <T>this._buffer[index];\n\t\tthis._buffer[index] = undefined;\n\t\treturn element;\n\t}\n\tpublic peakFront(): T {\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\n\t\treturn <T>this._buffer[this._offset];\n\t}\n\tpublic peakBack(): T {\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\n\t\treturn <T>this._buffer[(this._offset + this._count - 1) & this._mask];\n\t}\n\tpublic count(): number {\n\t\treturn this._count;\n\t}\n\tpublic set(index: number, element: T): void {\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\n\t\tthis._buffer[(this._offset + index) & this._mask] = element;\n\t}\n\tpublic get(index: number): T {\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\n\t\treturn <T>this._buffer[(this._offset + index) & this._mask];\n\t}\n\tpublic remove(index: number): void {\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\n\t\tif (index <= (this._count >> 1)) {\n\t\t\twhile (index > 0) {\n\t\t\t\tthis.set(index, this.get(index - 1));\n\t\t\t\tindex--;\n\t\t\t}\n\t\t\tthis.popFront();\n\t\t} else {\n\t\t\tindex++;\n\t\t\twhile (index < this._count) {\n\t\t\t\tthis.set(index - 1, this.get(index));\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\tthis.popBack();\n\t\t}\n\t}\n\tprivate _expandCapacity(): void {\n\t\tif (this._capacity >= 0x40000000) throw new Error(\"Capacity too big.\");\n\t\tthis._capacity = this._capacity << 1;\n\t\tconst oldBuffer: Array<T | undefined> = this._buffer;\n\t\tconst newBuffer: Array<T | undefined> = new Array(this._capacity);\n\t\tconst size: number = this._count | 0;\n\t\tconst offset: number = this._offset | 0;\n\t\tfor (let i = 0; i < size; i++) {\n\t\t\tnewBuffer[i] = oldBuffer[(offset + i) & this._mask];\n\t\t}\n\t\tfor (let i = size; i < this._capacity; i++) {\n\t\t\tnewBuffer[i] = undefined;\n\t\t}\n\t\tthis._offset = 0;\n\t\tthis._buffer = newBuffer;\n\t\tthis._mask = this._capacity - 1;\n\t}\n}","//A simple events system for effectively direct links without actualy linking files or references\nclass EventManager { \n    private activeEvents:string[] = [];\n    private listeners:any = {};\n\n    constructor() {\n        this.activeEvents = [];\n        this.listeners = {};\n    }\n\n\n    public raise(eventType: string, eventData: any, extraEventData?: any): void {\n        if (this.listeners[eventType] == undefined) {\n            return;\n        }\n        this.activeEvents.push(eventType);\n        for (let i: number = 0; i < this.listeners[eventType].length; i++) {\n            this.listeners[eventType][i](eventData,extraEventData)\n        }\n        this.activeEvents.pop();\n    }\n\n    public listen(eventType:string,callback:Function): void {\n        if (this.listeners[eventType] == undefined) {\n            this.listeners[eventType] = []\n        }\n        this.listeners[eventType].push(callback)\n    }\n\n    public unlisten(eventType: string, callback: Function): void {\n        if (this.listeners[eventType] == undefined) {\n            return;\n        }\n        const lisen = this.listeners[eventType].indexOf(callback);\n        if (lisen != -1) {\n            this.listeners[eventType].splice(lisen, 1);\n        }\n    }\n    public unlistenAll(eventType: string): void {\n        if (this.listeners[eventType] == undefined) {\n            return;\n        }\n        this.listeners[eventType]=[];\n    }\n}\n\nexport const events:EventManager = new EventManager()","/*\nThis file contains code to compute digital audio filter coefficients based on\nthe desired type, cutoff frequency, and other parameters. You can use these\ncoefficients to apply the filter to audio samples. It also contains code to\nanalyze these filters, which is useful for graphically displaying their effects.\n\nAll of the filters in this file are known as \"Infinite Impulse Response\" or IIR\nfilters, because older output samples contribute feedback to newer output\nsamples and thus contribute to all future samples, although typically filters\nare design to reduce the contribution of older samples over time.\n\nLow-pass filters aka high-cut filters preserve audio signals below the cutoff\nfrequency, and attenuate audio signals above the cutoff frequency. High-pass\nfilters aka low-cut filters are the reverse. All-pass filters do not affect the\nvolume of the signal at all but induce phase changes above the cutoff frequency.\nPeak/Notch filters maintain the volume on either side of the cutoff frequency,\nbut raise or lower the volume at that frequency. \n\nThe number of old samples used in the filter determines the \"order\" of the\nfilter. First-order filters generally have shallower slopes, and second-order\nfilters generally have steeper slopes and can be configured to \"resonate\",\nmeaning they have a louder peak at the cutoff frequency. This file contains\nfirst-order filters and second-order filters, meaning one or two older samples\nare involved, as well as the current input sample.\n\nThe class FilterCoefficients is defined lower in this file. You can use it to\nset up a first order filter like this:\n\n\tconst cutoffRadiansPerSample: number = 2 * Math.PI * cutoffHz / sampleRate;\n\tconst filter: FilterCoefficients = new FilterCoefficients();\n\tfilter.lowPass1stOrderButterworth(cutoffRadiansPerSample);\n\t// output sample coefficients are conventionally called a0, a1, etc. Note\n\t// that a[0] is typically normalized to 1.0 and need not be used directly.\n\tconst a: number[] = filter.a;\n\t// input sample coefficients are conventionally called b0, b1, etc\n\tconst b: number[] = filter.b;\n\t// filter input samples, x[0] is the most recent, x[1] is the previous one, etc.\n\tconst x: number[] = [0, 0, 0];\n\t// filter output samples, y[0] will be computed by the filter based on input\n\t// samples and older output samples.\n\tconst y: number[] = [0, 0, 0];\n\nThen to apply the first-order filter to samples inside a loop, using the current\ninput sample (x[0]) as well as previous input and output samples, do this:\n\n\t// Compute the next output sample y[0]:\n\ty[0] = b[0] * x[0] + b[1] * x[1] - a[1] * y[1];\n\t// Remember the input and output samples for next time:\n\tx[1] = x[0];\n\ty[1] = y[0];\n\n2nd order filters are similar, but have more parameters and require more old\nsamples:\n\n\t// Compute the next output sample y[0]:\n\ty[0] = b[0] * x[0] + b[1] * x[1] + b[2] * x[2] - a[1] * y[1] - a[2] * y[2];\n\t// Remember the input and output samples for next time:\n\tx[2] = x[1];\n\tx[1] = x[0];\n\ty[2] = y[1];\n\ty[1] = y[0];\n\nYou can compose multiple filters into a higher order filter, although doing so\nreduces the numerical stability of the filter:\n\n\tfilter3.combination(filter1, filter2);\n\t// filter3.order will equal: filter1.order + filter2.order\n\t// The number of coefficients in filter3.a and filter3.b will be: order + 1\n\nThis file also contains a class called FrequencyResponse. You can use it to\ndetermine how much gain or attenuation a filter would apply to sounds at a\nspecific input frequency, as well as the phase offset:\n\n\tconst inputRadians: number = 2 * Math.PI * cutoffHz / sampleRate;\n\tconst response: FrequencyResponse = new FrequencyResponse();\n\tresponse.analyze(filter, inputRadians);\n\tconst gainResponse = response.magnitude();\n\tconst phaseResponse = response.angle();\n\nThat's basically all you need to know to use this code, but I'll also explain\nhow the analysis works.\n\nA first-order digital IIR filter is ordinarily implemented in a form like this:\n\n\toutput = inputCoeff * input + prevInputCoeff * prevInput - prevOutputCoeff * prevOutput;\n\nIf we adopt standard naming conventions for audio filters, this same code would\ninstead look like:\n\n\t// x0 = current input, x1 = prevInput, y0 = current output, y1 = prevOutput\n\ty0 = b0*x0 + b1*x1 - a1*y1;\n\nLeaving behind the world of code for a moment and entering the world of algebra,\nwe can rewrite this equation by moving all the output terms to the left side,\nand we can add a coefficient to the y0 term called a0 (which is typically\nnormalized to 1.0, which is why I didn't bother including it until now):\n\n\ta0*y0 + a1*y1 = b0*x0 + b1*x1\n\nThis is known as the symmetrical form of the filter, and it will help us analyze\nthe impact of the filter on an input audio signal. Here's a lesson that helped\nme understand the symmetrical form:\nhttps://web.archive.org/web/20200626183458/http://123.physics.ucdavis.edu/week_5_files/filters/digital_filter.pdf\n\nThe end of that lesson introduces a concept called the \"delay operator\" which\nlooks like \"z^-1\", which (magically) turns a sample into the previous sample\nwhen you multiply them. For example:\n\n\tx0 * z^-1 = x1\n\nThe lesson doesn't explain how it actually works. Audio signals aren't always\npredictable, which means that you generally can't do math on a single sample to\ncompute what the previous sample was. However, some audio signals ARE\npredictable, such as pure sine waves. Fortunately, all audio signals can be\nbroken down into a sum of independent sine waves. We can pick one sine wave at a\ntime, and use it to analyze the filter's impact on waves at that frequency. In\npractice, this tells us what the filter will do to unpredictable input samples\nthat contain a partial sine wave at that frequency.\n\nTechnically, you can't just use a single sine wave sample to determine the\nprevious sine wave sample, because each possible value is passed going upwards\nand downwards once per period and the direction is ambigous. This is where we\nneed to move into the complex number domain, where the real and imaginary\ncomponents can provide enough information to compute the previous position on\nthe input signal. So now instead of talking about sine waves, we're talking\nabout waves where the imaginary component is a sine wave and the real component\nis a cosine wave at the same frequency. Together, they trace around a unit\ncircle in the complex domain, and each sample is just a consistent rotation\napplied to the previous sample. The \"delay operator\" described above, z^-1, is\nthis same rotation applied in reverse, and it can be computed as:\n\n\tz^-1 = cos(radiansPerSample) - i * sin(radiansPerSample)\n\nMath nerds may be interested to know that \"Euler's formula\" was used here, but\nexplaining what that means is probably beyond the scope of this documentation\naside from noting that a complex number on the unit circle represents a 2D\nrotation that you can apply via multiplication.\n\nNow we can rewrite the symmetrical form using the delay operator and algebra:\n\n\ta0*y0 + a1*y0*z^-1 = b0*x0 + b1*x0*z^-1\n\ty0 * (a0 + a1*z^-1) = x0 * (b0 + b1*z^-1)\n\ty0 = x0 * (b0 + b1*z^-1) / (a0 + a1*z^-1)\n\ty0 / x0 = (b0 + b1*z^-1) / (a0 + a1*z^-1)\n\nThat last equation expresses the relationship between the input and output\nsignals (y0/x0) in terms of the filter coefficients and delay operator. At this\npoint, the specific values of the input and output samples don't even matter!\nThis is called the \"transfer function\", and it's conventionally named \"H(z)\":\n\n\tH(z) = (b0 + b1*z^-1) / (a0 + a1*z^-1)\n\nIf you plug in actual filter coefficients and express the delay operators as\ncomplex numbers with the appropriate trigonometry functions, the transfer\nfunction can be computed and produces a complex number that represents the\nrelationship between the input and output signals, whose magnitude represents\nthe volume gain (or attenuation) of signals at that frequency, and whose angle\nrepresents how much phase shift is applied by the filter to signals at that\nfrequency.\n\n(Note that in order to compute the transfer function, you'll need to do\nsomething about the complex number in the denominator. It turns out you can turn\nthe denominator into a real number by multiplying both the numerator and\ndenominator by the complex conjugate of the denominator, which is just the\ndenominator with the imaginary component negated.)\n\nFinally, I'll list some of the links that helped me understand filters and\nprovided some of the algorithms I that use here.\n\nHere's where I found accurate 2nd order low-pass and high-pass digital filters:\nhttps://web.archive.org/web/20120531011328/http://www.musicdsp.org/files/Audio-EQ-Cookbook.txt\n\nThis page is how I found a link to the cookbook article above. It claims these\nfilters are Butterworth filters:\nhttp://web.archive.org/web/20191213120120/https://crypto.stanford.edu/~blynn/sound/analog.html\n\nI found the first-order digital Butterworth filter coefficients at:\nhttps://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\n\nThis meta-paper helped me understand how to make 2nd order peak/notch filters:\nhttps://web.archive.org/web/20170706085655/https://www.thesounddesign.com/MIO/EQ-Coefficients.pdf\n\nBeepBox originally used simpler low-pass filters that I adapted from SFXR:\nhttps://www.drpetter.se/project_sfxr.html\nFor low cutoff frequencies, the simpler filters and the Butterworth filters are\nnearly identical, but when closer to the nyquist frequency the simpler filters\ncreate extra resonance.\n*/\n\nexport class FilterCoefficients {\n\tpublic readonly a: number[] = [1.0]; // output coefficients (negated, keep a[0]=1)\n\tpublic readonly b: number[] = [1.0]; // input coefficients\n\tpublic order: number = 0;\n\t\n\tpublic linearGain0thOrder(linearGain: number): void {\n\t\t//a[0] = 1.0; // a0 should always be normalized to 1.0, no need to assign it directly.\n\t\tthis.b[0] = linearGain;\n\t\tthis.order = 0;\n\t}\n\t\n\tpublic lowPass1stOrderButterworth(cornerRadiansPerSample: number): void {\n\t\t// First-order Butterworth low-pass filter according to:\n\t\t// https://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\n\t\t// A butterworth filter is one where the amplitude response is equal to:\n\t\t// 1 / √(1 + (freq / cutoffFreq)^(2 * order))\n\t\tconst g: number = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);\n\t\tconst a0: number = 1.0 + g;\n\t\tthis.a[1] = (1.0 - g) / a0;\n\t\tthis.b[1] = this.b[0] = 1 / a0;\n\t\tthis.order = 1;\n\t}\n\t\n\tpublic lowPass1stOrderSimplified(cornerRadiansPerSample: number): void {\n\t\t// The output of this filter is nearly identical to the 1st order\n\t\t// Butterworth low-pass above, except if the cutoff is set to nyquist/3,\n\t\t// then the output is the same as the input, and if the cutoff is higher\n\t\t// than that, then the output actually resonates at high frequencies\n\t\t// instead of attenuating.\n\t\t// I'm guessing this filter was converted from analog to digital using\n\t\t// the \"matched z-transform\" method instead of the \"bilinear transform\"\n\t\t// method. The difference is that the bilinear transform warps\n\t\t// frequencies so that the lowpass response of zero at analogue ∞hz maps\n\t\t// to the digital nyquist frequency, whereas the matched z-transform\n\t\t// preserves the frequency of the filter response but also adds the\n\t\t// reflected response from above the nyquist frequency.\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\n\t\tthis.a[1] = g - 1.0;\n\t\tthis.b[0] = g;\n\t\tthis.b[1] = 0.0;\n\t\t/*\n\t\t// Alternatively:\n\t\tconst g: number = 1.0 / (2.0 * Math.sin(cornerRadiansPerSample / 2));\n\t\tconst a0: number = g;\n\t\tthis.a[1] = (1.0 - g) / a0;\n\t\tthis.b[0] = 1.0 / a0;\n\t\tthis.b[1] = 0.0 / a0;\n\t\t*/\n\t\tthis.order = 1;\n\t}\n\t\n\tpublic highPass1stOrderButterworth(cornerRadiansPerSample: number): void {\n\t\t// First-order Butterworth high-pass filter according to:\n\t\t// https://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\n\t\tconst g: number = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);\n\t\tconst a0: number = 1.0 + g;\n\t\tthis.a[1] = (1.0 - g) / a0;\n\t\tthis.b[0] = g / a0;\n\t\tthis.b[1] = -g / a0;\n\t\tthis.order = 1;\n\t}\n\t/*\n\tpublic highPass1stOrderSimplified(cornerRadiansPerSample: number): void {\n\t\t// The output of this filter is nearly identical to the 1st order\n\t\t// Butterworth high-pass above, except it resonates when the cutoff\n\t\t// appoaches the nyquist.\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\n\t\tthis.a[1] = g - 1.0;\n\t\tthis.b[0] = 1.0;\n\t\tthis.b[1] = -1.0;\n\t\tthis.order = 1;\n\t}\n\t*/\n\tpublic highShelf1stOrder(cornerRadiansPerSample: number, shelfLinearGain: number): void {\n\t\t// I had trouble figuring this one out because I couldn't find any\n\t\t// online algorithms that I understood. There are 3 degrees of freedom\n\t\t// and I could narrow down a couple of them based on the desired gain at\n\t\t// DC and nyquist, but getting the cutoff frequency correct took a\n\t\t// little bit of trial and error in my attempts to interpret page 53 of\n\t\t// this chapter: http://www.music.mcgill.ca/~ich/classes/FiltersChap2.pdf\n\t\t// Obviously I don't fully understand the bilinear transform yet!\n\t\tconst tan: number = Math.tan(cornerRadiansPerSample * 0.5);\n\t\tconst sqrtGain: number = Math.sqrt(shelfLinearGain);\n\t\tconst g: number = (tan * sqrtGain - 1) / (tan * sqrtGain + 1.0);\n\t\tconst a0: number = 1.0;\n\t\tthis.a[1] = g / a0;\n\t\tthis.b[0] = (1.0 + g + shelfLinearGain * (1.0 - g)) / (2.0 * a0);\n\t\tthis.b[1] = (1.0 + g - shelfLinearGain * (1.0 - g)) / (2.0 * a0);\n\t\tthis.order = 1;\n\t}\n\t\n\tpublic allPass1stOrderInvertPhaseAbove(cornerRadiansPerSample: number): void {\n\t\tconst g: number = (Math.sin(cornerRadiansPerSample) - 1.0) / Math.cos(cornerRadiansPerSample);\n\t\tthis.a[1] = g;\n\t\tthis.b[0] = g;\n\t\tthis.b[1] = 1.0;\n\t\tthis.order = 1;\n\t}\n\t\n\t/*\n\t// I haven't found a practical use for this version of the all pass filter.\n\t// It seems to create a weird subharmonic when used in a delay feedback loop.\n\tpublic allPass1stOrderInvertPhaseBelow(cornerRadiansPerSample: number): void {\n\t\tconst g: number = (Math.sin(cornerRadiansPerSample) - 1.0) / Math.cos(cornerRadiansPerSample);\n\t\tthis.a[1] = g;\n\t\tthis.b[0] = -g;\n\t\tthis.b[1] = -1.0;\n\t\tthis.order = 1;\n\t}\n\t*/\n\t\n\tpublic allPass1stOrderFractionalDelay(delay: number) {\n\t\t// Very similar to allPass1stOrderInvertPhaseAbove, but configured\n\t\t// differently and for a different purpose! Useful for interpolating\n\t\t// between samples in a delay line.\n\t\tconst g: number = (1.0 - delay) / (1.0 + delay);\n\t\tthis.a[1] = g;\n\t\tthis.b[0] = g;\n\t\tthis.b[1] = 1.0;\n\t\tthis.order = 1;\n\t}\n\t\n\tpublic lowPass2ndOrderButterworth(cornerRadiansPerSample: number, peakLinearGain: number): void {\n\t\t// This is Butterworth if peakLinearGain=1/√2 according to:\n\t\t// http://web.archive.org/web/20191213120120/https://crypto.stanford.edu/~blynn/sound/analog.html\n\t\t// An interesting property is that if peakLinearGain=1/16 then the\n\t\t// output resembles a first-order lowpass at a cutoff 4 octaves lower,\n\t\t// although it gets distorted near the nyquist.\n\t\tconst alpha: number = Math.sin(cornerRadiansPerSample) / (2.0 * peakLinearGain);\n\t\tconst cos: number = Math.cos(cornerRadiansPerSample);\n\t\tconst a0: number = 1.0 + alpha;\n\t\tthis.a[1] = -2.0*cos / a0;\n\t\tthis.a[2] = (1 - alpha) / a0;\n\t\tthis.b[2] = this.b[0] = (1 - cos) / (2.0*a0);\n\t\tthis.b[1] = (1 - cos) / a0;\n\t\tthis.order = 2;\n\t}\n\t\n\tpublic lowPass2ndOrderSimplified(cornerRadiansPerSample: number, peakLinearGain: number): void {\n\t\t// This filter is adapted from the one in the SFXR source code:\n\t\t// https://www.drpetter.se/project_sfxr.html\n\t\t// The output is nearly identical to the resonant Butterworth low-pass\n\t\t// above, except it resonates too much when the cutoff appoaches the\n\t\t// nyquist. If the resonance is set to zero and the cutoff is set to\n\t\t// nyquist/3, then the output is the same as the input.\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample / 2.0);\n\t\tconst filterResonance: number = 1.0 - 1.0 / (2.0 * peakLinearGain);\n\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - g);\n\t\tthis.a[1] = 2.0*g + (g - 1.0) * g*feedback - 2.0;\n\t\tthis.a[2] = (g - 1.0) * (g - g*feedback - 1.0);\n\t\tthis.b[0] = g*g;\n\t\tthis.b[1] = 0;\n\t\tthis.b[2] = 0;\n\t\tthis.order = 2;\n\t}\n\t\n\tpublic highPass2ndOrderButterworth(cornerRadiansPerSample: number, peakLinearGain: number): void {\n\t\tconst alpha: number = Math.sin(cornerRadiansPerSample) / (2 * peakLinearGain);\n\t\tconst cos: number = Math.cos(cornerRadiansPerSample);\n\t\tconst a0: number = 1.0 + alpha;\n\t\tthis.a[1] = -2.0*cos / a0;\n\t\tthis.a[2] = (1.0 - alpha) / a0;\n\t\tthis.b[2] = this.b[0] = (1.0 + cos) / (2.0*a0);\n\t\tthis.b[1] = -(1.0 + cos) / a0;\n\t\tthis.order = 2;\n\t}\n\t/*\n\tpublic highPass2ndOrderSimplified(cornerRadiansPerSample: number, peakLinearGain: number): void {\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\n\t\tconst filterResonance: number = 1.0 - 1.0 / (2.0 * peakLinearGain);\n\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - g);\n\t\tthis.a[1] = 2.0*g + (g - 1.0) * g*feedback - 2.0;\n\t\tthis.a[2] = (g - 1.0) * (g - g*feedback - 1.0);\n\t\tthis.b[0] = 1.0;\n\t\tthis.b[1] = -2.0;\n\t\tthis.b[2] = 1.0;\n\t\tthis.order = 2;\n\t}\n\t*/\n\tpublic peak2ndOrder(cornerRadiansPerSample: number, peakLinearGain: number, bandWidthScale: number): void {\n\t\tconst sqrtGain: number = Math.sqrt(peakLinearGain);\n\t\tconst bandWidth: number = bandWidthScale * cornerRadiansPerSample / (sqrtGain >= 1 ? sqrtGain : 1/sqrtGain);\n\t\t//const bandWidth: number = bandWidthScale * cornerRadiansPerSample / Math.max(sqrtGain, 1.0);\n\t\tconst alpha: number = Math.tan(bandWidth * 0.5);\n\t\tconst a0: number = 1.0 + alpha / sqrtGain;\n\t\tthis.b[0] = (1.0 + alpha * sqrtGain) / a0;\n\t\tthis.b[1] = this.a[1] = -2.0 * Math.cos(cornerRadiansPerSample) / a0;\n\t\tthis.b[2] = (1.0 - alpha * sqrtGain) / a0;\n\t\tthis.a[2] = (1.0 - alpha / sqrtGain) / a0;\n\t\tthis.order = 2;\n\t}\n\t/*\n\t// Create a higher order filter by combining two lower order filters.\n\t// However, making high order filters in this manner results in instability.\n\t// It is recommended to apply the 2nd order filters (biquads) in sequence instead.\n\tpublic combination(filter1: FilterCoefficients, filter2: FilterCoefficients): void {\n\t\tthis.order = filter1.order + filter2.order;\n\t\tfor (let i: number = 0; i <= this.order; i++) {\n\t\t\tthis.a[i] = 0.0;\n\t\t\tthis.b[i] = 0.0;\n\t\t}\n\t\tfor (let i: number = 0; i <= filter1.order; i++) {\n\t\t\tfor (let j: number = 0; j <= filter2.order; j++) {\n\t\t\t\tthis.a[i + j] += filter1.a[i] * filter2.a[j];\n\t\t\t\tthis.b[i + j] += filter1.b[i] * filter2.b[j];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tpublic scaledDifference(other: FilterCoefficients, scale: number): void {\n\t\tif (other.order != this.order) throw new Error();\n\t\tfor (let i: number = 0; i <= this.order; i++) {\n\t\t\tthis.a[i] = (this.a[i] - other.a[i]) * scale;\n\t\t\tthis.b[i] = (this.b[i] - other.b[i]) * scale;\n\t\t}\n\t}\n\t\n\tpublic copy(other: FilterCoefficients): void {\n\t\tthis.order = other.order;\n\t\tfor (let i: number = 0; i <= this.order; i++) {\n\t\t\tthis.a[i] = other.a[i];\n\t\t\tthis.b[i] = other.b[i];\n\t\t}\n\t}\n\t*/\n}\n\nexport class FrequencyResponse {\n\tpublic real: number = 0.0;\n\tpublic imag: number = 0.0;\n\tpublic denom: number = 1.0;\n\t\n\tpublic analyze(filter: FilterCoefficients, radiansPerSample: number): void {\n\t\tthis.analyzeComplex(filter, Math.cos(radiansPerSample), Math.sin(radiansPerSample));\n\t}\n\t\n\tpublic analyzeComplex(filter: FilterCoefficients, real: number, imag: number): void {\n\t\tconst a: number[] = filter.a;\n\t\tconst b: number[] = filter.b;\n\t\tconst realZ1: number = real;\n\t\tconst imagZ1: number = -imag;\n\t\tlet realNum: number = b[0] + b[1] * realZ1;\n\t\tlet imagNum: number = b[1] * imagZ1;\n\t\tlet realDenom: number = 1.0 + a[1] * realZ1;\n\t\tlet imagDenom: number = a[1] * imagZ1;\n\t\tlet realZ: number = realZ1;\n\t\tlet imagZ: number = imagZ1;\n\t\tfor (let i: number = 2; i <= filter.order; i++) {\n\t\t\tconst realTemp: number = realZ * realZ1 - imagZ * imagZ1;\n\t\t\tconst imagTemp: number = realZ * imagZ1 + imagZ * realZ1;\n\t\t\trealZ = realTemp;\n\t\t\timagZ = imagTemp;\n\t\t\trealNum += b[i] * realZ;\n\t\t\timagNum += b[i] * imagZ;\n\t\t\trealDenom += a[i] * realZ;\n\t\t\timagDenom += a[i] * imagZ;\n\t\t}\n\t\tthis.denom = realDenom * realDenom + imagDenom * imagDenom;\n\t\tthis.real = realNum * realDenom + imagNum * imagDenom;\n\t\tthis.imag = imagNum * realDenom - realNum * imagDenom;\n\t}\n\t\n\tpublic magnitude(): number {\n\t\treturn Math.sqrt(this.real * this.real + this.imag * this.imag) / this.denom;\n\t}\n\t\n\tpublic angle(): number {\n\t\treturn Math.atan2(this.imag, this.real);\n\t}\n}\n\nexport class DynamicBiquadFilter {\n\tpublic a1: number = 0.0;\n\tpublic a2: number = 0.0;\n\tpublic b0: number = 1.0;\n\tpublic b1: number = 0.0;\n\tpublic b2: number = 0.0;\n\tpublic a1Delta: number = 0.0;\n\tpublic a2Delta: number = 0.0;\n\tpublic b0Delta: number = 0.0;\n\tpublic b1Delta: number = 0.0;\n\tpublic b2Delta: number = 0.0;\n\tpublic output1: number = 0.0;\n\tpublic output2: number = 0.0;\n\t\n\t// Some filter types are more stable when interpolating between coefficients\n\t// if the \"b\" coefficient interpolation is multiplicative. Don't enable this\n\t// for filter types where the \"b\" coefficients might change sign!\n\tpublic useMultiplicativeInputCoefficients: boolean = false;\n\t\n\tpublic resetOutput(): void {\n\t\tthis.output1 = 0.0;\n\t\tthis.output2 = 0.0;\n\t}\n\t\n\tpublic loadCoefficientsWithGradient(start: FilterCoefficients, end: FilterCoefficients, deltaRate: number, useMultiplicativeInputCoefficients: boolean): void {\n\t\tif (start.order != 2 || end.order != 2) throw new Error();\n\t\tthis.a1 = start.a[1];\n\t\tthis.a2 = start.a[2];\n\t\tthis.b0 = start.b[0];\n\t\tthis.b1 = start.b[1];\n\t\tthis.b2 = start.b[2];\n\t\tthis.a1Delta = (end.a[1] - start.a[1]) * deltaRate;\n\t\tthis.a2Delta = (end.a[2] - start.a[2]) * deltaRate;\n\t\tif (useMultiplicativeInputCoefficients) {\n\t\t\tthis.b0Delta = Math.pow(end.b[0] / start.b[0], deltaRate);\n\t\t\tthis.b1Delta = Math.pow(end.b[1] / start.b[1], deltaRate);\n\t\t\tthis.b2Delta = Math.pow(end.b[2] / start.b[2], deltaRate);\n\t\t} else {\n\t\t\tthis.b0Delta = (end.b[0] - start.b[0]) * deltaRate;\n\t\t\tthis.b1Delta = (end.b[1] - start.b[1]) * deltaRate;\n\t\t\tthis.b2Delta = (end.b[2] - start.b[2]) * deltaRate;\n\t\t}\n\t\tthis.useMultiplicativeInputCoefficients = useMultiplicativeInputCoefficients;\n\t}\n}\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { startLoadingSample, sampleLoadingState, SampleLoadingState, sampleLoadEvents, SampleLoadedEvent, SampleLoadingStatus, loadBuiltInSamples, Dictionary, DictionaryArray, toNameMap, FilterType, EnvelopeType, InstrumentType, EffectType, EnvelopeComputeIndex, Transition, Unison, Chord, Vibrato, Envelope, AutomationTarget, Config, getDrumWave, drawNoiseSpectrum, getArpeggioPitchIndex, performIntegralOld, getPulseWidthRatio, effectsIncludeTransition, effectsIncludeChord, effectsIncludePitchShift, effectsIncludeDetune, effectsIncludeVibrato, effectsIncludeNoteFilter, effectsIncludeDistortion, effectsIncludeBitcrusher, effectsIncludePanning, effectsIncludeChorus, effectsIncludeEcho, effectsIncludeReverb, OperatorWave } from \"./SynthConfig\";\nimport { Preset, EditorConfig } from \"../editor/EditorConfig\";\nimport { scaleElementsByFactor, inverseRealFourierTransform } from \"./FFT\";\nimport { Deque } from \"./Deque\";\nimport { events } from \"../global/Events\";\nimport { FilterCoefficients, FrequencyResponse, DynamicBiquadFilter } from \"./filtering\";\n\ndeclare global {\n    interface Window {\n        AudioContext: any;\n        webkitAudioContext: any;\n    }\n}\n\nconst epsilon: number = (1.0e-24); // For detecting and avoiding float denormals, which have poor performance.\n\n// For performance debugging:\n//let samplesAccumulated: number = 0;\n//let samplePerformance: number = 0;\n\nexport function clamp(min: number, max: number, val: number): number {\n    max = max - 1;\n    if (val <= max) {\n        if (val >= min) return val;\n        else return min;\n    } else {\n        return max;\n    }\n}\n\nfunction validateRange(min: number, max: number, val: number): number {\n    if (min <= val && val <= max) return val;\n    throw new Error(`Value ${val} not in range [${min}, ${max}]`);\n}\n\nexport function parseFloatWithDefault<T>(s: string, defaultValue: T): number | T {\n    let result: number | T = parseFloat(s);\n    if (Number.isNaN(result)) result = defaultValue;\n    return result;\n}\n\nexport function parseIntWithDefault<T>(s: string, defaultValue: T): number | T {\n    let result: number | T = parseInt(s);\n    if (Number.isNaN(result)) result = defaultValue;\n    return result;\n}\n\nfunction encode32BitNumber(buffer: number[], x: number): void {\n    // 0b11_\n    buffer.push(base64IntToCharCode[(x >>> (6 * 5)) & 0x3]);\n    //      111111_\n    buffer.push(base64IntToCharCode[(x >>> (6 * 4)) & 0x3f]);\n    //             111111_\n    buffer.push(base64IntToCharCode[(x >>> (6 * 3)) & 0x3f]);\n    //                    111111_\n    buffer.push(base64IntToCharCode[(x >>> (6 * 2)) & 0x3f]);\n    //                           111111_\n    buffer.push(base64IntToCharCode[(x >>> (6 * 1)) & 0x3f]);\n    //                                  111111\n    buffer.push(base64IntToCharCode[(x >>> (6 * 0)) & 0x3f]);\n}\n\n// @TODO: This is error-prone, because the caller has to remember to increment\n// charIndex by 6 afterwards.\nfunction decode32BitNumber(compressed: string, charIndex: number): number {\n    let x: number = 0;\n    // 0b11_\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 5);\n    //      111111_\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 4);\n    //             111111_\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 3);\n    //                    111111_\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 2);\n    //                           111111_\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 1);\n    //                                  111111\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 0);\n    return x;\n}\n\nfunction encodeUnisonSettings(buffer: number[], v: number, s: number, o: number, e: number, i: number): void {\n    buffer.push(base64IntToCharCode[v]);\n    \n    // logically this should be done with bitshifts... but I don't know how to do that, so\n    buffer.push(base64IntToCharCode[Number((s > 0))]);\n    let cleanS = Math.round(Math.abs(s) * 1000);\n    let cleanSDivided = Math.floor(cleanS / 63);\n    buffer.push(base64IntToCharCode[cleanS % 63], base64IntToCharCode[cleanSDivided % 63], base64IntToCharCode[Math.floor(cleanSDivided / 63)]);\n\n    buffer.push(base64IntToCharCode[Number((o > 0))]);\n    let cleanO = Math.round(Math.abs(o) * 1000);\n    let cleanODivided = Math.floor(cleanO / 63);\n    buffer.push(base64IntToCharCode[cleanO % 63], base64IntToCharCode[cleanODivided % 63], base64IntToCharCode[Math.floor(cleanODivided / 63)]);\n    \n    buffer.push(base64IntToCharCode[Number((e > 0))]);\n    let cleanE = Math.round(Math.abs(e) * 1000);\n    buffer.push(base64IntToCharCode[cleanE % 63], base64IntToCharCode[Math.floor(cleanE / 63)]);\n\n    buffer.push(base64IntToCharCode[Number((i > 0))]);\n    let cleanI = Math.round(Math.abs(i) * 1000);\n    buffer.push(base64IntToCharCode[cleanI % 63], base64IntToCharCode[Math.floor(cleanI / 63)]);\n}\n\nfunction convertLegacyKeyToKeyAndOctave(rawKeyIndex: number): [number, number] {\n    let key: number = clamp(0, Config.keys.length, rawKeyIndex);\n    let octave: number = 0;\n    // This conversion code depends on C through B being\n    // available as keys, of course.\n    if (rawKeyIndex === 12) {\n        // { name: \"C+\", isWhiteKey: false, basePitch: 24 }\n        key = 0;\n        octave = 1;\n    } else if (rawKeyIndex === 13) {\n        // { name: \"G- (actually F#-)\", isWhiteKey: false, basePitch: 6 }\n        key = 6;\n        octave = -1;\n    } else if (rawKeyIndex === 14) {\n        // { name: \"C-\", isWhiteKey: true, basePitch: 0 }\n        key = 0;\n        octave = -1;\n    } else if (rawKeyIndex === 15) {\n        // { name: \"oh no (F-)\", isWhiteKey: true, basePitch: 5 }\n        key = 5;\n        octave = -1;\n    }\n    return [key, octave];\n}\n\nconst enum CharCode {\n    SPACE = 32,\n    HASH = 35,\n    PERCENT = 37,\n    AMPERSAND = 38,\n    PLUS = 43,\n    DASH = 45,\n    DOT = 46,\n    NUM_0 = 48,\n    NUM_1 = 49,\n    NUM_2 = 50,\n    NUM_3 = 51,\n    NUM_4 = 52,\n    NUM_5 = 53,\n    NUM_6 = 54,\n    NUM_7 = 55,\n    NUM_8 = 56,\n    NUM_9 = 57,\n    EQUALS = 61,\n    A = 65,\n    B = 66,\n    C = 67,\n    D = 68,\n    E = 69,\n    F = 70,\n    G = 71,\n    H = 72,\n    I = 73,\n    J = 74,\n    K = 75,\n    L = 76,\n    M = 77,\n    N = 78,\n    O = 79,\n    P = 80,\n    Q = 81,\n    R = 82,\n    S = 83,\n    T = 84,\n    U = 85,\n    V = 86,\n    W = 87,\n    X = 88,\n    Y = 89,\n    Z = 90,\n    UNDERSCORE = 95,\n    a = 97,\n    b = 98,\n    c = 99,\n    d = 100,\n    e = 101,\n    f = 102,\n    g = 103,\n    h = 104,\n    i = 105,\n    j = 106,\n    k = 107,\n    l = 108,\n    m = 109,\n    n = 110,\n    o = 111,\n    p = 112,\n    q = 113,\n    r = 114,\n    s = 115,\n    t = 116,\n    u = 117,\n    v = 118,\n    w = 119,\n    x = 120,\n    y = 121,\n    z = 122,\n    LEFT_CURLY_BRACE = 123,\n    RIGHT_CURLY_BRACE = 125,\n}\n\nconst enum SongTagCode {\n    beatCount = CharCode.a, // added in song url version 2\n    bars = CharCode.b, // added in 2\n    vibrato = CharCode.c, // added in 2, DEPRECATED\n    fadeInOut = CharCode.d, // added in 3 for transition, switched to fadeInOut in 9\n    loopEnd = CharCode.e, // added in 2\n    eqFilter = CharCode.f, // added in 3\n    barCount = CharCode.g, // added in 3\n    unison = CharCode.h, // added in 2\n    instrumentCount = CharCode.i, // added in 3\n    patternCount = CharCode.j, // added in 3\n    key = CharCode.k, // added in 2\n    loopStart = CharCode.l, // added in 2\n    reverb = CharCode.m, // added in 5, DEPRECATED\n    channelCount = CharCode.n, // added in 6\n    channelOctave = CharCode.o, // added in 3\n    patterns = CharCode.p, // added in 2\n    effects = CharCode.q, // added in 7\n    rhythm = CharCode.r, // added in 2\n    scale = CharCode.s, // added in 2\n    tempo = CharCode.t, // added in 2\n    preset = CharCode.u, // added in 7\n    volume = CharCode.v, // added in 2\n    wave = CharCode.w, // added in 2\n    supersaw = CharCode.x, // added in BeepBox URL version 9\n\n\n    filterResonance = CharCode.y, // added in 7, DEPRECATED, [UB] repurposed for chip wave loop controls\n    drumsetEnvelopes = CharCode.z, // added in 7 for filter envelopes, still used for drumset envelopes\n    algorithm = CharCode.A, // added in 6\n    feedbackAmplitude = CharCode.B, // added in 6\n    chord = CharCode.C, // added in 7, DEPRECATED\n    detune = CharCode.D, // [JB], added in 3(?), DEPRECATED\n    envelopes = CharCode.E, // added in 6 for FM operator envelopes, repurposed in 9 for general envelopes.\n    feedbackType = CharCode.F, // added in 6\n    arpeggioSpeed = CharCode.G, // [JB], added in 3, DEPRECATED\n    harmonics = CharCode.H, // added in 7\n    stringSustain = CharCode.I, // added in 9\n\n    pan = CharCode.L, // added between 8 and 9, DEPRECATED\n    customChipWave = CharCode.M, // [JB], added in 1(?)\n    songTitle = CharCode.N, // [JB], added in 1(?)\n    limiterSettings = CharCode.O, // [JB], added in 3(?)\n\n    operatorAmplitudes = CharCode.P, // added in 6\n    operatorFrequencies = CharCode.Q, // added in 6\n    operatorWaves = CharCode.R, // [JB], added in 4\n    spectrum = CharCode.S, // added in 7\n    startInstrument = CharCode.T, // added in 6\n    channelNames = CharCode.U, // [JB], added in 4(?)\n    feedbackEnvelope = CharCode.V, // added in 6, DEPRECATED\n    pulseWidth = CharCode.W, // added in 7\n    aliases = CharCode.X, // [JB], added in 4, DEPRECATED\n\n}\n\nconst base64IntToCharCode: ReadonlyArray<number> = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 45, 95];\nconst base64CharCodeToInt: ReadonlyArray<number> = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 63, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 0, 0, 0, 0]; // 62 could be represented by either \"-\" or \".\" for historical reasons. New songs should use \"-\".\n\nclass BitFieldReader {\n    private _bits: number[] = [];\n    private _readIndex: number = 0;\n\n    constructor(source: string, startIndex: number, stopIndex: number) {\n        for (let i: number = startIndex; i < stopIndex; i++) {\n            const value: number = base64CharCodeToInt[source.charCodeAt(i)];\n            this._bits.push((value >> 5) & 0x1);\n            this._bits.push((value >> 4) & 0x1);\n            this._bits.push((value >> 3) & 0x1);\n            this._bits.push((value >> 2) & 0x1);\n            this._bits.push((value >> 1) & 0x1);\n            this._bits.push(value & 0x1);\n        }\n    }\n\n    public read(bitCount: number): number {\n        let result: number = 0;\n        while (bitCount > 0) {\n            result = result << 1;\n            result += this._bits[this._readIndex++];\n            bitCount--;\n        }\n        return result;\n    }\n\n    public readLongTail(minValue: number, minBits: number): number {\n        let result: number = minValue;\n        let numBits: number = minBits;\n        while (this._bits[this._readIndex++]) {\n            result += 1 << numBits;\n            numBits++;\n        }\n        while (numBits > 0) {\n            numBits--;\n            if (this._bits[this._readIndex++]) {\n                result += 1 << numBits;\n            }\n        }\n        return result;\n    }\n\n    public readPartDuration(): number {\n        return this.readLongTail(1, 3);\n    }\n\n    public readLegacyPartDuration(): number {\n        return this.readLongTail(1, 2);\n    }\n\n    public readPinCount(): number {\n        return this.readLongTail(1, 0);\n    }\n\n    public readPitchInterval(): number {\n        if (this.read(1)) {\n            return -this.readLongTail(1, 3);\n        } else {\n            return this.readLongTail(1, 3);\n        }\n    }\n}\n\nclass BitFieldWriter {\n    private _index: number = 0;\n    private _bits: number[] = [];\n\n    public clear() {\n        this._index = 0;\n    }\n\n    public write(bitCount: number, value: number): void {\n        bitCount--;\n        while (bitCount >= 0) {\n            this._bits[this._index++] = (value >>> bitCount) & 1;\n            bitCount--;\n        }\n    }\n\n    public writeLongTail(minValue: number, minBits: number, value: number): void {\n        if (value < minValue) throw new Error(\"value out of bounds\");\n        value -= minValue;\n        let numBits: number = minBits;\n        while (value >= (1 << numBits)) {\n            this._bits[this._index++] = 1;\n            value -= 1 << numBits;\n            numBits++;\n        }\n        this._bits[this._index++] = 0;\n        while (numBits > 0) {\n            numBits--;\n            this._bits[this._index++] = (value >>> numBits) & 1;\n        }\n    }\n\n    public writePartDuration(value: number): void {\n        this.writeLongTail(1, 3, value);\n    }\n\n    public writePinCount(value: number): void {\n        this.writeLongTail(1, 0, value);\n    }\n\n    public writePitchInterval(value: number): void {\n        if (value < 0) {\n            this.write(1, 1); // sign\n            this.writeLongTail(1, 3, -value);\n        } else {\n            this.write(1, 0); // sign\n            this.writeLongTail(1, 3, value);\n        }\n    }\n\n    public concat(other: BitFieldWriter): void {\n        for (let i: number = 0; i < other._index; i++) {\n            this._bits[this._index++] = other._bits[i];\n        }\n    }\n\n    public encodeBase64(buffer: number[]): number[] {\n\n        for (let i: number = 0; i < this._index; i += 6) {\n            const value: number = (this._bits[i] << 5) | (this._bits[i + 1] << 4) | (this._bits[i + 2] << 3) | (this._bits[i + 3] << 2) | (this._bits[i + 4] << 1) | this._bits[i + 5];\n            buffer.push(base64IntToCharCode[value]);\n        }\n        return buffer;\n    }\n\n    public lengthBase64(): number {\n        return Math.ceil(this._index / 6);\n    }\n}\n\nexport interface NotePin {\n    interval: number;\n    time: number;\n    size: number;\n}\n\nexport function makeNotePin(interval: number, time: number, size: number): NotePin {\n    return { interval: interval, time: time, size: size };\n}\n\nexport class Note {\n    public pitches: number[];\n    public pins: NotePin[];\n    public start: number;\n    public end: number;\n    public continuesLastPattern: boolean;\n\n    public constructor(pitch: number, start: number, end: number, size: number, fadeout: boolean = false) {\n        this.pitches = [pitch];\n        this.pins = [makeNotePin(0, 0, size), makeNotePin(0, end - start, fadeout ? 0 : size)];\n        this.start = start;\n        this.end = end;\n        this.continuesLastPattern = false;\n    }\n\n    public pickMainInterval(): number {\n        let longestFlatIntervalDuration: number = 0;\n        let mainInterval: number = 0;\n        for (let pinIndex: number = 1; pinIndex < this.pins.length; pinIndex++) {\n            const pinA: NotePin = this.pins[pinIndex - 1];\n            const pinB: NotePin = this.pins[pinIndex];\n            if (pinA.interval == pinB.interval) {\n                const duration: number = pinB.time - pinA.time;\n                if (longestFlatIntervalDuration < duration) {\n                    longestFlatIntervalDuration = duration;\n                    mainInterval = pinA.interval;\n                }\n            }\n        }\n        if (longestFlatIntervalDuration == 0) {\n            let loudestSize: number = 0;\n            for (let pinIndex: number = 0; pinIndex < this.pins.length; pinIndex++) {\n                const pin: NotePin = this.pins[pinIndex];\n                if (loudestSize < pin.size) {\n                    loudestSize = pin.size;\n                    mainInterval = pin.interval;\n                }\n            }\n        }\n        return mainInterval;\n    }\n\n    public clone(): Note {\n        const newNote: Note = new Note(-1, this.start, this.end, 3);\n        newNote.pitches = this.pitches.concat();\n        newNote.pins = [];\n        for (const pin of this.pins) {\n            newNote.pins.push(makeNotePin(pin.interval, pin.time, pin.size));\n        }\n        newNote.continuesLastPattern = this.continuesLastPattern;\n        return newNote;\n    }\n\n    public getEndPinIndex(part: number): number {\n        let endPinIndex: number;\n        for (endPinIndex = 1; endPinIndex < this.pins.length - 1; endPinIndex++) {\n            if (this.pins[endPinIndex].time + this.start > part) break;\n        }\n        return endPinIndex;\n    }\n}\n\nexport class Pattern {\n    public notes: Note[] = [];\n    public readonly instruments: number[] = [0];\n\n    public cloneNotes(): Note[] {\n        const result: Note[] = [];\n        for (const note of this.notes) {\n            result.push(note.clone());\n        }\n        return result;\n    }\n\n    public reset(): void {\n        this.notes.length = 0;\n        this.instruments[0] = 0;\n        this.instruments.length = 1;\n    }\n\n    public toJsonObject(song: Song, channel: Channel, isModChannel: boolean): any {\n        const noteArray: Object[] = [];\n        for (const note of this.notes) {\n            // Only one ins per pattern is enforced in mod channels.\n            let instrument: Instrument = channel.instruments[this.instruments[0]];\n            let mod: number = Math.max(0, Config.modCount - note.pitches[0] - 1);\n            let volumeCap: number = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);\n            const pointArray: Object[] = [];\n            for (const pin of note.pins) {\n                let useVol: number = isModChannel ? Math.round(pin.size) : Math.round(pin.size * 100 / volumeCap);\n                pointArray.push({\n                    \"tick\": (pin.time + note.start) * Config.rhythms[song.rhythm].stepsPerBeat / Config.partsPerBeat,\n                    \"pitchBend\": pin.interval,\n                    \"volume\": useVol,\n                    \"forMod\": isModChannel,\n                });\n            }\n\n            const noteObject: any = {\n                \"pitches\": note.pitches,\n                \"points\": pointArray,\n            };\n            if (note.start == 0) {\n                noteObject[\"continuesLastPattern\"] = note.continuesLastPattern;\n            }\n            noteArray.push(noteObject);\n        }\n\n        const patternObject: any = { \"notes\": noteArray };\n        if (song.patternInstruments) {\n            patternObject[\"instruments\"] = this.instruments.map(i => i + 1);\n        }\n        return patternObject;\n    }\n\n    public fromJsonObject(patternObject: any, song: Song, channel: Channel, importedPartsPerBeat: number, isNoiseChannel: boolean, isModChannel: boolean): void {\n        if (song.patternInstruments) {\n            if (Array.isArray(patternObject[\"instruments\"])) {\n                const instruments: any[] = patternObject[\"instruments\"];\n                const instrumentCount: number = clamp(Config.instrumentCountMin, song.getMaxInstrumentsPerPatternForChannel(channel) + 1, instruments.length);\n                for (let j: number = 0; j < instrumentCount; j++) {\n                    this.instruments[j] = clamp(0, channel.instruments.length, (instruments[j] | 0) - 1);\n                }\n                this.instruments.length = instrumentCount;\n            } else {\n                this.instruments[0] = clamp(0, channel.instruments.length, (patternObject[\"instrument\"] | 0) - 1);\n                this.instruments.length = 1;\n            }\n        }\n\n        if (patternObject[\"notes\"] && patternObject[\"notes\"].length > 0) {\n            const maxNoteCount: number = Math.min(song.beatsPerBar * Config.partsPerBeat * (isModChannel ? Config.modCount : 1), patternObject[\"notes\"].length >>> 0);\n\n            // TODO: Consider supporting notes specified in any timing order, sorting them and truncating as necessary.\n            //let tickClock: number = 0;\n            for (let j: number = 0; j < patternObject[\"notes\"].length; j++) {\n                if (j >= maxNoteCount) break;\n\n                const noteObject = patternObject[\"notes\"][j];\n                if (!noteObject || !noteObject[\"pitches\"] || !(noteObject[\"pitches\"].length >= 1) || !noteObject[\"points\"] || !(noteObject[\"points\"].length >= 2)) {\n                    continue;\n                }\n\n                const note: Note = new Note(0, 0, 0, 0);\n                note.pitches = [];\n                note.pins = [];\n\n                for (let k: number = 0; k < noteObject[\"pitches\"].length; k++) {\n                    const pitch: number = noteObject[\"pitches\"][k] | 0;\n                    if (note.pitches.indexOf(pitch) != -1) continue;\n                    note.pitches.push(pitch);\n                    if (note.pitches.length >= Config.maxChordSize) break;\n                }\n                if (note.pitches.length < 1) continue;\n\n                //let noteClock: number = tickClock;\n                let startInterval: number = 0;\n                for (let k: number = 0; k < noteObject[\"points\"].length; k++) {\n                    const pointObject: any = noteObject[\"points\"][k];\n                    if (pointObject == undefined || pointObject[\"tick\"] == undefined) continue;\n                    const interval: number = (pointObject[\"pitchBend\"] == undefined) ? 0 : (pointObject[\"pitchBend\"] | 0);\n\n                    const time: number = Math.round((+pointObject[\"tick\"]) * Config.partsPerBeat / importedPartsPerBeat);\n\n                    let instrument: Instrument = channel.instruments[this.instruments[0]];\n                    let mod: number = Math.max(0, Config.modCount - note.pitches[0] - 1);\n\n                    // Only one instrument per pattern allowed in mod channels.\n                    let volumeCap: number = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);\n\n                    // The strange volume formula used for notes is not needed for mods. Some rounding errors were possible.\n                    // A \"forMod\" signifier was added to new JSON export to detect when the higher precision export was used in a file.\n                    let size: number;\n                    if (pointObject[\"volume\"] == undefined) {\n                        size = volumeCap;\n                    } else if (pointObject[\"forMod\"] == undefined) {\n                        size = Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\n                    }\n                    else {\n                        size = ((pointObject[\"forMod\"] | 0) > 0) ? Math.round(pointObject[\"volume\"] | 0) : Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\n                    }\n\n                    if (time > song.beatsPerBar * Config.partsPerBeat) continue;\n                    if (note.pins.length == 0) {\n                        //if (time < noteClock) continue;\n                        note.start = time;\n                        startInterval = interval;\n                    } else {\n                        //if (time <= noteClock) continue;\n                    }\n                    //noteClock = time;\n\n                    note.pins.push(makeNotePin(interval - startInterval, time - note.start, size));\n                }\n                if (note.pins.length < 2) continue;\n\n                note.end = note.pins[note.pins.length - 1].time + note.start;\n\n                const maxPitch: number = isNoiseChannel ? Config.drumCount - 1 : Config.maxPitch;\n                let lowestPitch: number = maxPitch;\n                let highestPitch: number = 0;\n                for (let k: number = 0; k < note.pitches.length; k++) {\n                    note.pitches[k] += startInterval;\n                    if (note.pitches[k] < 0 || note.pitches[k] > maxPitch) {\n                        note.pitches.splice(k, 1);\n                        k--;\n                    }\n                    if (note.pitches[k] < lowestPitch) lowestPitch = note.pitches[k];\n                    if (note.pitches[k] > highestPitch) highestPitch = note.pitches[k];\n                }\n                if (note.pitches.length < 1) continue;\n\n                for (let k: number = 0; k < note.pins.length; k++) {\n                    const pin: NotePin = note.pins[k];\n                    if (pin.interval + lowestPitch < 0) pin.interval = -lowestPitch;\n                    if (pin.interval + highestPitch > maxPitch) pin.interval = maxPitch - highestPitch;\n                    if (k >= 2) {\n                        if (pin.interval == note.pins[k - 1].interval &&\n                            pin.interval == note.pins[k - 2].interval &&\n                            pin.size == note.pins[k - 1].size &&\n                            pin.size == note.pins[k - 2].size) {\n                            note.pins.splice(k - 1, 1);\n                            k--;\n                        }\n                    }\n                }\n\n                if (note.start == 0) {\n                    note.continuesLastPattern = (noteObject[\"continuesLastPattern\"] === true);\n                } else {\n                    note.continuesLastPattern = false;\n                }\n\n                this.notes.push(note);\n            }\n        }\n    }\n}\n\nexport class Operator {\n    public frequency: number = 4;\n    public amplitude: number = 0;\n    public waveform: number = 0;\n    public pulseWidth: number = 0.5;\n\n    constructor(index: number) {\n        this.reset(index);\n    }\n\n    public reset(index: number): void {\n        this.frequency = 4; //defualt to 1x\n        this.amplitude = (index <= 1) ? Config.operatorAmplitudeMax : 0;\n        this.waveform = 0;\n        this.pulseWidth = 5;\n    }\n\n    public copy(other: Operator): void {\n        this.frequency = other.frequency;\n        this.amplitude = other.amplitude;\n        this.waveform = other.waveform;\n        this.pulseWidth = other.pulseWidth;\n    }\n}\n\nexport class CustomAlgorithm {\n    public name: string = \"\";\n    public carrierCount: number = 0;\n    public modulatedBy: number[][] = [[], [], [], [], [], []];\n    public associatedCarrier: number[] = [];\n\n    constructor(){\n        this.fromPreset(1);\n    }\n\n    public set(carriers: number, modulation: number[][]) {\n        this.reset();\n        this.carrierCount = carriers;\n        for (let i = 0; i < this.modulatedBy.length; i++) {\n            this.modulatedBy[i] = modulation[i];\n            if (i < carriers) {\n                this.associatedCarrier[i] = i+1;\n            }\n            this.name += (i+1);\n            for (let j = 0; j < modulation[i].length;j++) {\n                this.name += modulation[i][j];\n                if (modulation[i][j] > carriers-1) {\n                    this.associatedCarrier[modulation[i][j] - 1] = i + 1;\n                }\n                this.name += \",\";\n            }\n            if (i < carriers) {\n                this.name += \"|\";\n            } else {\n                this.name += \".\";\n            }\n        }\n    }\n\n    public reset(): void {\n        this.name = \"\"\n        this.carrierCount = 1;\n        this.modulatedBy = [[2, 3, 4, 5, 6], [], [], [], [], []];\n        this.associatedCarrier = [1, 1, 1, 1, 1, 1];\n    }\n\n    public copy(other: CustomAlgorithm): void {\n        this.name = other.name;\n        this.carrierCount = other.carrierCount;\n        this.modulatedBy = other.modulatedBy;\n        this.associatedCarrier = other.associatedCarrier;\n    }\n\n    public fromPreset(other: number): void {\n        this.reset();\n        let preset = Config.algorithms6Op[other]\n        this.name = preset.name;\n        this.carrierCount = preset.carrierCount;\n        for (var i = 0; i < preset.modulatedBy.length; i++) {\n            this.modulatedBy[i] = Array.from(preset.modulatedBy[i]);\n            this.associatedCarrier[i] = preset.associatedCarrier[i];\n        }\n    }\n}\n\nexport class CustomFeedBack { //feels redunant\n    public name: string = \"\";\n    public indices: number[][] = [[], [], [], [], [], []];\n\n    constructor() {\n        this.fromPreset(1);\n    }\n\n    public set(inIndices: number[][]) {\n        this.reset();\n        for (let i = 0; i < this.indices.length; i++) {\n            this.indices[i] = inIndices[i];\n            for (let j = 0; j < inIndices[i].length; j++) {\n                this.name += inIndices[i][j];\n                this.name += \",\";\n            }\n            this.name += \".\";\n        }\n    }\n\n    public reset(): void {\n        this.reset;\n        this.name = \"\";\n        this.indices = [[1], [], [], [], [], []];\n    }\n\n    public copy(other: CustomFeedBack): void {\n        this.name = other.name;\n        this.indices = other.indices;\n    }\n\n    public fromPreset(other: number): void {\n        this.reset();\n        let preset = Config.feedbacks6Op[other]\n        for (var i = 0; i < preset.indices.length; i++) {\n            this.indices[i] = Array.from(preset.indices[i]);\n            for (let j = 0; j < preset.indices[i].length; j++) {\n                this.name += preset.indices[i][j];\n                this.name += \",\";\n            }\n            this.name += \".\";\n        }\n    }\n}\n\nexport class SpectrumWave {\n    public spectrum: number[] = [];\n    public hash: number = -1;\n\n    constructor(isNoiseChannel: boolean) {\n        this.reset(isNoiseChannel);\n    }\n\n    public reset(isNoiseChannel: boolean): void {\n        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n            if (isNoiseChannel) {\n                this.spectrum[i] = Math.round(Config.spectrumMax * (1 / Math.sqrt(1 + i / 3)));\n            } else {\n                const isHarmonic: boolean = i == 0 || i == 7 || i == 11 || i == 14 || i == 16 || i == 18 || i == 21 || i == 23 || i >= 25;\n                this.spectrum[i] = isHarmonic ? Math.max(0, Math.round(Config.spectrumMax * (1 - i / 30))) : 0;\n            }\n        }\n        this.markCustomWaveDirty();\n    }\n\n    public markCustomWaveDirty(): void {\n        const hashMult: number = Synth.fittingPowerOfTwo(Config.spectrumMax + 2) - 1;\n        let hash: number = 0;\n        for (const point of this.spectrum) hash = ((hash * hashMult) + point) >>> 0;\n        this.hash = hash;\n    }\n}\n\nclass SpectrumWaveState {\n    public wave: Float32Array | null = null;\n    private _hash: number = -1;\n\n    public getCustomWave(settings: SpectrumWave, lowestOctave: number): Float32Array {\n        if (this._hash == settings.hash) return this.wave!;\n        this._hash = settings.hash;\n\n        const waveLength: number = Config.spectrumNoiseLength;\n        if (this.wave == null || this.wave.length != waveLength + 1) {\n            this.wave = new Float32Array(waveLength + 1);\n        }\n        const wave: Float32Array = this.wave;\n\n        for (let i: number = 0; i < waveLength; i++) {\n            wave[i] = 0;\n        }\n\n        const highestOctave: number = 14;\n        const falloffRatio: number = 0.25;\n        // Nudge the 2/7 and 4/7 control points so that they form harmonic intervals.\n        const pitchTweak: number[] = [0, 1 / 7, Math.log2(5 / 4), 3 / 7, Math.log2(3 / 2), 5 / 7, 6 / 7];\n        function controlPointToOctave(point: number): number {\n            return lowestOctave + Math.floor(point / Config.spectrumControlPointsPerOctave) + pitchTweak[(point + Config.spectrumControlPointsPerOctave) % Config.spectrumControlPointsPerOctave];\n        }\n\n        let combinedAmplitude: number = 1;\n        for (let i: number = 0; i < Config.spectrumControlPoints + 1; i++) {\n            const value1: number = (i <= 0) ? 0 : settings.spectrum[i - 1];\n            const value2: number = (i >= Config.spectrumControlPoints) ? settings.spectrum[Config.spectrumControlPoints - 1] : settings.spectrum[i];\n            const octave1: number = controlPointToOctave(i - 1);\n            let octave2: number = controlPointToOctave(i);\n            if (i >= Config.spectrumControlPoints) octave2 = highestOctave + (octave2 - highestOctave) * falloffRatio;\n            if (value1 == 0 && value2 == 0) continue;\n\n            combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, octave1, octave2, value1 / Config.spectrumMax, value2 / Config.spectrumMax, -0.5);\n        }\n        if (settings.spectrum[Config.spectrumControlPoints - 1] > 0) {\n            combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, highestOctave + (controlPointToOctave(Config.spectrumControlPoints) - highestOctave) * falloffRatio, highestOctave, settings.spectrum[Config.spectrumControlPoints - 1] / Config.spectrumMax, 0, -0.5);\n        }\n\n        inverseRealFourierTransform(wave, waveLength);\n        scaleElementsByFactor(wave, 5.0 / (Math.sqrt(waveLength) * Math.pow(combinedAmplitude, 0.75)));\n\n        // Duplicate the first sample at the end for easier wrap-around interpolation.\n        wave[waveLength] = wave[0];\n\n        return wave;\n    }\n}\n\nexport class HarmonicsWave {\n    public harmonics: number[] = [];\n    public hash: number = -1;\n\n    constructor() {\n        this.reset();\n    }\n\n    public reset(): void {\n        for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n            this.harmonics[i] = 0;\n        }\n        this.harmonics[0] = Config.harmonicsMax;\n        this.harmonics[3] = Config.harmonicsMax;\n        this.harmonics[6] = Config.harmonicsMax;\n        this.markCustomWaveDirty();\n    }\n\n    public markCustomWaveDirty(): void {\n        const hashMult: number = Synth.fittingPowerOfTwo(Config.harmonicsMax + 2) - 1;\n        let hash: number = 0;\n        for (const point of this.harmonics) hash = ((hash * hashMult) + point) >>> 0;\n        this.hash = hash;\n    }\n}\n\nclass HarmonicsWaveState {\n    public wave: Float32Array | null = null;\n    private _hash: number = -1;\n    private _generatedForType: InstrumentType;\n\n    public getCustomWave(settings: HarmonicsWave, instrumentType: InstrumentType): Float32Array {\n        if (this._hash == settings.hash && this._generatedForType == instrumentType) return this.wave!;\n        this._hash = settings.hash;\n        this._generatedForType = instrumentType;\n\n        const harmonicsRendered: number = (instrumentType == InstrumentType.pickedString) ? Config.harmonicsRenderedForPickedString : Config.harmonicsRendered;\n\n        const waveLength: number = Config.harmonicsWavelength;\n        const retroWave: Float32Array = getDrumWave(0, null, null);\n\n        if (this.wave == null || this.wave.length != waveLength + 1) {\n            this.wave = new Float32Array(waveLength + 1);\n        }\n        const wave: Float32Array = this.wave;\n\n        for (let i: number = 0; i < waveLength; i++) {\n            wave[i] = 0;\n        }\n\n        const overallSlope: number = -0.25;\n        let combinedControlPointAmplitude: number = 1;\n\n        for (let harmonicIndex: number = 0; harmonicIndex < harmonicsRendered; harmonicIndex++) {\n            const harmonicFreq: number = harmonicIndex + 1;\n            let controlValue: number = harmonicIndex < Config.harmonicsControlPoints ? settings.harmonics[harmonicIndex] : settings.harmonics[Config.harmonicsControlPoints - 1];\n            if (harmonicIndex >= Config.harmonicsControlPoints) {\n                controlValue *= 1 - (harmonicIndex - Config.harmonicsControlPoints) / (harmonicsRendered - Config.harmonicsControlPoints);\n            }\n            const normalizedValue: number = controlValue / Config.harmonicsMax;\n            let amplitude: number = Math.pow(2, controlValue - Config.harmonicsMax + 1) * Math.sqrt(normalizedValue);\n            if (harmonicIndex < Config.harmonicsControlPoints) {\n                combinedControlPointAmplitude += amplitude;\n            }\n            amplitude *= Math.pow(harmonicFreq, overallSlope);\n\n            // Multiply all the sine wave amplitudes by 1 or -1 based on the LFSR\n            // retro wave (effectively random) to avoid egregiously tall spikes.\n            amplitude *= retroWave[harmonicIndex + 589];\n\n            wave[waveLength - harmonicFreq] = amplitude;\n        }\n\n        inverseRealFourierTransform(wave, waveLength);\n\n        // Limit the maximum wave amplitude.\n        const mult: number = 1 / Math.pow(combinedControlPointAmplitude, 0.7);\n        for (let i: number = 0; i < wave.length; i++) wave[i] *= mult;\n\n        performIntegralOld(wave);\n\n        // The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\n        wave[waveLength] = wave[0];\n\n        return wave;\n    }\n}\n\nexport class FilterControlPoint {\n    public freq: number = 0;\n    public gain: number = Config.filterGainCenter;\n    public type: FilterType = FilterType.peak;\n\n    public set(freqSetting: number, gainSetting: number): void {\n        this.freq = freqSetting;\n        this.gain = gainSetting;\n    }\n\n    public getHz(): number {\n        return FilterControlPoint.getHzFromSettingValue(this.freq);\n    }\n\n    public static getHzFromSettingValue(value: number): number {\n        return Config.filterFreqReferenceHz * Math.pow(2.0, (value - Config.filterFreqReferenceSetting) * Config.filterFreqStep);\n    }\n    public static getSettingValueFromHz(hz: number): number {\n        return Math.log2(hz / Config.filterFreqReferenceHz) / Config.filterFreqStep + Config.filterFreqReferenceSetting;\n    }\n    public static getRoundedSettingValueFromHz(hz: number): number {\n        return Math.max(0, Math.min(Config.filterFreqRange - 1, Math.round(FilterControlPoint.getSettingValueFromHz(hz))));\n    }\n\n    public getLinearGain(peakMult: number = 1.0): number {\n        const power: number = (this.gain - Config.filterGainCenter) * Config.filterGainStep;\n        const neutral: number = (this.type == FilterType.peak) ? 0.0 : -0.5;\n        const interpolatedPower: number = neutral + (power - neutral) * peakMult;\n        return Math.pow(2.0, interpolatedPower);\n    }\n    public static getRoundedSettingValueFromLinearGain(linearGain: number): number {\n        return Math.max(0, Math.min(Config.filterGainRange - 1, Math.round(Math.log2(linearGain) / Config.filterGainStep + Config.filterGainCenter)));\n    }\n\n    public toCoefficients(filter: FilterCoefficients, sampleRate: number, freqMult: number = 1.0, peakMult: number = 1.0): void {\n        const cornerRadiansPerSample: number = 2.0 * Math.PI * Math.max(Config.filterFreqMinHz, Math.min(Config.filterFreqMaxHz, freqMult * this.getHz())) / sampleRate;\n        const linearGain: number = this.getLinearGain(peakMult);\n        switch (this.type) {\n            case FilterType.lowPass:\n                filter.lowPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);\n                break;\n            case FilterType.highPass:\n                filter.highPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);\n                break;\n            case FilterType.peak:\n                filter.peak2ndOrder(cornerRadiansPerSample, linearGain, 1.0);\n                break;\n            default:\n                throw new Error();\n        }\n    }\n\n    public getVolumeCompensationMult(): number {\n        const octave: number = (this.freq - Config.filterFreqReferenceSetting) * Config.filterFreqStep;\n        const gainPow: number = (this.gain - Config.filterGainCenter) * Config.filterGainStep;\n        switch (this.type) {\n            case FilterType.lowPass:\n                const freqRelativeTo8khz: number = Math.pow(2.0, octave) * Config.filterFreqReferenceHz / 8000.0;\n                // Reverse the frequency warping from importing legacy simplified filters to imitate how the legacy filter cutoff setting affected volume.\n                const warpedFreq: number = (Math.sqrt(1.0 + 4.0 * freqRelativeTo8khz) - 1.0) / 2.0;\n                const warpedOctave: number = Math.log2(warpedFreq);\n                return Math.pow(0.5, 0.2 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, Math.max(-3.0, 0.595 * warpedOctave + 0.35 * Math.min(0.0, gainPow + 1.0))));\n            case FilterType.highPass:\n                return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, 0.3 * (-octave - Math.log2(Config.filterFreqReferenceHz / 125.0)) + 0.2 * Math.min(0.0, gainPow + 1.0)));\n            case FilterType.peak:\n                const distanceFromCenter: number = octave + Math.log2(Config.filterFreqReferenceHz / 2000.0);\n                const freqLoudness: number = Math.pow(1.0 / (1.0 + Math.pow(distanceFromCenter / 3.0, 2.0)), 2.0);\n                return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow) + 0.1 * freqLoudness * Math.min(0.0, gainPow));\n            default:\n                throw new Error();\n        }\n    }\n}\n\nexport class FilterSettings {\n    public readonly controlPoints: FilterControlPoint[] = [];\n    public controlPointCount: number = 0;\n\n    constructor() {\n        this.reset();\n    }\n\n    reset(): void {\n        this.controlPointCount = 0;\n    }\n\n    addPoint(type: FilterType, freqSetting: number, gainSetting: number): void {\n        let controlPoint: FilterControlPoint;\n        if (this.controlPoints.length <= this.controlPointCount) {\n            controlPoint = new FilterControlPoint();\n            this.controlPoints[this.controlPointCount] = controlPoint;\n        } else {\n            controlPoint = this.controlPoints[this.controlPointCount];\n        }\n        this.controlPointCount++;\n        controlPoint.type = type;\n        controlPoint.set(freqSetting, gainSetting);\n    }\n\n    public toJsonObject(): Object {\n        const filterArray: any[] = [];\n        for (let i: number = 0; i < this.controlPointCount; i++) {\n            const point: FilterControlPoint = this.controlPoints[i];\n            filterArray.push({\n                \"type\": Config.filterTypeNames[point.type],\n                \"cutoffHz\": Math.round(point.getHz() * 100) / 100,\n                \"linearGain\": Math.round(point.getLinearGain() * 10000) / 10000,\n            });\n        }\n        return filterArray;\n    }\n\n    public fromJsonObject(filterObject: any): void {\n        this.controlPoints.length = 0;\n        if (filterObject) {\n            for (const pointObject of filterObject) {\n                const point: FilterControlPoint = new FilterControlPoint();\n                point.type = Config.filterTypeNames.indexOf(pointObject[\"type\"]);\n                if (<any>point.type == -1) point.type = FilterType.peak;\n                if (pointObject[\"cutoffHz\"] != undefined) {\n                    point.freq = FilterControlPoint.getRoundedSettingValueFromHz(pointObject[\"cutoffHz\"]);\n                } else {\n                    point.freq = 0;\n                }\n                if (pointObject[\"linearGain\"] != undefined) {\n                    point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(pointObject[\"linearGain\"]);\n                } else {\n                    point.gain = Config.filterGainCenter;\n                }\n                this.controlPoints.push(point);\n            }\n        }\n        this.controlPointCount = this.controlPoints.length;\n    }\n\n    // Returns true if all filter control points match in number and type (but not freq/gain)\n    public static filtersCanMorph(filterA: FilterSettings, filterB: FilterSettings): boolean {\n        if (filterA.controlPointCount != filterB.controlPointCount)\n            return false;\n        for (let i: number = 0; i < filterA.controlPointCount; i++) {\n            if (filterA.controlPoints[i].type != filterB.controlPoints[i].type)\n                return false;\n        }\n        return true;\n    }\n\n    // Interpolate two FilterSettings, where pos=0 is filterA and pos=1 is filterB\n    public static lerpFilters(filterA: FilterSettings, filterB: FilterSettings, pos: number): FilterSettings {\n\n        let lerpedFilter: FilterSettings = new FilterSettings();\n\n        // One setting or another is null, return the other.\n        if (filterA == null) {\n            return filterA;\n        }\n        if (filterB == null) {\n            return filterB;\n        }\n\n        pos = Math.max(0, Math.min(1, pos));\n\n        // Filter control points match in number and type\n        if (this.filtersCanMorph(filterA, filterB)) {\n            for (let i: number = 0; i < filterA.controlPointCount; i++) {\n                lerpedFilter.controlPoints[i] = new FilterControlPoint();\n                lerpedFilter.controlPoints[i].type = filterA.controlPoints[i].type;\n                lerpedFilter.controlPoints[i].freq = filterA.controlPoints[i].freq + (filterB.controlPoints[i].freq - filterA.controlPoints[i].freq) * pos;\n                lerpedFilter.controlPoints[i].gain = filterA.controlPoints[i].gain + (filterB.controlPoints[i].gain - filterA.controlPoints[i].gain) * pos;\n            }\n\n            lerpedFilter.controlPointCount = filterA.controlPointCount;\n\n            return lerpedFilter;\n        }\n        else {\n            // Not allowing morph of unmatching filters for now. It's a hornet's nest of problems, and I had it implemented and mostly working and it didn't sound very interesting since the shape becomes \"mushy\" in between\n            return (pos >= 1) ? filterB : filterA;\n        }\n        /* \n        // Filter control points do not match. Take all filterA points and move them to neutral at pos=1 (gain 7 for normal points, slide to edge and gain 7 for lo/hipass),\n        // and do the opposite for filterB points. Return a filter with points for both.\n        else {\n            let lerpedFilter: FilterSettings = new FilterSettings();\n            // Filter A's morph points\n            for (let i: number = 0; i < filterA.controlPointCount; i++) {\n                lerpedFilter.controlPoints[i] = new FilterControlPoint();\n                lerpedFilter.controlPoints[i].type = filterA.controlPoints[i].type;\n                lerpedFilter.controlPoints[i].gain = filterA.controlPoints[i].gain + (Config.filterGainCenter - filterA.controlPoints[i].gain) * pos;\n\n                if (filterA.controlPoints[i].type == FilterType.peak) {\n                    lerpedFilter.controlPoints[i].freq = filterA.controlPoints[i].freq;\n                }\n                else if (filterA.controlPoints[i].type == FilterType.highPass) {\n                    lerpedFilter.controlPoints[i].freq = filterA.controlPoints[i].freq * (1 - pos);\n                }\n                else {\n                    lerpedFilter.controlPoints[i].freq = filterA.controlPoints[i].freq + ((Config.filterFreqRange - 1) - filterA.controlPoints[i].freq) * pos;\n                }\n            }\n            // Filter B's morph points\n            for (let i: number = 0, j: number = filterA.controlPointCount; i < filterB.controlPointCount; i++, j++) {\n                lerpedFilter.controlPoints[j] = new FilterControlPoint();\n                lerpedFilter.controlPoints[j].type = filterB.controlPoints[i].type;\n                lerpedFilter.controlPoints[j].gain = filterB.controlPoints[i].gain + (Config.filterGainCenter - filterB.controlPoints[i].gain) * (1 - pos);\n\n                if (filterB.controlPoints[i].type == FilterType.peak) {\n                    lerpedFilter.controlPoints[j].freq = filterB.controlPoints[i].freq;\n                }\n                else if (filterB.controlPoints[i].type == FilterType.highPass) {\n                    lerpedFilter.controlPoints[j].freq = filterB.controlPoints[i].freq * pos;\n                }\n                else {\n                    lerpedFilter.controlPoints[j].freq = filterB.controlPoints[i].freq + ((Config.filterFreqRange - 1) - filterB.controlPoints[i].freq) * (1 - pos);\n                }\n            }\n\n            lerpedFilter.controlPointCount = filterA.controlPointCount + filterB.controlPointCount;\n\n            return lerpedFilter;\n        }\n        */\n    }\n\n    public convertLegacySettings(legacyCutoffSetting: number, legacyResonanceSetting: number, legacyEnv: Envelope): void {\n        this.reset();\n\n        const legacyFilterCutoffMaxHz: number = 8000; // This was carefully calculated to correspond to no change in response when filtering at 48000 samples per second... when using the legacy simplified low-pass filter.\n        const legacyFilterMax: number = 0.95;\n        const legacyFilterMaxRadians: number = Math.asin(legacyFilterMax / 2.0) * 2.0;\n        const legacyFilterMaxResonance: number = 0.95;\n        const legacyFilterCutoffRange: number = 11;\n        const legacyFilterResonanceRange: number = 8;\n\n        const resonant: boolean = (legacyResonanceSetting > 1);\n        const firstOrder: boolean = (legacyResonanceSetting == 0);\n        const cutoffAtMax: boolean = (legacyCutoffSetting == legacyFilterCutoffRange - 1);\n        const envDecays: boolean = (legacyEnv.type == EnvelopeType.flare || legacyEnv.type == EnvelopeType.twang || legacyEnv.type == EnvelopeType.decay || legacyEnv.type == EnvelopeType.noteSize);\n\n        const standardSampleRate: number = 48000;\n        const legacyHz: number = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);\n        const legacyRadians: number = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);\n\n        if (legacyEnv.type == EnvelopeType.none && !resonant && cutoffAtMax) {\n            // The response is flat and there's no envelopes, so don't even bother adding any control points.\n        } else if (firstOrder) {\n            // In general, a 1st order lowpass can be approximated by a 2nd order lowpass\n            // with a cutoff ~4 octaves higher (*16) and a gain of 1/16.\n            // However, BeepBox's original lowpass filters behaved oddly as they\n            // approach the nyquist frequency, so I've devised this curved conversion\n            // to guess at a perceptually appropriate new cutoff frequency and gain.\n            const extraOctaves: number = 3.5;\n            const targetRadians: number = legacyRadians * Math.pow(2.0, extraOctaves);\n            const curvedRadians: number = targetRadians / (1.0 + targetRadians / Math.PI);\n            const curvedHz: number = standardSampleRate * curvedRadians / (2.0 * Math.PI)\n            const freqSetting: number = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n            const finalHz: number = FilterControlPoint.getHzFromSettingValue(freqSetting);\n            const finalRadians: number = 2.0 * Math.PI * finalHz / standardSampleRate;\n\n            const legacyFilter: FilterCoefficients = new FilterCoefficients();\n            legacyFilter.lowPass1stOrderSimplified(legacyRadians);\n            const response: FrequencyResponse = new FrequencyResponse();\n            response.analyze(legacyFilter, finalRadians);\n            const legacyFilterGainAtNewRadians: number = response.magnitude();\n\n            let logGain: number = Math.log2(legacyFilterGainAtNewRadians);\n            // Bias slightly toward 2^(-extraOctaves):\n            logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;\n            // Decaying envelopes move the cutoff frequency back into an area where the best approximation of the first order slope requires a lower gain setting.\n            if (envDecays) logGain = Math.min(logGain, -1.0);\n            const convertedGain: number = Math.pow(2.0, logGain);\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);\n\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\n        } else {\n            const intendedGain: number = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));\n            const invertedGain: number = 0.5 / intendedGain;\n            const maxRadians: number = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;\n            const freqRatio: number = legacyRadians / maxRadians;\n            const targetRadians: number = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);\n            const curvedRadians: number = legacyRadians + (targetRadians - legacyRadians) * invertedGain;\n            let curvedHz: number;\n            if (envDecays) {\n                curvedHz = standardSampleRate * Math.min(curvedRadians, legacyRadians * Math.pow(2, 0.25)) / (2.0 * Math.PI);\n            } else {\n                curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\n            }\n            const freqSetting: number = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n\n            let legacyFilterGain: number;\n            if (envDecays) {\n                legacyFilterGain = intendedGain;\n            } else {\n                const legacyFilter: FilterCoefficients = new FilterCoefficients();\n                legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);\n                const response: FrequencyResponse = new FrequencyResponse();\n                response.analyze(legacyFilter, curvedRadians);\n                legacyFilterGain = response.magnitude();\n            }\n            if (!resonant) legacyFilterGain = Math.min(legacyFilterGain, Math.sqrt(0.5));\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);\n\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\n        }\n\n        // Added for JummBox - making a 0 point filter does not truncate control points!\n        this.controlPoints.length = this.controlPointCount;\n    }\n\n    // Similar to above, but purpose-fit for quick conversions in synth calls.\n    public convertLegacySettingsForSynth(legacyCutoffSetting: number, legacyResonanceSetting: number, allowFirstOrder: boolean = false): void {\n        this.reset();\n\n        const legacyFilterCutoffMaxHz: number = 8000; // This was carefully calculated to correspond to no change in response when filtering at 48000 samples per second... when using the legacy simplified low-pass filter.\n        const legacyFilterMax: number = 0.95;\n        const legacyFilterMaxRadians: number = Math.asin(legacyFilterMax / 2.0) * 2.0;\n        const legacyFilterMaxResonance: number = 0.95;\n        const legacyFilterCutoffRange: number = 11;\n        const legacyFilterResonanceRange: number = 8;\n\n        const firstOrder: boolean = (legacyResonanceSetting == 0 && allowFirstOrder);\n        const standardSampleRate: number = 48000;\n        const legacyHz: number = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);\n        const legacyRadians: number = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);\n\n        if (firstOrder) {\n            // In general, a 1st order lowpass can be approximated by a 2nd order lowpass\n            // with a cutoff ~4 octaves higher (*16) and a gain of 1/16.\n            // However, BeepBox's original lowpass filters behaved oddly as they\n            // approach the nyquist frequency, so I've devised this curved conversion\n            // to guess at a perceptually appropriate new cutoff frequency and gain.\n            const extraOctaves: number = 3.5;\n            const targetRadians: number = legacyRadians * Math.pow(2.0, extraOctaves);\n            const curvedRadians: number = targetRadians / (1.0 + targetRadians / Math.PI);\n            const curvedHz: number = standardSampleRate * curvedRadians / (2.0 * Math.PI)\n            const freqSetting: number = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n            const finalHz: number = FilterControlPoint.getHzFromSettingValue(freqSetting);\n            const finalRadians: number = 2.0 * Math.PI * finalHz / standardSampleRate;\n\n            const legacyFilter: FilterCoefficients = new FilterCoefficients();\n            legacyFilter.lowPass1stOrderSimplified(legacyRadians);\n            const response: FrequencyResponse = new FrequencyResponse();\n            response.analyze(legacyFilter, finalRadians);\n            const legacyFilterGainAtNewRadians: number = response.magnitude();\n\n            let logGain: number = Math.log2(legacyFilterGainAtNewRadians);\n            // Bias slightly toward 2^(-extraOctaves):\n            logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;\n            const convertedGain: number = Math.pow(2.0, logGain);\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);\n\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\n        } else {\n            const intendedGain: number = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));\n            const invertedGain: number = 0.5 / intendedGain;\n            const maxRadians: number = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;\n            const freqRatio: number = legacyRadians / maxRadians;\n            const targetRadians: number = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);\n            const curvedRadians: number = legacyRadians + (targetRadians - legacyRadians) * invertedGain;\n            let curvedHz: number;\n\n            curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\n            const freqSetting: number = FilterControlPoint.getSettingValueFromHz(curvedHz);\n\n            let legacyFilterGain: number;\n\n            const legacyFilter: FilterCoefficients = new FilterCoefficients();\n            legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);\n            const response: FrequencyResponse = new FrequencyResponse();\n            response.analyze(legacyFilter, curvedRadians);\n            legacyFilterGain = response.magnitude();\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);\n\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\n        }\n\n    }\n}\n\nexport class EnvelopeSettings {\n    public target: number = 0;\n    public index: number = 0;\n    public envelope: number = 0;\n\n    constructor() {\n        this.reset();\n    }\n\n    reset(): void {\n        this.target = 0;\n        this.index = 0;\n        this.envelope = 0;\n    }\n\n    public toJsonObject(): Object {\n        const envelopeObject: any = {\n            \"target\": Config.instrumentAutomationTargets[this.target].name,\n            \"envelope\": Config.envelopes[this.envelope].name,\n        };\n        if (Config.instrumentAutomationTargets[this.target].maxCount > 1) {\n            envelopeObject[\"index\"] = this.index;\n        }\n        return envelopeObject;\n    }\n\n    public fromJsonObject(envelopeObject: any): void {\n        this.reset();\n\n        let target: AutomationTarget = Config.instrumentAutomationTargets.dictionary[envelopeObject[\"target\"]];\n        if (target == null) target = Config.instrumentAutomationTargets.dictionary[\"noteVolume\"];\n        this.target = target.index;\n\n        let envelope: Envelope = Config.envelopes.dictionary[envelopeObject[\"envelope\"]];\n        if (envelope == null) envelope = Config.envelopes.dictionary[\"none\"];\n        this.envelope = envelope.index;\n\n        if (envelopeObject[\"index\"] != undefined) {\n            this.index = clamp(0, Config.instrumentAutomationTargets[this.target].maxCount, envelopeObject[\"index\"] | 0);\n        } else {\n            this.index = 0;\n        }\n    }\n}\n\n// Settings that were available to old versions of BeepBox but are no longer available in the\n// current version that need to be reinterpreted as a group to determine the best way to\n// represent them in the current version.\ninterface LegacySettings {\n    filterCutoff?: number;\n    filterResonance?: number;\n    filterEnvelope?: Envelope;\n    pulseEnvelope?: Envelope;\n    operatorEnvelopes?: Envelope[];\n    feedbackEnvelope?: Envelope;\n}\n\nexport class Instrument {\n    public type: InstrumentType = InstrumentType.chip;\n    public preset: number = 0;\n    public chipWave: number = 2;\n\t// advloop addition\n\tpublic isUsingAdvancedLoopControls: boolean = false;\n\tpublic chipWaveLoopStart: number = 0;\n\tpublic chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\n\tpublic chipWaveLoopMode: number = 0; // 0: loop, 1: ping-pong, 2: once, 3: play loop once\n\tpublic chipWavePlayBackwards: boolean = false;\n        public chipWaveStartOffset: number = 0;\n        // advloop addition\n    public chipNoise: number = 1;\n    public eqFilter: FilterSettings = new FilterSettings();\n    public eqFilterType: boolean = false;\n    public eqFilterSimpleCut: number = Config.filterSimpleCutRange - 1;\n    public eqFilterSimplePeak: number = 0;\n    public noteFilter: FilterSettings = new FilterSettings();\n    public noteFilterType: boolean = false;\n    public noteFilterSimpleCut: number = Config.filterSimpleCutRange - 1;\n    public noteFilterSimplePeak: number = 0;\n    public eqSubFilters: (FilterSettings | null)[] = [];\n    public noteSubFilters: (FilterSettings | null)[] = [];\n    public tmpEqFilterStart: FilterSettings | null;\n    public tmpEqFilterEnd: FilterSettings | null;\n    public tmpNoteFilterStart: FilterSettings | null;\n    public tmpNoteFilterEnd: FilterSettings | null;\n    public envelopes: EnvelopeSettings[] = [];\n    public fadeIn: number = 0;\n    public fadeOut: number = Config.fadeOutNeutral;\n    public envelopeCount: number = 0;\n    public transition: number = Config.transitions.dictionary[\"normal\"].index;\n    public pitchShift: number = 0;\n    public detune: number = 0;\n    public vibrato: number = 0;\n    public interval: number = 0;\n    public vibratoDepth: number = 0;\n    public vibratoSpeed: number = 10;\n    public vibratoDelay: number = 0;\n    public vibratoType: number = 0;\n    public unison: number = 0;\n    public unisonVoices: number = 1;\n    public unisonSpread: number = 0.0;\n    public unisonOffset: number = 0.0;\n    public unisonExpression: number = 1.4;\n    public unisonSign: number = 1.0;\n    public effects: number = 0;\n    public chord: number = 1;\n    public volume: number = 0;\n    public pan: number = Config.panCenter;\n    public panDelay: number = 10;\n    public arpeggioSpeed: number = 12;\n    public fastTwoNoteArp: boolean = false;\n    public legacyTieOver: boolean = false;\n    public clicklessTransition: boolean = false;\n    public aliases: boolean = false;\n    public pulseWidth: number = Config.pulseWidthRange;\n    public supersawDynamism: number = Config.supersawDynamismMax;\n\tpublic supersawSpread: number = Math.ceil(Config.supersawSpreadMax / 2.0);\n\tpublic supersawShape: number = 0;\n    public decimalOffset: number = 0;\n    public stringSustain: number = 10;\n    public distortion: number = 0;\n    public bitcrusherFreq: number = 0;\n    public bitcrusherQuantization: number = 0;\n    public chorus: number = 0;\n    public reverb: number = 0;\n    public echoSustain: number = 0;\n    public echoDelay: number = 0;\n    public algorithm: number = 0;\n    public feedbackType: number = 0;\n    public algorithm6Op: number = 1;\n    public feedbackType6Op: number = 1;//default to not custom\n    public customAlgorithm: CustomAlgorithm = new CustomAlgorithm(); //{ name: \"1←4(2←5 3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [5], [6], [], [], []] };\n    public customFeedbackType: CustomFeedBack = new CustomFeedBack(); //{ name: \"1↔4 2↔5 3↔6\", indices: [[3], [5], [6], [1], [2], [3]] };\n    public feedbackAmplitude: number = 0;\n    public LFOtime: number = 0;\n    public nextLFOtime: number = 0;\n    public arpTime: number = 0;\n    public customChipWave: Float32Array = new Float32Array(64);\n    public customChipWaveIntegral: Float32Array = new Float32Array(65); // One extra element for wrap-around in chipSynth.\n    public readonly operators: Operator[] = [];\n    public readonly spectrumWave: SpectrumWave;\n    public readonly harmonicsWave: HarmonicsWave = new HarmonicsWave();\n    public readonly drumsetEnvelopes: number[] = [];\n    public readonly drumsetSpectrumWaves: SpectrumWave[] = [];\n    public modChannels: number[] = [];\n    public modInstruments: number[] = [];\n    public modulators: number[] = [];\n    public modFilterTypes: number[] = [];\n    public invalidModulators: boolean[] = [];\n    constructor(isNoiseChannel: boolean, isModChannel: boolean) {\n\n        if (isModChannel) {\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\n                this.modChannels.push(0);\n                this.modInstruments.push(0);\n                this.modulators.push(Config.modulators.dictionary[\"none\"].index);\n            }\n        }\n\n        this.spectrumWave = new SpectrumWave(isNoiseChannel);\n        for (let i: number = 0; i < Config.operatorCount+2; i++) {//hopefully won't break everything\n            this.operators[i] = new Operator(i);\n        }\n        for (let i: number = 0; i < Config.drumCount; i++) {\n            this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\n            this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\n        }\n\n        for (let i = 0; i < 64; i++) {\n            this.customChipWave[i] = 24 - Math.floor(i * (48 / 64));\n        }\n\n        let sum: number = 0.0;\n        for (let i: number = 0; i < this.customChipWave.length; i++) {\n            sum += this.customChipWave[i];\n        }\n        const average: number = sum / this.customChipWave.length;\n\n        // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\n        let cumulative: number = 0;\n        let wavePrev: number = 0;\n        for (let i: number = 0; i < this.customChipWave.length; i++) {\n            cumulative += wavePrev;\n            wavePrev = this.customChipWave[i] - average;\n            this.customChipWaveIntegral[i] = cumulative;\n        }\n\n        // 65th, last sample is for anti-aliasing\n        this.customChipWaveIntegral[64] = 0.0;\n\n    }\n\n    public setTypeAndReset(type: InstrumentType, isNoiseChannel: boolean, isModChannel: boolean): void {\n        // Mod channels are forced to one type.\n        if (isModChannel) type = InstrumentType.mod;\n        this.type = type;\n        this.preset = type;\n        this.volume = 0;\n        this.effects = (1 << EffectType.panning); // Panning enabled by default in JB.\n        this.chorus = Config.chorusRange - 1;\n        this.reverb = 0;\n        this.echoSustain = Math.floor((Config.echoSustainRange - 1) * 0.5);\n        this.echoDelay = Math.floor((Config.echoDelayRange - 1) * 0.5);\n        this.eqFilter.reset();\n        this.eqFilterType = false;\n        this.eqFilterSimpleCut = Config.filterSimpleCutRange - 1;\n        this.eqFilterSimplePeak = 0;\n        for (let i: number = 0; i < Config.filterMorphCount; i++) {\n            this.eqSubFilters[i] = null;\n            this.noteSubFilters[i] = null;\n        }\n        this.noteFilter.reset();\n        this.noteFilterType = false;\n        this.noteFilterSimpleCut = Config.filterSimpleCutRange - 1;\n        this.noteFilterSimplePeak = 0;\n        this.distortion = Math.floor((Config.distortionRange - 1) * 0.75);\n        this.bitcrusherFreq = Math.floor((Config.bitcrusherFreqRange - 1) * 0.5)\n        this.bitcrusherQuantization = Math.floor((Config.bitcrusherQuantizationRange - 1) * 0.5);\n        this.pan = Config.panCenter;\n        this.panDelay = 10;\n        this.pitchShift = Config.pitchShiftCenter;\n        this.detune = Config.detuneCenter;\n        this.vibrato = 0;\n        this.unison = 0;\n        this.stringSustain = 10;\n        this.clicklessTransition = false;\n        this.arpeggioSpeed = 12;\n        this.legacyTieOver = false;\n        this.aliases = false;\n        this.fadeIn = 0;\n        this.fadeOut = Config.fadeOutNeutral;\n        this.transition = Config.transitions.dictionary[\"normal\"].index;\n        this.envelopeCount = 0;\n        switch (type) {\n            case InstrumentType.chip:\n                this.chipWave = 2;\n                // TODO: enable the chord effect?\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n\t\t\t\t\t\t\t\t // advloop addition\n                    this.isUsingAdvancedLoopControls = false;\n                    this.chipWaveLoopStart = 0;\n                    this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\n                    this.chipWaveLoopMode = 0;\n                    this.chipWavePlayBackwards = false;\n                    this.chipWaveStartOffset = 0;\n                    // advloop addition\n                break;\n            case InstrumentType.customChipWave:\n                this.chipWave = 2;\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                for (let i: number = 0; i < 64; i++) {\n                    this.customChipWave[i] = 24 - (Math.floor(i * (48 / 64)));\n                }\n\n                let sum: number = 0.0;\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\n                    sum += this.customChipWave[i];\n                }\n                const average: number = sum / this.customChipWave.length;\n\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\n                let cumulative: number = 0;\n                let wavePrev: number = 0;\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\n                    cumulative += wavePrev;\n                    wavePrev = this.customChipWave[i] - average;\n                    this.customChipWaveIntegral[i] = cumulative;\n                }\n\n                this.customChipWaveIntegral[64] = 0.0;\n                break;\n            case InstrumentType.fm:\n                this.chord = Config.chords.dictionary[\"custom interval\"].index;\n                this.algorithm = 0;\n                this.feedbackType = 0;\n                this.feedbackAmplitude = 0;\n                for (let i: number = 0; i < this.operators.length; i++) {\n                    this.operators[i].reset(i);\n                }\n                break;\n            case InstrumentType.fm6op:\n                this.transition = 1;\n                this.vibrato = 0;\n                this.effects = 1;\n                this.chord = 3;\n                this.algorithm = 0;\n                this.feedbackType = 0;\n                this.algorithm6Op = 1;\n                this.feedbackType6Op = 1;\n                this.customAlgorithm.fromPreset(1);\n                this.feedbackAmplitude = 0;\n                for (let i: number = 0; i < this.operators.length; i++) {\n                    this.operators[i].reset(i);\n                }\n                break;\n            case InstrumentType.noise:\n                this.chipNoise = 1;\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                break;\n            case InstrumentType.spectrum:\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                this.spectrumWave.reset(isNoiseChannel);\n                break;\n            case InstrumentType.drumset:\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                for (let i: number = 0; i < Config.drumCount; i++) {\n                    this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\n                    if (this.drumsetSpectrumWaves[i] == undefined) {\n                        this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\n                    }\n                    this.drumsetSpectrumWaves[i].reset(isNoiseChannel);\n                }\n                break;\n            case InstrumentType.harmonics:\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                this.harmonicsWave.reset();\n                break;\n            case InstrumentType.pwm:\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                this.pulseWidth = Config.pulseWidthRange;\n                break;\n            case InstrumentType.pickedString:\n                this.chord = Config.chords.dictionary[\"strum\"].index;\n                this.harmonicsWave.reset();\n                break;\n            case InstrumentType.mod:\n                this.transition = 0;\n                this.vibrato = 0;\n                this.interval = 0;\n                this.effects = 0;\n                this.chord = 0;\n                this.modChannels = [];\n                this.modInstruments = [];\n                this.modulators = [];\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\n                    this.modChannels.push(-2);\n                    this.modInstruments.push(0);\n                    this.modulators.push(Config.modulators.dictionary[\"none\"].index);\n                    this.invalidModulators[mod] = false;\n                    this.modFilterTypes[mod] = 0;\n                }\n                break;\n                case InstrumentType.supersaw:\n                    this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                    this.supersawDynamism = Config.supersawDynamismMax;\n                    this.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);\n                    this.supersawShape = 0;\n                    this.pulseWidth = Config.pulseWidthRange - 1;\n                    break;\n            default:\n                throw new Error(\"Unrecognized instrument type: \" + type);\n        }\n        // Chip/noise instruments had arpeggio and FM had custom interval but neither\n        // explicitly saved the chorus setting beforeSeven so enable it here. The effects\n        // will otherwise get overridden when reading SongTagCode.startInstrument.\n        if (this.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n            // Enable chord if it was used.\n            this.effects = (this.effects | (1 << EffectType.chord));\n        }\n    }\n\n    // (only) difference for JummBox: Returns whether or not the note filter was chosen for filter conversion.\n    public convertLegacySettings(legacySettings: LegacySettings, forceSimpleFilter: boolean): void {\n        let legacyCutoffSetting: number | undefined = legacySettings.filterCutoff;\n        let legacyResonanceSetting: number | undefined = legacySettings.filterResonance;\n        let legacyFilterEnv: Envelope | undefined = legacySettings.filterEnvelope;\n        let legacyPulseEnv: Envelope | undefined = legacySettings.pulseEnvelope;\n        let legacyOperatorEnvelopes: Envelope[] | undefined = legacySettings.operatorEnvelopes;\n        let legacyFeedbackEnv: Envelope | undefined = legacySettings.feedbackEnvelope;\n\n        // legacy defaults:\n        if (legacyCutoffSetting == undefined) legacyCutoffSetting = (this.type == InstrumentType.chip) ? 6 : 10;\n        if (legacyResonanceSetting == undefined) legacyResonanceSetting = 0;\n        if (legacyFilterEnv == undefined) legacyFilterEnv = Config.envelopes.dictionary[\"none\"];\n        if (legacyPulseEnv == undefined) legacyPulseEnv = Config.envelopes.dictionary[(this.type == InstrumentType.pwm) ? \"twang 2\" : \"none\"];\n        if (legacyOperatorEnvelopes == undefined) legacyOperatorEnvelopes = [Config.envelopes.dictionary[(this.type == InstrumentType.fm) ? \"note size\" : \"none\"], Config.envelopes.dictionary[\"none\"], Config.envelopes.dictionary[\"none\"], Config.envelopes.dictionary[\"none\"]];\n        if (legacyFeedbackEnv == undefined) legacyFeedbackEnv = Config.envelopes.dictionary[\"none\"];\n\n        // The \"punch\" envelope is special: it goes *above* the chosen cutoff. But if the cutoff was already at the max, it couldn't go any higher... except in the current version of BeepBox I raised the max cutoff so it *can* but then it sounds different, so to preserve the original sound let's just remove the punch envelope.\n        const legacyFilterCutoffRange: number = 11;\n        const cutoffAtMax: boolean = (legacyCutoffSetting == legacyFilterCutoffRange - 1);\n        if (cutoffAtMax && legacyFilterEnv.type == EnvelopeType.punch) legacyFilterEnv = Config.envelopes.dictionary[\"none\"];\n\n        const carrierCount: number = Config.algorithms[this.algorithm].carrierCount;\n        let noCarriersControlledByNoteSize: boolean = true;\n        let allCarriersControlledByNoteSize: boolean = true;\n        let noteSizeControlsSomethingElse: boolean = (legacyFilterEnv.type == EnvelopeType.noteSize) || (legacyPulseEnv.type == EnvelopeType.noteSize);\n        if (this.type == InstrumentType.fm) {\n            noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyFeedbackEnv.type == EnvelopeType.noteSize);\n            for (let i: number = 0; i < legacyOperatorEnvelopes.length; i++) {\n                if (i < carrierCount) {\n                    if (legacyOperatorEnvelopes[i].type != EnvelopeType.noteSize) {\n                        allCarriersControlledByNoteSize = false;\n                    } else {\n                        noCarriersControlledByNoteSize = false;\n                    }\n                } else {\n                    noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyOperatorEnvelopes[i].type == EnvelopeType.noteSize);\n                }\n            }\n        }\n\n        this.envelopeCount = 0;\n\n        if (this.type == InstrumentType.fm) {\n            if (allCarriersControlledByNoteSize && noteSizeControlsSomethingElse) {\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteVolume\"].index, 0, Config.envelopes.dictionary[\"note size\"].index);\n            } else if (noCarriersControlledByNoteSize && !noteSizeControlsSomethingElse) {\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"none\"].index, 0, Config.envelopes.dictionary[\"note size\"].index);\n            }\n        }\n\n        if (legacyFilterEnv.type == EnvelopeType.none) {\n            this.noteFilter.reset();\n            this.noteFilterType = false;\n            this.eqFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);\n            this.effects &= ~(1 << EffectType.noteFilter);\n            if (forceSimpleFilter || this.eqFilterType) {\n                this.eqFilterType = true;\n                this.eqFilterSimpleCut = legacyCutoffSetting;\n                this.eqFilterSimplePeak = legacyResonanceSetting;\n            }\n        } else {\n            this.eqFilter.reset();\n\n            this.eqFilterType = false;\n            this.noteFilterType = false;\n            this.noteFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);\n            this.effects |= 1 << EffectType.noteFilter;\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteFilterAllFreqs\"].index, 0, legacyFilterEnv.index);\n            if (forceSimpleFilter || this.noteFilterType) {\n                this.noteFilterType = true;\n                this.noteFilterSimpleCut = legacyCutoffSetting;\n                this.noteFilterSimplePeak = legacyResonanceSetting;\n            }\n        }\n\n        if (legacyPulseEnv.type != EnvelopeType.none) {\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"pulseWidth\"].index, 0, legacyPulseEnv.index);\n        }\n\n        for (let i: number = 0; i < legacyOperatorEnvelopes.length; i++) {\n            if (i < carrierCount && allCarriersControlledByNoteSize) continue;\n            if (legacyOperatorEnvelopes[i].type != EnvelopeType.none) {\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"operatorAmplitude\"].index, i, legacyOperatorEnvelopes[i].index);\n            }\n        }\n\n        if (legacyFeedbackEnv.type != EnvelopeType.none) {\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"feedbackAmplitude\"].index, 0, legacyFeedbackEnv.index);\n        }\n    }\n\n    public toJsonObject(): Object {\n        const instrumentObject: any = {\n            \"type\": Config.instrumentTypeNames[this.type],\n            \"volume\": this.volume,\n            \"eqFilter\": this.eqFilter.toJsonObject(),\n            \"eqFilterType\": this.eqFilterType,\n            \"eqSimpleCut\": this.eqFilterSimpleCut,\n            \"eqSimplePeak\": this.eqFilterSimplePeak\n        };\n\n        if (this.preset != this.type) {\n            instrumentObject[\"preset\"] = this.preset;\n        }\n\n        for (let i: number = 0; i < Config.filterMorphCount; i++) {\n            if (this.eqSubFilters[i] != null)\n                instrumentObject[\"eqSubFilters\" + i] = this.eqSubFilters[i]!.toJsonObject();\n        }\n\n        const effects: string[] = [];\n        for (const effect of Config.effectOrder) {\n            if (this.effects & (1 << effect)) {\n                effects.push(Config.effectNames[effect]);\n            }\n        }\n        instrumentObject[\"effects\"] = effects;\n\n\n        if (effectsIncludeTransition(this.effects)) {\n            instrumentObject[\"transition\"] = Config.transitions[this.transition].name;\n            instrumentObject[\"clicklessTransition\"] = this.clicklessTransition;\n        }\n        if (effectsIncludeChord(this.effects)) {\n            instrumentObject[\"chord\"] = this.getChord().name;\n            instrumentObject[\"fastTwoNoteArp\"] = this.fastTwoNoteArp;\n            instrumentObject[\"arpeggioSpeed\"] = this.arpeggioSpeed;\n        }\n        if (effectsIncludePitchShift(this.effects)) {\n            instrumentObject[\"pitchShiftSemitones\"] = this.pitchShift;\n        }\n        if (effectsIncludeDetune(this.effects)) {\n            instrumentObject[\"detuneCents\"] = Synth.detuneToCents(this.detune);\n        }\n        if (effectsIncludeVibrato(this.effects)) {\n            if (this.vibrato == -1) {\n                this.vibrato = 5;\n            }\n            if (this.vibrato != 5) {\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\n            } else {\n                instrumentObject[\"vibrato\"] = \"custom\";\n            }\n            instrumentObject[\"vibratoDepth\"] = this.vibratoDepth;\n            instrumentObject[\"vibratoDelay\"] = this.vibratoDelay;\n            instrumentObject[\"vibratoSpeed\"] = this.vibratoSpeed;\n            instrumentObject[\"vibratoType\"] = this.vibratoType;\n        }\n        if (effectsIncludeNoteFilter(this.effects)) {\n            instrumentObject[\"noteFilterType\"] = this.noteFilterType;\n            instrumentObject[\"noteSimpleCut\"] = this.noteFilterSimpleCut;\n            instrumentObject[\"noteSimplePeak\"] = this.noteFilterSimplePeak;\n            instrumentObject[\"noteFilter\"] = this.noteFilter.toJsonObject();\n\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                if (this.noteSubFilters[i] != null)\n                    instrumentObject[\"noteSubFilters\" + i] = this.noteSubFilters[i]!.toJsonObject();\n            }\n        }\n        if (effectsIncludeDistortion(this.effects)) {\n            instrumentObject[\"distortion\"] = Math.round(100 * this.distortion / (Config.distortionRange - 1));\n            instrumentObject[\"aliases\"] = this.aliases;\n        }\n        if (effectsIncludeBitcrusher(this.effects)) {\n            instrumentObject[\"bitcrusherOctave\"] = (Config.bitcrusherFreqRange - 1 - this.bitcrusherFreq) * Config.bitcrusherOctaveStep;\n            instrumentObject[\"bitcrusherQuantization\"] = Math.round(100 * this.bitcrusherQuantization / (Config.bitcrusherQuantizationRange - 1));\n        }\n        if (effectsIncludePanning(this.effects)) {\n            instrumentObject[\"pan\"] = Math.round(100 * (this.pan - Config.panCenter) / Config.panCenter);\n            instrumentObject[\"panDelay\"] = this.panDelay;\n        }\n        if (effectsIncludeChorus(this.effects)) {\n            instrumentObject[\"chorus\"] = Math.round(100 * this.chorus / (Config.chorusRange - 1));\n        }\n        if (effectsIncludeEcho(this.effects)) {\n            instrumentObject[\"echoSustain\"] = Math.round(100 * this.echoSustain / (Config.echoSustainRange - 1));\n            instrumentObject[\"echoDelayBeats\"] = Math.round(1000 * (this.echoDelay + 1) * Config.echoDelayStepTicks / (Config.ticksPerPart * Config.partsPerBeat)) / 1000;\n        }\n        if (effectsIncludeReverb(this.effects)) {\n            instrumentObject[\"reverb\"] = Math.round(100 * this.reverb / (Config.reverbRange - 1));\n        }\n\n        if (this.type != InstrumentType.drumset) {\n            instrumentObject[\"fadeInSeconds\"] = Math.round(10000 * Synth.fadeInSettingToSeconds(this.fadeIn)) / 10000;\n            instrumentObject[\"fadeOutTicks\"] = Synth.fadeOutSettingToTicks(this.fadeOut);\n        }\n\n        if (this.type == InstrumentType.harmonics || this.type == InstrumentType.pickedString) {\n            instrumentObject[\"harmonics\"] = [];\n            for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n                instrumentObject[\"harmonics\"][i] = Math.round(100 * this.harmonicsWave.harmonics[i] / Config.harmonicsMax);\n            }\n        }\n\n        if (this.type == InstrumentType.noise) {\n            instrumentObject[\"wave\"] = Config.chipNoises[this.chipNoise].name;\n        } else if (this.type == InstrumentType.spectrum) {\n            instrumentObject[\"spectrum\"] = [];\n            for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                instrumentObject[\"spectrum\"][i] = Math.round(100 * this.spectrumWave.spectrum[i] / Config.spectrumMax);\n            }\n        } else if (this.type == InstrumentType.drumset) {\n            instrumentObject[\"drums\"] = [];\n            for (let j: number = 0; j < Config.drumCount; j++) {\n                const spectrum: number[] = [];\n                for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                    spectrum[i] = Math.round(100 * this.drumsetSpectrumWaves[j].spectrum[i] / Config.spectrumMax);\n                }\n                instrumentObject[\"drums\"][j] = {\n                    \"filterEnvelope\": this.getDrumsetEnvelope(j).name,\n                    \"spectrum\": spectrum,\n                };\n            }\n        } else if (this.type == InstrumentType.chip) {\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\n            // should this unison pushing code be turned into a function..?\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;   \n            // these don't need to be pushed if custom unisons aren't being used\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n\n\t\t\t\t\t\t// advloop addition\n                instrumentObject[\"isUsingAdvancedLoopControls\"] = this.isUsingAdvancedLoopControls;\n                instrumentObject[\"chipWaveLoopStart\"] = this.chipWaveLoopStart;\n                instrumentObject[\"chipWaveLoopEnd\"] = this.chipWaveLoopEnd;\n                instrumentObject[\"chipWaveLoopMode\"] = this.chipWaveLoopMode;\n                instrumentObject[\"chipWavePlayBackwards\"] = this.chipWavePlayBackwards;\n                instrumentObject[\"chipWaveStartOffset\"] = this.chipWaveStartOffset;\n                // advloop addition\n        } else if (this.type == InstrumentType.pwm) {\n            instrumentObject[\"pulseWidth\"] = this.pulseWidth;\n            instrumentObject[\"decimalOffset\"] = this.decimalOffset;\n        } else if (this.type == InstrumentType.supersaw) {\n\t\t\tinstrumentObject[\"pulseWidth\"] = Math.round(getPulseWidthRatio(this.pulseWidth) * 100 * 100000) / 100000;\n\t\t\tinstrumentObject[\"dynamism\"] = Math.round(100 * this.supersawDynamism / Config.supersawDynamismMax);\n\t\t\tinstrumentObject[\"spread\"] = Math.round(100 * this.supersawSpread / Config.supersawSpreadMax);\n\t\t\tinstrumentObject[\"shape\"] = Math.round(100 * this.supersawShape / Config.supersawShapeMax);\n       } else if (this.type == InstrumentType.pickedString) {\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n            instrumentObject[\"stringSustain\"] = Math.round(100 * this.stringSustain / (Config.stringSustainRange - 1));\n        } else if (this.type == InstrumentType.harmonics) {\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n        } else if (this.type == InstrumentType.fm || this.type == InstrumentType.fm6op) {\n            const operatorArray: Object[] = [];\n            for (const operator of this.operators) {\n                operatorArray.push({\n                    \"frequency\": Config.operatorFrequencies[operator.frequency].name,\n                    \"amplitude\": operator.amplitude,\n                    \"waveform\": Config.operatorWaves[operator.waveform].name,\n                    \"pulseWidth\": operator.pulseWidth,\n                });\n            }\n            if(this.type == InstrumentType.fm){\n                instrumentObject[\"algorithm\"] = Config.algorithms[this.algorithm].name;\n                instrumentObject[\"feedbackType\"] = Config.feedbacks[this.feedbackType].name;\n                instrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\n                instrumentObject[\"operators\"] = operatorArray;\n            } else {\n                instrumentObject[\"algorithm\"] = Config.algorithms6Op[this.algorithm6Op].name;\n                instrumentObject[\"feedbackType\"] = Config.feedbacks6Op[this.feedbackType6Op].name;\n                instrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\n                if(this.algorithm6Op == 0){\n                    const customAlgorithm: any = {};\n                    customAlgorithm[\"mods\"] = this.customAlgorithm.modulatedBy;\n                    customAlgorithm[\"carrierCount\"] = this.customAlgorithm.carrierCount;\n                    instrumentObject[\"customAlgorithm\"] = customAlgorithm;\n                }\n                if(this.feedbackType6Op == 0){\n                    const customFeedback: any = {};\n                    customFeedback[\"mods\"] = this.customFeedbackType.indices;\n                    instrumentObject[\"customFeedback\"] = customFeedback;\n                }\n\n                instrumentObject[\"operators\"] = operatorArray;\n            }\n        } else if (this.type == InstrumentType.customChipWave) {\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n            instrumentObject[\"customChipWave\"] = new Float64Array(64);\n            instrumentObject[\"customChipWaveIntegral\"] = new Float64Array(65);\n            for (let i: number = 0; i < this.customChipWave.length; i++) {\n                instrumentObject[\"customChipWave\"][i] = this.customChipWave[i];\n                // Meh, waste of space and can be inaccurate. It will be recalc'ed when instrument loads.\n                //instrumentObject[\"customChipWaveIntegral\"][i] = this.customChipWaveIntegral[i];\n            }\n        } else if (this.type == InstrumentType.mod) {\n            instrumentObject[\"modChannels\"] = [];\n            instrumentObject[\"modInstruments\"] = [];\n            instrumentObject[\"modSettings\"] = [];\n            instrumentObject[\"modStatuses\"] = [];\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\n                instrumentObject[\"modChannels\"][mod] = this.modChannels[mod];\n                instrumentObject[\"modInstruments\"][mod] = this.modInstruments[mod];\n                instrumentObject[\"modSettings\"][mod] = this.modulators[mod];\n            }\n        } else {\n            throw new Error(\"Unrecognized instrument type\");\n        }\n\n        const envelopes: any[] = [];\n        for (let i = 0; i < this.envelopeCount; i++) {\n            envelopes.push(this.envelopes[i].toJsonObject());\n        }\n        instrumentObject[\"envelopes\"] = envelopes;\n\n        return instrumentObject;\n    }\n\n\n    public fromJsonObject(instrumentObject: any, isNoiseChannel: boolean, isModChannel: boolean, useSlowerRhythm: boolean, useFastTwoNoteArp: boolean, legacyGlobalReverb: number = 0): void {\n        if (instrumentObject == undefined) instrumentObject = {};\n\n        let type: InstrumentType = Config.instrumentTypeNames.indexOf(instrumentObject[\"type\"]);\n        if (<any>type == -1) type = isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip);\n        this.setTypeAndReset(type, isNoiseChannel, isModChannel);\n\n        if (instrumentObject[\"preset\"] != undefined) {\n            this.preset = instrumentObject[\"preset\"] >>> 0;\n        }\n\n        if (instrumentObject[\"volume\"] != undefined) {\n            this.volume = clamp(-Config.volumeRange / 2, (Config.volumeRange / 2) + 1, instrumentObject[\"volume\"] | 0);\n        } else {\n            this.volume = 0;\n        }\n\n        if (Array.isArray(instrumentObject[\"effects\"])) {\n            let effects: number = 0;\n            for (let i: number = 0; i < instrumentObject[\"effects\"].length; i++) {\n                effects = effects | (1 << Config.effectNames.indexOf(instrumentObject[\"effects\"][i]));\n            }\n            this.effects = (effects & ((1 << EffectType.length) - 1));\n        } else {\n            // The index of these names is reinterpreted as a bitfield, which relies on reverb and chorus being the first effects!\n            const legacyEffectsNames: string[] = [\"none\", \"reverb\", \"chorus\", \"chorus & reverb\"];\n            this.effects = legacyEffectsNames.indexOf(instrumentObject[\"effects\"]);\n            if (this.effects == -1) this.effects = (this.type == InstrumentType.noise) ? 0 : 1;\n        }\n\n        this.transition = Config.transitions.dictionary[\"normal\"].index; // default value.\n        const transitionProperty: any = instrumentObject[\"transition\"] || instrumentObject[\"envelope\"]; // the transition property used to be called envelope, so check that too.\n        if (transitionProperty != undefined) {\n            let transition: Transition | undefined = Config.transitions.dictionary[transitionProperty];\n            if (instrumentObject[\"fadeInSeconds\"] == undefined || instrumentObject[\"fadeOutTicks\"] == undefined) {\n                const legacySettings = (<any>{\n                    \"binary\": { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\n                    \"seamless\": { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\n                    \"sudden\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\n                    \"hard\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\n                    \"smooth\": { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    \"soft\": { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    // Note that the old slide transition has the same name as a new slide transition that is different.\n                    // Only apply legacy settings if the instrument JSON was created before, based on the presence\n                    // of the fade in/out fields.\n                    \"slide\": { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    \"cross fade\": { transition: \"normal\", fadeInSeconds: 0.04, fadeOutTicks: 6 },\n                    \"hard fade\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: 48 },\n                    \"medium fade\": { transition: \"normal\", fadeInSeconds: 0.0125, fadeOutTicks: 72 },\n                    \"soft fade\": { transition: \"normal\", fadeInSeconds: 0.06, fadeOutTicks: 96 },\n                })[transitionProperty];\n                if (legacySettings != undefined) {\n                    transition = Config.transitions.dictionary[legacySettings.transition];\n                    // These may be overridden below.\n                    this.fadeIn = Synth.secondsToFadeInSetting(legacySettings.fadeInSeconds);\n                    this.fadeOut = Synth.ticksToFadeOutSetting(legacySettings.fadeOutTicks);\n                }\n            }\n            if (transition != undefined) this.transition = transition.index;\n\n            if (this.transition != Config.transitions.dictionary[\"normal\"].index) {\n                // Enable transition if it was used.\n                this.effects = (this.effects | (1 << EffectType.transition));\n            }\n        }\n\n        // Overrides legacy settings in transition above.\n        if (instrumentObject[\"fadeInSeconds\"] != undefined) {\n            this.fadeIn = Synth.secondsToFadeInSetting(+instrumentObject[\"fadeInSeconds\"]);\n        }\n        if (instrumentObject[\"fadeOutTicks\"] != undefined) {\n            this.fadeOut = Synth.ticksToFadeOutSetting(+instrumentObject[\"fadeOutTicks\"]);\n        }\n\n        {\n            // Note that the chord setting may be overridden by instrumentObject[\"chorus\"] below.\n            const chordProperty: any = instrumentObject[\"chord\"];\n            const legacyChordNames: Dictionary<string> = { \"harmony\": \"simultaneous\" };\n            const chord: Chord | undefined = Config.chords.dictionary[legacyChordNames[chordProperty]] || Config.chords.dictionary[chordProperty];\n            if (chord != undefined) {\n                this.chord = chord.index;\n            } else {\n                // Different instruments have different default chord types based on historical behaviour.\n                if (this.type == InstrumentType.noise) {\n                    this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                } else if (this.type == InstrumentType.pickedString) {\n                    this.chord = Config.chords.dictionary[\"strum\"].index;\n                } else if (this.type == InstrumentType.chip) {\n                    this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                } else if (this.type == InstrumentType.fm||this.type == InstrumentType.fm6op) {\n                    this.chord = Config.chords.dictionary[\"custom interval\"].index;\n                } else {\n                    this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                }\n            }\n        }\n\n        this.unison = Config.unisons.dictionary[\"none\"].index; // default value.\n        const unisonProperty: any = instrumentObject[\"unison\"] || instrumentObject[\"interval\"] || instrumentObject[\"chorus\"]; // The unison property has gone by various names in the past.\n        if (unisonProperty != undefined) {\n            const legacyChorusNames: Dictionary<string> = { \"union\": \"none\", \"fifths\": \"fifth\", \"octaves\": \"octave\" };\n            const unison: Unison | undefined = Config.unisons.dictionary[legacyChorusNames[unisonProperty]] || Config.unisons.dictionary[unisonProperty];\n            if (unison != undefined) this.unison = unison.index;\n            if (unisonProperty == \"custom\") this.unison = Config.unisons.length;\n        }\n        //clamp these???\n        this.unisonVoices = (instrumentObject[\"unisonVoices\"] == undefined) ? Config.unisons[this.unison].voices : instrumentObject[\"unisonVoices\"];\n        this.unisonSpread = (instrumentObject[\"unisonSpread\"] == undefined) ? Config.unisons[this.unison].spread : instrumentObject[\"unisonSpread\"];\n        this.unisonOffset = (instrumentObject[\"unisonOffset\"] == undefined) ? Config.unisons[this.unison].offset : instrumentObject[\"unisonOffset\"];\n        this.unisonExpression = (instrumentObject[\"unisonExpression\"] == undefined) ? Config.unisons[this.unison].expression : instrumentObject[\"unisonExpression\"];\n        this.unisonSign = (instrumentObject[\"unisonSign\"] == undefined) ? Config.unisons[this.unison].sign : instrumentObject[\"unisonSign\"];\n\n        if (instrumentObject[\"chorus\"] == \"custom harmony\") {\n            // The original chorus setting had an option that now maps to two different settings. Override those if necessary.\n            this.unison = Config.unisons.dictionary[\"hum\"].index;\n            this.chord = Config.chords.dictionary[\"custom interval\"].index;\n        }\n        if (this.chord != Config.chords.dictionary[\"simultaneous\"].index && !Array.isArray(instrumentObject[\"effects\"])) {\n            // Enable chord if it was used.\n            this.effects = (this.effects | (1 << EffectType.chord));\n        }\n\n        if (instrumentObject[\"pitchShiftSemitones\"] != undefined) {\n            this.pitchShift = clamp(0, Config.pitchShiftRange, Math.round(+instrumentObject[\"pitchShiftSemitones\"]));\n        }\n        if (instrumentObject[\"detuneCents\"] != undefined) {\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, Math.round(Synth.centsToDetune(+instrumentObject[\"detuneCents\"])));\n        }\n\n        this.vibrato = Config.vibratos.dictionary[\"none\"].index; // default value.\n        const vibratoProperty: any = instrumentObject[\"vibrato\"] || instrumentObject[\"effect\"]; // The vibrato property was previously called \"effect\", not to be confused with the current \"effects\".\n        if (vibratoProperty != undefined) {\n\n            const legacyVibratoNames: Dictionary<string> = { \"vibrato light\": \"light\", \"vibrato delayed\": \"delayed\", \"vibrato heavy\": \"heavy\" };\n            const vibrato: Vibrato | undefined = Config.vibratos.dictionary[legacyVibratoNames[unisonProperty]] || Config.vibratos.dictionary[vibratoProperty];\n            if (vibrato != undefined)\n                this.vibrato = vibrato.index;\n            else if (vibratoProperty == \"custom\")\n                this.vibrato = Config.vibratos.length; // custom\n\n            if (this.vibrato == Config.vibratos.length) {\n                this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\n                this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\n                this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\n                this.vibratoType = instrumentObject[\"vibratoType\"];\n            }\n            else { // Set defaults for the vibrato profile\n                this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\n                this.vibratoDelay = Config.vibratos[this.vibrato].delayTicks / 2;\n                this.vibratoSpeed = 10; // default;\n                this.vibratoType = Config.vibratos[this.vibrato].type;\n            }\n\n            // Old songs may have a vibrato effect without explicitly enabling it.\n            if (vibrato != Config.vibratos.dictionary[\"none\"]) {\n                this.effects = (this.effects | (1 << EffectType.vibrato));\n            }\n        }\n\n        if (instrumentObject[\"pan\"] != undefined) {\n            this.pan = clamp(0, Config.panMax + 1, Math.round(Config.panCenter + (instrumentObject[\"pan\"] | 0) * Config.panCenter / 100));\n\n            // Old songs may have a panning effect without explicitly enabling it.\n            if (this.pan != Config.panCenter) {\n                this.effects = (this.effects | (1 << EffectType.panning));\n            }\n        } else {\n            this.pan = Config.panCenter;\n            // Still enabling pan effect, to make it a default\n            this.effects = (this.effects | (1 << EffectType.panning));\n        }\n\n        if (instrumentObject[\"panDelay\"] != undefined) {\n            this.panDelay = (instrumentObject[\"panDelay\"] | 0);\n        } else {\n            this.panDelay = 10;\n        }\n\n        if (instrumentObject[\"detune\"] != undefined) {\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (instrumentObject[\"detune\"] | 0));\n        }\n        else if (instrumentObject[\"detuneCents\"] == undefined) {\n            this.detune = Config.detuneCenter;\n        }\n\n        if (instrumentObject[\"distortion\"] != undefined) {\n            this.distortion = clamp(0, Config.distortionRange, Math.round((Config.distortionRange - 1) * (instrumentObject[\"distortion\"] | 0) / 100));\n        }\n\n        if (instrumentObject[\"bitcrusherOctave\"] != undefined) {\n            this.bitcrusherFreq = Config.bitcrusherFreqRange - 1 - (+instrumentObject[\"bitcrusherOctave\"]) / Config.bitcrusherOctaveStep;\n        }\n        if (instrumentObject[\"bitcrusherQuantization\"] != undefined) {\n            this.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, Math.round((Config.bitcrusherQuantizationRange - 1) * (instrumentObject[\"bitcrusherQuantization\"] | 0) / 100));\n        }\n\n        if (instrumentObject[\"echoSustain\"] != undefined) {\n            this.echoSustain = clamp(0, Config.echoSustainRange, Math.round((Config.echoSustainRange - 1) * (instrumentObject[\"echoSustain\"] | 0) / 100));\n        }\n        if (instrumentObject[\"echoDelayBeats\"] != undefined) {\n            this.echoDelay = clamp(0, Config.echoDelayRange, Math.round((+instrumentObject[\"echoDelayBeats\"]) * (Config.ticksPerPart * Config.partsPerBeat) / Config.echoDelayStepTicks - 1.0));\n        }\n\n        if (!isNaN(instrumentObject[\"chorus\"])) {\n            this.chorus = clamp(0, Config.chorusRange, Math.round((Config.chorusRange - 1) * (instrumentObject[\"chorus\"] | 0) / 100));\n        }\n\n        if (instrumentObject[\"reverb\"] != undefined) {\n            this.reverb = clamp(0, Config.reverbRange, Math.round((Config.reverbRange - 1) * (instrumentObject[\"reverb\"] | 0) / 100));\n        } else {\n            this.reverb = legacyGlobalReverb;\n        }\n\n        if (instrumentObject[\"pulseWidth\"] != undefined) {\n            this.pulseWidth = clamp(1, Config.pulseWidthRange + 1, Math.round(instrumentObject[\"pulseWidth\"]));\n        } else {\n            this.pulseWidth = Config.pulseWidthRange;\n        }\n\n        if (instrumentObject[\"dynamism\"] != undefined) {\n\t\t\tthis.supersawDynamism = clamp(0, Config.supersawDynamismMax + 1, Math.round(Config.supersawDynamismMax * (instrumentObject[\"dynamism\"] | 0) / 100));\n\t\t} else {\n\t\t\tthis.supersawDynamism = Config.supersawDynamismMax;\n\t\t}\n\t\tif (instrumentObject[\"spread\"] != undefined) {\n\t\t\tthis.supersawSpread = clamp(0, Config.supersawSpreadMax + 1, Math.round(Config.supersawSpreadMax * (instrumentObject[\"spread\"] | 0) / 100));\n\t\t} else {\n\t\t\tthis.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);\n\t\t}\n\t\tif (instrumentObject[\"shape\"] != undefined) {\n\t\t\tthis.supersawShape = clamp(0, Config.supersawShapeMax + 1, Math.round(Config.supersawShapeMax * (instrumentObject[\"shape\"] | 0) / 100));\n\t\t} else {\n\t\t\tthis.supersawShape = 0;\n\t\t}\n\n        if (instrumentObject[\"decimalOffset\"] != undefined) {\n            this.decimalOffset = clamp(0, 99 + 1, Math.round(instrumentObject[\"decimalOffset\"]));\n        } else {\n            this.decimalOffset = 0;\n        }\n\n        if (instrumentObject[\"harmonics\"] != undefined) {\n            for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n                this.harmonicsWave.harmonics[i] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(Config.harmonicsMax * (+instrumentObject[\"harmonics\"][i]) / 100)));\n            }\n            this.harmonicsWave.markCustomWaveDirty();\n        } else {\n            this.harmonicsWave.reset();\n        }\n\n        if (instrumentObject[\"spectrum\"] != undefined) {\n            for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                this.spectrumWave.spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+instrumentObject[\"spectrum\"][i]) / 100)));\n            }\n        } else {\n            this.spectrumWave.reset(isNoiseChannel);\n        }\n\n        if (instrumentObject[\"stringSustain\"] != undefined) {\n            this.stringSustain = clamp(0, Config.stringSustainRange, Math.round((Config.stringSustainRange - 1) * (instrumentObject[\"stringSustain\"] | 0) / 100));\n        } else {\n            this.stringSustain = 10;\n        }\n\n        if (this.type == InstrumentType.noise) {\n            this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\n            if (instrumentObject[\"wave\"] == \"pink noise\") this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == \"pink\");\n            if (instrumentObject[\"wave\"] == \"brownian noise\") this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == \"brownian\");\n            if (this.chipNoise == -1) this.chipNoise = 1;\n        }\n\n        const legacyEnvelopeNames: Dictionary<string> = { \"custom\": \"note size\", \"steady\": \"none\", \"pluck 1\": \"twang 1\", \"pluck 2\": \"twang 2\", \"pluck 3\": \"twang 3\" };\n        const getEnvelope = (name: any): Envelope | undefined => (legacyEnvelopeNames[name] != undefined) ? Config.envelopes.dictionary[legacyEnvelopeNames[name]] : Config.envelopes.dictionary[name];\n\n        if (this.type == InstrumentType.drumset) {\n            if (instrumentObject[\"drums\"] != undefined) {\n                for (let j: number = 0; j < Config.drumCount; j++) {\n                    const drum: any = instrumentObject[\"drums\"][j];\n                    if (drum == undefined) continue;\n\n                    this.drumsetEnvelopes[j] = Config.envelopes.dictionary[\"twang 2\"].index; // default value.\n                    if (drum[\"filterEnvelope\"] != undefined) {\n                        const envelope: Envelope | undefined = getEnvelope(drum[\"filterEnvelope\"]);\n                        if (envelope != undefined) this.drumsetEnvelopes[j] = envelope.index;\n                    }\n                    if (drum[\"spectrum\"] != undefined) {\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                            this.drumsetSpectrumWaves[j].spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+drum[\"spectrum\"][i]) / 100)));\n                        }\n                    }\n                }\n            }\n        }\n\n        if (this.type == InstrumentType.chip) {\n            const legacyWaveNames: Dictionary<number> = { \"triangle\": 1, \"square\": 2, \"pulse wide\": 3, \"pulse narrow\": 4, \"sawtooth\": 5, \"double saw\": 6, \"double pulse\": 7, \"spiky\": 8, \"plateau\": 0 };\n           \t\t\t\t const modboxWaveNames: Dictionary<number> = { \"10% pulse\": 22, \"sunsoft bass\": 23, \"loud pulse\": 24, \"sax\": 25, \"guitar\": 26, \"atari bass\": 28, \"atari pulse\": 29, \"1% pulse\": 30, \"curved sawtooth\": 31, \"viola\": 32, \"brass\": 33, \"acoustic bass\": 34, \"lyre\": 35, \"ramp pulse\": 36, \"piccolo\": 37, \"squaretooth\": 38, \"flatline\": 39, \"pnryshk a (u5)\": 40, \"pnryshk b (riff)\": 41 };\n             \t const sandboxWaveNames: Dictionary<number> = { \"shrill lute\": 42, \"shrill bass\": 44, \"nes pulse\": 45, \"saw bass\": 46, \"euphonium\": 47, \"shrill pulse\": 48, \"r-sawtooth\": 49, \"recorder\": 50, \"narrow saw\": 51, \"deep square\": 52, \"ring pulse\": 53, \"double sine\": 54, \"contrabass\": 55, \"double bass\": 56 };\n\t\t\t const zefboxWaveNames: Dictionary<number> = {\"semi-square\": 63, \"deep square\": 64, \"squaretal\": 40, \"saw wide\": 65, \"saw narrow \": 66, \"deep sawtooth\": 67, \"sawtal\": 68, \"pulse\": 69, \"triple pulse\": 70, \"high pulse\": 71,\"deep pulse\": 72 };\n\t\t\t const miscWaveNames: Dictionary<number> = {\"test1\": 56, \"pokey 4bit lfsr\": 57, \"pokey 5step bass\": 58, \"isolated spiky\": 59, \"unnamed 1\": 60, \"unnamed 2\": 61, \"guitar string\": 75, \"intense\": 76, \"buzz wave\": 77, \"pokey square\": 57, \"pokey bass\": 58, \"banana wave\": 83, \"test 1\": 84, \"test 2\": 84, \"real snare\": 85, \"earthbound o. guitar\": 86 };\n\t\t\t const paandorasboxWaveNames: Dictionary<number> = {\"kick\": 87, \"snare\": 88, \"piano1\": 89, \"WOW\": 90, \"overdrive\": 91, \"trumpet\": 92, \"saxophone\": 93, \"orchestrahit\": 94, \"detached violin\": 95, \"synth\": 96, \"sonic3snare\": 97, \"come on\": 98, \"choir\": 99, \"overdriveguitar\": 100, \"flute\": 101, \"legato violin\": 102, \"tremolo violin\": 103, \"amen break\": 104, \"pizzicato violin\": 105, \"tim allen grunt\": 106, \"tuba\": 107, \"loopingcymbal\": 108, \"standardkick\": 109, \"standardsnare\": 110, \"closedhihat\": 111, \"foothihat\": 112, \"openhihat\": 113, \"crashcymbal\": 114, \"pianoC4\": 115, \"liver pad\": 116, \"marimba\": 117, \"susdotwav\": 118, \"wackyboxtts\": 119};\n\t\t\t// const paandorasbetaWaveNames = {\"contrabass\": 55, \"double bass\": 56 };\n\t\t//this.chipWave = legacyWaveNames[instrumentObject[\"wave\"]] != undefined ? legacyWaveNames[instrumentObject[\"wave\"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\n            this.chipWave = -1;\n            const rawName: string = instrumentObject[\"wave\"];\n            for (const table of [\n                legacyWaveNames,\n                modboxWaveNames,\n                sandboxWaveNames,\n                zefboxWaveNames,\n                miscWaveNames,\n                paandorasboxWaveNames\n            ]) {\n                if (this.chipWave == -1 && table[rawName] != undefined && Config.chipWaves[table[rawName]] != undefined) {\n                    this.chipWave = table[rawName];\n                    break;\n                }\n            }\n            if (this.chipWave == -1) {\n                const potentialChipWaveIndex: number = Config.chipWaves.findIndex(wave => wave.name == rawName);\n                if (potentialChipWaveIndex != -1) this.chipWave = potentialChipWaveIndex;\n            }\n            // this.chipWave = legacyWaveNames[instrumentObject[\"wave\"]] != undefined ? legacyWaveNames[instrumentObject[\"wave\"]] : modboxWaveNames[instrumentObject[\"wave\"]] != undefined ? modboxWaveNames[instrumentObject[\"wave\"]] : sandboxWaveNames[instrumentObject[\"wave\"]] != undefined ? sandboxWaveNames[instrumentObject[\"wave\"]] : zefboxWaveNames[instrumentObject[\"wave\"]] != undefined ? zefboxWaveNames[instrumentObject[\"wave\"]] : miscWaveNames[instrumentObject[\"wave\"]] != undefined ? miscWaveNames[instrumentObject[\"wave\"]] : paandorasboxWaveNames[instrumentObject[\"wave\"]] != undefined ? paandorasboxWaveNames[instrumentObject[\"wave\"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject[\"wave\"]); \n\t\tif (this.chipWave == -1) this.chipWave = 1;\n        }\n\n        if (this.type == InstrumentType.fm || this.type == InstrumentType.fm6op) {\n            if(this.type == InstrumentType.fm) {\n                this.algorithm = Config.algorithms.findIndex(algorithm => algorithm.name == instrumentObject[\"algorithm\"]);\n                if (this.algorithm == -1) this.algorithm = 0;\n                this.feedbackType = Config.feedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"]);\n                if (this.feedbackType == -1) this.feedbackType = 0;\n            } else {\n                this.algorithm6Op = Config.algorithms6Op.findIndex(algorithm6Op => algorithm6Op.name == instrumentObject[\"algorithm\"]);\n                if (this.algorithm6Op == -1) this.algorithm6Op = 1;\n                if(this.algorithm6Op == 0){ \n                    this.customAlgorithm.set(instrumentObject[\"customAlgorithm\"][\"carrierCount\"], instrumentObject[\"customAlgorithm\"][\"mods\"]);\n                } else{\n                    this.customAlgorithm.fromPreset(this.algorithm6Op);\n                }\n                this.feedbackType6Op = Config.feedbacks6Op.findIndex(feedback6Op => feedback6Op.name == instrumentObject[\"feedbackType\"]);\n                if (this.feedbackType6Op == -1) this.feedbackType6Op = 1;\n                if(this.feedbackType6Op == 0) {\n                    this.customFeedbackType.set(instrumentObject[\"customFeedback\"][\"mods\"]);\n                }else{\n                    this.customFeedbackType.fromPreset(this.feedbackType6Op)\n                }\n            }\n            if (instrumentObject[\"feedbackAmplitude\"] != undefined) {\n                this.feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, instrumentObject[\"feedbackAmplitude\"] | 0);\n            } else {\n                this.feedbackAmplitude = 0;\n            }\n\n            for (let j: number = 0; j < Config.operatorCount + (this.type == InstrumentType.fm6op?2:0); j++) {\n                const operator: Operator = this.operators[j];\n                let operatorObject: any = undefined;\n                if (instrumentObject[\"operators\"] != undefined) operatorObject = instrumentObject[\"operators\"][j];\n                if (operatorObject == undefined) operatorObject = {};\n\n                operator.frequency = Config.operatorFrequencies.findIndex(freq => freq.name == operatorObject[\"frequency\"]);\n                if (operator.frequency == -1) operator.frequency = 0;\n                if (operatorObject[\"amplitude\"] != undefined) {\n                    operator.amplitude = clamp(0, Config.operatorAmplitudeMax + 1, operatorObject[\"amplitude\"] | 0);\n                } else {\n                    operator.amplitude = 0;\n                }\n                if (operatorObject[\"waveform\"] != undefined) {\n                    operator.waveform = Config.operatorWaves.findIndex(wave => wave.name == operatorObject[\"waveform\"]);\n                    if (operator.waveform == -1) {\n                        // GoldBox compatibility\n                        if (operatorObject[\"waveform\"] == \"square\") {\n                            operator.waveform = Config.operatorWaves.dictionary[\"pulse width\"].index;\n                            operator.pulseWidth = 5;\n                        } else {\n                            operator.waveform = 0;\n                        }\n\n                    }\n                } else {\n                    operator.waveform = 0;\n                }\n                if (operatorObject[\"pulseWidth\"] != undefined) {\n                    operator.pulseWidth = operatorObject[\"pulseWidth\"] | 0;\n                } else {\n                    operator.pulseWidth = 5;\n                }\n            }\n        }\n        else if (this.type == InstrumentType.customChipWave) {\n            if (instrumentObject[\"customChipWave\"]) {\n\n                for (let i: number = 0; i < 64; i++) {\n                    this.customChipWave[i] = instrumentObject[\"customChipWave\"][i];\n                }\n\n\n                let sum: number = 0.0;\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\n                    sum += this.customChipWave[i];\n                }\n                const average: number = sum / this.customChipWave.length;\n\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\n                let cumulative: number = 0;\n                let wavePrev: number = 0;\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\n                    cumulative += wavePrev;\n                    wavePrev = this.customChipWave[i] - average;\n                    this.customChipWaveIntegral[i] = cumulative;\n                }\n\n                // 65th, last sample is for anti-aliasing\n                this.customChipWaveIntegral[64] = 0.0;\n            }\n        } else if (this.type == InstrumentType.mod) {\n            if (instrumentObject[\"modChannels\"] != undefined) {\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\n                    this.modChannels[mod] = instrumentObject[\"modChannels\"][mod];\n                    this.modInstruments[mod] = instrumentObject[\"modInstruments\"][mod];\n                    this.modulators[mod] = instrumentObject[\"modSettings\"][mod];\n                }\n            }\n        }\n\n        if (this.type != InstrumentType.mod) {\n            // Arpeggio speed\n            if (this.chord == Config.chords.dictionary[\"arpeggio\"].index && instrumentObject[\"arpeggioSpeed\"] != undefined) {\n                this.arpeggioSpeed = instrumentObject[\"arpeggioSpeed\"];\n            }\n            else {\n                this.arpeggioSpeed = (useSlowerRhythm) ? 9 : 12; // Decide whether to import arps as x3/4 speed\n            }\n\n            if (instrumentObject[\"fastTwoNoteArp\"] != undefined) {\n                this.fastTwoNoteArp = instrumentObject[\"fastTwoNoteArp\"];\n            }\n            else {\n                this.fastTwoNoteArp = useFastTwoNoteArp;\n            }\n\n            if (instrumentObject[\"clicklessTransition\"] != undefined) {\n                this.clicklessTransition = instrumentObject[\"clicklessTransition\"];\n            }\n            else {\n                this.clicklessTransition = false;\n            }\n\n            if (instrumentObject[\"aliases\"] != undefined) {\n                this.aliases = instrumentObject[\"aliases\"];\n            }\n            else {\n                this.aliases = false;\n            }\n\n            if (instrumentObject[\"noteFilterType\"] != undefined) {\n                this.noteFilterType = instrumentObject[\"noteFilterType\"];\n            }\n            if (instrumentObject[\"noteSimpleCut\"] != undefined) {\n                this.noteFilterSimpleCut = instrumentObject[\"noteSimpleCut\"];\n            }\n            if (instrumentObject[\"noteSimplePeak\"] != undefined) {\n                this.noteFilterSimplePeak = instrumentObject[\"noteSimplePeak\"];\n            }\n            if (instrumentObject[\"noteFilter\"] != undefined) {\n                this.noteFilter.fromJsonObject(instrumentObject[\"noteFilter\"]);\n            } else {\n                this.noteFilter.reset();\n            }\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                if (Array.isArray(instrumentObject[\"noteSubFilters\" + i])) {\n                    this.noteSubFilters[i] = new FilterSettings();\n                    this.noteSubFilters[i]!.fromJsonObject(instrumentObject[\"noteSubFilters\" + i]);\n                }\n            }\n            if (instrumentObject[\"eqFilterType\"] != undefined) {\n                this.eqFilterType = instrumentObject[\"eqFilterType\"];\n            }\n            if (instrumentObject[\"eqSimpleCut\"] != undefined) {\n                this.eqFilterSimpleCut = instrumentObject[\"eqSimpleCut\"];\n            }\n            if (instrumentObject[\"eqSimplePeak\"] != undefined) {\n                this.eqFilterSimplePeak = instrumentObject[\"eqSimplePeak\"];\n            }\n            if (Array.isArray(instrumentObject[\"eqFilter\"])) {\n                this.eqFilter.fromJsonObject(instrumentObject[\"eqFilter\"]);\n            } else {\n                this.eqFilter.reset();\n\n                const legacySettings: LegacySettings = {};\n\n                // Try converting from legacy filter settings.\n                const filterCutoffMaxHz: number = 8000;\n                const filterCutoffRange: number = 11;\n                const filterResonanceRange: number = 8;\n                if (instrumentObject[\"filterCutoffHz\"] != undefined) {\n                    legacySettings.filterCutoff = clamp(0, filterCutoffRange, Math.round((filterCutoffRange - 1) + 2.0 * Math.log((instrumentObject[\"filterCutoffHz\"] | 0) / filterCutoffMaxHz) / Math.LN2));\n                } else {\n                    legacySettings.filterCutoff = (this.type == InstrumentType.chip) ? 6 : 10;\n                }\n                if (instrumentObject[\"filterResonance\"] != undefined) {\n                    legacySettings.filterResonance = clamp(0, filterResonanceRange, Math.round((filterResonanceRange - 1) * (instrumentObject[\"filterResonance\"] | 0) / 100));\n                } else {\n                    legacySettings.filterResonance = 0;\n                }\n\n                legacySettings.filterEnvelope = getEnvelope(instrumentObject[\"filterEnvelope\"]);\n                legacySettings.pulseEnvelope = getEnvelope(instrumentObject[\"pulseEnvelope\"]);\n                legacySettings.feedbackEnvelope = getEnvelope(instrumentObject[\"feedbackEnvelope\"]);\n                if (Array.isArray(instrumentObject[\"operators\"])) {\n                    legacySettings.operatorEnvelopes = [];\n                    for (let j: number = 0; j < Config.operatorCount; j++) {\n                        let envelope: Envelope | undefined;\n                        if (instrumentObject[\"operators\"][j] != undefined) {\n                            envelope = getEnvelope(instrumentObject[\"operators\"][j][\"envelope\"]);\n                        }\n                        legacySettings.operatorEnvelopes[j] = (envelope != undefined) ? envelope : Config.envelopes.dictionary[\"none\"];\n                    }\n                }\n\n                // Try converting from even older legacy filter settings.\n                if (instrumentObject[\"filter\"] != undefined) {\n                    const legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\n                    const legacyToEnvelope: string[] = [\"none\", \"none\", \"none\", \"none\", \"decay 1\", \"decay 2\", \"decay 3\"];\n                    const filterNames: string[] = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\n                    const oldFilterNames: Dictionary<number> = { \"sustain sharp\": 1, \"sustain medium\": 2, \"sustain soft\": 3, \"decay sharp\": 4 };\n                    let legacyFilter: number = oldFilterNames[instrumentObject[\"filter\"]] != undefined ? oldFilterNames[instrumentObject[\"filter\"]] : filterNames.indexOf(instrumentObject[\"filter\"]);\n                    if (legacyFilter == -1) legacyFilter = 0;\n                    legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                    legacySettings.filterEnvelope = getEnvelope(legacyToEnvelope[legacyFilter]);\n                    legacySettings.filterResonance = 0;\n                }\n\n                this.convertLegacySettings(legacySettings, true);\n            }\n\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                if (Array.isArray(instrumentObject[\"eqSubFilters\" + i])) {\n                    this.eqSubFilters[i] = new FilterSettings();\n                    this.eqSubFilters[i]!.fromJsonObject(instrumentObject[\"eqSubFilters\" + i]);\n                }\n            }\n\n            if (Array.isArray(instrumentObject[\"envelopes\"])) {\n                const envelopeArray: any[] = instrumentObject[\"envelopes\"];\n                for (let i = 0; i < envelopeArray.length; i++) {\n                    if (this.envelopeCount >= Config.maxEnvelopeCount) break;\n                    const tempEnvelope: EnvelopeSettings = new EnvelopeSettings();\n                    tempEnvelope.fromJsonObject(envelopeArray[i]);\n                    this.addEnvelope(tempEnvelope.target, tempEnvelope.index, tempEnvelope.envelope);\n                }\n            }\n        }\n   \t\t // advloop addition\n            if (type === 0) {\n                if (instrumentObject[\"isUsingAdvancedLoopControls\"] != undefined) {\n                    this.isUsingAdvancedLoopControls = instrumentObject[\"isUsingAdvancedLoopControls\"];\n                    this.chipWaveLoopStart = instrumentObject[\"chipWaveLoopStart\"];\n                    this.chipWaveLoopEnd = instrumentObject[\"chipWaveLoopEnd\"];\n                    this.chipWaveLoopMode = instrumentObject[\"chipWaveLoopMode\"];\n                    this.chipWavePlayBackwards = instrumentObject[\"chipWavePlayBackwards\"];\n                    this.chipWaveStartOffset = instrumentObject[\"chipWaveStartOffset\"];\n                } else {\n                    this.isUsingAdvancedLoopControls = false;\n                    this.chipWaveLoopStart = 0;\n                    this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\n                    this.chipWaveLoopMode = 0;\n                    this.chipWavePlayBackwards = false;\n                    this.chipWaveStartOffset = 0;\n                }\n            }\n\t}\t\n           // advloop addition\n\n    public static frequencyFromPitch(pitch: number): number {\n        return 440.0 * Math.pow(2.0, (pitch - 69.0) / 12.0);\n    }\n\n    public addEnvelope(target: number, index: number, envelope: number): void {\n        let makeEmpty: boolean = false;\n        if (!this.supportsEnvelopeTarget(target, index)) makeEmpty = true;\n        if (this.envelopeCount >= Config.maxEnvelopeCount) throw new Error();\n        while (this.envelopes.length <= this.envelopeCount) this.envelopes[this.envelopes.length] = new EnvelopeSettings();\n        const envelopeSettings: EnvelopeSettings = this.envelopes[this.envelopeCount];\n        envelopeSettings.target = makeEmpty ? Config.instrumentAutomationTargets.dictionary[\"none\"].index : target;\n        envelopeSettings.index = makeEmpty ? 0 : index;\n        envelopeSettings.envelope = envelope;\n        this.envelopeCount++;\n    }\n\n    public supportsEnvelopeTarget(target: number, index: number): boolean {\n        const automationTarget: AutomationTarget = Config.instrumentAutomationTargets[target];\n        if (index >= automationTarget.maxCount) {\n            return false;\n        }\n        if (automationTarget.compatibleInstruments != null && automationTarget.compatibleInstruments.indexOf(this.type) == -1) {\n            return false;\n        }\n        if (automationTarget.effect != null && (this.effects & (1 << automationTarget.effect)) == 0) {\n            return false;\n        }\n        if (automationTarget.isFilter) {\n            //if (automationTarget.perNote) {\n            let useControlPointCount: number = this.noteFilter.controlPointCount;\n            if (this.noteFilterType)\n                useControlPointCount = 1;\n            if (index >= useControlPointCount) return false;\n            //} else {\n            //\tif (index >= this.eqFilter.controlPointCount)   return false;\n            //}\n        }\n        return true;\n    }\n\n    public clearInvalidEnvelopeTargets(): void {\n        for (let envelopeIndex: number = 0; envelopeIndex < this.envelopeCount; envelopeIndex++) {\n            const target: number = this.envelopes[envelopeIndex].target;\n            const index: number = this.envelopes[envelopeIndex].index;\n            if (!this.supportsEnvelopeTarget(target, index)) {\n                this.envelopes[envelopeIndex].target = Config.instrumentAutomationTargets.dictionary[\"none\"].index;\n                this.envelopes[envelopeIndex].index = 0;\n            }\n        }\n    }\n\n    public getTransition(): Transition {\n        return effectsIncludeTransition(this.effects) ? Config.transitions[this.transition] :\n            (this.type == InstrumentType.mod ? Config.transitions.dictionary[\"interrupt\"] : Config.transitions.dictionary[\"normal\"]);\n    }\n\n    public getFadeInSeconds(): number {\n        return (this.type == InstrumentType.drumset) ? 0.0 : Synth.fadeInSettingToSeconds(this.fadeIn);\n    }\n\n    public getFadeOutTicks(): number {\n        return (this.type == InstrumentType.drumset) ? Config.drumsetFadeOutTicks : Synth.fadeOutSettingToTicks(this.fadeOut)\n    }\n\n    public getChord(): Chord {\n        return effectsIncludeChord(this.effects) ? Config.chords[this.chord] : Config.chords.dictionary[\"simultaneous\"];\n    }\n\n    public getDrumsetEnvelope(pitch: number): Envelope {\n        if (this.type != InstrumentType.drumset) throw new Error(\"Can't getDrumsetEnvelope() for non-drumset.\");\n        return Config.envelopes[this.drumsetEnvelopes[pitch]];\n    }\n}\n\nexport class Channel {\n    public octave: number = 0;\n    public readonly instruments: Instrument[] = [];\n    public readonly patterns: Pattern[] = [];\n    public readonly bars: number[] = [];\n    public muted: boolean = false;\n    public name: string = \"\";\n}\n\nexport class Song {\n    private static readonly _format: string = \"UltraBox\";\n    private static readonly _oldestBeepboxVersion: number = 2;\n    private static readonly _latestBeepboxVersion: number = 9;\n    private static readonly _oldestJummBoxVersion: number = 1;\n    private static readonly _latestJummBoxVersion: number = 5;\n    private static readonly _oldestGoldBoxVersion: number = 1;\n    private static readonly _latestGoldBoxVersion: number = 4;\n    private static readonly _oldestUltraBoxVersion: number = 1;\n    private static readonly _latestUltraBoxVersion: number = 4;\n    // One-character variant detection at the start of URL to distinguish variants such as JummBox, Or Goldbox. \"j\" and \"g\" respectively\n\t//also \"u\" is ultrabox lol\n    private static readonly _variant = 0x75; //\"a\" ~ abyssbox\n\n    public title: string;\n    public scale: number;\n    public scaleCustom: boolean[] = [];\n    public key: number;\n    public octave: number;\n    public tempo: number;\n    public reverb: number;\n    public beatsPerBar: number;\n    public barCount: number;\n    public patternsPerChannel: number;\n    public rhythm: number;\n    public layeredInstruments: boolean;\n    public patternInstruments: boolean;\n    public loopStart: number;\n    public loopLength: number;\n    public pitchChannelCount: number;\n    public noiseChannelCount: number;\n    public modChannelCount: number;\n    public readonly channels: Channel[] = [];\n    public limitDecay: number = 4.0;\n    public limitRise: number = 4000.0;\n    public compressionThreshold: number = 1.0;\n    public limitThreshold: number = 1.0;\n    public compressionRatio: number = 1.0;\n    public limitRatio: number = 1.0;\n    public masterGain: number = 1.0;\n    public inVolumeCap: number = 0.0;\n    public outVolumeCap: number = 0.0;\n\n    constructor(string?: string) {\n        if (string != undefined) {\n            this.fromBase64String(string);\n        } else {\n            this.initToDefault(true);\n        }\n    }\n\n    // Returns the ideal new note volume when dragging (max volume for a normal note, a \"neutral\" value for mod notes based on how they work)\n    public getNewNoteVolume = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\n        if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\n            return 6;\n        else {\n            // Sigh, the way pitches count up and the visual ordering in the UI are flipped.\n            modCount = Config.modCount - modCount - 1;\n\n            let vol: number | undefined = Config.modulators[this.channels[modChannel].instruments[modInstrument].modulators[modCount]].newNoteVol;\n\n            // For tempo, actually use user defined tempo\n            let tempoIndex: number = Config.modulators.dictionary[\"tempo\"].index;\n            if (this.channels[modChannel].instruments[modInstrument].modulators[modCount] == tempoIndex) {\n                vol = this.tempo - Config.modulators[tempoIndex].convertRealFactor;\n            }\n\n            if (vol != undefined)\n                return vol;\n            else\n                return 6;\n        }\n    }\n\n\n    public getVolumeCap = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\n        if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\n            return 6;\n        else {\n            // Sigh, the way pitches count up and the visual ordering in the UI are flipped.\n            modCount = Config.modCount - modCount - 1;\n\n            let instrument: Instrument = this.channels[modChannel].instruments[modInstrument];\n            let modulator = Config.modulators[instrument.modulators[modCount]];\n            let cap: number | undefined = modulator.maxRawVol;\n\n            if (cap != undefined) {\n                // For filters, cap is dependent on which filter setting is targeted\n                if (modulator.name == \"eq filter\" || modulator.name == \"note filter\") {\n                    // type 0: number of filter morphs\n                    // type 1/odd: number of filter x positions\n                    // type 2/even: number of filter y positions\n                    cap = Config.filterMorphCount - 1;\n                    if (instrument.modFilterTypes[modCount] > 0 && instrument.modFilterTypes[modCount] % 2) {\n                        cap = Config.filterFreqRange;\n                    } else if (instrument.modFilterTypes[modCount] > 0) {\n                        cap = Config.filterGainRange;\n                    }\n                }\n                return cap;\n            }\n            else\n                return 6;\n        }\n    }\n\n    public getVolumeCapForSetting = (isMod: boolean, modSetting: number, filterType?: number): number => {\n        if (!isMod)\n            return Config.noteSizeMax;\n        else {\n            let cap: number | undefined = Config.modulators[modSetting].maxRawVol;\n            if (cap != undefined) {\n\n                // For filters, cap is dependent on which filter setting is targeted\n                if (filterType != undefined && (Config.modulators[modSetting].name == \"eq filter\" || Config.modulators[modSetting].name == \"note filter\")) {\n                    // type 0: number of filter morphs\n                    // type 1/odd: number of filter x positions\n                    // type 2/even: number of filter y positions\n                    cap = Config.filterMorphCount - 1;\n                    if (filterType > 0 && filterType % 2) {\n                        cap = Config.filterFreqRange;\n                    } else if (filterType > 0) {\n                        cap = Config.filterGainRange;\n                    }\n                }\n\n                return cap;\n            }\n            else\n                return Config.noteSizeMax;\n        }\n    }\n\n    public getChannelCount(): number {\n        return this.pitchChannelCount + this.noiseChannelCount + this.modChannelCount;\n    }\n\n    public getMaxInstrumentsPerChannel(): number {\n        return Math.max(\n            this.layeredInstruments ? Config.layeredInstrumentCountMax : Config.instrumentCountMin,\n            this.patternInstruments ? Config.patternInstrumentCountMax : Config.instrumentCountMin);\n    }\n\n    public getMaxInstrumentsPerPattern(channelIndex: number): number {\n        return this.getMaxInstrumentsPerPatternForChannel(this.channels[channelIndex]);\n    }\n\n    public getMaxInstrumentsPerPatternForChannel(channel: Channel): number {\n        return this.layeredInstruments\n            ? Math.min(Config.layeredInstrumentCountMax, channel.instruments.length)\n            : 1;\n    }\n\n    public getChannelIsNoise(channelIndex: number): boolean {\n        return (channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount);\n    }\n\n    public getChannelIsMod(channelIndex: number): boolean {\n        return (channelIndex >= this.pitchChannelCount + this.noiseChannelCount);\n    }\n\n    public initToDefault(andResetChannels: boolean = true): void {\n        this.scale = 0;\n        //this.scaleCustom = [true, false, true, true, false, false, false, true, true, false, true, true];\n\tthis.scaleCustom = [true, false, false, false, false, false, false, false, false, false, false, false];\n        this.key = 0;\n        this.octave = 0;\n        this.loopStart = 0;\n        this.loopLength = 4;\n        this.tempo = 120;\n        this.reverb = 0;\n        this.beatsPerBar = 8;\n        this.barCount = 16;\n        this.patternsPerChannel = 8;\n        this.rhythm = 3;\n        this.layeredInstruments = false;\n        this.patternInstruments = false;\n\n        this.title = \"Untitled\";\n        document.title = EditorConfig.versionDisplayName;\n\n        if (andResetChannels) {\n            this.pitchChannelCount = 3;\n            this.noiseChannelCount = 1;\n            this.modChannelCount = 0;\n            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                const isNoiseChannel: boolean = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\n                const isModChannel: boolean = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\n                if (this.channels.length <= channelIndex) {\n                    this.channels[channelIndex] = new Channel();\n                }\n                const channel: Channel = this.channels[channelIndex];\n                channel.octave = Math.max(3 - channelIndex, 0); // [3, 2, 1, 0]; Descending octaves with drums at zero in last channel.\n\n                for (let pattern: number = 0; pattern < this.patternsPerChannel; pattern++) {\n                    if (channel.patterns.length <= pattern) {\n                        channel.patterns[pattern] = new Pattern();\n                    } else {\n                        channel.patterns[pattern].reset();\n                    }\n                }\n                channel.patterns.length = this.patternsPerChannel;\n\n                for (let instrument: number = 0; instrument < Config.instrumentCountMin; instrument++) {\n                    if (channel.instruments.length <= instrument) {\n                        channel.instruments[instrument] = new Instrument(isNoiseChannel, isModChannel);\n                    }\n                    channel.instruments[instrument].setTypeAndReset(isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip), isNoiseChannel, isModChannel);\n                }\n                channel.instruments.length = Config.instrumentCountMin;\n\n                for (let bar: number = 0; bar < this.barCount; bar++) {\n                    channel.bars[bar] = bar < 4 ? 1 : 0;\n                }\n                channel.bars.length = this.barCount;\n            }\n            this.channels.length = this.getChannelCount();\n        }\n    }\n\n    public toBase64String(): string {\n        let bits: BitFieldWriter;\n        let buffer: number[] = [];\n\n        buffer.push(Song._variant);\n                 //   buffer.push(base64IntToCharCode[Song._latestGoldBoxVersion]);\n\t\t buffer.push(base64IntToCharCode[Song._latestUltraBoxVersion]);\n\n        // Length of the song name string\n        buffer.push(SongTagCode.songTitle);\n        var encodedSongTitle: string = encodeURIComponent(this.title);\n        buffer.push(base64IntToCharCode[encodedSongTitle.length >> 6], base64IntToCharCode[encodedSongTitle.length & 0x3f]);\n\n        // Actual encoded string follows\n        for (let i: number = 0; i < encodedSongTitle.length; i++) {\n            buffer.push(encodedSongTitle.charCodeAt(i));\n        }\n\n        buffer.push(SongTagCode.channelCount, base64IntToCharCode[this.pitchChannelCount], base64IntToCharCode[this.noiseChannelCount], base64IntToCharCode[this.modChannelCount]);\n        buffer.push(SongTagCode.scale, base64IntToCharCode[this.scale]);\n        if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\n            for (var i = 1; i < Config.pitchesPerOctave; i++) {\n                buffer.push(base64IntToCharCode[this.scaleCustom[i]?1:0]) // ineffiecent? yes, all we're going to do for now? hell yes\n            }\n        }\n        buffer.push(SongTagCode.key, base64IntToCharCode[this.key], base64IntToCharCode[this.octave - Config.octaveMin]);\n        buffer.push(SongTagCode.loopStart, base64IntToCharCode[this.loopStart >> 6], base64IntToCharCode[this.loopStart & 0x3f]);\n        buffer.push(SongTagCode.loopEnd, base64IntToCharCode[(this.loopLength - 1) >> 6], base64IntToCharCode[(this.loopLength - 1) & 0x3f]);\n        buffer.push(SongTagCode.tempo, base64IntToCharCode[this.tempo >> 6], base64IntToCharCode[this.tempo & 0x3F]);\n        buffer.push(SongTagCode.beatCount, base64IntToCharCode[this.beatsPerBar - 1]);\n        buffer.push(SongTagCode.barCount, base64IntToCharCode[(this.barCount - 1) >> 6], base64IntToCharCode[(this.barCount - 1) & 0x3f]);\n        buffer.push(SongTagCode.patternCount, base64IntToCharCode[(this.patternsPerChannel - 1) >> 6], base64IntToCharCode[(this.patternsPerChannel - 1) & 0x3f]);\n        buffer.push(SongTagCode.rhythm, base64IntToCharCode[this.rhythm]);\n\n        // Push limiter settings, but only if they aren't the default!\n        buffer.push(SongTagCode.limiterSettings);\n        if (this.compressionRatio != 1.0 || this.limitRatio != 1.0 || this.limitRise != 4000.0 || this.limitDecay != 4.0 || this.limitThreshold != 1.0 || this.compressionThreshold != 1.0 || this.masterGain != 1.0) {\n            buffer.push(base64IntToCharCode[Math.round(this.compressionRatio < 1 ? this.compressionRatio * 10 : 10 + (this.compressionRatio - 1) * 60)]); // 0 ~ 1.15 uneven, mapped to 0 ~ 20\n            buffer.push(base64IntToCharCode[Math.round(this.limitRatio < 1 ? this.limitRatio * 10 : 9 + this.limitRatio)]); // 0 ~ 10 uneven, mapped to 0 ~ 20\n            buffer.push(base64IntToCharCode[this.limitDecay]); // directly 1 ~ 30\n            buffer.push(base64IntToCharCode[Math.round((this.limitRise - 2000.0) / 250.0)]); // 2000 ~ 10000 by 250, mapped to 0 ~ 32\n            buffer.push(base64IntToCharCode[Math.round(this.compressionThreshold * 20)]); // 0 ~ 1.1 by 0.05, mapped to 0 ~ 22\n            buffer.push(base64IntToCharCode[Math.round(this.limitThreshold * 20)]); // 0 ~ 2 by 0.05, mapped to 0 ~ 40\n            buffer.push(base64IntToCharCode[Math.round(this.masterGain * 50) >> 6], base64IntToCharCode[Math.round(this.masterGain * 50) & 0x3f]); // 0 ~ 5 by 0.02, mapped to 0 ~ 250\n        }\n        else {\n            buffer.push(base64IntToCharCode[0x3f]); // Not using limiter\n        }\n\n        buffer.push(SongTagCode.channelNames);\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\n            // Length of the channel name string\n            var encodedChannelName: string = encodeURIComponent(this.channels[channel].name);\n            buffer.push(base64IntToCharCode[encodedChannelName.length >> 6], base64IntToCharCode[encodedChannelName.length & 0x3f]);\n\n            // Actual encoded string follows\n            for (let i: number = 0; i < encodedChannelName.length; i++) {\n                buffer.push(encodedChannelName.charCodeAt(i));\n            }\n        }\n\n        buffer.push(SongTagCode.instrumentCount, base64IntToCharCode[(<any>this.layeredInstruments << 1) | <any>this.patternInstruments]);\n        if (this.layeredInstruments || this.patternInstruments) {\n            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                buffer.push(base64IntToCharCode[this.channels[channelIndex].instruments.length - Config.instrumentCountMin]);\n            }\n        }\n\n        buffer.push(SongTagCode.channelOctave);\n        for (let channelIndex: number = 0; channelIndex < this.pitchChannelCount; channelIndex++) {\n            buffer.push(base64IntToCharCode[this.channels[channelIndex].octave]);\n        }\n\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n            for (let i: number = 0; i < this.channels[channelIndex].instruments.length; i++) {\n                const instrument: Instrument = this.channels[channelIndex].instruments[i];\n                buffer.push(SongTagCode.startInstrument, base64IntToCharCode[instrument.type]);\n                buffer.push(SongTagCode.volume, base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) >> 6], base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) & 0x3f]);\n                buffer.push(SongTagCode.preset, base64IntToCharCode[instrument.preset >> 6], base64IntToCharCode[instrument.preset & 63]);\n\n                buffer.push(SongTagCode.eqFilter);\n                buffer.push(base64IntToCharCode[+instrument.eqFilterType]);\n                if (instrument.eqFilterType) {\n                    buffer.push(base64IntToCharCode[instrument.eqFilterSimpleCut]);\n                    buffer.push(base64IntToCharCode[instrument.eqFilterSimplePeak]);\n                }\n                else {\n                    if (instrument.eqFilter == null) {\n                        // Push null filter settings\n                        buffer.push(base64IntToCharCode[0]);\n                        console.log(\"Null EQ filter settings detected in toBase64String for channelIndex \" + channelIndex + \", instrumentIndex \" + i);\n                    } else {\n                        buffer.push(base64IntToCharCode[instrument.eqFilter.controlPointCount]);\n                        for (let j: number = 0; j < instrument.eqFilter.controlPointCount; j++) {\n                            const point: FilterControlPoint = instrument.eqFilter.controlPoints[j];\n                            buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                        }\n                    }\n\n                    // Push subfilters as well. Skip Index 0, is a copy of the base filter.\n                    let usingSubFilterBitfield: number = 0;\n                    for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                        usingSubFilterBitfield |= (+(instrument.eqSubFilters[j + 1] != null) << j);\n                    }\n                    // Put subfilter usage into 2 chars (12 bits)\n                    buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\n                    // Put subfilter info in for all used subfilters\n                    for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                        if (usingSubFilterBitfield & (1 << j)) {\n                            buffer.push(base64IntToCharCode[instrument.eqSubFilters[j + 1]!.controlPointCount]);\n                            for (let k: number = 0; k < instrument.eqSubFilters[j + 1]!.controlPointCount; k++) {\n                                const point: FilterControlPoint = instrument.eqSubFilters[j + 1]!.controlPoints[k];\n                                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                            }\n                        }\n                    }\n                }\n\n                // The list of enabled effects is represented as a 12-bit bitfield using two six-bit characters.\n                buffer.push(SongTagCode.effects, base64IntToCharCode[instrument.effects >> 6], base64IntToCharCode[instrument.effects & 63]);\n                if (effectsIncludeNoteFilter(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[+instrument.noteFilterType]);\n                    if (instrument.noteFilterType) {\n                        buffer.push(base64IntToCharCode[instrument.noteFilterSimpleCut]);\n                        buffer.push(base64IntToCharCode[instrument.noteFilterSimplePeak]);\n                    }\n                    else {\n                        if (instrument.noteFilter == null) {\n                            // Push null filter settings\n                            buffer.push(base64IntToCharCode[0]);\n                            console.log(\"Null note filter settings detected in toBase64String for channelIndex \" + channelIndex + \", instrumentIndex \" + i);\n                        }\n                        else {\n                            buffer.push(base64IntToCharCode[instrument.noteFilter.controlPointCount]);\n                            for (let j: number = 0; j < instrument.noteFilter.controlPointCount; j++) {\n                                const point: FilterControlPoint = instrument.noteFilter.controlPoints[j];\n                                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                            }\n                        }\n\n                        // Push subfilters as well. Skip Index 0, is a copy of the base filter.\n                        let usingSubFilterBitfield: number = 0;\n                        for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                            usingSubFilterBitfield |= (+(instrument.noteSubFilters[j + 1] != null) << j);\n                        }\n                        // Put subfilter usage into 2 chars (12 bits)\n                        buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\n                        // Put subfilter info in for all used subfilters\n                        for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                            if (usingSubFilterBitfield & (1 << j)) {\n                                buffer.push(base64IntToCharCode[instrument.noteSubFilters[j + 1]!.controlPointCount]);\n                                for (let k: number = 0; k < instrument.noteSubFilters[j + 1]!.controlPointCount; k++) {\n                                    const point: FilterControlPoint = instrument.noteSubFilters[j + 1]!.controlPoints[k];\n                                    buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                                }\n                            }\n                        }\n                    }\n                }\n                if (effectsIncludeTransition(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.transition]);\n                }\n                if (effectsIncludeChord(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.chord]);\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\n                    if (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index) {\n                        buffer.push(base64IntToCharCode[instrument.arpeggioSpeed]);\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\n                    }\n                }\n                if (effectsIncludePitchShift(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.pitchShift]);\n                }\n                if (effectsIncludeDetune(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[(instrument.detune - Config.detuneMin) >> 6], base64IntToCharCode[(instrument.detune - Config.detuneMin) & 0x3F]);\n                }\n                if (effectsIncludeVibrato(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.vibrato]);\n                    // Custom vibrato settings\n                    if (instrument.vibrato == Config.vibratos.length) {\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDelay)]);\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\n                    }\n                }\n                if (effectsIncludeDistortion(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.distortion]);\n                    // Aliasing is tied into distortion for now\n                    buffer.push(base64IntToCharCode[+instrument.aliases]);\n                }\n                if (effectsIncludeBitcrusher(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.bitcrusherFreq], base64IntToCharCode[instrument.bitcrusherQuantization]);\n                }\n                if (effectsIncludePanning(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.pan >> 6], base64IntToCharCode[instrument.pan & 0x3f]);\n                    buffer.push(base64IntToCharCode[instrument.panDelay]);\n                }\n                if (effectsIncludeChorus(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.chorus]);\n                }\n                if (effectsIncludeEcho(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.echoSustain], base64IntToCharCode[instrument.echoDelay]);\n                }\n                if (effectsIncludeReverb(instrument.effects)) {\n                    buffer.push(base64IntToCharCode[instrument.reverb]);\n                }\n\n                if (instrument.type != InstrumentType.drumset) {\n                    buffer.push(SongTagCode.fadeInOut, base64IntToCharCode[instrument.fadeIn], base64IntToCharCode[instrument.fadeOut]);\n                    // Transition info follows transition song tag\n                    buffer.push(base64IntToCharCode[+instrument.clicklessTransition]);\n                }\n\n                if (instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pickedString) {\n                    buffer.push(SongTagCode.harmonics);\n                    const harmonicsBits: BitFieldWriter = new BitFieldWriter();\n                    for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n                        harmonicsBits.write(Config.harmonicsControlPointBits, instrument.harmonicsWave.harmonics[i]);\n                    }\n                    harmonicsBits.encodeBase64(buffer);\n                }\n\n                if (instrument.type == InstrumentType.chip) {\n                   \t\t\t\t\t\tif (instrument.chipWave > 186) {\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave - 186]);\t\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[3]);\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (instrument.chipWave > 124) {\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave - 124]);\t\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[2]);\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (instrument.chipWave > 62) {\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave - 62]);\t\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[1]);\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave]);\t\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[0]);\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbuffer.push(104, base64IntToCharCode[instrument.unison]);\n                        if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n\n\t\t\t\t\t\t// Repurposed for chip wave loop controls.\n\t\t\t\t\t\tbuffer.push(SongTagCode.filterResonance);\n\t\t\t\t\t\t// The encoding here is as follows:\n\t\t\t\t\t\t// 0b11111_1\n\t\t\t\t\t\t//         ^-- isUsingAdvancedLoopControls\n\t\t\t\t\t\t//   ^^^^^---- chipWaveLoopMode\n\t\t\t\t\t\t// This essentially allocates 32 different loop modes,\n\t\t\t\t\t\t// which should be plenty.\n\t\t\t\t\t\tconst encodedLoopMode: number = (\n\t\t\t\t\t\t\t(clamp(0, 31 + 1, instrument.chipWaveLoopMode) << 1)\n\t\t\t\t\t\t\t| (instrument.isUsingAdvancedLoopControls ? 1 : 0)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[encodedLoopMode]);\n\t\t\t\t\t\t// The same encoding above is used here, but with the release mode\n\t\t\t\t\t\t// (which isn't implemented currently), and the backwards toggle.\n\t\t\t\t\t\tconst encodedReleaseMode: number = (\n\t\t\t\t\t\t\t(clamp(0, 31 + 1, 0) << 1)\n\t\t\t\t\t\t\t| (instrument.chipWavePlayBackwards ? 1 : 0)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tbuffer.push(base64IntToCharCode[encodedReleaseMode]);\n\t\t\t\t\t\tencode32BitNumber(buffer, instrument.chipWaveLoopStart);\n\t\t\t\t\t\tencode32BitNumber(buffer, instrument.chipWaveLoopEnd);\n\t\t\t\t\t\tencode32BitNumber(buffer, instrument.chipWaveStartOffset);\n\n                } else if (instrument.type == InstrumentType.fm || instrument.type == InstrumentType.fm6op) {\n                    if (instrument.type == InstrumentType.fm) {\n                        buffer.push(SongTagCode.algorithm, base64IntToCharCode[instrument.algorithm]);\n                        buffer.push(SongTagCode.feedbackType, base64IntToCharCode[instrument.feedbackType]);\n                    } else {\n                        buffer.push(SongTagCode.algorithm, base64IntToCharCode[instrument.algorithm6Op]);\n                        if (instrument.algorithm6Op == 0) {\n                            buffer.push(SongTagCode.chord, base64IntToCharCode[instrument.customAlgorithm.carrierCount]);\n                            buffer.push(SongTagCode.effects);\n                            for (let o: number = 0; o < instrument.customAlgorithm.modulatedBy.length; o++) {\n                                for (let j: number = 0; j < instrument.customAlgorithm.modulatedBy[o].length; j++) {\n                                    buffer.push(base64IntToCharCode[instrument.customAlgorithm.modulatedBy[o][j]]);\n                                }\n                                buffer.push(SongTagCode.operatorWaves);\n                            }\n                            buffer.push(SongTagCode.effects);\n                        }\n                        buffer.push(SongTagCode.feedbackType, base64IntToCharCode[instrument.feedbackType6Op]);\n                        if (instrument.feedbackType6Op == 0) {\n                            buffer.push(SongTagCode.effects);\n                            for (let o: number = 0; o < instrument.customFeedbackType.indices.length; o++) {\n                                for (let j: number = 0; j < instrument.customFeedbackType.indices[o].length; j++) {\n                                    buffer.push(base64IntToCharCode[instrument.customFeedbackType.indices[o][j]]);\n                                }\n                                buffer.push(SongTagCode.operatorWaves);\n                            }\n                            buffer.push(SongTagCode.effects);\n                        }\n                    }\n                    buffer.push(SongTagCode.feedbackAmplitude, base64IntToCharCode[instrument.feedbackAmplitude]);\n\n                    buffer.push(SongTagCode.operatorFrequencies);\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op?6:Config.operatorCount); o++) {\n                        buffer.push(base64IntToCharCode[instrument.operators[o].frequency]);\n                    }\n                    buffer.push(SongTagCode.operatorAmplitudes);\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                        buffer.push(base64IntToCharCode[instrument.operators[o].amplitude]);\n                    }\n                    buffer.push(SongTagCode.operatorWaves);\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                        buffer.push(base64IntToCharCode[instrument.operators[o].waveform]);\n                        // Push pulse width if that type is used\n                        if (instrument.operators[o].waveform == 2) {\n                            buffer.push(base64IntToCharCode[instrument.operators[o].pulseWidth]);\n                        }\n                    }\n                } else if (instrument.type == InstrumentType.customChipWave) {\n                    if (instrument.chipWave > 186) {\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave - 186]);\t\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[3]);\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (instrument.chipWave > 124) {\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave - 124]);\t\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[2]);\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (instrument.chipWave > 62) {\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave - 62]);\t\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[1]);\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tbuffer.push(119, base64IntToCharCode[instrument.chipWave]);\t\n\t\t\t\t\t\t\tbuffer.push(base64IntToCharCode[0]);\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbuffer.push(104, base64IntToCharCode[instrument.unison]);\n                        if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                    buffer.push(SongTagCode.customChipWave);\n                    // Push custom wave values\n                    for (let j: number = 0; j < 64; j++) {\n                        buffer.push(base64IntToCharCode[(instrument.customChipWave[j] + 24) as number]);\n                    }\n                } else if (instrument.type == InstrumentType.noise) {\n                    buffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipNoise]);\n                } else if (instrument.type == InstrumentType.spectrum) {\n                    buffer.push(SongTagCode.spectrum);\n                    const spectrumBits: BitFieldWriter = new BitFieldWriter();\n                    for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                        spectrumBits.write(Config.spectrumControlPointBits, instrument.spectrumWave.spectrum[i]);\n                    }\n                    spectrumBits.encodeBase64(buffer);\n                } else if (instrument.type == InstrumentType.drumset) {\n                    buffer.push(SongTagCode.drumsetEnvelopes);\n                    for (let j: number = 0; j < Config.drumCount; j++) {\n                        buffer.push(base64IntToCharCode[instrument.drumsetEnvelopes[j]]);\n                    }\n\n                    buffer.push(SongTagCode.spectrum);\n                    const spectrumBits: BitFieldWriter = new BitFieldWriter();\n                    for (let j: number = 0; j < Config.drumCount; j++) {\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                            spectrumBits.write(Config.spectrumControlPointBits, instrument.drumsetSpectrumWaves[j].spectrum[i]);\n                        }\n                    }\n                    spectrumBits.encodeBase64(buffer);\n                } else if (instrument.type == InstrumentType.harmonics) {\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                } else if (instrument.type == InstrumentType.pwm) {\n                    buffer.push(SongTagCode.pulseWidth, base64IntToCharCode[instrument.pulseWidth]);\n                    buffer.push(base64IntToCharCode[instrument.decimalOffset >> 6], base64IntToCharCode[instrument.decimalOffset & 0x3f]); \n                } else if (instrument.type == InstrumentType.supersaw) {\n\t\t\t\t\tbuffer.push(SongTagCode.supersaw, base64IntToCharCode[instrument.supersawDynamism], base64IntToCharCode[instrument.supersawSpread], base64IntToCharCode[instrument.supersawShape]);\n\t\t\t\t\tbuffer.push(SongTagCode.pulseWidth, base64IntToCharCode[instrument.pulseWidth]);\n\t\t\t\t\tbuffer.push(base64IntToCharCode[instrument.decimalOffset >> 6], base64IntToCharCode[instrument.decimalOffset & 0x3f]);\n                } else if (instrument.type == InstrumentType.pickedString) {\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                    buffer.push(SongTagCode.stringSustain, base64IntToCharCode[instrument.stringSustain]);\n                } else if (instrument.type == InstrumentType.mod) {\n                    // Handled down below. Could be moved, but meh.\n                } else {\n                    throw new Error(\"Unknown instrument type.\");\n                }\n\n                buffer.push(SongTagCode.envelopes, base64IntToCharCode[instrument.envelopeCount]);\n                for (let envelopeIndex: number = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].target]);\n                    if (Config.instrumentAutomationTargets[instrument.envelopes[envelopeIndex].target].maxCount > 1) {\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].index]);\n                    }\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].envelope]);\n                }\n            }\n        }\n\n        buffer.push(SongTagCode.bars);\n        bits = new BitFieldWriter();\n        let neededBits: number = 0;\n        while ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) for (let i: number = 0; i < this.barCount; i++) {\n            bits.write(neededBits, this.channels[channelIndex].bars[i]);\n        }\n        bits.encodeBase64(buffer);\n\n        buffer.push(SongTagCode.patterns);\n        bits = new BitFieldWriter();\n        const shapeBits: BitFieldWriter = new BitFieldWriter();\n        const bitsPerNoteSize: number = Song.getNeededBits(Config.noteSizeMax);\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n            const channel: Channel = this.channels[channelIndex];\n            const maxInstrumentsPerPattern: number = this.getMaxInstrumentsPerPattern(channelIndex);\n            const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\n            const isModChannel: boolean = this.getChannelIsMod(channelIndex);\n            const neededInstrumentCountBits: number = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);\n            const neededInstrumentIndexBits: number = Song.getNeededBits(channel.instruments.length - 1);\n\n            // Some info about modulator settings immediately follows in mod channels.\n            if (isModChannel) {\n                const neededModInstrumentIndexBits: number = Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);\n                for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n\n                    let instrument: Instrument = this.channels[channelIndex].instruments[instrumentIndex];\n\n                    for (let mod: number = 0; mod < Config.modCount; mod++) {\n                        const modChannel: number = instrument.modChannels[mod];\n                        const modInstrument: number = instrument.modInstruments[mod];\n                        const modSetting: number = instrument.modulators[mod];\n                        const modFilter: number = instrument.modFilterTypes[mod];\n\n                        // Still using legacy \"mod status\" format, but doing it manually as it's only used in the URL now.\n                        // 0 - For pitch/noise\n                        // 1 - (used to be For noise, not needed)\n                        // 2 - For song\n                        // 3 - None\n\n                        let status: number = Config.modulators[modSetting].forSong ? 2 : 0;\n                        if (modSetting == Config.modulators.dictionary[\"none\"].index)\n                            status = 3;\n\n                        bits.write(2, status);\n\n                        // Channel/Instrument is only used if the status isn't \"song\" or \"none\".\n                        if (status == 0 || status == 1) {\n                            bits.write(8, modChannel);\n                            bits.write(neededModInstrumentIndexBits, modInstrument);\n                        }\n\n                        // Only used if setting isn't \"none\".\n                        if (status != 3) {\n                            bits.write(6, modSetting);\n                        }\n\n                        // Write mod filter info, only if this is a filter mod\n                        if (Config.modulators[instrument.modulators[mod]].name == \"eq filter\" || Config.modulators[instrument.modulators[mod]].name == \"note filter\") {\n                            bits.write(6, modFilter);\n                        }\n                    }\n                }\n            }\n            const octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : channel.octave * Config.pitchesPerOctave;\n            let lastPitch: number = (isNoiseChannel ? 4 : octaveOffset);\n            const recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);\n            const recentShapes: string[] = [];\n            for (let i: number = 0; i < recentPitches.length; i++) {\n                recentPitches[i] += octaveOffset;\n            }\n            for (const pattern of channel.patterns) {\n                if (this.patternInstruments) {\n                    const instrumentCount: number = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, pattern.instruments.length);\n                    bits.write(neededInstrumentCountBits, instrumentCount - Config.instrumentCountMin);\n                    for (let i: number = 0; i < instrumentCount; i++) {\n                        bits.write(neededInstrumentIndexBits, pattern.instruments[i]);\n                    }\n                }\n\n                if (pattern.notes.length > 0) {\n                    bits.write(1, 1);\n\n                    let curPart: number = 0;\n                    for (const note of pattern.notes) {\n\n                        // For mod channels, a negative offset may be necessary.\n                        if (note.start < curPart && isModChannel) {\n                            bits.write(2, 0); // rest, then...\n                            bits.write(1, 1); // negative offset\n                            bits.writePartDuration(curPart - note.start);\n                        }\n\n                        if (note.start > curPart) {\n                            bits.write(2, 0); // rest\n                            if (isModChannel) bits.write(1, 0); // positive offset, only needed for mod channels\n                            bits.writePartDuration(note.start - curPart);\n                        }\n\n                        shapeBits.clear();\n\n                        // Old format was:\n                        // 0: 1 pitch, 10: 2 pitches, 110: 3 pitches, 111: 4 pitches\n                        // New format is:\n                        //      0: 1 pitch\n                        // 1[XXX]: 3 bits of binary signifying 2+ pitches\n                        if (note.pitches.length == 1) {\n                            shapeBits.write(1, 0);\n                        } else {\n                            shapeBits.write(1, 1);\n                            shapeBits.write(3, note.pitches.length - 2);\n                        }\n\n                        shapeBits.writePinCount(note.pins.length - 1);\n\n                        if (!isModChannel) {\n                            shapeBits.write(bitsPerNoteSize, note.pins[0].size); // volume\n                        }\n                        else {\n                            shapeBits.write(9, note.pins[0].size); // Modulator value. 9 bits for now = 512 max mod value?\n                        }\n\n                        let shapePart: number = 0;\n                        let startPitch: number = note.pitches[0];\n                        let currentPitch: number = startPitch;\n                        const pitchBends: number[] = [];\n                        for (let i: number = 1; i < note.pins.length; i++) {\n                            const pin: NotePin = note.pins[i];\n                            const nextPitch: number = startPitch + pin.interval;\n                            if (currentPitch != nextPitch) {\n                                shapeBits.write(1, 1);\n                                pitchBends.push(nextPitch);\n                                currentPitch = nextPitch;\n                            } else {\n                                shapeBits.write(1, 0);\n                            }\n                            shapeBits.writePartDuration(pin.time - shapePart);\n                            shapePart = pin.time;\n                            if (!isModChannel) {\n                                shapeBits.write(bitsPerNoteSize, pin.size);\n                            } else {\n                                shapeBits.write(9, pin.size);\n                            }\n                        }\n\n                        const shapeString: string = String.fromCharCode.apply(null, shapeBits.encodeBase64([]));\n                        const shapeIndex: number = recentShapes.indexOf(shapeString);\n                        if (shapeIndex == -1) {\n                            bits.write(2, 1); // new shape\n                            bits.concat(shapeBits);\n                        } else {\n                            bits.write(1, 1); // old shape\n                            bits.writeLongTail(0, 0, shapeIndex);\n                            recentShapes.splice(shapeIndex, 1);\n                        }\n                        recentShapes.unshift(shapeString);\n                        if (recentShapes.length > 10) recentShapes.pop();\n\n                        const allPitches: number[] = note.pitches.concat(pitchBends);\n                        for (let i: number = 0; i < allPitches.length; i++) {\n                            const pitch: number = allPitches[i];\n                            const pitchIndex: number = recentPitches.indexOf(pitch);\n                            if (pitchIndex == -1) {\n                                let interval: number = 0;\n                                let pitchIter: number = lastPitch;\n                                if (pitchIter < pitch) {\n                                    while (pitchIter != pitch) {\n                                        pitchIter++;\n                                        if (recentPitches.indexOf(pitchIter) == -1) interval++;\n                                    }\n                                } else {\n                                    while (pitchIter != pitch) {\n                                        pitchIter--;\n                                        if (recentPitches.indexOf(pitchIter) == -1) interval--;\n                                    }\n                                }\n                                bits.write(1, 0);\n                                bits.writePitchInterval(interval);\n                            } else {\n                                bits.write(1, 1);\n                                bits.write(4, pitchIndex);\n                                recentPitches.splice(pitchIndex, 1);\n                            }\n                            recentPitches.unshift(pitch);\n                            if (recentPitches.length > 16) recentPitches.pop();\n\n                            if (i == note.pitches.length - 1) {\n                                lastPitch = note.pitches[0];\n                            } else {\n                                lastPitch = pitch;\n                            }\n                        }\n\n                        if (note.start == 0) {\n                            bits.write(1, note.continuesLastPattern ? 1 : 0);\n                        }\n\n                        curPart = note.end;\n                    }\n\n                    if (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\n                        bits.write(2, 0); // rest\n                        if (isModChannel) bits.write(1, 0); // positive offset\n                        bits.writePartDuration(this.beatsPerBar * Config.partsPerBeat + (+isModChannel) - curPart);\n                    }\n                } else {\n                    bits.write(1, 0);\n                }\n            }\n        }\n        let stringLength: number = bits.lengthBase64();\n        let digits: number[] = [];\n        while (stringLength > 0) {\n            digits.unshift(base64IntToCharCode[stringLength & 0x3f]);\n            stringLength = stringLength >> 6;\n        }\n        buffer.push(base64IntToCharCode[digits.length]);\n        Array.prototype.push.apply(buffer, digits); // append digits to buffer.\n        bits.encodeBase64(buffer);\n\t    \n        const maxApplyArgs: number = 64000;\n\t    \t\t\t            let customSamplesStr = \"\";\n            if(EditorConfig.customSamples != undefined && EditorConfig.customSamples.length > 0){\n              customSamplesStr = \"|\" + EditorConfig.customSamples.join(\"|\")\n              \n          }\n\t\t  //samplemark\n        if (buffer.length < maxApplyArgs) {\n            // Note: Function.apply may break for long argument lists. \n                            return String.fromCharCode.apply(null, buffer) + customSamplesStr;\n\t\t\t\t//samplemark\n        } else {\n            let result: string = \"\";\n            for (let i: number = 0; i < buffer.length; i += maxApplyArgs) {\n                result += String.fromCharCode.apply(null, buffer.slice(i, i + maxApplyArgs));\n            }\n                          return result + customSamplesStr;\n\t\t\t   //samplemark\n        }\n    }\n\n    private static _envelopeFromLegacyIndex(legacyIndex: number): Envelope {\n        // I swapped the order of \"custom\"/\"steady\", now \"none\"/\"note size\".\n        if (legacyIndex == 0) legacyIndex = 1; else if (legacyIndex == 1) legacyIndex = 0;\n        return Config.envelopes[clamp(0, Config.envelopes.length, legacyIndex)];\n    }\n\n    public fromBase64String(compressed: string): void {\n        if (compressed == null || compressed == \"\") {\n            Song._clearSamples();\n\n            this.initToDefault(true);\n            return;\n        }\n        let charIndex: number = 0;\n        // skip whitespace.\n        while (compressed.charCodeAt(charIndex) <= CharCode.SPACE) charIndex++;\n        // skip hash mark.\n        if (compressed.charCodeAt(charIndex) == CharCode.HASH) charIndex++;\n        // if it starts with curly brace, treat it as JSON.\n        if (compressed.charCodeAt(charIndex) == CharCode.LEFT_CURLY_BRACE) {\n            this.fromJsonObject(JSON.parse(charIndex == 0 ? compressed : compressed.substring(charIndex)));\n            return;\n        }\n\n        const variantTest: number = compressed.charCodeAt(charIndex);\n        let fromBeepBox: boolean;\n        let fromJummBox: boolean;\n        let fromGoldBox: boolean;\n\tlet fromUltraBox: boolean;\n\n        // Detect variant here. If version doesn't match known variant, assume it is a vanilla string which does not report variant.\n        if (variantTest == 0x6A) { //\"j\"\n            fromBeepBox = false;\n            fromJummBox = true;\n            fromGoldBox = false;\n\t        fromUltraBox = false;\n            charIndex++;\n        } else if (variantTest == 0x67) { //\"g\"\n            fromBeepBox = false;\n            fromJummBox = false;\n            fromGoldBox = true;\n\t        fromUltraBox = false;\n            charIndex++;\n        } else if (variantTest == 0x75) { //\"u\"\n                fromBeepBox = false;\n                fromJummBox = false;\n                fromGoldBox = false;\n\t\t        fromUltraBox = true;\n                charIndex++;\n            } else {\n            fromBeepBox = true;\n            fromJummBox = false;\n            fromGoldBox = false;\n\t        fromUltraBox = false;\n        }\n\n        const version: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n        if (fromBeepBox && (version == -1 || version > Song._latestBeepboxVersion || version < Song._oldestBeepboxVersion)) return;\n        if (fromJummBox && (version == -1 || version > Song._latestJummBoxVersion || version < Song._oldestJummBoxVersion)) return;\n        if (fromGoldBox && (version == -1 || version > Song._latestGoldBoxVersion || version < Song._oldestGoldBoxVersion)) return;\n\t    if (fromUltraBox && (version == -1 || version > Song._latestUltraBoxVersion || version < Song._oldestUltraBoxVersion)) return;\n        const beforeTwo: boolean = version < 2;\n        const beforeThree: boolean = version < 3;\n        const beforeFour: boolean = version < 4;\n        const beforeFive: boolean = version < 5;\n        const beforeSix: boolean = version < 6;\n        const beforeSeven: boolean = version < 7;\n        const beforeEight: boolean = version < 8;\n        const beforeNine: boolean = version < 9;\n        this.initToDefault((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)));\n        const forceSimpleFilter: boolean = (fromBeepBox && beforeNine || fromJummBox && beforeFive);\n\n        let willLoadLegacySamplesForOldSongs: boolean = false;\n\n        if (fromUltraBox || fromGoldBox) {\n            compressed = compressed.replaceAll(\"%7C\", \"|\")\n                var compressed_array = compressed.split(\"|\");\n                compressed = compressed_array.shift()!;\n                if(EditorConfig.customSamples == null || EditorConfig.customSamples.join(\", \") != compressed_array.join(\", \")) {\n\n                    Song._restoreChipWaveListToDefault();\n\n                    let willLoadLegacySamples = false;\n                    let willLoadNintariboxSamples = false;\n                    let willLoadMarioPaintboxSamples = false;\n                    const customSampleUrls = [];\n                    const customSamplePresets: Preset[] = [];\n                    sampleLoadingState.statusTable = {};\n                    sampleLoadingState.urlTable = {};\n                    sampleLoadingState.totalSamples = 0;\n                    sampleLoadingState.samplesLoaded = 0;\n                    sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\n                        sampleLoadingState.totalSamples,\n                        sampleLoadingState.samplesLoaded\n                    ));\n                    for (const url of compressed_array) {\n                        if (url.toLowerCase() === \"legacysamples\") {\n                            if (!willLoadLegacySamples) {\n                                willLoadLegacySamples = true;\n                                customSampleUrls.push(url);\n                                loadBuiltInSamples(0);\n                            }\n                        } \n                        else if (url.toLowerCase() === \"nintariboxsamples\") {\n                            if (!willLoadNintariboxSamples) {\n                                willLoadNintariboxSamples = true;\n                                customSampleUrls.push(url);\n                                loadBuiltInSamples(1);\n                            }\n                        }\n                        else if (url.toLowerCase() === \"mariopaintboxsamples\") {\n                            if (!willLoadMarioPaintboxSamples) {\n                                willLoadMarioPaintboxSamples = true;\n                                customSampleUrls.push(url);\n                                loadBuiltInSamples(2);\n                            }\n                        }\n                        \n                        else {\n                            // UB version 2 URLs and below will be using the old syntax, so we do need to parse it in that case.\n                            // UB version 3 URLs should only have the new syntax, though, unless the user has edited the URL manually.\n                            const parseOldSyntax: boolean = beforeThree;\n                            const ok: boolean = Song._parseAndConfigureCustomSample(url, customSampleUrls, customSamplePresets, sampleLoadingState, parseOldSyntax);\n                            if (!ok) {\n                                continue;\n                            }\n                        }\n                    }\n                    if (customSampleUrls.length > 0) {\n                        EditorConfig.customSamples = customSampleUrls;\n                    }\n                    if (customSamplePresets.length > 0) {\n                        const customSamplePresetsMap: DictionaryArray<Preset> = toNameMap(customSamplePresets);\n                        EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {\n                            name: \"Custom Sample Presets\",\n                            presets: customSamplePresetsMap,\n                            index: EditorConfig.presetCategories.length,\n                        };\n                        // EditorConfig.presetCategories.splice(1, 0, {\n                             // name: \"Custom Sample Presets\",\n                             // presets: customSamplePresets,\n                             // index: EditorConfig.presetCategories.length,\n                        // });\n                    }\n\n               \n                }\n                //samplemark\n        }\n\n        if (beforeThree && fromBeepBox) {\n            // Originally, the only instrument transition was \"instant\" and the only drum wave was \"retro\".\n            for (const channel of this.channels) {\n                channel.instruments[0].transition = Config.transitions.dictionary[\"interrupt\"].index;\n                channel.instruments[0].effects |= 1 << EffectType.transition;\n            }\n            this.channels[3].instruments[0].chipNoise = 0;\n        }\n\n        let legacySettingsCache: LegacySettings[][] | null = null;\n        if ((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n            // Unfortunately, old versions of BeepBox had a variety of different ways of saving\n            // filter-and-envelope-related parameters in the URL, and none of them directly\n            // correspond to the new way of saving these parameters. We can approximate the old\n            // settings by collecting all the old settings for an instrument and passing them to\n            // convertLegacySettings(), so I use this data structure to collect the settings\n            // for each instrument if necessary.\n            legacySettingsCache = [];\n            for (let i: number = legacySettingsCache.length; i < this.getChannelCount(); i++) {\n                legacySettingsCache[i] = [];\n                for (let j: number = 0; j < Config.instrumentCountMin; j++) legacySettingsCache[i][j] = {};\n            }\n        }\n\n        let legacyGlobalReverb: number = 0; // beforeNine reverb was song-global, record that reverb here and adapt it to instruments as needed.\n\n        let instrumentChannelIterator: number = 0;\n        let instrumentIndexIterator: number = -1;\n        let command: number;\n        let useSlowerArpSpeed: boolean = false;\n        let useFastTwoNoteArp: boolean = false;\n        while (charIndex < compressed.length) switch (command = compressed.charCodeAt(charIndex++)) {\n            case SongTagCode.songTitle: {\n                // Length of song name string\n                var songNameLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                this.title = decodeURIComponent(compressed.substring(charIndex, charIndex + songNameLength));\n                document.title = this.title + \" - \" + EditorConfig.versionDisplayName;\n\n                charIndex += songNameLength;\n            } break;\n            case SongTagCode.channelCount: {\n                this.pitchChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                this.noiseChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                if (fromBeepBox || beforeTwo) {\n                    // No mod channel support before jummbox v2\n                    this.modChannelCount = 0;\n                } else {\n                    this.modChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                }\n                this.pitchChannelCount = validateRange(Config.pitchChannelCountMin, Config.pitchChannelCountMax, this.pitchChannelCount);\n                this.noiseChannelCount = validateRange(Config.noiseChannelCountMin, Config.noiseChannelCountMax, this.noiseChannelCount);\n                this.modChannelCount = validateRange(Config.modChannelCountMin, Config.modChannelCountMax, this.modChannelCount);\n\n                for (let channelIndex = this.channels.length; channelIndex < this.getChannelCount(); channelIndex++) {\n                    this.channels[channelIndex] = new Channel();\n                }\n                this.channels.length = this.getChannelCount();\n                if ((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    for (let i: number = legacySettingsCache!.length; i < this.getChannelCount(); i++) {\n                        legacySettingsCache![i] = [];\n                        for (let j: number = 0; j < Config.instrumentCountMin; j++) legacySettingsCache![i][j] = {};\n                    }\n                }\n            } break;\n            case SongTagCode.scale: {\n                this.scale = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                // All the scales were jumbled around by Jummbox. Just convert to free.\n                if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\n                    for (var i = 1; i < Config.pitchesPerOctave; i++) {\n                        this.scaleCustom[i] = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] == 1; // ineffiecent? yes, all we're going to do for now? hell yes\n                    }\n                }\n                if (fromBeepBox) this.scale = 0;\n            } break;\n            case SongTagCode.key: {\n                if (beforeSeven && fromBeepBox) {\n                    this.key = clamp(0, Config.keys.length, 11 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    this.octave = 0;\n                } else if (fromBeepBox || fromJummBox) {\n                    this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    this.octave = 0;\n                } else if (fromGoldBox || (beforeThree && fromUltraBox)) {\n                    // GoldBox (so far) didn't introduce any new keys, but old\n                    // songs made with early versions of UltraBox share the\n                    // same URL format, and those can have more keys. This\n                    // shouldn't really result in anything other than 0-11 for\n                    // the key and 0 for the octave for GoldBox songs.\n                    const rawKeyIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const [key, octave]: [number, number] = convertLegacyKeyToKeyAndOctave(rawKeyIndex);\n                    this.key = key;\n                    this.octave = octave;\n                } else {\n                    this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    this.octave = clamp(Config.octaveMin, Config.octaveMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.octaveMin);\n                }\n            } break;\n            case SongTagCode.loopStart: {\n                if (beforeFive && fromBeepBox) {\n                    this.loopStart = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                } else {\n                    this.loopStart = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                }\n            } break;\n            case SongTagCode.loopEnd: {\n                if (beforeFive && fromBeepBox) {\n                    this.loopLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                } else {\n                    this.loopLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                }\n            } break;\n            case SongTagCode.tempo: {\n                if (beforeFour && fromBeepBox) {\n                    this.tempo = [95, 120, 151, 190][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                } else if (beforeSeven && fromBeepBox) {\n                    this.tempo = [88, 95, 103, 111, 120, 130, 140, 151, 163, 176, 190, 206, 222, 240, 259][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                } else {\n                    this.tempo = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n                this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, this.tempo);\n            } break;\n            case SongTagCode.reverb: {\n                if (beforeNine && fromBeepBox) {\n                    legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 12;\n                    legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);\n                } else if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                    legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);\n                } else {\n                    // Do nothing, BeepBox v9+ do not support song-wide reverb - JummBox still does via modulator.\n                }\n            } break;\n            case SongTagCode.beatCount: {\n                if (beforeThree && fromBeepBox) {\n                    this.beatsPerBar = [6, 7, 8, 9, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                } else {\n                    this.beatsPerBar = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                }\n                this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, this.beatsPerBar));\n            } break;\n            case SongTagCode.barCount: {\n                const barCount: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                this.barCount = validateRange(Config.barCountMin, Config.barCountMax, barCount);\n                for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                    for (let bar = this.channels[channelIndex].bars.length; bar < this.barCount; bar++) {\n                        this.channels[channelIndex].bars[bar] = (bar < 4) ? 1 : 0;\n                    }\n                    this.channels[channelIndex].bars.length = this.barCount;\n                }\n            } break;\n            case SongTagCode.patternCount: {\n                let patternsPerChannel: number;\n                if (beforeEight && fromBeepBox) {\n                    patternsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                } else {\n                    patternsPerChannel = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                }\n                this.patternsPerChannel = validateRange(1, Config.barCountMax, patternsPerChannel);\n                const channelCount: number = this.getChannelCount();\n                for (let channelIndex: number = 0; channelIndex < channelCount; channelIndex++) {\n                    const patterns: Pattern[] = this.channels[channelIndex].patterns;\n                    for (let pattern = patterns.length; pattern < this.patternsPerChannel; pattern++) {\n                        patterns[pattern] = new Pattern();\n                    }\n                    patterns.length = this.patternsPerChannel;\n                }\n            } break;\n            case SongTagCode.instrumentCount: {\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    const instrumentsPerChannel: number = validateRange(Config.instrumentCountMin, Config.patternInstrumentCountMax, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);\n                    this.layeredInstruments = false;\n                    this.patternInstruments = (instrumentsPerChannel > 1);\n\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        const isNoiseChannel: boolean = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\n                        const isModChannel: boolean = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\n\n                        for (let instrumentIndex: number = this.channels[channelIndex].instruments.length; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {\n                            this.channels[channelIndex].instruments[instrumentIndex] = new Instrument(isNoiseChannel, isModChannel);\n                        }\n                        this.channels[channelIndex].instruments.length = instrumentsPerChannel;\n                        if (beforeSix && fromBeepBox) {\n                            for (let instrumentIndex: number = 0; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {\n                                this.channels[channelIndex].instruments[instrumentIndex].setTypeAndReset(isNoiseChannel ? InstrumentType.noise : InstrumentType.chip, isNoiseChannel, isModChannel);\n                            }\n                        }\n\n                        for (let j: number = legacySettingsCache![channelIndex].length; j < instrumentsPerChannel; j++) {\n                            legacySettingsCache![channelIndex][j] = {};\n                        }\n                    }\n                } else {\n                    const instrumentsFlagBits: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.layeredInstruments = (instrumentsFlagBits & (1 << 1)) != 0;\n                    this.patternInstruments = (instrumentsFlagBits & (1 << 0)) != 0;\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        let instrumentCount: number = 1;\n                        if (this.layeredInstruments || this.patternInstruments) {\n                            instrumentCount = validateRange(Config.instrumentCountMin, this.getMaxInstrumentsPerChannel(), base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);\n                        }\n                        const channel: Channel = this.channels[channelIndex];\n                        const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\n                        const isModChannel: boolean = this.getChannelIsMod(channelIndex);\n                        for (let i: number = channel.instruments.length; i < instrumentCount; i++) {\n                            channel.instruments[i] = new Instrument(isNoiseChannel, isModChannel);\n                        }\n                        channel.instruments.length = instrumentCount;\n                    }\n                }\n            } break;\n            case SongTagCode.rhythm: {\n                if (!fromUltraBox) {\n\t\t\tlet newRhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\t\n\t\t\tthis.rhythm = clamp(0, Config.rhythms.length, newRhythm + 2);\n\t\t\tif (fromJummBox && beforeThree || fromBeepBox) {\n\t\t\t\tif (this.rhythm == 2 || this.rhythm == 3) {\n\t\t\t\t\tuseSlowerArpSpeed = true;\n\t\t\t\t}\n\t\t\t\tif (this.rhythm >= 2) {\n\t\t\t\t\tuseFastTwoNoteArp = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t} else {\n\t\t\tthis.rhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t}\n\t\t//rhythm fixes\n            } break;\n            case SongTagCode.channelOctave: {\n                if (beforeThree && fromBeepBox) {\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n                    if (channelIndex >= this.pitchChannelCount) this.channels[channelIndex].octave = 0;\n                } else if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n                        if (channelIndex >= this.pitchChannelCount) this.channels[channelIndex].octave = 0;\n                    }\n                } else {\n                    for (let channelIndex: number = 0; channelIndex < this.pitchChannelCount; channelIndex++) {\n                        this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    for (let channelIndex: number = this.pitchChannelCount; channelIndex < this.getChannelCount(); channelIndex++) {\n                        this.channels[channelIndex].octave = 0;\n                    }\n                }\n            } break;\n            case SongTagCode.startInstrument: {\n                instrumentIndexIterator++;\n                if (instrumentIndexIterator >= this.channels[instrumentChannelIterator].instruments.length) {\n                    instrumentChannelIterator++;\n                    instrumentIndexIterator = 0;\n                }\n                validateRange(0, this.channels.length - 1, instrumentChannelIterator);\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                // JB before v5 had custom chip in the place where pickedString is now, and mod one sooner as well. New index is +1 for both.\n                let instrumentType: number = validateRange(0, InstrumentType.length - 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                    if (instrumentType == InstrumentType.pickedString) {\n                        instrumentType = InstrumentType.customChipWave;\n                    }\n                    else if (instrumentType == InstrumentType.customChipWave) {\n                        instrumentType = InstrumentType.mod;\n                    }\n                }\n                instrument.setTypeAndReset(instrumentType, instrumentChannelIterator >= this.pitchChannelCount && instrumentChannelIterator < this.pitchChannelCount + this.noiseChannelCount, instrumentChannelIterator >= this.pitchChannelCount + this.noiseChannelCount);\n\n                // Anti-aliasing was added in BeepBox 3.0 (v6->v7) and JummBox 1.3 (v1->v2 roughly but some leakage possible)\n                if (((beforeSeven && fromBeepBox) || (beforeTwo && fromJummBox)) && (instrumentType == InstrumentType.chip || instrumentType == InstrumentType.customChipWave || instrumentType == InstrumentType.pwm)) {\n                    instrument.aliases = true;\n                    instrument.distortion = 0;\n                    instrument.effects |= 1 << EffectType.distortion;\n                }\n                if (useSlowerArpSpeed) {\n                    instrument.arpeggioSpeed = 9; // x3/4 speed. This used to be tied to rhythm, but now it is decoupled to each instrument's arp speed slider. This flag gets set when importing older songs to keep things consistent.\n                }\n                if (useFastTwoNoteArp) {\n                    instrument.fastTwoNoteArp = true;\n                }\n\n                if (beforeSeven && fromBeepBox) {\n                    instrument.effects = 0;\n                    // Chip/noise instruments had arpeggio and FM had custom interval but neither\n                    // explicitly saved the chorus setting beforeSeven so enable it here.\n                    if (instrument.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n                        // Enable chord if it was used.\n                        instrument.effects |= 1 << EffectType.chord;\n                    }\n                }\n            } break;\n            case SongTagCode.preset: {\n                const presetValue: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = presetValue;\n                // Picked string was inserted before custom chip in JB v5, so bump up preset index.\n                if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == InstrumentType.pickedString) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = InstrumentType.customChipWave;\n                    }\n                }\n            } break;\n            case SongTagCode.wave: {\n                if (beforeThree && fromBeepBox) {\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const instrument: Instrument = this.channels[channelIndex].instruments[0];\n                    instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n\n                    // Version 2 didn't save any settings for settings for filters, or envelopes,\n                    // just waves, so initialize them here I guess.\n                    instrument.convertLegacySettings(legacySettingsCache![channelIndex][0], forceSimpleFilter);\n\n                } else if (beforeSix && fromBeepBox) {\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (const instrument of this.channels[channelIndex].instruments) {\n                            if (channelIndex >= this.pitchChannelCount) {\n                                instrument.chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            } else {\n                                instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n                            }\n                        }\n                    }\n                } else if (beforeSeven && fromBeepBox) {\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n                    if (instrumentChannelIterator >= this.pitchChannelCount) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    } else {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n                    }\n                } else {\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type == InstrumentType.noise) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    } else {\t\n\t\t\t\tif (fromUltraBox) {\n\t\t\t\t\tconst chipWaveReal = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t\tconst chipWaveCounter = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t\n\t\t\t\t\tif (chipWaveCounter == 3) {\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 186);\t\t\t\t\t\t\t\t\t\t\t   \t\t\t\t\t   \t \t\t\t\t\t\t  \t\t\t\t\t\t\t\t\n\t\t\t\t\t} else if (chipWaveCounter == 2) {\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 124);\t\t\t\t\t\t\t\t\t\t\t   \t\t\t\t\t   \t \t\t\t\t\t\t  \t\t\t\t\t\t\t\t\n\t\t\t\t\t} else if (chipWaveCounter == 1) {\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 62);\t\t\t\t\t\t\t\t\t\t\t   \t\t\t\t\t   \t \t\t\t\t\t\t  \t\t\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal);\t\t\t\t\t\t\t\t\t\t\t   \t\t\t\t\t   \t \t\t\t\t\t\t  \t\t\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t} else {\n\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\t}\n\t\t }\n        \t}\n            } break;\n\t\t\t/* case 120:\n\n\n\t\t\t\t\t\tArcheology time!! So, adding the supersaw caused this to break, and now I need to merge this with something else\n\t\t\t\t\t\tLeo could have been a bit more descriptive but I'll just write down everything I can observe for now \n\t\t\t\t\t\t\n\n\t\t\t\t\t\tif (fromGoldBox && !beforeFour && beforeSix) {\n\t\t\t\t\t\t\tconst chipWaveForCompat = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\t\t\t\t\t\t\tif ((chipWaveForCompat + 62) > 85) {\n\t\t\t\t\t\t\t\tif (document.URL.substring(document.URL.length - 13).toLowerCase() != \"legacysamples\") {\n\t\t\t\t\t\t\t\t\tif (!willLoadLegacySamplesForOldSongs) {\n\t\t\t\t\t\t\t\t\t\twillLoadLegacySamplesForOldSongs = true;\n\t\t\t\t\t\t\t\t\t\tConfig.willReloadForCustomSamples = true;\n\t\t\t\t\t\t\t\t\t\tEditorConfig.customSamples = [\"legacySamples\"];\n\t\t\t\t\t\t\t\t\t\tloadBuiltInSamples(0);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif ((chipWaveForCompat + 62) > 78) {\n\t\t\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 63);\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ((chipWaveForCompat + 62) > 67) {\n\t\t\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 61);\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse if ((chipWaveForCompat + 62) == 67) {\n\t\t\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = 40;\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tthis.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 62);\t\t\t\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//is it more useful to save base64 characters or url length?\n\t\t\t\t\tbreak; */\n            case SongTagCode.eqFilter: {\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                    if (beforeSeven && fromBeepBox) {\n                        const legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\n                        //const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                        const legacyToEnvelope: string[] = [\"none\", \"none\", \"none\", \"none\", \"decay 1\", \"decay 2\", \"decay 3\"];\n\n                        if (beforeThree && fromBeepBox) {\n                            const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const instrument: Instrument = this.channels[channelIndex].instruments[0];\n                            const legacySettings: LegacySettings = legacySettingsCache![channelIndex][0];\n                            const legacyFilter: number = [1, 3, 4, 5][clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                            legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                            legacySettings.filterResonance = 0;\n                            legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        } else if (beforeSix && fromBeepBox) {\n                            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (let i: number = 0; i < this.channels[channelIndex].instruments.length; i++) {\n                                    const instrument: Instrument = this.channels[channelIndex].instruments[i];\n                                    const legacySettings: LegacySettings = legacySettingsCache![channelIndex][i];\n                                    const legacyFilter: number = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n                                    if (channelIndex < this.pitchChannelCount) {\n                                        legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                                        legacySettings.filterResonance = 0;\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n                                    } else {\n                                        legacySettings.filterCutoff = 10;\n                                        legacySettings.filterResonance = 0;\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[\"none\"];\n                                    }\n                                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                }\n                            }\n                        } else {\n                            const legacyFilter: number = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                            legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                            legacySettings.filterResonance = 0;\n                            legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        }\n                    } else {\n                        const filterCutoffRange: number = 11;\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                        legacySettings.filterCutoff = clamp(0, filterCutoffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                    }\n                } else {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    let typeCheck: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\n                    if (fromBeepBox || typeCheck == 0) {\n                        instrument.eqFilterType = false;\n                        if (fromJummBox || fromGoldBox || fromUltraBox)\n                            typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]; // Skip to next to get control point count\n                        const originalControlPointCount: number = typeCheck;\n                        instrument.eqFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalControlPointCount);\n                        for (let i: number = instrument.eqFilter.controlPoints.length; i < instrument.eqFilter.controlPointCount; i++) {\n                            instrument.eqFilter.controlPoints[i] = new FilterControlPoint();\n                        }\n                        for (let i: number = 0; i < instrument.eqFilter.controlPointCount; i++) {\n                            const point: FilterControlPoint = instrument.eqFilter.controlPoints[i];\n                            point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        for (let i: number = instrument.eqFilter.controlPointCount; i < originalControlPointCount; i++) {\n                            charIndex += 3;\n                        }\n\n                        // Get subfilters as well. Skip Index 0, is a copy of the base filter.\n                        instrument.eqSubFilters[0] = instrument.eqFilter;\n                        if ((fromJummBox && !beforeFive) || (fromGoldBox && !beforeFour) || fromUltraBox) {\n                            let usingSubFilterBitfield: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                                if (usingSubFilterBitfield & (1 << j)) {\n                                    // Number of control points\n                                    const originalSubfilterControlPointCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    if (instrument.eqSubFilters[j + 1] == null)\n                                        instrument.eqSubFilters[j + 1] = new FilterSettings();\n                                    instrument.eqSubFilters[j + 1]!.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\n                                    for (let i: number = instrument.eqSubFilters[j + 1]!.controlPoints.length; i < instrument.eqSubFilters[j + 1]!.controlPointCount; i++) {\n                                        instrument.eqSubFilters[j + 1]!.controlPoints[i] = new FilterControlPoint();\n                                    }\n                                    for (let i: number = 0; i < instrument.eqSubFilters[j + 1]!.controlPointCount; i++) {\n                                        const point: FilterControlPoint = instrument.eqSubFilters[j + 1]!.controlPoints[i];\n                                        point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    }\n                                    for (let i: number = instrument.eqSubFilters[j + 1]!.controlPointCount; i < originalSubfilterControlPointCount; i++) {\n                                        charIndex += 3;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else {\n                        instrument.eqFilterType = true;\n                        instrument.eqFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        instrument.eqFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                }\n            } break;\n            case SongTagCode.filterResonance: {\n                if (fromUltraBox) {\n                    if (beforeThree) {\n                        // Still have to support the old and bad loop control data format written as a test, sigh.\n                        const sampleLoopInfoEncodedLength = decode32BitNumber(compressed, charIndex);\n                        charIndex += 6;\n                        const sampleLoopInfoEncoded = compressed.slice(charIndex, charIndex + sampleLoopInfoEncodedLength);\n                        charIndex += sampleLoopInfoEncodedLength;\n                        interface SampleLoopInfo {\n                            isUsingAdvancedLoopControls: boolean;\n                            chipWaveLoopStart: number;\n                            chipWaveLoopEnd: number;\n                            chipWaveLoopMode: number;\n                            chipWavePlayBackwards: boolean;\n                            chipWaveStartOffset: number;\n                        }\n                        interface SampleLoopInfoEntry {\n                            channel: number;\n                            instrument: number;\n                            info: SampleLoopInfo;\n                        }\n                        const sampleLoopInfo: SampleLoopInfoEntry[] = JSON.parse(atob(sampleLoopInfoEncoded));\n                        for (const entry of sampleLoopInfo) {\n                            const channelIndex: number = entry[\"channel\"];\n                            const instrumentIndex: number = entry[\"instrument\"];\n                            const info: SampleLoopInfo = entry[\"info\"];\n                            const instrument: Instrument = this.channels[channelIndex].instruments[instrumentIndex];\n                            instrument.isUsingAdvancedLoopControls = info[\"isUsingAdvancedLoopControls\"];\n                            instrument.chipWaveLoopStart = info[\"chipWaveLoopStart\"];\n                            instrument.chipWaveLoopEnd = info[\"chipWaveLoopEnd\"];\n                            instrument.chipWaveLoopMode = info[\"chipWaveLoopMode\"];\n                            instrument.chipWavePlayBackwards = info[\"chipWavePlayBackwards\"];\n                            instrument.chipWaveStartOffset = info[\"chipWaveStartOffset\"];\n                            // @TODO: Whenever chipWaveReleaseMode is implemented, it should be set here to the default.\n                        }\n                    } else {\n                        // Read the new loop control data format.\n                        // See Song.toBase64String for details on the encodings used here.\n                        const encodedLoopMode: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        const isUsingAdvancedLoopControls: boolean = Boolean(encodedLoopMode & 1);\n                        const chipWaveLoopMode: number = encodedLoopMode >> 1;\n                        const encodedReleaseMode: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        const chipWavePlayBackwards: boolean = Boolean(encodedReleaseMode & 1);\n                        // const chipWaveReleaseMode: number = encodedReleaseMode >> 1;\n                        const chipWaveLoopStart: number = decode32BitNumber(compressed, charIndex);\n                        charIndex += 6;\n                        const chipWaveLoopEnd: number = decode32BitNumber(compressed, charIndex);\n                        charIndex += 6;\n                        const chipWaveStartOffset: number = decode32BitNumber(compressed, charIndex);\n                        charIndex += 6;\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        instrument.isUsingAdvancedLoopControls = isUsingAdvancedLoopControls;\n                        instrument.chipWaveLoopStart = chipWaveLoopStart;\n                        instrument.chipWaveLoopEnd = chipWaveLoopEnd;\n                        instrument.chipWaveLoopMode = chipWaveLoopMode;\n                        instrument.chipWavePlayBackwards = chipWavePlayBackwards;\n                        instrument.chipWaveStartOffset = chipWaveStartOffset;\n                        // instrument.chipWaveReleaseMode = chipWaveReleaseMode;\n                    }\n                }\n                else if (fromGoldBox && !beforeFour && beforeSix) {\n                    if (document.URL.substring(document.URL.length - 13).toLowerCase() != \"legacysamples\") {\n                            if (!willLoadLegacySamplesForOldSongs) {\n                                willLoadLegacySamplesForOldSongs = true;\n                                Config.willReloadForCustomSamples = true;\n                                EditorConfig.customSamples = [\"legacySamples\"];\n                                loadBuiltInSamples(0);\n                            }\n                    }\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 125);\t\t\t\t\t\t\n                } else if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    const filterResonanceRange: number = 8;\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    legacySettings.filterResonance = clamp(0, filterResonanceRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n\n                } else {\n                    // Do nothing? This song tag code is deprecated for now.\n                }\n            } break;\n            case SongTagCode.drumsetEnvelopes: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                    if((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)){\n\n                    }\n                    if (instrument.type == InstrumentType.drumset) {\n                        for (let i: number = 0; i < Config.drumCount; i++) {\n                            let aa: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            if((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)) aa = pregoldToEnvelope[aa];\n                            instrument.drumsetEnvelopes[i] = Song._envelopeFromLegacyIndex(aa).index;\n                        }\n                    } else {\n                        // This used to be used for general filter envelopes.\n                        // The presence of an envelope affects how convertLegacySettings\n                        // decides the closest possible approximation, so update it.\n                        const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                        let aa: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)) aa = pregoldToEnvelope[aa];\n                        legacySettings.filterEnvelope = Song._envelopeFromLegacyIndex(aa);\n                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                    }\n                } else {\n                    // This tag is now only used for drumset filter envelopes.\n                    for (let i: number = 0; i < Config.drumCount; i++) {\n                        let aa: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)) aa = pregoldToEnvelope[aa];\n                        instrument.drumsetEnvelopes[i] = clamp(0, Config.envelopes.length, aa);\n                    }\n                }\n            } break;\n            case SongTagCode.pulseWidth: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                instrument.pulseWidth = clamp(0, Config.pulseWidthRange + (+(fromJummBox)) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                if (fromBeepBox) {\n                    // BeepBox formula\n                    instrument.pulseWidth = Math.round(Math.pow(0.5, (7 - instrument.pulseWidth) * Config.pulseWidthStepPower) * Config.pulseWidthRange);\n\n                }\n\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                    const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    let aa: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    if((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)) aa = pregoldToEnvelope[aa];\n                    legacySettings.pulseEnvelope = Song._envelopeFromLegacyIndex(aa);\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                }\n\n                if (fromUltraBox && !beforeFour) {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];  \n                    instrument.decimalOffset = clamp(0, 99 + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n\n            } break;\n            case SongTagCode.supersaw: {\n\t\t\t\tconst instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\t\t\t\tinstrument.supersawDynamism = clamp(0, Config.supersawDynamismMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\tinstrument.supersawSpread = clamp(0, Config.supersawSpreadMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\t\t\t\tinstrument.supersawShape = clamp(0, Config.supersawShapeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n            } break;\n            case SongTagCode.stringSustain: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                instrument.stringSustain = clamp(0, Config.stringSustainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n            } break;\n            case SongTagCode.fadeInOut: {\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    // this tag was used for a combination of transition and fade in/out.\n                    const legacySettings = [\n                        { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\n                        { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\n                        { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                        { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                        { transition: \"normal\", fadeInSeconds: 0.04, fadeOutTicks: 6 },\n                        { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: 48 },\n                        { transition: \"normal\", fadeInSeconds: 0.0125, fadeOutTicks: 72 },\n                        { transition: \"normal\", fadeInSeconds: 0.06, fadeOutTicks: 96 },\n                        { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    ];\n                    if (beforeThree && fromBeepBox) {\n                        const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                        const instrument: Instrument = this.channels[channelIndex].instruments[0];\n                        instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\n                        instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\n                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n                            // Enable transition if it was used.\n                            instrument.effects |= 1 << EffectType.transition;\n                        }\n                    } else if (beforeSix && fromBeepBox) {\n                        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                            for (const instrument of this.channels[channelIndex].instruments) {\n                                const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\n                                instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\n                                instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                                if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n                                    // Enable transition if it was used.\n                                    instrument.effects |= 1 << EffectType.transition;\n                                }\n                            }\n                        }\n                    } else if ((beforeFour && !fromGoldBox && !fromUltraBox) || fromBeepBox) {\n                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\n                        instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\n                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n                            // Enable transition if it was used.\n                            instrument.effects |= 1 << EffectType.transition;\n                        }\n                    } else {\n                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        instrument.fadeIn = Synth.secondsToFadeInSetting(settings.fadeInSeconds);\n                        instrument.fadeOut = Synth.ticksToFadeOutSetting(settings.fadeOutTicks);\n                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\n\n                        // Read tie-note \n                        if (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] > 0) {\n                            // Set legacy tie over flag, which is only used to port notes in patterns using this instrument as tying.\n                            instrument.legacyTieOver = true;\n\n                        }\n                        instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n\n                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index || instrument.clicklessTransition) {\n                            // Enable transition if it was used.\n                            instrument.effects |= 1 << EffectType.transition;\n                        }\n                    }\n                } else {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.fadeIn = clamp(0, Config.fadeInRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.fadeOut = clamp(0, Config.fadeOutTicks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    if (fromJummBox||fromGoldBox||fromUltraBox)\n                        instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n                }\n            } break;\n            case SongTagCode.vibrato: {\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    if (beforeSeven && fromBeepBox) {\n                        if (beforeThree && fromBeepBox) {\n                            const legacyEffects: number[] = [0, 3, 2, 0];\n                            const legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"tremolo2\"];\n                            const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            const instrument: Instrument = this.channels[channelIndex].instruments[0];\n                            const legacySettings: LegacySettings = legacySettingsCache![channelIndex][0];\n                            instrument.vibrato = legacyEffects[effect];\n                            if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\n                                // Imitate the legacy tremolo with a filter envelope.\n                                legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                            }\n                            if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                // Enable vibrato if it was used.\n                                instrument.effects |= 1 << EffectType.vibrato;\n                            }\n                        } else if (beforeSix && fromBeepBox) {\n                            const legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\n                            const legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"none\", \"tremolo5\", \"tremolo2\"];\n                            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (let i: number = 0; i < this.channels[channelIndex].instruments.length; i++) {\n                                    const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    const instrument: Instrument = this.channels[channelIndex].instruments[i];\n                                    const legacySettings: LegacySettings = legacySettingsCache![channelIndex][i];\n                                    instrument.vibrato = legacyEffects[effect];\n                                    if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\n                                        // Imitate the legacy tremolo with a filter envelope.\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n                                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                    }\n                                    if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                        // Enable vibrato if it was used.\n                                        instrument.effects |= 1 << EffectType.vibrato;\n                                    }\n                                    if ((legacyGlobalReverb != 0 || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) && !this.getChannelIsNoise(channelIndex)) {\n                                        // Enable reverb if it was used globaly before. (Global reverb was added before the effects option so I need to pick somewhere else to initialize instrument reverb, and I picked the vibrato command.)\n                                        instrument.effects |= 1 << EffectType.reverb;\n                                        instrument.reverb = legacyGlobalReverb;\n                                    }\n                                }\n                            }\n                        } else {\n                            const legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\n                            const legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"none\", \"tremolo5\", \"tremolo2\"];\n                            const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                            instrument.vibrato = legacyEffects[effect];\n                            if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\n                                // Imitate the legacy tremolo with a filter envelope.\n                                legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                            }\n                            if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                // Enable vibrato if it was used.\n                                instrument.effects |= 1 << EffectType.vibrato;\n                            }\n                            if (legacyGlobalReverb != 0 || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                                // Enable reverb if it was used globaly before. (Global reverb was added before the effects option so I need to pick somewhere else to initialize instrument reverb, and I picked the vibrato command.)\n                                instrument.effects |= 1 << EffectType.reverb;\n                                instrument.reverb = legacyGlobalReverb;\n                            }\n                        }\n                    } else {\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        const vibrato: number = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        instrument.vibrato = vibrato;\n                        if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                            // Enable vibrato if it was used.\n                            instrument.effects |= 1 << EffectType.vibrato;\n                        }\n                        // Custom vibrato\n                        if (vibrato == Config.vibratos.length) {\n                            instrument.vibratoDepth = clamp(0, Config.modulators.dictionary[\"vibrato depth\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50;\n                            instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary[\"vibrato speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.vibratoDelay = clamp(0, Config.modulators.dictionary[\"vibrato delay\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 2;\n                            instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.effects |= 1 << EffectType.vibrato;\n                        }\n                        // Enforce standard vibrato settings\n                        else {\n                            instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\n                            instrument.vibratoSpeed = 10; // Normal speed\n                            instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;\n                            instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\n                        }\n                    }\n                } else {\n                    // Do nothing? This song tag code is deprecated for now.\n                }\n            } break;\n            case SongTagCode.arpeggioSpeed: {\n                // Deprecated, but supported for legacy purposes\n                if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.arpeggioSpeed = clamp(0, Config.modulators.dictionary[\"arp speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.fastTwoNoteArp = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false; // Two note arp setting piggybacks on this\n                }\n                else {\n                    // Do nothing, deprecated for now\n                }\n            } break;\n            case SongTagCode.unison: {\n                if (beforeThree && fromBeepBox) {\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.channels[channelIndex].instruments[0].unison = clamp(0, Config.unisons.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                } else if (beforeSix && fromBeepBox) {\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (const instrument of this.channels[channelIndex].instruments) {\n                            const originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            let unison: number = clamp(0, Config.unisons.length, originalValue);\n                            if (originalValue == 8) {\n                                // original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\n                                unison = 2;\n                                instrument.chord = 3;\n                            }\n                            instrument.unison = unison;\n                        }\n                    }\n                } else if (beforeSeven && fromBeepBox) {\n                    const originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    let unison: number = clamp(0, Config.unisons.length, originalValue);\n                    if (originalValue == 8) {\n                        // original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\n                        unison = 2;\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chord = 3;\n                    }\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].unison = unison;\n                } else {\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].unison = clamp(0, Config.unisons.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                \n                //if (fromUltrabox) && !beforeFive && (instrument.unison == Config.unisons.length)  {\n                if (instrument.unison == Config.unisons.length) {\n                    instrument.unisonVoices = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\n                    const unisonSpreadNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const unisonSpread: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63)) * 63);\n\n                    const unisonOffsetNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const unisonOffset: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63)) * 63);\n\n                    const unisonExpressionNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const unisonExpression: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63);\n                    \n                    const unisonSignNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const unisonSign: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63);\n\n\n                    instrument.unisonSpread = unisonSpread / 1000;\n                    if (unisonSpreadNegative == 0) instrument.unisonSpread *= -1;\n\n                    instrument.unisonOffset = unisonOffset / 1000;\n                    if (unisonOffsetNegative == 0) instrument.unisonOffset *= -1;\n\n                    instrument.unisonExpression = unisonExpression / 1000;\n                    if (unisonExpressionNegative == 0) instrument.unisonExpression *= -1;\n\n                    instrument.unisonSign = unisonSign / 1000;\n                    if (unisonSignNegative == 0) instrument.unisonSign *= -1;\n                } else {\n                    instrument.unisonVoices = Config.unisons[instrument.unison].voices;\n                    instrument.unisonSpread = Config.unisons[instrument.unison].spread;\n                    instrument.unisonOffset = Config.unisons[instrument.unison].offset;\n                    instrument.unisonExpression = Config.unisons[instrument.unison].expression;\n                    instrument.unisonSign = Config.unisons[instrument.unison].sign;\n                }\n            \n            } break;\n            case SongTagCode.chord: {\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    if (instrument.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n                        // Enable chord if it was used.\n                        instrument.effects |= 1 << EffectType.chord;\n                    }\n                } else {\n                    // Do nothing? This song tag code is deprecated for now.\n                }\n            } break;\n            case SongTagCode.effects: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    instrument.effects = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] & ((1 << EffectType.length) - 1));\n                    if (legacyGlobalReverb == 0 && !((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                        // Disable reverb if legacy song reverb was zero.\n                        instrument.effects &= ~(1 << EffectType.reverb);\n                    } else if (effectsIncludeReverb(instrument.effects)) {\n                        instrument.reverb = legacyGlobalReverb;\n                    }\n                    // @jummbus - Enabling pan effect on song import no matter what to make it a default.\n                    //if (instrument.pan != Config.panCenter) {\n                    instrument.effects |= 1 << EffectType.panning;\n                    //}\n                    if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                        // Enable vibrato if it was used.\n                        instrument.effects |= 1 << EffectType.vibrato;\n                    }\n                    if (instrument.detune != Config.detuneCenter) {\n                        // Enable detune if it was used.\n                        instrument.effects |= 1 << EffectType.detune;\n                    }\n                    if (instrument.aliases)\n                        instrument.effects |= 1 << EffectType.distortion;\n                    else\n                        instrument.effects &= ~(1 << EffectType.distortion);\n\n                    // convertLegacySettings may need to force-enable note filter, call\n                    // it again here to make sure that this override takes precedence.\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                } else {\n                    // BeepBox currently uses two base64 characters at 6 bits each for a bitfield representing all the enabled effects.\n                    if (EffectType.length > 12) throw new Error();\n                    instrument.effects = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\n                    if (effectsIncludeNoteFilter(instrument.effects)) {\n                        let typeCheck: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if (fromBeepBox || typeCheck == 0) {\n                            instrument.noteFilterType = false;\n                            if (fromJummBox || fromGoldBox || fromUltraBox)\n                                typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]; // Skip to next index in jummbox to get actual count\n                            instrument.noteFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, typeCheck);\n                            for (let i: number = instrument.noteFilter.controlPoints.length; i < instrument.noteFilter.controlPointCount; i++) {\n                                instrument.noteFilter.controlPoints[i] = new FilterControlPoint();\n                            }\n                            for (let i: number = 0; i < instrument.noteFilter.controlPointCount; i++) {\n                                const point: FilterControlPoint = instrument.noteFilter.controlPoints[i];\n                                point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            for (let i: number = instrument.noteFilter.controlPointCount; i < typeCheck; i++) {\n                                charIndex += 3;\n                            }\n\n                            // Get subfilters as well. Skip Index 0, is a copy of the base filter.\n                            instrument.noteSubFilters[0] = instrument.noteFilter;\n                            if ((fromJummBox && !beforeFive) || (fromGoldBox) || (fromUltraBox)) {\n                                let usingSubFilterBitfield: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                                    if (usingSubFilterBitfield & (1 << j)) {\n                                        // Number of control points\n                                        const originalSubfilterControlPointCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                        if (instrument.noteSubFilters[j + 1] == null)\n                                            instrument.noteSubFilters[j + 1] = new FilterSettings();\n                                        instrument.noteSubFilters[j + 1]!.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\n                                        for (let i: number = instrument.noteSubFilters[j + 1]!.controlPoints.length; i < instrument.noteSubFilters[j + 1]!.controlPointCount; i++) {\n                                            instrument.noteSubFilters[j + 1]!.controlPoints[i] = new FilterControlPoint();\n                                        }\n                                        for (let i: number = 0; i < instrument.noteSubFilters[j + 1]!.controlPointCount; i++) {\n                                            const point: FilterControlPoint = instrument.noteSubFilters[j + 1]!.controlPoints[i];\n                                            point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        }\n                                        for (let i: number = instrument.noteSubFilters[j + 1]!.controlPointCount; i < originalSubfilterControlPointCount; i++) {\n                                            charIndex += 3;\n                                        }\n                                    }\n                                }\n                            }\n                        } else {\n                            instrument.noteFilterType = true;\n                            instrument.noteFilter.reset();\n                            instrument.noteFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.noteFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\n                        }\n                    }\n                    if (effectsIncludeTransition(instrument.effects)) {\n                        instrument.transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    if (effectsIncludeChord(instrument.effects)) {\n                        instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        // Custom arpeggio speed... only in JB, and only if the instrument arpeggiates.\n                        if (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index && (fromJummBox||fromGoldBox||fromUltraBox)) {\n                            instrument.arpeggioSpeed = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            instrument.fastTwoNoteArp = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\n                        }\n                    }\n                    if (effectsIncludePitchShift(instrument.effects)) {\n                        instrument.pitchShift = clamp(0, Config.pitchShiftRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    if (effectsIncludeDetune(instrument.effects)) {\n                        if (fromBeepBox) {\n                            // Convert from BeepBox's formula\n                            instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.detune = Math.round((instrument.detune - 9) * (Math.abs(instrument.detune - 9) + 1) / 2 + Config.detuneCenter);\n                        } else {\n                            instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                    if (effectsIncludeVibrato(instrument.effects)) {\n                        instrument.vibrato = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\n                        // Custom vibrato\n                        if (instrument.vibrato == Config.vibratos.length && (fromJummBox || fromGoldBox || fromUltraBox)) {\n                            instrument.vibratoDepth = clamp(0, Config.modulators.dictionary[\"vibrato depth\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 25;\n                            instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary[\"vibrato speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.vibratoDelay = clamp(0, Config.modulators.dictionary[\"vibrato delay\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        // Enforce standard vibrato settings\n                        else {\n                            instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\n                            instrument.vibratoSpeed = 10; // Normal speed\n                            instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;\n                            instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\n                        }\n                    }\n                    if (effectsIncludeDistortion(instrument.effects)) {\n                        instrument.distortion = clamp(0, Config.distortionRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        if ((fromJummBox && !beforeFive) || fromGoldBox || fromUltraBox)\n                            instrument.aliases = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n                    }\n                    if (effectsIncludeBitcrusher(instrument.effects)) {\n                        instrument.bitcrusherFreq = clamp(0, Config.bitcrusherFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        instrument.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    if (effectsIncludePanning(instrument.effects)) {\n                        if (fromBeepBox) {\n                            // Beepbox has a panMax of 8 (9 total positions), Jummbox has a panMax of 100 (101 total positions)\n                            instrument.pan = clamp(0, Config.panMax + 1, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0)));\n                        }\n                        else {\n                            instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n\n                        // Now, pan delay follows on new versions of jummbox.\n                        if ((fromJummBox && !beforeTwo) || fromGoldBox || fromUltraBox)\n                            instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    }\n                    if (effectsIncludeChorus(instrument.effects)) {\n                        if (fromBeepBox) {\n                            // BeepBox has 4 chorus values vs. JB's 8\n                            instrument.chorus = clamp(0, (Config.chorusRange / 2) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 2;\n                        }\n                        else {\n                            instrument.chorus = clamp(0, Config.chorusRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                    if (effectsIncludeEcho(instrument.effects)) {\n                        instrument.echoSustain = clamp(0, Config.echoSustainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        instrument.echoDelay = clamp(0, Config.echoDelayRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    if (effectsIncludeReverb(instrument.effects)) {\n                        if (fromBeepBox) {\n                            instrument.reverb = clamp(0, Config.reverbRange, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * Config.reverbRange / 3.0));\n                        } else {\n                            instrument.reverb = clamp(0, Config.reverbRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                }\n                // Clamp the range.\n                instrument.effects &= (1 << EffectType.length) - 1;\n            } break;\n            case SongTagCode.volume: {\n                if (beforeThree && fromBeepBox) {\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const instrument: Instrument = this.channels[channelIndex].instruments[0];\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\n                } else if (beforeSix && fromBeepBox) {\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (const instrument of this.channels[channelIndex].instruments) {\n                            instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\n                        }\n                    }\n                } else if (beforeSeven && fromBeepBox) {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\n                } else if (fromBeepBox) {\n                    // Beepbox v9's volume range is 0-7 (0 is max, 7 is mute)\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 25.0 / 7.0));\n                } else {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    // Volume is stored in two bytes in jummbox just in case range ever exceeds one byte, e.g. through later waffling on the subject.\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, Config.volumeRange / 2 + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)])) - Config.volumeRange / 2));\n                }\n            } break;\n            case SongTagCode.pan: {\n                if (beforeNine && fromBeepBox) {\n                    // Beepbox has a panMax of 8 (9 total positions), Jummbox has a panMax of 100 (101 total positions)\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.pan = clamp(0, Config.panMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0));\n                } else if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    // Pan delay follows on v3 + v4\n                    if (fromJummBox && !beforeThree || fromGoldBox || fromUltraBox) {\n                        instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    }\n                } else {\n                    // Do nothing? This song tag code is deprecated for now.\n                }\n            } break;\n            case SongTagCode.detune: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\n                if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                    // Before jummbox v5, detune was -50 to 50. Now it is 0 to 400\n                    instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 4);\n                    instrument.effects |= 1 << EffectType.detune;\n                } else {\n                    // Now in v5, tag code is deprecated and handled thru detune effects.\n                }\n            } break;\n            case SongTagCode.customChipWave: {\n                let instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                // Pop custom wave values\n                for (let j: number = 0; j < 64; j++) {\n                    instrument.customChipWave[j]\n                        = clamp(-24, 25, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] - 24);\n                }\n\n                let sum: number = 0.0;\n                for (let i: number = 0; i < instrument.customChipWave.length; i++) {\n                    sum += instrument.customChipWave[i];\n                }\n                const average: number = sum / instrument.customChipWave.length;\n\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\n                let cumulative: number = 0;\n                let wavePrev: number = 0;\n                for (let i: number = 0; i < instrument.customChipWave.length; i++) {\n                    cumulative += wavePrev;\n                    wavePrev = instrument.customChipWave[i] - average;\n                    instrument.customChipWaveIntegral[i] = cumulative;\n                }\n\n                // 65th, last sample is for anti-aliasing\n                instrument.customChipWaveIntegral[64] = 0.0;\n\n            } break;\n            case SongTagCode.limiterSettings: {\n                let nextValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\n                // Check if limiter settings are used... if not, restore to default\n                if (nextValue == 0x3f) {\n                    this.restoreLimiterDefaults();\n                }\n                else {\n                    // Limiter is used, grab values\n                    this.compressionRatio = (nextValue < 10 ? nextValue / 10 : (1 + (nextValue - 10) / 60));\n                    nextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.limitRatio = (nextValue < 10 ? nextValue / 10 : (nextValue - 9));\n                    this.limitDecay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.limitRise = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 250.0) + 2000.0;\n                    this.compressionThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\n                    this.limitThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\n                    this.masterGain = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50.0;\n                }\n            } break;\n            case SongTagCode.channelNames: {\n                for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\n                    // Length of channel name string. Due to some crazy Unicode characters this needs to be 2 bytes...\n                    var channelNameLength;\n                    if (beforeFour && !fromGoldBox && !fromUltraBox)\n                        channelNameLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]\n                    else\n                        channelNameLength = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    this.channels[channel].name = decodeURIComponent(compressed.substring(charIndex, charIndex + channelNameLength));\n\n                    charIndex += channelNameLength;\n                }\n            } break;\n            case SongTagCode.algorithm: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if (instrument.type == InstrumentType.fm) {\n                    instrument.algorithm = clamp(0, Config.algorithms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n                else {\n                    instrument.algorithm6Op = clamp(0, Config.algorithms6Op.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.customAlgorithm.fromPreset(instrument.algorithm6Op);\n                    if (compressed.charCodeAt(charIndex) == SongTagCode.chord) {\n                        let carrierCountTemp = clamp(1, Config.operatorCount + 2+1, base64CharCodeToInt[compressed.charCodeAt(charIndex + 1)]);\n                        charIndex++\n                        let tempModArray: number[][] = [];\n                        if (compressed.charCodeAt(charIndex+1) == SongTagCode.effects) {\n                            charIndex++\n                            let j: number = 0;\n                            charIndex++\n                            while (compressed.charCodeAt(charIndex) != SongTagCode.effects) {\n                                tempModArray[j] = [];\n                                let o: number = 0;\n                                while (compressed.charCodeAt(charIndex) != SongTagCode.operatorWaves) {\n                                    tempModArray[j][o] = clamp(1, Config.operatorCount + 3, base64CharCodeToInt[compressed.charCodeAt(charIndex)]);\n                                    o++\n                                    charIndex++\n                                }\n                                j++;\n                                charIndex++\n                            }\n                            instrument.customAlgorithm.set(carrierCountTemp, tempModArray);\n                            charIndex++; //????\n                        }\n                    }\n                }\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                    // The algorithm determines the carrier count, which affects how legacy settings are imported.\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                }\n            } break;\n            case SongTagCode.feedbackType: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if (instrument.type == InstrumentType.fm) {\n                    instrument.feedbackType = clamp(0, Config.feedbacks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n                else {\n                    instrument.feedbackType6Op = clamp(0, Config.feedbacks6Op.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.customFeedbackType.fromPreset(instrument.feedbackType6Op);\n                    let tempModArray: number[][] = [];\n                    if (compressed.charCodeAt(charIndex) == SongTagCode.effects) {\n                        let j: number = 0;\n                        charIndex++\n                        while (compressed.charCodeAt(charIndex) != SongTagCode.effects) {\n                            tempModArray[j] = [];\n                            let o: number = 0;\n                            while (compressed.charCodeAt(charIndex) != SongTagCode.operatorWaves) {\n                                tempModArray[j][o] = clamp(1, Config.operatorCount + 2, base64CharCodeToInt[compressed.charCodeAt(charIndex)]);\n                                o++\n                                charIndex++\n                            }\n                            j++;\n                            charIndex++\n                        }\n                        instrument.customFeedbackType.set(tempModArray);\n                        charIndex++; //???? weirdly needs to skip the end character or it'll use that next loop instead of like just moving to the next one itself\n                    }\n                }\n\n            } break;\n            case SongTagCode.feedbackAmplitude: {\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n            } break;\n            case SongTagCode.feedbackEnvelope: {\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                    const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    \n                    let aa:number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)) aa = pregoldToEnvelope[aa];\n                    legacySettings.feedbackEnvelope = Song._envelopeFromLegacyIndex(base64CharCodeToInt[aa]);\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                } else {\n                    // Do nothing? This song tag code is deprecated for now.\n                }\n            } break;\n            case SongTagCode.operatorFrequencies: {\n                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            if (beforeThree && fromGoldBox) {\n\t\t\t\t\t\t\t\tconst freqToGold3 = [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 22, 24, 2, 1, 9, 17, 19, 21, 23, 0, 3];\n                               \n\t\t\t\t\t\t\t\tfor (let o = 0; o < (instrument.type == 10 ? 6 : Config.operatorCount); o++) {\n                                    instrument.operators[o].frequency = freqToGold3[clamp(0, freqToGold3.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                }\n                            }\n\t\t\t\t\t\t\telse if (!fromGoldBox && !fromUltraBox) {\n\t\t\t\t\t\t\t\tconst freqToUltraBox = [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 23, 27, 2, 1, 9, 17, 19, 21, 23, 0, 3];\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tfor (let o = 0; o < (instrument.type == 10 ? 6 : Config.operatorCount); o++) {\n                                    instrument.operators[o].frequency = freqToUltraBox[clamp(0, freqToUltraBox.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                }\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n                            else {\n                                for (let o = 0; o < (instrument.type == 10 ? 6 : Config.operatorCount); o++) {\n                                    instrument.operators[o].frequency = clamp(0, Config.operatorFrequencies.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n            } break;\n            case SongTagCode.operatorAmplitudes: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                    instrument.operators[o].amplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n            } break;\n            case SongTagCode.envelopes: {\n                const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    legacySettings.operatorEnvelopes = [];\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                        let aa:number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)) aa = pregoldToEnvelope[aa];  \n                        legacySettings.operatorEnvelopes[o] = Song._envelopeFromLegacyIndex(aa);\n                    }\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                } else {\n                    const envelopeCount: number = clamp(0, Config.maxEnvelopeCount + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    for (let i: number = 0; i < envelopeCount; i++) {\n                        const target: number = clamp(0, Config.instrumentAutomationTargets.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        let index: number = 0;\n                        const maxCount: number = Config.instrumentAutomationTargets[target].maxCount;\n                        if (maxCount > 1) {\n                            index = clamp(0, maxCount, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        let aa:number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox)) aa = pregoldToEnvelope[aa]; \n                        const envelope: number = clamp(0, Config.envelopes.length, aa);\n                        instrument.addEnvelope(target, index, envelope);\n                    }\n                }\n            } break;\n            case SongTagCode.operatorWaves: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\n                if (beforeThree && fromGoldBox) {\n                    for (let o: number = 0; o < Config.operatorCount; o++) {\n                        const pre3To3g = [0, 1, 3, 2, 2, 2, 4, 5];\n                        const old: number = clamp(0, pre3To3g.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        if (old == 3) {\n                            instrument.operators[o].pulseWidth = 5;\n                        } else if (old == 4) {\n                            instrument.operators[o].pulseWidth = 4;\n                        } else if (old == 5) {\n                            instrument.operators[o].pulseWidth = 6;\n                        }\n                        instrument.operators[o].waveform = pre3To3g[old];\n                    }\n                } else {\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                        if (fromJummBox) {\n                            const jummToG = [0, 1, 3, 2, 4, 5];\n                            instrument.operators[o].waveform = jummToG[clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                        } else {\n                            instrument.operators[o].waveform = clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        // Pulse width follows, if it is a pulse width operator wave\n                        if (instrument.operators[o].waveform == 2) {\n                            instrument.operators[o].pulseWidth = clamp(0, Config.pwmOperatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                }\n\n            } break;\n            case SongTagCode.spectrum: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if (instrument.type == InstrumentType.spectrum) {\n                    const byteCount: number = Math.ceil(Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n                    for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                        instrument.spectrumWave.spectrum[i] = bits.read(Config.spectrumControlPointBits);\n                    }\n                    instrument.spectrumWave.markCustomWaveDirty();\n                    charIndex += byteCount;\n                } else if (instrument.type == InstrumentType.drumset) {\n                    const byteCount: number = Math.ceil(Config.drumCount * Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n                    for (let j: number = 0; j < Config.drumCount; j++) {\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                            instrument.drumsetSpectrumWaves[j].spectrum[i] = bits.read(Config.spectrumControlPointBits);\n                        }\n                        instrument.drumsetSpectrumWaves[j].markCustomWaveDirty();\n                    }\n                    charIndex += byteCount;\n                } else {\n                    throw new Error(\"Unhandled instrument type for spectrum song tag code.\");\n                }\n            } break;\n            case SongTagCode.harmonics: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                const byteCount: number = Math.ceil(Config.harmonicsControlPoints * Config.harmonicsControlPointBits / 6)\n                const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n                for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n                    instrument.harmonicsWave.harmonics[i] = bits.read(Config.harmonicsControlPointBits);\n                }\n                instrument.harmonicsWave.markCustomWaveDirty();\n                charIndex += byteCount;\n            } break;\n            case SongTagCode.aliases: {\n                if ((fromJummBox && beforeFive) || (fromGoldBox && beforeFour)) {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.aliases = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\n                    if (instrument.aliases) {\n                        instrument.distortion = 0;\n                        instrument.effects |= 1 << EffectType.distortion;\n                    }\n                } else {\n                    if (fromUltraBox) {\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];  \n                        instrument.decimalOffset = clamp(0, 50 + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                }\n            }\n                break;\n            case SongTagCode.bars: {\n                let subStringLength: number;\n                if (beforeThree && fromBeepBox) {\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const barCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    subStringLength = Math.ceil(barCount * 0.5);\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n                    for (let i: number = 0; i < barCount; i++) {\n                        this.channels[channelIndex].bars[i] = bits.read(3) + 1;\n                    }\n                } else if (beforeFive && fromBeepBox) {\n                    let neededBits: number = 0;\n                    while ((1 << neededBits) < this.patternsPerChannel) neededBits++;\n                    subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (let i: number = 0; i < this.barCount; i++) {\n                            this.channels[channelIndex].bars[i] = bits.read(neededBits) + 1;\n                        }\n                    }\n                } else {\n                    let neededBits: number = 0;\n                    while ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\n                    subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (let i: number = 0; i < this.barCount; i++) {\n                            this.channels[channelIndex].bars[i] = bits.read(neededBits);\n                        }\n                    }\n                }\n                charIndex += subStringLength;\n            } break;\n            case SongTagCode.patterns: {\n                let bitStringLength: number = 0;\n                let channelIndex: number;\n                let largerChords: boolean = !((beforeFour && fromJummBox) || fromBeepBox);\n                let recentPitchBitLength: number = (largerChords ? 4 : 3);\n                let recentPitchLength: number = (largerChords ? 16 : 8);\n                if (beforeThree && fromBeepBox) {\n                    channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\n                    // The old format used the next character to represent the number of patterns in the channel, which is usually eight, the default. \n                    charIndex++; //let patternCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\n                    bitStringLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    bitStringLength = bitStringLength << 6;\n                    bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                } else {\n                    channelIndex = 0;\n                    let bitStringLengthLength: number = validateRange(1, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    while (bitStringLengthLength > 0) {\n                        bitStringLength = bitStringLength << 6;\n                        bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        bitStringLengthLength--;\n                    }\n                }\n\n                const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + bitStringLength);\n                charIndex += bitStringLength;\n\n                const bitsPerNoteSize: number = Song.getNeededBits(Config.noteSizeMax);\n                let songReverbChannel: number = -1;\n                let songReverbInstrument: number = -1;\n                let songReverbIndex: number = -1;\n\n                while (true) {\n                    const channel: Channel = this.channels[channelIndex];\n                    const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\n                    const isModChannel: boolean = this.getChannelIsMod(channelIndex);\n\n                    const maxInstrumentsPerPattern: number = this.getMaxInstrumentsPerPattern(channelIndex);\n                    const neededInstrumentCountBits: number = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);\n\n                    const neededInstrumentIndexBits: number = Song.getNeededBits(channel.instruments.length - 1);\n\n                    // Some info about modulator settings immediately follows in mod channels.\n                    if (isModChannel) {\n                        let jumfive: boolean = (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)\n\n                        // 2 more indices for 'all' and 'active'\n                        const neededModInstrumentIndexBits: number = (jumfive) ? neededInstrumentIndexBits : Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);\n\n                        for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n\n                            let instrument: Instrument = channel.instruments[instrumentIndex];\n\n                            for (let mod: number = 0; mod < Config.modCount; mod++) {\n                                // Still using legacy \"mod status\" format, but doing it manually as it's only used in the URL now.\n                                // 0 - For pitch/noise\n                                // 1 - (used to be For noise, not needed)\n                                // 2 - For song\n                                // 3 - None\n                                let status: number = bits.read(2);\n\n                                switch (status) {\n                                    case 0: // Pitch\n                                        instrument.modChannels[mod] = clamp(0, this.pitchChannelCount + this.noiseChannelCount + 1, bits.read(8));\n                                        instrument.modInstruments[mod] = clamp(0, this.channels[instrument.modChannels[mod]].instruments.length + 2, bits.read(neededModInstrumentIndexBits));\n                                        break;\n                                    case 1: // Noise\n                                        // Getting a status of 1 means this is legacy mod info. Need to add pitch channel count, as it used to just store noise channel index and not overall channel index\n                                        instrument.modChannels[mod] = this.pitchChannelCount + clamp(0, this.noiseChannelCount + 1, bits.read(8));\n                                        instrument.modInstruments[mod] = clamp(0, this.channels[instrument.modChannels[mod]].instruments.length + 2, bits.read(neededInstrumentIndexBits));\n                                        break;\n                                    case 2: // For song\n                                        instrument.modChannels[mod] = -1;\n                                        break;\n                                    case 3: // None\n                                        instrument.modChannels[mod] = -2;\n                                        break;\n                                }\n\n                                // Mod setting is only used if the status isn't \"none\".\n                                if (status != 3) {\n                                    instrument.modulators[mod] = bits.read(6);\n                                }\n\n                                if (!jumfive && (Config.modulators[instrument.modulators[mod]].name == \"eq filter\" || Config.modulators[instrument.modulators[mod]].name == \"note filter\")) {\n                                    instrument.modFilterTypes[mod] = bits.read(6);\n                                }\n\n                                if (jumfive && instrument.modChannels[mod] >= 0) {\n                                    let forNoteFilter: boolean = effectsIncludeNoteFilter(this.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].effects);\n\n                                    // For legacy filter cut/peak, need to denote since scaling must be applied\n                                    if (instrument.modulators[mod] == 7) {\n                                        // Legacy filter cut index\n                                        // Check if there is no filter dot on prospective filter. If so, add a low pass at max possible freq.\n\n                                        if (forNoteFilter) {\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"note filt cut\"].index;\n                                        }\n                                        else {\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"eq filt cut\"].index;\n                                        }\n\n                                        instrument.modFilterTypes[mod] = 1; // Dot 1 X\n\n                                    }\n                                    else if (instrument.modulators[mod] == 8) {\n                                        // Legacy filter peak index\n                                        if (forNoteFilter) {\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"note filt peak\"].index;\n                                        }\n                                        else {\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"eq filt peak\"].index;\n                                        }\n\n                                        instrument.modFilterTypes[mod] = 2; // Dot 1 Y\n                                    }\n                                }\n                                else if (jumfive) {\n                                    // Check for song reverb mod, which must be handled differently now that it is a multiplier\n                                    if (instrument.modulators[mod] == Config.modulators.dictionary[\"song reverb\"].index) {\n                                        songReverbChannel = channelIndex;\n                                        songReverbInstrument = instrumentIndex;\n                                        songReverbIndex = mod;\n                                    }\n                                }\n\n                                // Based on setting, enable some effects for the modulated instrument. This isn't always set, say if the instrument's pan was right in the center.\n                                // Only used on import of old songs, because sometimes an invalid effect can be set in a mod in the new version that is actually unused. In that case,\n                                // keeping the mod invalid is better since it preserves the state.\n                                if (jumfive && Config.modulators[instrument.modulators[mod]].associatedEffect != EffectType.length) {\n                                    this.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].effects |= 1 << Config.modulators[instrument.modulators[mod]].associatedEffect;\n                                }\n                            }\n                        }\n                    }\n\n                    // Scalar applied to detune mods since its granularity was upped. Could be repurposed later if any other granularity changes occur.\n                    const detuneScaleNotes: number[][] = [];\n                    for (let j: number = 0; j < channel.instruments.length; j++) {\n                        detuneScaleNotes[j] = [];\n                        for (let i: number = 0; i < Config.modCount; i++) {\n                            detuneScaleNotes[j][Config.modCount - 1 - i] = 1 + 3 * +(((beforeFive && fromJummBox) || (beforeFour&&fromGoldBox)) && isModChannel && (channel.instruments[j].modulators[i] == Config.modulators.dictionary[\"detune\"].index));\n                        }\n                    }\n                    const octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : channel.octave * 12;\n                    let lastPitch: number = ((isNoiseChannel || isModChannel) ? 4 : octaveOffset);\n                    const recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);\n                    const recentShapes: any[] = [];\n                    for (let i: number = 0; i < recentPitches.length; i++) {\n                        recentPitches[i] += octaveOffset;\n                    }\n                    for (let i: number = 0; i < this.patternsPerChannel; i++) {\n                        const newPattern: Pattern = channel.patterns[i];\n\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                            newPattern.instruments[0] = validateRange(0, channel.instruments.length - 1, bits.read(neededInstrumentIndexBits));\n                            newPattern.instruments.length = 1;\n                        } else {\n                            if (this.patternInstruments) {\n                                const instrumentCount: number = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, bits.read(neededInstrumentCountBits) + Config.instrumentCountMin);\n                                for (let j: number = 0; j < instrumentCount; j++) {\n                                    newPattern.instruments[j] = validateRange(0, channel.instruments.length - 1 + +(isModChannel) * 2, bits.read(neededInstrumentIndexBits));\n                                }\n                                newPattern.instruments.length = instrumentCount;\n                            } else {\n                                newPattern.instruments[0] = 0;\n                                newPattern.instruments.length = Config.instrumentCountMin;\n                            }\n                        }\n\n                        if (!(fromBeepBox && beforeThree) && bits.read(1) == 0) {\n                            newPattern.notes.length = 0;\n                            continue;\n                        }\n\n                        let curPart: number = 0;\n                        const newNotes: Note[] = newPattern.notes;\n                        let noteCount: number = 0;\n                        // Due to arbitrary note positioning, mod channels don't end the count until curPart actually exceeds the max\n                        while (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\n\n                            const useOldShape: boolean = bits.read(1) == 1;\n                            let newNote: boolean = false;\n                            let shapeIndex: number = 0;\n                            if (useOldShape) {\n                                shapeIndex = validateRange(0, recentShapes.length - 1, bits.readLongTail(0, 0));\n                            } else {\n                                newNote = bits.read(1) == 1;\n                            }\n\n                            if (!useOldShape && !newNote) {\n                                // For mod channels, check if you need to move backward too (notes can appear in any order and offset from each other).\n                                if (isModChannel) {\n                                    const isBackwards: boolean = bits.read(1) == 1;\n                                    const restLength: number = bits.readPartDuration();\n                                    if (isBackwards) {\n                                        curPart -= restLength;\n                                    }\n                                    else {\n                                        curPart += restLength;\n                                    }\n                                } else {\n                                    const restLength: number = (beforeSeven && fromBeepBox)\n                                        ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\n                                        : bits.readPartDuration();\n                                    curPart += restLength;\n\n                                }\n                            } else {\n                                let shape: any;\n                                if (useOldShape) {\n                                    shape = recentShapes[shapeIndex];\n                                    recentShapes.splice(shapeIndex, 1);\n                                } else {\n                                    shape = {};\n\n                                    if (!largerChords) {\n                                        // Old format: X 1's followed by a 0 => X+1 pitches, up to 4\n                                        shape.pitchCount = 1;\n                                        while (shape.pitchCount < 4 && bits.read(1) == 1) shape.pitchCount++;\n                                    }\n                                    else {\n                                        // New format is:\n                                        //      0: 1 pitch\n                                        // 1[XXX]: 3 bits of binary signifying 2+ pitches\n                                        if (bits.read(1) == 1) {\n                                            shape.pitchCount = bits.read(3) + 2;\n                                        }\n                                        else {\n                                            shape.pitchCount = 1;\n                                        }\n                                    }\n\n                                    shape.pinCount = bits.readPinCount();\n                                    if (fromBeepBox) {\n                                        shape.initialSize = bits.read(2) * 2;\n                                    } else if (!isModChannel) {\n                                        shape.initialSize = bits.read(bitsPerNoteSize);\n                                    } else {\n                                        shape.initialSize = bits.read(9);\n                                    }\n\n                                    shape.pins = [];\n                                    shape.length = 0;\n                                    shape.bendCount = 0;\n                                    for (let j: number = 0; j < shape.pinCount; j++) {\n                                        let pinObj: any = {};\n                                        pinObj.pitchBend = bits.read(1) == 1;\n                                        if (pinObj.pitchBend) shape.bendCount++;\n                                        shape.length += (beforeSeven && fromBeepBox)\n                                            ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\n                                            : bits.readPartDuration();\n                                        pinObj.time = shape.length;\n                                        if (fromBeepBox) {\n                                            pinObj.size = bits.read(2) * 2;\n                                        } else if (!isModChannel) {\n                                            pinObj.size = bits.read(bitsPerNoteSize);\n                                        }\n                                        else {\n                                            pinObj.size = bits.read(9);\n                                        }\n                                        shape.pins.push(pinObj);\n                                    }\n                                }\n                                recentShapes.unshift(shape);\n                                if (recentShapes.length > 10) recentShapes.pop(); // TODO: Use Deque?\n\n                                let note: Note;\n                                if (newNotes.length <= noteCount) {\n                                    note = new Note(0, curPart, curPart + shape.length, shape.initialSize);\n                                    newNotes[noteCount++] = note;\n                                } else {\n                                    note = newNotes[noteCount++];\n                                    note.start = curPart;\n                                    note.end = curPart + shape.length;\n                                    note.pins[0].size = shape.initialSize;\n                                }\n\n                                let pitch: number;\n                                let pitchCount: number = 0;\n                                const pitchBends: number[] = []; // TODO: allocate this array only once! keep separate length and iterator index. Use Deque?\n                                for (let j: number = 0; j < shape.pitchCount + shape.bendCount; j++) {\n                                    const useOldPitch: boolean = bits.read(1) == 1;\n                                    if (!useOldPitch) {\n                                        const interval: number = bits.readPitchInterval();\n                                        pitch = lastPitch;\n                                        let intervalIter: number = interval;\n                                        while (intervalIter > 0) {\n                                            pitch++;\n                                            while (recentPitches.indexOf(pitch) != -1) pitch++;\n                                            intervalIter--;\n                                        }\n                                        while (intervalIter < 0) {\n                                            pitch--;\n                                            while (recentPitches.indexOf(pitch) != -1) pitch--;\n                                            intervalIter++;\n                                        }\n                                    } else {\n                                        const pitchIndex: number = validateRange(0, recentPitches.length - 1, bits.read(recentPitchBitLength));\n                                        pitch = recentPitches[pitchIndex];\n                                        recentPitches.splice(pitchIndex, 1);\n                                    }\n\n                                    recentPitches.unshift(pitch);\n                                    if (recentPitches.length > recentPitchLength) recentPitches.pop();\n\n                                    if (j < shape.pitchCount) {\n                                        note.pitches[pitchCount++] = pitch;\n                                    } else {\n                                        pitchBends.push(pitch);\n                                    }\n\n                                    if (j == shape.pitchCount - 1) {\n                                        lastPitch = note.pitches[0];\n                                    } else {\n                                        lastPitch = pitch;\n                                    }\n                                }\n                                note.pitches.length = pitchCount;\n                                pitchBends.unshift(note.pitches[0]); // TODO: Use Deque?\n                                if (isModChannel) {\n                                    note.pins[0].size *= detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]];\n                                }\n                                let pinCount: number = 1;\n                                for (const pinObj of shape.pins) {\n                                    if (pinObj.pitchBend) pitchBends.shift();\n\n                                    const interval: number = pitchBends[0] - note.pitches[0];\n                                    if (note.pins.length <= pinCount) {\n                                        if (isModChannel) {\n                                            note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]]);\n                                        } else {\n                                            note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size);\n                                        }\n                                    } else {\n                                        const pin: NotePin = note.pins[pinCount++];\n                                        pin.interval = interval;\n                                        pin.time = pinObj.time;\n                                        if (isModChannel) {\n                                            pin.size = pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]];\n                                        } else {\n                                            pin.size = pinObj.size;\n                                        }\n                                    }\n                                }\n                                note.pins.length = pinCount;\n\n                                if (note.start == 0) {\n                                    if (!((beforeNine && fromBeepBox) || (beforeFive && fromJummBox)||(beforeFour&&fromGoldBox))) {\n                                        note.continuesLastPattern = (bits.read(1) == 1);\n                                    } else {\n                                        if ((beforeFour && !fromUltraBox) || fromBeepBox) {\n                                            note.continuesLastPattern = false;\n                                        } else {\n                                            note.continuesLastPattern = channel.instruments[newPattern.instruments[0]].legacyTieOver;\n                                        }\n                                    }\n                                }\n\n                                curPart = validateRange(0, this.beatsPerBar * Config.partsPerBeat, note.end);\n                            }\n                        }\n                        newNotes.length = noteCount;\n                    }\n\n                    if (beforeThree && fromBeepBox) {\n                        break;\n                    } else {\n                        channelIndex++;\n                        if (channelIndex >= this.getChannelCount()) break;\n                    }\n                } // while (true)\n\n                // Correction for old JB songs that had song reverb mods. Change all instruments using reverb to max reverb\n                if (((fromJummBox && beforeFive)||(beforeFour && fromGoldBox)) && songReverbIndex >= 0) {\n                    for (let channelIndex: number = 0; channelIndex < this.channels.length; channelIndex++) {\n                        for (let instrumentIndex: number = 0; instrumentIndex < this.channels[channelIndex].instruments.length; instrumentIndex++) {\n                            const instrument: Instrument = this.channels[channelIndex].instruments[instrumentIndex];\n                            if (effectsIncludeReverb(instrument.effects)) {\n                                instrument.reverb = Config.reverbRange - 1;\n                            }\n                            // Set song reverb via mod to the old setting at song start.\n                            if (songReverbChannel == channelIndex && songReverbInstrument == instrumentIndex) {\n                                const patternIndex: number = this.channels[channelIndex].bars[0];\n                                if (patternIndex > 0) {\n                                    // Doesn't work if 1st pattern isn't using the right ins for song reverb...\n                                    // Add note to start of pattern\n                                    const pattern: Pattern = this.channels[channelIndex].patterns[patternIndex - 1];\n                                    let lowestPart: number = 6;\n                                    for (const note of pattern.notes) {\n                                        if (note.pitches[0] == Config.modCount - 1 - songReverbIndex) {\n                                            lowestPart = Math.min(lowestPart, note.start);\n                                        }\n                                    }\n\n                                    if (lowestPart > 0) {\n                                        pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, lowestPart, legacyGlobalReverb));\n                                    }\n                                }\n                                else {\n                                    // Add pattern\n                                    if (this.channels[channelIndex].patterns.length < Config.barCountMax) {\n                                        const pattern: Pattern = new Pattern();\n                                        this.channels[channelIndex].patterns.push(pattern);\n                                        this.channels[channelIndex].bars[0] = this.channels[channelIndex].patterns.length;\n                                        if (this.channels[channelIndex].patterns.length > this.patternsPerChannel) {\n                                            for (let chn: number = 0; chn < this.channels.length; chn++) {\n                                                if (this.channels[chn].patterns.length <= this.patternsPerChannel) {\n                                                    this.channels[chn].patterns.push(new Pattern());\n                                                }\n                                            }\n                                            this.patternsPerChannel++;\n                                        }\n                                        pattern.instruments.length = 1;\n                                        pattern.instruments[0] = songReverbInstrument;\n                                        pattern.notes.length = 0;\n                                        pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, 6, legacyGlobalReverb));\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } break;\n            default: {\n                throw new Error(\"Unrecognized song tag code \" + String.fromCharCode(command) + \" at index \" + (charIndex - 1) + \" \" + compressed.substring(/*charIndex - 2*/0, charIndex));\n            } break;\n        }\n\n        if (Config.willReloadForCustomSamples) {\n            window.location.hash = this.toBase64String();\n            setTimeout(() => { location.reload(); }, 50);\n        }\n    }\n\n    private static _isProperUrl(string: string): boolean {\n        try { \n            return Boolean(new URL(string)); \n        }\n        catch(x){ \n            return false; \n        }\n    }\n\n    // @TODO: Share more of this code with AddSamplesPrompt.\n    private static _parseAndConfigureCustomSample(url: string, customSampleUrls: string[], customSamplePresets: Preset[], sampleLoadingState: SampleLoadingState, parseOldSyntax: boolean): boolean {\n        const defaultIndex: number = 0;\n        const defaultIntegratedSamples: Float32Array = Config.chipWaves[defaultIndex].samples;\n        const defaultSamples: Float32Array = Config.rawRawChipWaves[defaultIndex].samples;\n\n        const customSampleUrlIndex: number = customSampleUrls.length;\n        customSampleUrls.push(url);\n        // This depends on `Config.chipWaves` being the same\n        // length as `Config.rawRawChipWaves`.\n        const chipWaveIndex: number = Config.chipWaves.length;\n\n        let urlSliced: string = url;\n\n        let customSampleRate: number = 44100;\n        let isCustomPercussive: boolean = false;\n        let customRootKey: number = 60;\n        let presetIsUsingAdvancedLoopControls: boolean = false;\n        let presetChipWaveLoopStart: number | null = null;\n        let presetChipWaveLoopEnd: number | null = null;\n        let presetChipWaveStartOffset: number | null = null;\n        let presetChipWaveLoopMode: number | null = null;\n        let presetChipWavePlayBackwards: boolean = false;\n\n        let parsedSampleOptions: boolean = false;\n        let optionsStartIndex: number = url.indexOf(\"!\");\n        let optionsEndIndex: number = -1;\n        if (optionsStartIndex === 0) {\n            optionsEndIndex = url.indexOf(\"!\", optionsStartIndex + 1);\n            if (optionsEndIndex !== -1) {\n                const rawOptions: string[] = url.slice(optionsStartIndex + 1, optionsEndIndex).split(\",\");\n                for (const rawOption of rawOptions) {\n                    const optionCode: string = rawOption.charAt(0);\n                    const optionData: string = rawOption.slice(1, rawOption.length);\n                    if (optionCode === \"s\") {\n                        customSampleRate = clamp(8000, 96000 + 1, parseFloatWithDefault(optionData, 44100));\n                    } else if (optionCode === \"r\") {\n                        customRootKey = parseFloatWithDefault(optionData, 60);\n                    } else if (optionCode === \"p\") {\n                        isCustomPercussive = true;\n                    } else if (optionCode === \"a\") {\n                        presetChipWaveLoopStart = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveLoopStart != null) {\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    } else if (optionCode === \"b\") {\n                        presetChipWaveLoopEnd = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveLoopEnd != null) {\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    } else if (optionCode === \"c\") {\n                        presetChipWaveStartOffset = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveStartOffset != null) {\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    } else if (optionCode === \"d\") {\n                        presetChipWaveLoopMode = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveLoopMode != null) {\n                            // @TODO: Error-prone. This should be automatically\n                            // derived from the list of available loop modes.\n                            presetChipWaveLoopMode = clamp(0, 3 + 1, presetChipWaveLoopMode);\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    } else if (optionCode === \"e\") {\n                        presetChipWavePlayBackwards = true;\n                        presetIsUsingAdvancedLoopControls = true;\n                    }\n                }\n                urlSliced = url.slice(optionsEndIndex + 1, url.length);\n                parsedSampleOptions = true;\n            }\n        }\n\n        let parsedUrl: URL | null = null;\n        if (Song._isProperUrl(urlSliced)) {\n            parsedUrl = new URL(urlSliced);\n        }\n        else {\n            alert(url + \" is not a valid url\");\n            return false;\n        }\n\n        if (parseOldSyntax) {\n            if (!parsedSampleOptions && parsedUrl != null) {\n                if (url.indexOf(\"@\") != -1) {\n                    //urlSliced = url.slice(url.indexOf(\"@\"), url.indexOf(\"@\"));\n                    urlSliced = url.replaceAll(\"@\", \"\")\n                    parsedUrl = new URL(urlSliced);\n                    isCustomPercussive = true;\t\n                }\t\n\n                function sliceForSampleRate() {\n                    urlSliced = url.slice(0, url.indexOf(\",\"));\n                    parsedUrl = new URL(urlSliced);\n                    customSampleRate = clamp(8000, 96000 + 1, parseFloatWithDefault(url.slice(url.indexOf(\",\") + 1), 44100));\n                    //should this be parseFloat or parseInt?\n                    //ig floats let you do decimals and such, but idk where that would be useful\n                }\n\n                function sliceForRootKey() {\n                    urlSliced = url.slice(0, url.indexOf(\"!\"));\n                    parsedUrl = new URL(urlSliced);\n                    customRootKey = parseFloatWithDefault(url.slice(url.indexOf(\"!\") + 1), 60);\n                }\n\n\n                if (url.indexOf(\",\") != -1 && url.indexOf(\"!\") != -1) {\n                    if (url.indexOf(\",\") < url.indexOf(\"!\")) {\n                        sliceForRootKey();\n                        sliceForSampleRate();\n                    }\n                    else {\n                        sliceForSampleRate();\n                        sliceForRootKey();\n                    }\t\n                }\n                else {\n                    if (url.indexOf(\",\") != -1) {\n                        sliceForSampleRate();\n                    }\t\n                    if (url.indexOf(\"!\") != -1) {\n                        sliceForRootKey();\n                    }\t\n                }\n            }\n        }\n\n        if (parsedUrl != null) {\n            // Store in the new format.\n            let urlWithNamedOptions = urlSliced;\n            const namedOptions: string[] = [];\n            if (customSampleRate !== 44100) namedOptions.push(\"s\" + customSampleRate);\n            if (customRootKey !== 60) namedOptions.push(\"r\" + customRootKey);\n            if (isCustomPercussive) namedOptions.push(\"p\");\n            if (presetIsUsingAdvancedLoopControls) {\n                if (presetChipWaveLoopStart != null) namedOptions.push(\"a\" + presetChipWaveLoopStart);\n                if (presetChipWaveLoopEnd != null) namedOptions.push(\"b\" + presetChipWaveLoopEnd);\n                if (presetChipWaveStartOffset != null) namedOptions.push(\"c\" + presetChipWaveStartOffset);\n                if (presetChipWaveLoopMode != null) namedOptions.push(\"d\" + presetChipWaveLoopMode);\n                if (presetChipWavePlayBackwards) namedOptions.push(\"e\");\n            }\n            if (namedOptions.length > 0) {\n                urlWithNamedOptions = \"!\" + namedOptions.join(\",\") + \"!\" + urlSliced;\n            }\n            customSampleUrls[customSampleUrlIndex] = urlWithNamedOptions;\n\n            // @TODO: Could also remove known extensions, but it\n            // would probably be much better to be able to specify\n            // a custom name.\n            // @TODO: If for whatever inexplicable reason someone\n            // uses an url like `https://example.com`, this will\n            // result in an empty name here.\n            const name: string = decodeURIComponent(parsedUrl.pathname.replace(/^([^\\/]*\\/)+/, \"\"));\n            // @TODO: What to do about samples with the same name?\n            // The problem with using the url is that the name is\n            // user-facing and long names break assumptions of the\n            // UI.\n            const expression: number = 1.0;\n            Config.chipWaves[chipWaveIndex] = {\n                name: name,\n                expression: expression,\n                isCustomSampled: true,\n                isPercussion: isCustomPercussive,\n                rootKey: customRootKey,\n                sampleRate: customSampleRate,\n                samples: defaultIntegratedSamples,\n                index: chipWaveIndex,\n            };\n            Config.rawChipWaves[chipWaveIndex] = {\n                name: name,\n                expression: expression,\n                isCustomSampled: true,\n                isPercussion: isCustomPercussive,\n                rootKey: customRootKey,\n                sampleRate: customSampleRate,\n                samples: defaultSamples,\n                index: chipWaveIndex,\n            };\n            Config.rawRawChipWaves[chipWaveIndex] = {\n                name: name,\n                expression: expression,\n                isCustomSampled: true,\n                isPercussion: isCustomPercussive,\n                rootKey: customRootKey,\n                sampleRate: customSampleRate,\n                samples: defaultSamples,\n                index: chipWaveIndex,\n            };\n            const customSamplePresetSettings: Dictionary<any> = {\n                \"type\": \"chip\",\n                \"eqFilter\": [],\n                \"effects\": [],\n                \"transition\": \"normal\",\n                \"fadeInSeconds\": 0,\n                \"fadeOutTicks\": -3,\n                \"chord\": \"harmony\",\n                \"wave\": name,\n                \"unison\": \"none\",\n                \"envelopes\": [],\n            };\n            if (presetIsUsingAdvancedLoopControls) {\n                customSamplePresetSettings[\"isUsingAdvancedLoopControls\"] = true;\n                customSamplePresetSettings[\"chipWaveLoopStart\"] = presetChipWaveLoopStart != null ? presetChipWaveLoopStart : 0;\n                customSamplePresetSettings[\"chipWaveLoopEnd\"] = presetChipWaveLoopEnd != null ? presetChipWaveLoopEnd : 2;\n                customSamplePresetSettings[\"chipWaveLoopMode\"] = presetChipWaveLoopMode != null ? presetChipWaveLoopMode : 0;\n                customSamplePresetSettings[\"chipWavePlayBackwards\"] = presetChipWavePlayBackwards;\n                customSamplePresetSettings[\"chipWaveStartOffset\"] = presetChipWaveStartOffset != null ? presetChipWaveStartOffset : 0;\n            }\n            const customSamplePreset: Preset = {\n                index: 0, // This should be overwritten by toNameMap, in our caller.\n                name: name,\n                midiProgram: 80,\n                settings: customSamplePresetSettings,\n            };\n            customSamplePresets.push(customSamplePreset);\n            if (!Config.willReloadForCustomSamples) {\n                const rawLoopOptions: any = {\n                    \"isUsingAdvancedLoopControls\": presetIsUsingAdvancedLoopControls,\n                    \"chipWaveLoopStart\": presetChipWaveLoopStart,\n                    \"chipWaveLoopEnd\": presetChipWaveLoopEnd,\n                    \"chipWaveLoopMode\": presetChipWaveLoopMode,\n                    \"chipWavePlayBackwards\": presetChipWavePlayBackwards,\n                    \"chipWaveStartOffset\": presetChipWaveStartOffset,\n                };\n                startLoadingSample(urlSliced, chipWaveIndex, customSamplePresetSettings, rawLoopOptions, customSampleRate);\n            }\n            sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loading;\n            sampleLoadingState.urlTable[chipWaveIndex] = urlSliced;\n            sampleLoadingState.totalSamples++;\n        }\n\n        return true;\n    }\n\n    private static _restoreChipWaveListToDefault(): void {\n        Config.chipWaves = toNameMap(Config.chipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\n        Config.rawChipWaves = toNameMap(Config.rawChipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\n        Config.rawRawChipWaves = toNameMap(Config.rawRawChipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\n    }\n\n    private static _clearSamples(): void {\n        EditorConfig.customSamples = null;\n\n        Song._restoreChipWaveListToDefault();\n\n        sampleLoadingState.statusTable = {};\n        sampleLoadingState.urlTable = {};\n        sampleLoadingState.totalSamples = 0;\n        sampleLoadingState.samplesLoaded = 0;\n        sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\n            sampleLoadingState.totalSamples,\n            sampleLoadingState.samplesLoaded\n        ));\n    }\n\n    public toJsonObject(enableIntro: boolean = true, loopCount: number = 1, enableOutro: boolean = true): Object {\n        const channelArray: Object[] = [];\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n            const channel: Channel = this.channels[channelIndex];\n            const instrumentArray: Object[] = [];\n            const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\n            const isModChannel: boolean = this.getChannelIsMod(channelIndex);\n            for (const instrument of channel.instruments) {\n                instrumentArray.push(instrument.toJsonObject());\n            }\n\n            const patternArray: Object[] = [];\n            for (const pattern of channel.patterns) {\n                patternArray.push(pattern.toJsonObject(this, channel, isModChannel));\n            }\n\n            const sequenceArray: number[] = [];\n            if (enableIntro) for (let i: number = 0; i < this.loopStart; i++) {\n                sequenceArray.push(channel.bars[i]);\n            }\n            for (let l: number = 0; l < loopCount; l++) for (let i: number = this.loopStart; i < this.loopStart + this.loopLength; i++) {\n                sequenceArray.push(channel.bars[i]);\n            }\n            if (enableOutro) for (let i: number = this.loopStart + this.loopLength; i < this.barCount; i++) {\n                sequenceArray.push(channel.bars[i]);\n            }\n\n            const channelObject: any = {\n                \"type\": isModChannel ? \"mod\" : (isNoiseChannel ? \"drum\" : \"pitch\"),\n                \"name\": channel.name,\n                \"instruments\": instrumentArray,\n                \"patterns\": patternArray,\n                \"sequence\": sequenceArray,\n            };\n            if (!isNoiseChannel) {\n                // For compatibility with old versions the octave is offset by one.\n                channelObject[\"octaveScrollBar\"] = channel.octave - 1;\n            }\n            channelArray.push(channelObject);\n        }\n\n        const result: any = {\n            \"name\": this.title,\n            \"format\": Song._format,\n            \"version\": Song._latestUltraBoxVersion,\n            \"scale\": Config.scales[this.scale].name,\n            \"customScale\": this.scaleCustom,\n            \"key\": Config.keys[this.key].name,\n            \"keyOctave\": this.octave,\n            \"introBars\": this.loopStart,\n            \"loopBars\": this.loopLength,\n            \"beatsPerBar\": this.beatsPerBar,\n            \"ticksPerBeat\": Config.rhythms[this.rhythm].stepsPerBeat,\n            \"beatsPerMinute\": this.tempo,\n            \"reverb\": this.reverb,\n            \"masterGain\": this.masterGain,\n            \"compressionThreshold\": this.compressionThreshold,\n            \"limitThreshold\": this.limitThreshold,\n            \"limitDecay\": this.limitDecay,\n            \"limitRise\": this.limitRise,\n            \"limitRatio\": this.limitRatio,\n            \"compressionRatio\": this.compressionRatio,\n            //\"outroBars\": this.barCount - this.loopStart - this.loopLength; // derive this from bar arrays?\n            //\"patternCount\": this.patternsPerChannel, // derive this from pattern arrays?\n            \"layeredInstruments\": this.layeredInstruments,\n            \"patternInstruments\": this.patternInstruments,\n            \"channels\": channelArray,\n        };\n\n        if (EditorConfig.customSamples != null && EditorConfig.customSamples.length > 0) {\n            result[\"customSamples\"] = EditorConfig.customSamples;\n        }\n\n        return result;\n    }\n\n    public fromJsonObject(jsonObject: any): void {\n        this.initToDefault(true);\n        if (!jsonObject) return;\n\n        //const version: number = jsonObject[\"version\"] | 0;\n        //if (version > Song._latestVersion) return; // Go ahead and try to parse something from the future I guess? JSON is pretty easy-going!\n\n        if (jsonObject[\"name\"] != undefined) {\n            this.title = jsonObject[\"name\"];\n        }\n\n\t    \t\t\t// if (jsonObject[\"customSamples\"] != undefined && EditorConfig.customSamples == undefined) {\n                // EditorConfig.customSamples = atob(jsonObject[\"customSamples\"]);\n\t\t\t\t// console.log(EditorConfig.customSamples);\n\t\t\t\t// location.reload(); \n            // }\n\t\t\t//jsonmark\n\t\t\t//this doesn't work\n\n        if (jsonObject[\"customSamples\"] != undefined) {\n            const customSamples: string[] = jsonObject[\"customSamples\"];\n            if (EditorConfig.customSamples == null || EditorConfig.customSamples.join(\", \") != customSamples.join(\", \")) {\n                // Have to duplicate the work done in Song.fromBase64String\n                // early here, because Instrument.fromJsonObject depends on the\n                // chip wave list having the correct items already in memory.\n\n                Config.willReloadForCustomSamples = true;\n\n                Song._restoreChipWaveListToDefault();\n\n                let willLoadLegacySamples: boolean = false;\n                let willLoadNintariboxSamples: boolean = false;\n                let willLoadMarioPaintboxSamples: boolean = false;\n                const customSampleUrls: string[] = [];\n                const customSamplePresets: Preset[] = [];\n                for (const url of customSamples) {\n                    if (url.toLowerCase() === \"legacysamples\") {\n                        if (!willLoadLegacySamples) {\n                            willLoadLegacySamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(0);\n                        }\n                    } \n                    else if (url.toLowerCase() === \"nintariboxsamples\") {\n                        if (!willLoadNintariboxSamples) {\n                            willLoadNintariboxSamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(1);\n                        }\n                    }\n                    else if (url.toLowerCase() === \"mariopaintboxsamples\") {\n                        if (!willLoadMarioPaintboxSamples) {\n                            willLoadMarioPaintboxSamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(2);\n                        }\n                    }\n                    \n                    else {\n                        // When EditorConfig.customSamples is saved in the json\n                        // export, it should be using the new syntax, unless\n                        // the user has manually modified the URL, so we don't\n                        // really need to parse the old syntax here.\n                        const parseOldSyntax: boolean = false;\n                        Song._parseAndConfigureCustomSample(url, customSampleUrls, customSamplePresets, sampleLoadingState, parseOldSyntax);\n                    }\n                }\n                if (customSampleUrls.length > 0) {\n                    EditorConfig.customSamples = customSampleUrls;\n                }\n                if (customSamplePresets.length > 0) {\n                    const customSamplePresetsMap: DictionaryArray<Preset> = toNameMap(customSamplePresets);\n                    EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {\n                        name: \"Custom Sample Presets\",\n                        presets: customSamplePresetsMap,\n                        index: EditorConfig.presetCategories.length,\n                    };\n                }\n            }\n        } else {\n            // No custom samples, so the only possibility at this point is that\n            // we need to load the legacy samples. Let's check whether that's\n            // necessary.\n            let shouldLoadLegacySamples: boolean = false;\n            if (jsonObject[\"channels\"] != undefined) {\n                for (let channelIndex: number = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\n                    const channelObject: any = jsonObject[\"channels\"][channelIndex];\n                    if (channelObject[\"type\"] !== \"pitch\") {\n                        // Legacy samples can only exist in pitch channels.\n                        continue;\n                    }\n                    if (Array.isArray(channelObject[\"instruments\"])) {\n                        const instrumentObjects: any[] = channelObject[\"instruments\"];\n                        for (let i: number = 0; i < instrumentObjects.length; i++) {\n                            const instrumentObject: any = instrumentObjects[i];\n                            if (instrumentObject[\"type\"] !== \"chip\") {\n                                // Legacy samples can only exist in chip wave\n                                // instruments.\n                                continue;\n                            }\n                            if (instrumentObject[\"wave\"] == null) {\n                                // This should exist if things got saved\n                                // correctly, but if they didn't, skip this.\n                                continue;\n                            }\n                            const waveName: string = instrumentObject[\"wave\"];\n                            // @TODO: Avoid this duplication.\n                            const names: string[] = [\n                                \"paandorasbox kick\",\n                                \"paandorasbox snare\",\n                                \"paandorasbox piano1\",\n                                \"paandorasbox WOW\",\n                                \"paandorasbox overdrive\",\n                                \"paandorasbox trumpet\",\n                                \"paandorasbox saxophone\",\n                                \"paandorasbox orchestrahit\",\n                                \"paandorasbox detatched violin\",\n                                \"paandorasbox synth\",\n                                \"paandorasbox sonic3snare\",\n                                \"paandorasbox come on\",\n                                \"paandorasbox choir\",\n                                \"paandorasbox overdriveguitar\",\n                                \"paandorasbox flute\",\n                                \"paandorasbox legato violin\",\n                                \"paandorasbox tremolo violin\",\n                                \"paandorasbox amen break\",\n                                \"paandorasbox pizzicato violin\",\n                                \"paandorasbox tim allen grunt\",\n                                \"paandorasbox tuba\",\n                                \"paandorasbox loopingcymbal\",\n                                \"paandorasbox standardkick\",\n                                \"paandorasbox standardsnare\",\n                                \"paandorasbox closedhihat\",\n                                \"paandorasbox foothihat\",\n                                \"paandorasbox openhihat\",\n                                \"paandorasbox crashcymbal\",\n                                \"paandorasbox pianoC4\",\n                                \"paandorasbox liver pad\",\n                                \"paandorasbox marimba\",\n                                \"paandorasbox susdotwav\",\n                                \"paandorasbox wackyboxtts\",\n                                \"paandorasbox peppersteak_1\",\n                                \"paandorasbox peppersteak_2\",\n                                \"paandorasbox vinyl_noise\",\n                                \"paandorasbeta slap bass\",\n                                \"paandorasbeta HD EB overdrive guitar\",\n                                \"paandorasbeta sunsoft bass\",\n                                \"paandorasbeta masculine choir\",\n                                \"paandorasbeta feminine choir\",\n                                \"paandorasbeta tololoche\",\n                                \"paandorasbeta harp\",\n                                \"paandorasbeta pan flute\",\n                                \"paandorasbeta krumhorn\",\n                                \"paandorasbeta timpani\",\n                                \"paandorasbeta crowd hey\",\n                                \"paandorasbeta wario land 4 brass\",\n                                \"paandorasbeta wario land 4 rock organ\",\n                                \"paandorasbeta wario land 4 DAOW\",\n                                \"paandorasbeta wario land 4 hour chime\",\n                                \"paandorasbeta wario land 4 tick\",\n                                \"paandorasbeta kirby kick\",\n                                \"paandorasbeta kirby snare\",\n                                \"paandorasbeta kirby bongo\",\n                                \"paandorasbeta kirby click\",\n                                \"paandorasbeta sonor kick\",\n                                \"paandorasbeta sonor snare\",\n                                \"paandorasbeta sonor snare (left hand)\",\n                                \"paandorasbeta sonor snare (right hand)\",\n                                \"paandorasbeta sonor high tom\",\n                                \"paandorasbeta sonor low tom\",\n                                \"paandorasbeta sonor hihat (closed)\",\n                                \"paandorasbeta sonor hihat (half opened)\",\n                                \"paandorasbeta sonor hihat (open)\",\n                                \"paandorasbeta sonor hihat (open tip)\",\n                                \"paandorasbeta sonor hihat (pedal)\",\n                                \"paandorasbeta sonor crash\",\n                                \"paandorasbeta sonor crash (tip)\",\n                                \"paandorasbeta sonor ride\"\n                            ];\n                            // The difference for these is in the doubled a.\n                            const oldNames: string[] = [\n                                \"pandoraasbox kick\",\n                                \"pandoraasbox snare\",\n                                \"pandoraasbox piano1\",\n                                \"pandoraasbox WOW\",\n                                \"pandoraasbox overdrive\",\n                                \"pandoraasbox trumpet\",\n                                \"pandoraasbox saxophone\",\n                                \"pandoraasbox orchestrahit\",\n                                \"pandoraasbox detatched violin\",\n                                \"pandoraasbox synth\",\n                                \"pandoraasbox sonic3snare\",\n                                \"pandoraasbox come on\",\n                                \"pandoraasbox choir\",\n                                \"pandoraasbox overdriveguitar\",\n                                \"pandoraasbox flute\",\n                                \"pandoraasbox legato violin\",\n                                \"pandoraasbox tremolo violin\",\n                                \"pandoraasbox amen break\",\n                                \"pandoraasbox pizzicato violin\",\n                                \"pandoraasbox tim allen grunt\",\n                                \"pandoraasbox tuba\",\n                                \"pandoraasbox loopingcymbal\",\n                                \"pandoraasbox standardkick\",\n                                \"pandoraasbox standardsnare\",\n                                \"pandoraasbox closedhihat\",\n                                \"pandoraasbox foothihat\",\n                                \"pandoraasbox openhihat\",\n                                \"pandoraasbox crashcymbal\",\n                                \"pandoraasbox pianoC4\",\n                                \"pandoraasbox liver pad\",\n                                \"pandoraasbox marimba\",\n                                \"pandoraasbox susdotwav\",\n                                \"pandoraasbox wackyboxtts\",\n                                \"pandoraasbox peppersteak_1\",\n                                \"pandoraasbox peppersteak_2\",\n                                \"pandoraasbox vinyl_noise\",\n                                \"pandoraasbeta slap bass\",\n                                \"pandoraasbeta HD EB overdrive guitar\",\n                                \"pandoraasbeta sunsoft bass\",\n                                \"pandoraasbeta masculine choir\",\n                                \"pandoraasbeta feminine choir\",\n                                \"pandoraasbeta tololoche\",\n                                \"pandoraasbeta harp\",\n                                \"pandoraasbeta pan flute\",\n                                \"pandoraasbeta krumhorn\",\n                                \"pandoraasbeta timpani\",\n                                \"pandoraasbeta crowd hey\",\n                                \"pandoraasbeta wario land 4 brass\",\n                                \"pandoraasbeta wario land 4 rock organ\",\n                                \"pandoraasbeta wario land 4 DAOW\",\n                                \"pandoraasbeta wario land 4 hour chime\",\n                                \"pandoraasbeta wario land 4 tick\",\n                                \"pandoraasbeta kirby kick\",\n                                \"pandoraasbeta kirby snare\",\n                                \"pandoraasbeta kirby bongo\",\n                                \"pandoraasbeta kirby click\",\n                                \"pandoraasbeta sonor kick\",\n                                \"pandoraasbeta sonor snare\",\n                                \"pandoraasbeta sonor snare (left hand)\",\n                                \"pandoraasbeta sonor snare (right hand)\",\n                                \"pandoraasbeta sonor high tom\",\n                                \"pandoraasbeta sonor low tom\",\n                                \"pandoraasbeta sonor hihat (closed)\",\n                                \"pandoraasbeta sonor hihat (half opened)\",\n                                \"pandoraasbeta sonor hihat (open)\",\n                                \"pandoraasbeta sonor hihat (open tip)\",\n                                \"pandoraasbeta sonor hihat (pedal)\",\n                                \"pandoraasbeta sonor crash\",\n                                \"pandoraasbeta sonor crash (tip)\",\n                                \"pandoraasbeta sonor ride\"\n                            ];\n                            // This mirrors paandorasboxWaveNames, which is unprefixed.\n                            const veryOldNames: string[] = [\n                                \"kick\",\n                                \"snare\",\n                                \"piano1\",\n                                \"WOW\",\n                                \"overdrive\",\n                                \"trumpet\",\n                                \"saxophone\",\n                                \"orchestrahit\",\n                                \"detatched violin\",\n                                \"synth\",\n                                \"sonic3snare\",\n                                \"come on\",\n                                \"choir\",\n                                \"overdriveguitar\",\n                                \"flute\",\n                                \"legato violin\",\n                                \"tremolo violin\",\n                                \"amen break\",\n                                \"pizzicato violin\",\n                                \"tim allen grunt\",\n                                \"tuba\",\n                                \"loopingcymbal\",\n                                \"standardkick\",\n                                \"standardsnare\",\n                                \"closedhihat\",\n                                \"foothihat\",\n                                \"openhihat\",\n                                \"crashcymbal\",\n                                \"pianoC4\",\n                                \"liver pad\",\n                                \"marimba\",\n                                \"susdotwav\",\n                                \"wackyboxtts\"\n                            ];\n                            if (names.includes(waveName)) {\n                                shouldLoadLegacySamples = true;\n                            } else if (oldNames.includes(waveName)) {\n                                shouldLoadLegacySamples = true;\n                                // If we see one of these old names, update it\n                                // to the corresponding new name.\n                                instrumentObject[\"wave\"] = names[oldNames.findIndex(x => x === waveName)];\n                            } else if (veryOldNames.includes(waveName)) {\n                                if (waveName === \"trumpet\" || waveName === \"flute\") {\n                                    // @TODO: This isn't exactly correct, but for now, if we see one of these two,\n                                    // leave them with the JummBox chip waves. The actual solution here will probably\n                                    // involve disambiguation via user input.\n                                } else {\n                                    // There's no other chip waves with ambiguous names like that, so it should\n                                    // be okay to assume we'll need to load the legacy samples now.\n                                    shouldLoadLegacySamples = true;\n                                    // If we see one of these old names, update it\n                                    // to the corresponding new name.\n                                    instrumentObject[\"wave\"] = names[veryOldNames.findIndex(x => x === waveName)];\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (shouldLoadLegacySamples) {\n                Config.willReloadForCustomSamples = true;\n\n                Song._restoreChipWaveListToDefault();\n\n                loadBuiltInSamples(0);\n                EditorConfig.customSamples = [\"legacySamples\"];\n            } else {\n                // We don't need to load the legacy samples, but we may have\n                // leftover samples in memory. If we do, clear them.\n                if (EditorConfig.customSamples != null && EditorConfig.customSamples.length > 0) {\n                    // We need to reload anyway in this case, because (for now)\n                    // the chip wave lists won't be correctly updated.\n                    Config.willReloadForCustomSamples = true;\n                    Song._clearSamples();\n                }\n            }\n        }\n\n        this.scale = 0; // default to free.\n        if (jsonObject[\"scale\"] != undefined) {\n            const oldScaleNames: Dictionary<string> = {\n                \"romani :)\": \"dbl harmonic :)\",\n                \"romani :(\": \"dbl harmonic :(\",\n                \"enigma\": \"strange\",\n            };\n            const scaleName: string = (oldScaleNames[jsonObject[\"scale\"]] != undefined) ? oldScaleNames[jsonObject[\"scale\"]] : jsonObject[\"scale\"];\n            const scale: number = Config.scales.findIndex(scale => scale.name == scaleName);\n            if (scale != -1) this.scale = scale;\n            if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\n                if (jsonObject[\"customScale\"] != undefined) {\n                    for (var i of jsonObject[\"customScale\"].keys()) {\n                        this.scaleCustom[i] = jsonObject[\"customScale\"][i];\n                    }\n                }\n            }\n        }\n\n        if (jsonObject[\"key\"] != undefined) {\n            if (typeof (jsonObject[\"key\"]) == \"number\") {\n                this.key = ((jsonObject[\"key\"] + 1200) >>> 0) % Config.keys.length;\n            } else if (typeof (jsonObject[\"key\"]) == \"string\") {\n                const key: string = jsonObject[\"key\"];\n                // This conversion code depends on C through B being\n                // available as keys, of course.\n                if (key === \"C+\") {\n                    this.key = 0;\n                    this.octave = 1;\n                } else if (key === \"G- (actually F#-)\") {\n                    this.key = 6;\n                    this.octave = -1;\n                } else if (key === \"C-\") {\n                    this.key = 0;\n                    this.octave = -1;\n                } else if (key === \"oh no (F-)\") {\n                    this.key = 5;\n                    this.octave = -1;\n                } else {\n                    const letter: string = key.charAt(0).toUpperCase();\n                    const symbol: string = key.charAt(1).toLowerCase();\n                    const letterMap: Readonly<Dictionary<number>> = { \"C\": 0, \"D\": 2, \"E\": 4, \"F\": 5, \"G\": 7, \"A\": 9, \"B\": 11 };\n                    const accidentalMap: Readonly<Dictionary<number>> = { \"#\": 1, \"♯\": 1, \"b\": -1, \"♭\": -1 };\n                    let index: number | undefined = letterMap[letter];\n                    const offset: number | undefined = accidentalMap[symbol];\n                    if (index != undefined) {\n                        if (offset != undefined) index += offset;\n                        if (index < 0) index += 12;\n                        index = index % 12;\n                        this.key = index;\n                    }\n                }\n            }\n        }\n\n        if (jsonObject[\"beatsPerMinute\"] != undefined) {\n            this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, jsonObject[\"beatsPerMinute\"] | 0);\n        }\n\n        if (jsonObject[\"keyOctave\"] != undefined) {\n            this.octave = clamp(Config.octaveMin, Config.octaveMax + 1, jsonObject[\"keyOctave\"] | 0);\n        }\n\n        let legacyGlobalReverb: number = 0; // In older songs, reverb was song-global, record that here and pass it to Instrument.fromJsonObject() for context.\n        if (jsonObject[\"reverb\"] != undefined) {\n            legacyGlobalReverb = clamp(0, 32, jsonObject[\"reverb\"] | 0);\n        }\n\n        if (jsonObject[\"beatsPerBar\"] != undefined) {\n            this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, jsonObject[\"beatsPerBar\"] | 0));\n        }\n\n        let importedPartsPerBeat: number = 4;\n        if (jsonObject[\"ticksPerBeat\"] != undefined) {\n            importedPartsPerBeat = (jsonObject[\"ticksPerBeat\"] | 0) || 4;\n            this.rhythm = Config.rhythms.findIndex(rhythm => rhythm.stepsPerBeat == importedPartsPerBeat);\n            if (this.rhythm == -1) {\n                this.rhythm = 1;\n            }\n        }\n\n        // Read limiter settings. Ranges and defaults are based on slider settings\n\n        if (jsonObject[\"masterGain\"] != undefined) {\n            this.masterGain = Math.max(0.0, Math.min(5.0, jsonObject[\"masterGain\"] || 0));\n        } else {\n            this.masterGain = 1.0;\n        }\n\n        if (jsonObject[\"limitThreshold\"] != undefined) {\n            this.limitThreshold = Math.max(0.0, Math.min(2.0, jsonObject[\"limitThreshold\"] || 0));\n        }\n        else {\n            this.limitThreshold = 1.0;\n        }\n\n        if (jsonObject[\"compressionThreshold\"] != undefined) {\n            this.compressionThreshold = Math.max(0.0, Math.min(1.1, jsonObject[\"compressionThreshold\"] || 0));\n        }\n        else {\n            this.compressionThreshold = 1.0;\n        }\n\n        if (jsonObject[\"limitRise\"] != undefined) {\n            this.limitRise = Math.max(2000.0, Math.min(10000.0, jsonObject[\"limitRise\"] || 0));\n        }\n        else {\n            this.limitRise = 4000.0;\n        }\n\n        if (jsonObject[\"limitDecay\"] != undefined) {\n            this.limitDecay = Math.max(1.0, Math.min(30.0, jsonObject[\"limitDecay\"] || 0));\n        }\n        else {\n            this.limitDecay = 4.0;\n        }\n\n        if (jsonObject[\"limitRatio\"] != undefined) {\n            this.limitRatio = Math.max(0.0, Math.min(11.0, jsonObject[\"limitRatio\"] || 0));\n        }\n        else {\n            this.limitRatio = 1.0;\n        }\n\n        if (jsonObject[\"compressionRatio\"] != undefined) {\n            this.compressionRatio = Math.max(0.0, Math.min(1.168, jsonObject[\"compressionRatio\"] || 0));\n        }\n        else {\n            this.compressionRatio = 1.0;\n        }\n\n        let maxInstruments: number = 1;\n        let maxPatterns: number = 1;\n        let maxBars: number = 1;\n        if (jsonObject[\"channels\"] != undefined) {\n            for (const channelObject of jsonObject[\"channels\"]) {\n                if (channelObject[\"instruments\"]) maxInstruments = Math.max(maxInstruments, channelObject[\"instruments\"].length | 0);\n                if (channelObject[\"patterns\"]) maxPatterns = Math.max(maxPatterns, channelObject[\"patterns\"].length | 0);\n                if (channelObject[\"sequence\"]) maxBars = Math.max(maxBars, channelObject[\"sequence\"].length | 0);\n            }\n        }\n\n        if (jsonObject[\"layeredInstruments\"] != undefined) {\n            this.layeredInstruments = !!jsonObject[\"layeredInstruments\"];\n        } else {\n            this.layeredInstruments = false;\n        }\n        if (jsonObject[\"patternInstruments\"] != undefined) {\n            this.patternInstruments = !!jsonObject[\"patternInstruments\"];\n        } else {\n            this.patternInstruments = (maxInstruments > 1);\n        }\n        this.patternsPerChannel = Math.min(maxPatterns, Config.barCountMax);\n        this.barCount = Math.min(maxBars, Config.barCountMax);\n\n        if (jsonObject[\"introBars\"] != undefined) {\n            this.loopStart = clamp(0, this.barCount, jsonObject[\"introBars\"] | 0);\n        }\n        if (jsonObject[\"loopBars\"] != undefined) {\n            this.loopLength = clamp(1, this.barCount - this.loopStart + 1, jsonObject[\"loopBars\"] | 0);\n        }\n\n        const newPitchChannels: Channel[] = [];\n        const newNoiseChannels: Channel[] = [];\n        const newModChannels: Channel[] = [];\n        if (jsonObject[\"channels\"] != undefined) {\n            for (let channelIndex: number = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\n                let channelObject: any = jsonObject[\"channels\"][channelIndex];\n\n                const channel: Channel = new Channel();\n\n                let isNoiseChannel: boolean = false;\n                let isModChannel: boolean = false;\n                if (channelObject[\"type\"] != undefined) {\n                    isNoiseChannel = (channelObject[\"type\"] == \"drum\");\n                    isModChannel = (channelObject[\"type\"] == \"mod\");\n                } else {\n                    // for older files, assume drums are channel 3.\n                    isNoiseChannel = (channelIndex >= 3);\n                }\n                if (isNoiseChannel) {\n                    newNoiseChannels.push(channel);\n                } else if (isModChannel) {\n                    newModChannels.push(channel);\n                }\n                else {\n                    newPitchChannels.push(channel);\n                }\n\n                if (channelObject[\"octaveScrollBar\"] != undefined) {\n                    channel.octave = clamp(0, Config.pitchOctaves, (channelObject[\"octaveScrollBar\"] | 0) + 1);\n                    if (isNoiseChannel) channel.octave = 0;\n                }\n\n                if (channelObject[\"name\"] != undefined) {\n                    channel.name = channelObject[\"name\"];\n                }\n                else {\n                    channel.name = \"\";\n                }\n\n                if (Array.isArray(channelObject[\"instruments\"])) {\n                    const instrumentObjects: any[] = channelObject[\"instruments\"];\n                    for (let i: number = 0; i < instrumentObjects.length; i++) {\n                        if (i >= this.getMaxInstrumentsPerChannel()) break;\n                        const instrument: Instrument = new Instrument(isNoiseChannel, isModChannel);\n                        channel.instruments[i] = instrument;\n                        instrument.fromJsonObject(instrumentObjects[i], isNoiseChannel, isModChannel, false, false, legacyGlobalReverb);\n                    }\n\n                }\n\n                for (let i: number = 0; i < this.patternsPerChannel; i++) {\n                    const pattern: Pattern = new Pattern();\n                    channel.patterns[i] = pattern;\n\n                    let patternObject: any = undefined;\n                    if (channelObject[\"patterns\"]) patternObject = channelObject[\"patterns\"][i];\n                    if (patternObject == undefined) continue;\n\n                    pattern.fromJsonObject(patternObject, this, channel, importedPartsPerBeat, isNoiseChannel, isModChannel);\n                }\n                channel.patterns.length = this.patternsPerChannel;\n\n                for (let i: number = 0; i < this.barCount; i++) {\n                    channel.bars[i] = (channelObject[\"sequence\"] != undefined) ? Math.min(this.patternsPerChannel, channelObject[\"sequence\"][i] >>> 0) : 0;\n                }\n                channel.bars.length = this.barCount;\n            }\n        }\n\n        if (newPitchChannels.length > Config.pitchChannelCountMax) newPitchChannels.length = Config.pitchChannelCountMax;\n        if (newNoiseChannels.length > Config.noiseChannelCountMax) newNoiseChannels.length = Config.noiseChannelCountMax;\n        if (newModChannels.length > Config.modChannelCountMax) newModChannels.length = Config.modChannelCountMax;\n        this.pitchChannelCount = newPitchChannels.length;\n        this.noiseChannelCount = newNoiseChannels.length;\n        this.modChannelCount = newModChannels.length;\n        this.channels.length = 0;\n        Array.prototype.push.apply(this.channels, newPitchChannels);\n        Array.prototype.push.apply(this.channels, newNoiseChannels);\n        Array.prototype.push.apply(this.channels, newModChannels);\n\n        if (Config.willReloadForCustomSamples) {\n            window.location.hash = this.toBase64String();\n            // The prompt seems to get stuck if reloading is done too quickly.\n            setTimeout(() => { location.reload(); }, 50);\n        }\n    }\n\n    public getPattern(channelIndex: number, bar: number): Pattern | null {\n        if (bar < 0 || bar >= this.barCount) return null;\n        const patternIndex: number = this.channels[channelIndex].bars[bar];\n        if (patternIndex == 0) return null;\n        return this.channels[channelIndex].patterns[patternIndex - 1];\n    }\n\n    public getBeatsPerMinute(): number {\n        return this.tempo;\n    }\n\n    public static getNeededBits(maxValue: number): number {\n        return 32 - Math.clz32(Math.ceil(maxValue + 1) - 1);\n    }\n\n    public restoreLimiterDefaults(): void {\n        this.compressionRatio = 1.0;\n        this.limitRatio = 1.0;\n        this.limitRise = 4000.0;\n        this.limitDecay = 4.0;\n        this.limitThreshold = 1.0;\n        this.compressionThreshold = 1.0;\n        this.masterGain = 1.0;\n    }\n}\n\nclass PickedString {\n    public delayLine: Float32Array | null = null;\n    public delayIndex: number;\n    public allPassSample: number;\n    public allPassPrevInput: number;\n    public shelfSample: number;\n    public shelfPrevInput: number;\n    public fractionalDelaySample: number;\n    public prevDelayLength: number;\n    public delayLengthDelta: number;\n    public delayResetOffset: number;\n\n    public allPassG: number = 0.0;\n    public allPassGDelta: number = 0.0;\n    public shelfA1: number = 0.0;\n    public shelfA1Delta: number = 0.0;\n    public shelfB0: number = 0.0;\n    public shelfB0Delta: number = 0.0;\n    public shelfB1: number = 0.0;\n    public shelfB1Delta: number = 0.0;\n\n    constructor() {\n        this.reset();\n    }\n\n    public reset(): void {\n        this.delayIndex = -1;\n        this.allPassSample = 0.0;\n        this.allPassPrevInput = 0.0;\n        this.shelfSample = 0.0;\n        this.shelfPrevInput = 0.0;\n        this.fractionalDelaySample = 0.0;\n        this.prevDelayLength = -1.0;\n        this.delayResetOffset = 0;\n    }\n\n    public update(synth: Synth, instrumentState: InstrumentState, tone: Tone, stringIndex: number, roundedSamplesPerTick: number, stringDecayStart: number, stringDecayEnd: number): void {\n        const allPassCenter: number = 2.0 * Math.PI * Config.pickedStringDispersionCenterFreq / synth.samplesPerSecond;\n        const shelfRadians: number = 2.0 * Math.PI * Config.pickedStringShelfHz / synth.samplesPerSecond;\n        const decayCurveStart: number = (Math.pow(100.0, stringDecayStart) - 1.0) / 99.0;\n        const decayCurveEnd: number = (Math.pow(100.0, stringDecayEnd) - 1.0) / 99.0;\n\n        const prevDelayLength: number = this.prevDelayLength;\n\n        const phaseDeltaStart: number = tone.phaseDeltas[stringIndex];\n        const phaseDeltaScale: number = tone.phaseDeltaScales[stringIndex];\n        const phaseDeltaEnd: number = phaseDeltaStart * Math.pow(phaseDeltaScale, roundedSamplesPerTick);\n\n        const radiansPerSampleStart: number = Math.PI * 2.0 * phaseDeltaStart;\n        const radiansPerSampleEnd: number = Math.PI * 2.0 * phaseDeltaEnd;\n\n        const centerHarmonicStart: number = radiansPerSampleStart * 2.0;\n        const centerHarmonicEnd: number = radiansPerSampleEnd * 2.0;\n\n        const allPassRadiansStart: number = Math.min(Math.PI, radiansPerSampleStart * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleStart, Config.pickedStringDispersionFreqScale));\n        const allPassRadiansEnd: number = Math.min(Math.PI, radiansPerSampleEnd * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleEnd, Config.pickedStringDispersionFreqScale));\n\n        const decayRateStart: number = Math.pow(0.5, decayCurveStart * shelfRadians / radiansPerSampleStart);\n        const decayRateEnd: number = Math.pow(0.5, decayCurveEnd * shelfRadians / radiansPerSampleEnd);\n        const shelfGainStart: number = Math.pow(decayRateStart, Config.stringDecayRate);\n        const shelfGainEnd: number = Math.pow(decayRateEnd, Config.stringDecayRate);\n        const expressionDecayStart: number = Math.pow(decayRateStart, 0.002);\n        const expressionDecayEnd: number = Math.pow(decayRateEnd, 0.002);\n\n        Synth.tempFilterStartCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansStart);\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);\n        const allPassGStart: number = Synth.tempFilterStartCoefficients.b[0]; /* same as a[1] */\n        const allPassPhaseDelayStart: number = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;\n\n        Synth.tempFilterEndCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansEnd);\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);\n        const allPassGEnd: number = Synth.tempFilterEndCoefficients.b[0]; /* same as a[1] */\n        const allPassPhaseDelayEnd: number = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;\n\n        Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, shelfGainStart);\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);\n        const shelfA1Start: number = Synth.tempFilterStartCoefficients.a[1];\n        const shelfB0Start: number = Synth.tempFilterStartCoefficients.b[0] * expressionDecayStart;\n        const shelfB1Start: number = Synth.tempFilterStartCoefficients.b[1] * expressionDecayStart;\n        const shelfPhaseDelayStart: number = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;\n\n        Synth.tempFilterEndCoefficients.highShelf1stOrder(shelfRadians, shelfGainEnd);\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);\n        const shelfA1End: number = Synth.tempFilterEndCoefficients.a[1];\n        const shelfB0End: number = Synth.tempFilterEndCoefficients.b[0] * expressionDecayEnd;\n        const shelfB1End: number = Synth.tempFilterEndCoefficients.b[1] * expressionDecayEnd;\n        const shelfPhaseDelayEnd: number = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;\n\n        const periodLengthStart: number = 1.0 / phaseDeltaStart;\n        const periodLengthEnd: number = 1.0 / phaseDeltaEnd;\n        const minBufferLength: number = Math.ceil(Math.max(periodLengthStart, periodLengthEnd) * 2);\n        const delayLength: number = periodLengthStart - allPassPhaseDelayStart - shelfPhaseDelayStart;\n        const delayLengthEnd: number = periodLengthEnd - allPassPhaseDelayEnd - shelfPhaseDelayEnd;\n\n        this.prevDelayLength = delayLength;\n        this.delayLengthDelta = (delayLengthEnd - delayLength) / roundedSamplesPerTick;\n        this.allPassG = allPassGStart;\n        this.shelfA1 = shelfA1Start;\n        this.shelfB0 = shelfB0Start;\n        this.shelfB1 = shelfB1Start;\n        this.allPassGDelta = (allPassGEnd - allPassGStart) / roundedSamplesPerTick;\n        this.shelfA1Delta = (shelfA1End - shelfA1Start) / roundedSamplesPerTick;\n        this.shelfB0Delta = (shelfB0End - shelfB0Start) / roundedSamplesPerTick;\n        this.shelfB1Delta = (shelfB1End - shelfB1Start) / roundedSamplesPerTick;\n\n        const pitchChanged: boolean = Math.abs(Math.log2(delayLength / prevDelayLength)) > 0.01;\n\n        const reinitializeImpulse: boolean = (this.delayIndex == -1 || pitchChanged);\n        if (this.delayLine == null || this.delayLine.length <= minBufferLength) {\n            // The delay line buffer will get reused for other tones so might as well\n            // start off with a buffer size that is big enough for most notes.\n            const likelyMaximumLength: number = Math.ceil(2 * synth.samplesPerSecond / Instrument.frequencyFromPitch(12));\n            const newDelayLine: Float32Array = new Float32Array(Synth.fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength)));\n            if (!reinitializeImpulse && this.delayLine != null) {\n                // If the tone has already started but the buffer needs to be reallocated,\n                // transfer the old data to the new buffer.\n                const oldDelayBufferMask: number = (this.delayLine.length - 1) >> 0;\n                const startCopyingFromIndex: number = this.delayIndex + this.delayResetOffset;\n                this.delayIndex = this.delayLine.length - this.delayResetOffset;\n                for (let i: number = 0; i < this.delayLine.length; i++) {\n                    newDelayLine[i] = this.delayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];\n                }\n            }\n            this.delayLine = newDelayLine;\n        }\n        const delayLine: Float32Array = this.delayLine;\n        const delayBufferMask: number = (delayLine.length - 1) >> 0;\n\n        if (reinitializeImpulse) {\n            // -1 delay index means the tone was reset.\n            // Also, if the pitch changed suddenly (e.g. from seamless or arpeggio) then reset the wave.\n\n            this.delayIndex = 0;\n            this.allPassSample = 0.0;\n            this.allPassPrevInput = 0.0;\n            this.shelfSample = 0.0;\n            this.shelfPrevInput = 0.0;\n            this.fractionalDelaySample = 0.0;\n\n            // Clear away a region of the delay buffer for the new impulse.\n            const startImpulseFrom: number = -delayLength;\n            const startZerosFrom: number = Math.floor(startImpulseFrom - periodLengthStart / 2);\n            const stopZerosAt: number = Math.ceil(startZerosFrom + periodLengthStart * 2);\n            this.delayResetOffset = stopZerosAt; // And continue clearing the area in front of the delay line.\n            for (let i: number = startZerosFrom; i <= stopZerosAt; i++) {\n                delayLine[i & delayBufferMask] = 0.0;\n            }\n\n            const impulseWave: Float32Array = instrumentState.wave!;\n            const impulseWaveLength: number = impulseWave.length - 1; // The first sample is duplicated at the end, don't double-count it.\n            const impulsePhaseDelta: number = impulseWaveLength / periodLengthStart;\n\n            const fadeDuration: number = Math.min(periodLengthStart * 0.2, synth.samplesPerSecond * 0.003);\n            const startImpulseFromSample: number = Math.ceil(startImpulseFrom);\n            const stopImpulseAt: number = startImpulseFrom + periodLengthStart + fadeDuration;\n            const stopImpulseAtSample: number = stopImpulseAt;\n            let impulsePhase: number = (startImpulseFromSample - startImpulseFrom) * impulsePhaseDelta;\n            let prevWaveIntegral: number = 0.0;\n            for (let i: number = startImpulseFromSample; i <= stopImpulseAtSample; i++) {\n                const impulsePhaseInt: number = impulsePhase | 0;\n                const index: number = impulsePhaseInt % impulseWaveLength;\n                let nextWaveIntegral: number = impulseWave[index];\n                const phaseRatio: number = impulsePhase - impulsePhaseInt;\n                nextWaveIntegral += (impulseWave[index + 1] - nextWaveIntegral) * phaseRatio;\n                const sample: number = (nextWaveIntegral - prevWaveIntegral) / impulsePhaseDelta;\n                const fadeIn: number = Math.min(1.0, (i - startImpulseFrom) / fadeDuration);\n                const fadeOut: number = Math.min(1.0, (stopImpulseAt - i) / fadeDuration);\n                const combinedFade: number = fadeIn * fadeOut;\n                const curvedFade: number = combinedFade * combinedFade * (3.0 - 2.0 * combinedFade); // A cubic sigmoid from 0 to 1.\n                delayLine[i & delayBufferMask] += sample * curvedFade;\n                prevWaveIntegral = nextWaveIntegral;\n                impulsePhase += impulsePhaseDelta;\n            }\n        }\n    }\n}\n\nclass EnvelopeComputer {\n    public noteSecondsStart: number = 0.0;\n    public noteSecondsEnd: number = 0.0;\n    public noteTicksStart: number = 0.0;\n    public noteTicksEnd: number = 0.0;\n    public noteSizeStart: number = Config.noteSizeMax;\n    public noteSizeEnd: number = Config.noteSizeMax;\n    public prevNoteSize: number = Config.noteSizeMax;\n    public nextNoteSize: number = Config.noteSizeMax;\n    private _noteSizeFinal: number = Config.noteSizeMax;\n    public prevNoteSecondsStart: number = 0.0;\n    public prevNoteSecondsEnd: number = 0.0;\n    public prevNoteTicksStart: number = 0.0;\n    public prevNoteTicksEnd: number = 0.0;\n    private _prevNoteSizeFinal: number = Config.noteSizeMax;\n\n    public prevSlideStart: boolean = false;\n    public prevSlideEnd: boolean = false;\n    public nextSlideStart: boolean = false;\n    public nextSlideEnd: boolean = false;\n    public prevSlideRatioStart: number = 0.0;\n    public prevSlideRatioEnd: number = 0.0;\n    public nextSlideRatioStart: number = 0.0;\n    public nextSlideRatioEnd: number = 0.0;\n\n    public readonly envelopeStarts: number[] = [];\n    public readonly envelopeEnds: number[] = [];\n    private readonly _modifiedEnvelopeIndices: number[] = [];\n    private _modifiedEnvelopeCount: number = 0;\n    public lowpassCutoffDecayVolumeCompensation: number = 1.0;\n\n    constructor(/*private _perNote: boolean*/) {\n        //const length: number = this._perNote ? EnvelopeComputeIndex.length : InstrumentAutomationIndex.length;\n        const length: number = EnvelopeComputeIndex.length;\n        for (let i: number = 0; i < length; i++) {\n            this.envelopeStarts[i] = 1.0;\n            this.envelopeEnds[i] = 1.0;\n        }\n\n        this.reset();\n    }\n\n    public reset(): void {\n        this.noteSecondsEnd = 0.0;\n        this.noteTicksEnd = 0.0;\n        this._noteSizeFinal = Config.noteSizeMax;\n        this.prevNoteSecondsEnd = 0.0;\n        this.prevNoteTicksEnd = 0.0;\n        this._prevNoteSizeFinal = Config.noteSizeMax;\n        this._modifiedEnvelopeCount = 0;\n    }\n\n    public computeEnvelopes(instrument: Instrument, currentPart: number, tickTimeStart: number, secondsPerTick: number, tone: Tone | null): void {\n        const transition: Transition = instrument.getTransition();\n        if (tone != null && tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {\n            this.prevNoteSecondsEnd = this.noteSecondsEnd;\n            this.prevNoteTicksEnd = this.noteTicksEnd;\n            this._prevNoteSizeFinal = this._noteSizeFinal;\n            this.noteSecondsEnd = 0.0;\n            this.noteTicksEnd = 0.0;\n        }\n        if (tone != null) {\n            if (tone.note != null) {\n                this._noteSizeFinal = tone.note.pins[tone.note.pins.length - 1].size;\n            } else {\n                this._noteSizeFinal = Config.noteSizeMax;\n            }\n        }\n\n        const tickTimeEnd: number = tickTimeStart + 1.0;\n        const noteSecondsStart: number = this.noteSecondsEnd;\n        const noteSecondsEnd: number = noteSecondsStart + secondsPerTick;\n        const noteTicksStart: number = this.noteTicksEnd;\n        const noteTicksEnd: number = noteTicksStart + 1.0;\n        const prevNoteSecondsStart: number = this.prevNoteSecondsEnd;\n        const prevNoteSecondsEnd: number = prevNoteSecondsStart + secondsPerTick;\n        const prevNoteTicksStart: number = this.prevNoteTicksEnd;\n        const prevNoteTicksEnd: number = prevNoteTicksStart + 1.0;\n\n        const beatsPerTick: number = 1.0 / (Config.ticksPerPart * Config.partsPerBeat);\n        const beatTimeStart: number = beatsPerTick * tickTimeStart;\n        const beatTimeEnd: number = beatsPerTick * tickTimeEnd;\n\n        let noteSizeStart: number = this._noteSizeFinal;\n        let noteSizeEnd: number = this._noteSizeFinal;\n        let prevNoteSize: number = this._prevNoteSizeFinal;\n        let nextNoteSize: number = 0;\n        let prevSlideStart: boolean = false;\n        let prevSlideEnd: boolean = false;\n        let nextSlideStart: boolean = false;\n        let nextSlideEnd: boolean = false;\n        let prevSlideRatioStart: number = 0.0;\n        let prevSlideRatioEnd: number = 0.0;\n        let nextSlideRatioStart: number = 0.0;\n        let nextSlideRatioEnd: number = 0.0;\n        if (tone != null && tone.note != null && !tone.passedEndOfNote) {\n            const endPinIndex: number = tone.note.getEndPinIndex(currentPart);\n            const startPin: NotePin = tone.note.pins[endPinIndex - 1];\n            const endPin: NotePin = tone.note.pins[endPinIndex];\n            const startPinTick: number = (tone.note.start + startPin.time) * Config.ticksPerPart;\n            const endPinTick: number = (tone.note.start + endPin.time) * Config.ticksPerPart;\n            const ratioStart: number = (tickTimeStart - startPinTick) / (endPinTick - startPinTick);\n            const ratioEnd: number = (tickTimeEnd - startPinTick) / (endPinTick - startPinTick);\n            noteSizeStart = startPin.size + (endPin.size - startPin.size) * ratioStart;\n            noteSizeEnd = startPin.size + (endPin.size - startPin.size) * ratioEnd;\n\n            if (transition.slides) {\n                const noteStartTick: number = tone.noteStartPart * Config.ticksPerPart;\n                const noteEndTick: number = tone.noteEndPart * Config.ticksPerPart;\n                const noteLengthTicks: number = noteEndTick - noteStartTick;\n                const maximumSlideTicks: number = noteLengthTicks * 0.5;\n                const slideTicks: number = Math.min(maximumSlideTicks, transition.slideTicks);\n                if (tone.prevNote != null && !tone.forceContinueAtStart) {\n                    if (tickTimeStart - noteStartTick < slideTicks) {\n                        prevSlideStart = true;\n                        prevSlideRatioStart = 0.5 * (1.0 - (tickTimeStart - noteStartTick) / slideTicks);\n                    }\n                    if (tickTimeEnd - noteStartTick < slideTicks) {\n                        prevSlideEnd = true;\n                        prevSlideRatioEnd = 0.5 * (1.0 - (tickTimeEnd - noteStartTick) / slideTicks);\n                    }\n                }\n                if (tone.nextNote != null && !tone.forceContinueAtEnd) {\n                    nextNoteSize = tone.nextNote.pins[0].size\n                    if (noteEndTick - tickTimeStart < slideTicks) {\n                        nextSlideStart = true;\n                        nextSlideRatioStart = 0.5 * (1.0 - (noteEndTick - tickTimeStart) / slideTicks);\n                    }\n                    if (noteEndTick - tickTimeEnd < slideTicks) {\n                        nextSlideEnd = true;\n                        nextSlideRatioEnd = 0.5 * (1.0 - (noteEndTick - tickTimeEnd) / slideTicks);\n                    }\n                }\n            }\n        }\n\n        let lowpassCutoffDecayVolumeCompensation: number = 1.0;\n        let usedNoteSize: boolean = false;\n        for (let envelopeIndex: number = 0; envelopeIndex <= instrument.envelopeCount; envelopeIndex++) {\n            let automationTarget: AutomationTarget;\n            let targetIndex: number;\n            let envelope: Envelope;\n            if (envelopeIndex == instrument.envelopeCount) {\n                if (usedNoteSize /*|| !this._perNote*/) break;\n                // Special case: if no other envelopes used note size, default to applying it to note volume.\n                automationTarget = Config.instrumentAutomationTargets.dictionary[\"noteVolume\"];\n                targetIndex = 0;\n                envelope = Config.envelopes.dictionary[\"note size\"];\n            } else {\n                let envelopeSettings: EnvelopeSettings = instrument.envelopes[envelopeIndex];\n                automationTarget = Config.instrumentAutomationTargets[envelopeSettings.target];\n                targetIndex = envelopeSettings.index;\n                envelope = Config.envelopes[envelopeSettings.envelope];\n                if (envelope.type == EnvelopeType.noteSize) usedNoteSize = true;\n            }\n            if (/*automationTarget.perNote == this._perNote &&*/ automationTarget.computeIndex != null) {\n                const computeIndex: number = automationTarget.computeIndex + targetIndex;\n                let envelopeStart: number = EnvelopeComputer.computeEnvelope(envelope, noteSecondsStart, beatTimeStart, noteSizeStart);\n                let envelopeEnd: number = EnvelopeComputer.computeEnvelope(envelope, noteSecondsEnd, beatTimeEnd, noteSizeEnd);\n\n                if (prevSlideStart) {\n                    const other: number = EnvelopeComputer.computeEnvelope(envelope, prevNoteSecondsStart, beatTimeStart, prevNoteSize);\n                    envelopeStart += (other - envelopeStart) * prevSlideRatioStart;\n                }\n                if (prevSlideEnd) {\n                    const other: number = EnvelopeComputer.computeEnvelope(envelope, prevNoteSecondsEnd, beatTimeEnd, prevNoteSize);\n                    envelopeEnd += (other - envelopeEnd) * prevSlideRatioEnd;\n                }\n                if (nextSlideStart) {\n                    const other: number = EnvelopeComputer.computeEnvelope(envelope, 0.0, beatTimeStart, nextNoteSize);\n                    envelopeStart += (other - envelopeStart) * nextSlideRatioStart;\n                }\n                if (nextSlideEnd) {\n                    const other: number = EnvelopeComputer.computeEnvelope(envelope, 0.0, beatTimeEnd, nextNoteSize);\n                    envelopeEnd += (other - envelopeEnd) * nextSlideRatioEnd;\n                }\n\n                this.envelopeStarts[computeIndex] *= envelopeStart;\n                this.envelopeEnds[computeIndex] *= envelopeEnd;\n                this._modifiedEnvelopeIndices[this._modifiedEnvelopeCount++] = computeIndex;\n\n                if (automationTarget.isFilter) {\n                    const filterSettings: FilterSettings = /*this._perNote ?*/ (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter /*: instrument.eqFilter*/;\n                    if (filterSettings.controlPointCount > targetIndex && filterSettings.controlPoints[targetIndex].type == FilterType.lowPass) {\n                        lowpassCutoffDecayVolumeCompensation = Math.max(lowpassCutoffDecayVolumeCompensation, EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(envelope));\n                    }\n                }\n            }\n        }\n\n        this.noteSecondsStart = noteSecondsStart;\n        this.noteSecondsEnd = noteSecondsEnd;\n        this.noteTicksStart = noteTicksStart;\n        this.noteTicksEnd = noteTicksEnd;\n        this.prevNoteSecondsStart = prevNoteSecondsStart;\n        this.prevNoteSecondsEnd = prevNoteSecondsEnd;\n        this.prevNoteTicksStart = prevNoteTicksStart;\n        this.prevNoteTicksEnd = prevNoteTicksEnd;\n        this.prevNoteSize = prevNoteSize;\n        this.nextNoteSize = nextNoteSize;\n        this.noteSizeStart = noteSizeStart;\n        this.noteSizeEnd = noteSizeEnd;\n        this.prevSlideStart = prevSlideStart;\n        this.prevSlideEnd = prevSlideEnd;\n        this.nextSlideStart = nextSlideStart;\n        this.nextSlideEnd = nextSlideEnd;\n        this.prevSlideRatioStart = prevSlideRatioStart;\n        this.prevSlideRatioEnd = prevSlideRatioEnd;\n        this.nextSlideRatioStart = nextSlideRatioStart;\n        this.nextSlideRatioEnd = nextSlideRatioEnd;\n        this.lowpassCutoffDecayVolumeCompensation = lowpassCutoffDecayVolumeCompensation;\n    }\n\n    public clearEnvelopes(): void {\n        for (let envelopeIndex: number = 0; envelopeIndex < this._modifiedEnvelopeCount; envelopeIndex++) {\n            const computeIndex: number = this._modifiedEnvelopeIndices[envelopeIndex];\n            this.envelopeStarts[computeIndex] = 1.0;\n            this.envelopeEnds[computeIndex] = 1.0;\n        }\n        this._modifiedEnvelopeCount = 0;\n    }\n\n    public static computeEnvelope(envelope: Envelope, time: number, beats: number, noteSize: number): number {\n        switch (envelope.type) {\n            case EnvelopeType.noteSize: return Synth.noteSizeToVolumeMult(noteSize);\n            case EnvelopeType.none: return 1.0;\n            case EnvelopeType.twang: return 1.0 / (1.0 + time * envelope.speed);\n            case EnvelopeType.swell: return 1.0 - 1.0 / (1.0 + time * envelope.speed);\n            case EnvelopeType.tremolo: return 0.5 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.5;\n            case EnvelopeType.tremolo2: return 0.75 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.25;\n            case EnvelopeType.punch: return Math.max(1.0, 2.0 - time * 10.0);\n            case EnvelopeType.flare: const attack: number = 0.25 / Math.sqrt(envelope.speed); return time < attack ? time / attack : 1.0 / (1.0 + (time - attack) * envelope.speed);\n            case EnvelopeType.decay: return Math.pow(2, -envelope.speed * time);\n            case EnvelopeType.wibble:\n                let temp = 0.5 - Math.cos(beats * envelope.speed) * 0.5;\n                temp = 1.0 / (1.0 + time * (envelope.speed - (temp / (1.5 / envelope.speed))));\n                temp = temp > 0.0 ? temp : 0.0;\n                return temp;\n            case EnvelopeType.linear: {\n                let lin = (1.0 - (time / (16 / envelope.speed)));\n                lin = lin > 0.0 ? lin : 0.0;\n                return lin;\n            }\n            case EnvelopeType.rise: {\n                let lin = (time / (16 / envelope.speed));\n                lin = lin < 1.0 ? lin : 1.0;\n                return lin;\n            }\n            default: throw new Error(\"Unrecognized operator envelope type.\");\n        }\n\n    }\n\n    public static getLowpassCutoffDecayVolumeCompensation(envelope: Envelope): number {\n        // This is a little hokey in the details, but I designed it a while ago and keep it \n        // around for compatibility. This decides how much to increase the volume (or\n        // expression) to compensate for a decaying lowpass cutoff to maintain perceived\n        // volume overall.\n        if (envelope.type == EnvelopeType.decay) return 1.25 + 0.025 * envelope.speed;\n        if (envelope.type == EnvelopeType.twang) return 1.0 + 0.02 * envelope.speed;\n        return 1.0;\n    }\n}\n\nclass Tone {\n    public instrumentIndex: number;\n    public readonly pitches: number[] = Array(Config.maxChordSize+2).fill(0);\n    public pitchCount: number = 0;\n    public chordSize: number = 0;\n    public drumsetPitch: number | null = null;\n    public note: Note | null = null;\n    public prevNote: Note | null = null;\n    public nextNote: Note | null = null;\n    public prevNotePitchIndex: number = 0;\n    public nextNotePitchIndex: number = 0;\n    public freshlyAllocated: boolean = true;\n    public atNoteStart: boolean = false;\n    public isOnLastTick: boolean = false; // Whether the tone is finished fading out and ready to be freed.\n    public passedEndOfNote: boolean = false;\n    public forceContinueAtStart: boolean = false;\n    public forceContinueAtEnd: boolean = false;\n    public noteStartPart: number = 0;\n    public noteEndPart: number = 0;\n    public ticksSinceReleased: number = 0;\n    public liveInputSamplesHeld: number = 0;\n    public lastInterval: number = 0;\n    public noiseSample: number = 0.0;\n    public stringSustainStart: number = 0;\n    public stringSustainEnd: number = 0;\n    public readonly phases: number[] = [];\n    public readonly operatorWaves: OperatorWave[] = [];\n    public readonly phaseDeltas: number[] = [];\n\t\t\t// advloop addition\n        public directions: number[] = [];\n        public chipWaveCompletions: number[] = [];\n        public chipWavePrevWaves: number[] = [];\n        public chipWaveCompletionsLastWave: number[] = [];\n           // advloop addition\n    public readonly phaseDeltaScales: number[] = [];\n    public expression: number = 0.0;\n    public expressionDelta: number = 0.0;\n    public readonly operatorExpressions: number[] = [];\n    public readonly operatorExpressionDeltas: number[] = [];\n    public readonly prevPitchExpressions: Array<number | null> = Array(Config.maxPitchOrOperatorCount).fill(null);\n    public prevVibrato: number | null = null;\n    public prevStringDecay: number | null = null;\n    public pulseWidth: number = 0.0;\n    public pulseWidthDelta: number = 0.0;\n    public decimalOffset: number = 0.0;\n    public supersawDynamism: number = 0.0;\n\tpublic supersawDynamismDelta: number = 0.0;\n\tpublic supersawUnisonDetunes: number[] = []; // These can change over time, but slowly enough that I'm not including corresponding delta values within a tick run.\n\tpublic supersawShape: number = 0.0;\n\tpublic supersawShapeDelta: number = 0.0;\n\tpublic supersawDelayLength: number = 0.0;\n\tpublic supersawDelayLengthDelta: number = 0.0;\n\tpublic supersawDelayLine: Float32Array | null = null;\n\tpublic supersawDelayIndex: number = -1;\n\tpublic supersawPrevPhaseDelta: number | null = null;\n    public readonly pickedStrings: PickedString[] = [];\n\n    public readonly noteFilters: DynamicBiquadFilter[] = [];\n    public noteFilterCount: number = 0;\n    public initialNoteFilterInput1: number = 0.0;\n    public initialNoteFilterInput2: number = 0.0;\n\n    public specialIntervalExpressionMult: number = 1.0;\n    public readonly feedbackOutputs: number[] = [];\n    public feedbackMult: number = 0.0;\n    public feedbackDelta: number = 0.0;\n    public stereoVolumeLStart: number = 0.0;\n    public stereoVolumeRStart: number = 0.0;\n    public stereoVolumeLDelta: number = 0.0;\n    public stereoVolumeRDelta: number = 0.0;\n    public stereoDelayStart: number = 0.0;\n    public stereoDelayEnd: number = 0.0;\n    public stereoDelayDelta: number = 0.0;\n    public customVolumeStart: number = 0.0;\n    public customVolumeEnd: number = 0.0;\n    public filterResonanceStart: number = 0.0;\n    public filterResonanceDelta: number = 0.0;\n    public isFirstOrder: boolean = false;\n\n    public readonly envelopeComputer: EnvelopeComputer = new EnvelopeComputer(/*true*/);\n\n    constructor() {\n        this.reset();\n    }\n\n    public reset(): void {\n        this.noiseSample = 0.0;\n        for (let i: number = 0; i < Config.maxPitchOrOperatorCount; i++) {\n            this.phases[i] = 0.0;\n\t\t\t\t\t\t// advloop addition\n                this.directions[i] = 1;\n                this.chipWaveCompletions[i] = 0;\n                this.chipWavePrevWaves[i] = 0;\n                this.chipWaveCompletionsLastWave[i] = 0;\n                // advloop addition\n            this.operatorWaves[i] = Config.operatorWaves[0];\n            this.feedbackOutputs[i] = 0.0;\n            this.prevPitchExpressions[i] = null;\n        }\n        for (let i: number = 0; i < this.noteFilterCount; i++) {\n            this.noteFilters[i].resetOutput();\n        }\n        this.noteFilterCount = 0;\n        this.initialNoteFilterInput1 = 0.0;\n        this.initialNoteFilterInput2 = 0.0;\n        this.liveInputSamplesHeld = 0;\n        this.supersawDelayIndex = -1;\n        for (const pickedString of this.pickedStrings) {\n            pickedString.reset();\n        }\n        this.envelopeComputer.reset();\n        this.prevVibrato = null;\n        this.prevStringDecay = null;\n        this.supersawPrevPhaseDelta = null;\n        this.drumsetPitch = null;\n    }\n}\n\nclass InstrumentState {\n    public instrument: Instrument;\n\n    public awake: boolean = false; // Whether the instrument's effects-processing loop should continue.\n    public computed: boolean = false; // Whether the effects-processing parameters are up-to-date for the current synth run.\n    public tonesAddedInThisTick: boolean = false; // Whether any instrument tones are currently active.\n    public flushingDelayLines: boolean = false; // If no tones were active recently, enter a mode where the delay lines are filled with zeros to reset them for later use.\n    public deactivateAfterThisTick: boolean = false; // Whether the instrument is ready to be deactivated because the delay lines, if any, are fully zeroed.\n    public attentuationProgress: number = 0.0; // How long since an active tone introduced an input signal to the delay lines, normalized from 0 to 1 based on how long to wait until the delay lines signal will have audibly dissapated.\n    public flushedSamples: number = 0; // How many delay line samples have been flushed to zero.\n    public readonly activeTones: Deque<Tone> = new Deque<Tone>();\n    public readonly activeModTones: Deque<Tone> = new Deque<Tone>();\n    public readonly releasedTones: Deque<Tone> = new Deque<Tone>(); // Tones that are in the process of fading out after the corresponding notes ended.\n    public readonly liveInputTones: Deque<Tone> = new Deque<Tone>(); // Tones that are initiated by a source external to the loaded song data.\n\n    public type: InstrumentType = InstrumentType.chip;\n    public synthesizer: Function | null = null;\n    public wave: Float32Array | null = null;\n\t\t\t\t // advloop addition\n            public isUsingAdvancedLoopControls = false;\n            public chipWaveLoopStart = 0;\n            public chipWaveLoopEnd = 0;\n            public chipWaveLoopMode = 0;\n            public chipWavePlayBackwards = false;\n            public chipWaveStartOffset = 0;\n            // advloop addition\n    public noisePitchFilterMult: number = 1.0;\n    public unison: Unison | null = null;\n    public unisonVoices: number = 1;\n    public unisonSpread: number = 0.0;\n    public unisonOffset: number = 0.0;\n    public unisonExpression: number = 1.4;\n    public unisonSign: number = 1.0;\n    public chord: Chord | null = null;\n    public effects: number = 0;\n\n    public volumeScale: number = 0;\n    public aliases: boolean = false;\n\n    public eqFilterVolume: number = 1.0;\n    public eqFilterVolumeDelta: number = 0.0;\n    public mixVolume: number = 1.0;\n    public mixVolumeDelta: number = 0.0;\n    public delayInputMult: number = 0.0;\n    public delayInputMultDelta: number = 0.0;\n\n    public distortion: number = 0.0;\n    public distortionDelta: number = 0.0;\n    public distortionDrive: number = 0.0;\n    public distortionDriveDelta: number = 0.0;\n    public distortionFractionalInput1: number = 0.0;\n    public distortionFractionalInput2: number = 0.0;\n    public distortionFractionalInput3: number = 0.0;\n    public distortionPrevInput: number = 0.0;\n    public distortionNextOutput: number = 0.0;\n\n    public bitcrusherPrevInput: number = 0.0;\n    public bitcrusherCurrentOutput: number = 0.0;\n    public bitcrusherPhase: number = 1.0;\n    public bitcrusherPhaseDelta: number = 0.0;\n    public bitcrusherPhaseDeltaScale: number = 1.0;\n    public bitcrusherScale: number = 1.0;\n    public bitcrusherScaleScale: number = 1.0;\n    public bitcrusherFoldLevel: number = 1.0;\n    public bitcrusherFoldLevelScale: number = 1.0;\n\n    public readonly eqFilters: DynamicBiquadFilter[] = [];\n    public eqFilterCount: number = 0;\n    public initialEqFilterInput1: number = 0.0;\n    public initialEqFilterInput2: number = 0.0;\n\n    public panningDelayLine: Float32Array | null = null;\n    public panningDelayPos: number = 0;\n    public panningVolumeL: number = 0.0;\n    public panningVolumeR: number = 0.0;\n    public panningVolumeDeltaL: number = 0.0;\n    public panningVolumeDeltaR: number = 0.0;\n    public panningOffsetL: number = 0.0;\n    public panningOffsetR: number = 0.0;\n    public panningOffsetDeltaL: number = 0.0;\n    public panningOffsetDeltaR: number = 0.0;\n\n    public chorusDelayLineL: Float32Array | null = null;\n    public chorusDelayLineR: Float32Array | null = null;\n    public chorusDelayLineDirty: boolean = false;\n    public chorusDelayPos: number = 0;\n    public chorusPhase: number = 0;\n    public chorusVoiceMult: number = 0;\n    public chorusVoiceMultDelta: number = 0;\n    public chorusCombinedMult: number = 0;\n    public chorusCombinedMultDelta: number = 0;\n\n    public echoDelayLineL: Float32Array | null = null;\n    public echoDelayLineR: Float32Array | null = null;\n    public echoDelayLineDirty: boolean = false;\n    public echoDelayPos: number = 0;\n    public echoDelayOffsetStart: number = 0;\n    public echoDelayOffsetEnd: number | null = null;\n    public echoDelayOffsetRatio: number = 0.0;\n    public echoDelayOffsetRatioDelta: number = 0.0;\n    public echoMult: number = 0.0;\n    public echoMultDelta: number = 0.0;\n    public echoShelfA1: number = 0.0;\n    public echoShelfB0: number = 0.0;\n    public echoShelfB1: number = 0.0;\n    public echoShelfSampleL: number = 0.0;\n    public echoShelfSampleR: number = 0.0;\n    public echoShelfPrevInputL: number = 0.0;\n    public echoShelfPrevInputR: number = 0.0;\n\n    public reverbDelayLine: Float32Array | null = null;\n    public reverbDelayLineDirty: boolean = false;\n    public reverbDelayPos: number = 0;\n    public reverbMult: number = 0.0;\n    public reverbMultDelta: number = 0.0;\n    public reverbShelfA1: number = 0.0;\n    public reverbShelfB0: number = 0.0;\n    public reverbShelfB1: number = 0.0;\n    public reverbShelfSample0: number = 0.0;\n    public reverbShelfSample1: number = 0.0;\n    public reverbShelfSample2: number = 0.0;\n    public reverbShelfSample3: number = 0.0;\n    public reverbShelfPrevInput0: number = 0.0;\n    public reverbShelfPrevInput1: number = 0.0;\n    public reverbShelfPrevInput2: number = 0.0;\n    public reverbShelfPrevInput3: number = 0.0;\n\n    //public readonly envelopeComputer: EnvelopeComputer = new EnvelopeComputer(false);\n\n    public readonly spectrumWave: SpectrumWaveState = new SpectrumWaveState();\n    public readonly harmonicsWave: HarmonicsWaveState = new HarmonicsWaveState();\n    public readonly drumsetSpectrumWaves: SpectrumWaveState[] = [];\n\n    constructor() {\n        for (let i: number = 0; i < Config.drumCount; i++) {\n            this.drumsetSpectrumWaves[i] = new SpectrumWaveState();\n        }\n    }\n\n\n    public allocateNecessaryBuffers(synth: Synth, instrument: Instrument, samplesPerTick: number): void {\n        if (effectsIncludePanning(instrument.effects)) {\n            if (this.panningDelayLine == null || this.panningDelayLine.length < synth.panningDelayBufferSize) {\n                this.panningDelayLine = new Float32Array(synth.panningDelayBufferSize);\n            }\n        }\n        if (effectsIncludeChorus(instrument.effects)) {\n            if (this.chorusDelayLineL == null || this.chorusDelayLineL.length < synth.chorusDelayBufferSize) {\n                this.chorusDelayLineL = new Float32Array(synth.chorusDelayBufferSize);\n            }\n            if (this.chorusDelayLineR == null || this.chorusDelayLineR.length < synth.chorusDelayBufferSize) {\n                this.chorusDelayLineR = new Float32Array(synth.chorusDelayBufferSize);\n            }\n        }\n        if (effectsIncludeEcho(instrument.effects)) {\n            // account for tempo and delay automation changing delay length during a tick?\n            const safeEchoDelaySteps: number = Math.max(Config.echoDelayRange >> 1, (instrument.echoDelay + 1)); // The delay may be very short now, but if it increases later make sure we have enough sample history.\n            const baseEchoDelayBufferSize: number = Synth.fittingPowerOfTwo(safeEchoDelaySteps * Config.echoDelayStepTicks * samplesPerTick);\n            const safeEchoDelayBufferSize: number = baseEchoDelayBufferSize * 2; // If the tempo or delay changes and we suddenly need a longer delay, make sure that we have enough sample history to accomodate the longer delay.\n\n            if (this.echoDelayLineL == null || this.echoDelayLineR == null) {\n                this.echoDelayLineL = new Float32Array(safeEchoDelayBufferSize);\n                this.echoDelayLineR = new Float32Array(safeEchoDelayBufferSize);\n            } else if (this.echoDelayLineL.length < safeEchoDelayBufferSize || this.echoDelayLineR.length < safeEchoDelayBufferSize) {\n                // The echo delay length may change whlie the song is playing if tempo changes,\n                // so buffers may need to be reallocated, but we don't want to lose any echoes\n                // so we need to copy the contents of the old buffer to the new one.\n                const newDelayLineL: Float32Array = new Float32Array(safeEchoDelayBufferSize);\n                const newDelayLineR: Float32Array = new Float32Array(safeEchoDelayBufferSize);\n                const oldMask: number = this.echoDelayLineL.length - 1;\n\n                for (let i = 0; i < this.echoDelayLineL.length; i++) {\n                    newDelayLineL[i] = this.echoDelayLineL[(this.echoDelayPos + i) & oldMask];\n                    newDelayLineR[i] = this.echoDelayLineL[(this.echoDelayPos + i) & oldMask];\n                }\n\n                this.echoDelayPos = this.echoDelayLineL.length;\n                this.echoDelayLineL = newDelayLineL;\n                this.echoDelayLineR = newDelayLineR;\n            }\n        }\n        if (effectsIncludeReverb(instrument.effects)) {\n            // TODO: Make reverb delay line sample rate agnostic. Maybe just double buffer size for 96KHz? Adjust attenuation and shelf cutoff appropriately?\n            if (this.reverbDelayLine == null) {\n                this.reverbDelayLine = new Float32Array(Config.reverbDelayBufferSize);\n            }\n        }\n    }\n\n    public deactivate(): void {\n        this.bitcrusherPrevInput = 0.0;\n        this.bitcrusherCurrentOutput = 0.0;\n        this.bitcrusherPhase = 1.0;\n        for (let i: number = 0; i < this.eqFilterCount; i++) {\n            this.eqFilters[i].resetOutput();\n        }\n        this.eqFilterCount = 0;\n        this.initialEqFilterInput1 = 0.0;\n        this.initialEqFilterInput2 = 0.0;\n        this.distortionFractionalInput1 = 0.0;\n        this.distortionFractionalInput2 = 0.0;\n        this.distortionFractionalInput3 = 0.0;\n        this.distortionPrevInput = 0.0;\n        this.distortionNextOutput = 0.0;\n        this.panningDelayPos = 0;\n        if (this.panningDelayLine != null) for (let i: number = 0; i < this.panningDelayLine.length; i++) this.panningDelayLine[i] = 0.0;\n        this.echoDelayOffsetEnd = null;\n        this.echoShelfSampleL = 0.0;\n        this.echoShelfSampleR = 0.0;\n        this.echoShelfPrevInputL = 0.0;\n        this.echoShelfPrevInputR = 0.0;\n        this.reverbShelfSample0 = 0.0;\n        this.reverbShelfSample1 = 0.0;\n        this.reverbShelfSample2 = 0.0;\n        this.reverbShelfSample3 = 0.0;\n        this.reverbShelfPrevInput0 = 0.0;\n        this.reverbShelfPrevInput1 = 0.0;\n        this.reverbShelfPrevInput2 = 0.0;\n        this.reverbShelfPrevInput3 = 0.0;\n\n        this.volumeScale = 1.0;\n        this.aliases = false;\n\n        this.awake = false;\n        this.flushingDelayLines = false;\n        this.deactivateAfterThisTick = false;\n        this.attentuationProgress = 0.0;\n        this.flushedSamples = 0;\n    }\n\n    public resetAllEffects(): void {\n        this.deactivate();\n\n        if (this.chorusDelayLineDirty) {\n            for (let i: number = 0; i < this.chorusDelayLineL!.length; i++) this.chorusDelayLineL![i] = 0.0;\n            for (let i: number = 0; i < this.chorusDelayLineR!.length; i++) this.chorusDelayLineR![i] = 0.0;\n        }\n        if (this.echoDelayLineDirty) {\n            for (let i: number = 0; i < this.echoDelayLineL!.length; i++) this.echoDelayLineL![i] = 0.0;\n            for (let i: number = 0; i < this.echoDelayLineR!.length; i++) this.echoDelayLineR![i] = 0.0;\n        }\n        if (this.reverbDelayLineDirty) {\n            for (let i: number = 0; i < this.reverbDelayLine!.length; i++) this.reverbDelayLine![i] = 0.0;\n        }\n\n        this.chorusPhase = 0.0;\n    }\n\n    public compute(synth: Synth, instrument: Instrument, samplesPerTick: number, roundedSamplesPerTick: number, tone: Tone | null, channelIndex: number, instrumentIndex: number): void {\n        this.computed = true;\n\n        this.type = instrument.type;\n        this.synthesizer = Synth.getInstrumentSynthFunction(instrument);\n        this.unison = Config.unisons[instrument.unison];\n        this.chord = instrument.getChord();\n        this.noisePitchFilterMult = Config.chipNoises[instrument.chipNoise].pitchFilterMult;\n        this.effects = instrument.effects;\t\n\n        this.aliases = instrument.aliases;\n        this.volumeScale = 1.0;\n\n        this.allocateNecessaryBuffers(synth, instrument, samplesPerTick);\n\n        const samplesPerSecond: number = synth.samplesPerSecond;\n        this.updateWaves(instrument, samplesPerSecond);\n\n        //const ticksIntoBar: number = synth.getTicksIntoBar();\n        //const tickTimeStart: number = ticksIntoBar;\n        //const tickTimeEnd:   number = ticksIntoBar + 1.0;\n        //const secondsPerTick: number = samplesPerTick / synth.samplesPerSecond;\n        //const currentPart: number = synth.getCurrentPart();\n        //this.envelopeComputer.computeEnvelopes(instrument, currentPart, tickTimeStart, secondsPerTick, tone);\n        //const envelopeStarts: number[] = this.envelopeComputer.envelopeStarts;\n        //const envelopeEnds: number[] = this.envelopeComputer.envelopeEnds;\n\n        const usesDistortion: boolean = effectsIncludeDistortion(this.effects);\n        const usesBitcrusher: boolean = effectsIncludeBitcrusher(this.effects);\n        const usesPanning: boolean = effectsIncludePanning(this.effects);\n        const usesChorus: boolean = effectsIncludeChorus(this.effects);\n        const usesEcho: boolean = effectsIncludeEcho(this.effects);\n        const usesReverb: boolean = effectsIncludeReverb(this.effects);\n\n        if (usesDistortion) {\n            let useDistortionStart: number = instrument.distortion;\n            let useDistortionEnd: number = instrument.distortion;\n\n            // Check for distortion mods\n            if (synth.isModActive(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex)) {\n                useDistortionStart = synth.getModValue(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex, false);\n                useDistortionEnd = synth.getModValue(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex, true);\n            } \n\n            const distortionSliderStart = Math.min(1.0, /*envelopeStarts[InstrumentAutomationIndex.distortion] **/ useDistortionStart / (Config.distortionRange - 1));\n            const distortionSliderEnd = Math.min(1.0, /*envelopeEnds[  InstrumentAutomationIndex.distortion] **/ useDistortionEnd / (Config.distortionRange - 1));\n            const distortionStart: number = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderStart) - 1.0) / 19.0, 2.0);\n            const distortionEnd: number = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderEnd) - 1.0) / 19.0, 2.0);\n            const distortionDriveStart: number = (1.0 + 2.0 * distortionSliderStart) / Config.distortionBaseVolume;\n            const distortionDriveEnd: number = (1.0 + 2.0 * distortionSliderEnd) / Config.distortionBaseVolume;\n            this.distortion = distortionStart;\n            this.distortionDelta = (distortionEnd - distortionStart) / roundedSamplesPerTick;\n            this.distortionDrive = distortionDriveStart;\n            this.distortionDriveDelta = (distortionDriveEnd - distortionDriveStart) / roundedSamplesPerTick;\n        }\n\n        if (usesBitcrusher) {\n            let freqSettingStart: number = instrument.bitcrusherFreq /** Math.sqrt(envelopeStarts[InstrumentAutomationIndex.bitcrusherFrequency])*/;\n            let freqSettingEnd: number = instrument.bitcrusherFreq /** Math.sqrt(envelopeEnds[  InstrumentAutomationIndex.bitcrusherFrequency])*/;\n\n            // Check for freq crush mods\n            if (synth.isModActive(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex)) {\n                freqSettingStart = synth.getModValue(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex, false);\n                freqSettingEnd = synth.getModValue(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex, true);\n            } \n\n            let quantizationSettingStart: number = instrument.bitcrusherQuantization /** Math.sqrt(envelopeStarts[InstrumentAutomationIndex.bitcrusherQuantization])*/;\n            let quantizationSettingEnd: number = instrument.bitcrusherQuantization /** Math.sqrt(envelopeEnds[  InstrumentAutomationIndex.bitcrusherQuantization])*/;\n\n            // Check for bitcrush mods\n            if (synth.isModActive(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex)) {\n                quantizationSettingStart = synth.getModValue(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex, false);\n                quantizationSettingEnd = synth.getModValue(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex, true);\n            } \n\n            const basePitch: number = Config.keys[synth.song!.key].basePitch + (Config.pitchesPerOctave * synth.song!.octave); // TODO: What if there's a key change mid-song?\n            const freqStart: number = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingStart) * Config.bitcrusherOctaveStep);\n            const freqEnd: number = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingEnd) * Config.bitcrusherOctaveStep);\n            const phaseDeltaStart: number = Math.min(1.0, freqStart / samplesPerSecond);\n            const phaseDeltaEnd: number = Math.min(1.0, freqEnd / samplesPerSecond);\n            this.bitcrusherPhaseDelta = phaseDeltaStart;\n            this.bitcrusherPhaseDeltaScale = Math.pow(phaseDeltaEnd / phaseDeltaStart, 1.0 / roundedSamplesPerTick);\n\n            const scaleStart: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart) * 0.5));\n            const scaleEnd: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd) * 0.5));\n            this.bitcrusherScale = scaleStart;\n            this.bitcrusherScaleScale = Math.pow(scaleEnd / scaleStart, 1.0 / roundedSamplesPerTick);\n\n            const foldLevelStart: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart);\n            const foldLevelEnd: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd);\n            this.bitcrusherFoldLevel = foldLevelStart;\n            this.bitcrusherFoldLevelScale = Math.pow(foldLevelEnd / foldLevelStart, 1.0 / roundedSamplesPerTick);\n        }\n\n        let eqFilterVolume: number = 1.0; //this.envelopeComputer.lowpassCutoffDecayVolumeCompensation;\n        if (instrument.eqFilterType) {\n            // Simple EQ filter (old style). For analysis, using random filters from normal style since they are N/A in this context.\n            const eqFilterSettingsStart: FilterSettings = instrument.eqFilter;\n            if (instrument.eqSubFilters[1] == null)\n                instrument.eqSubFilters[1] = new FilterSettings();\n            const eqFilterSettingsEnd: FilterSettings = instrument.eqSubFilters[1];\n\n            // Change location based on slider values\n            let startSimpleFreq: number = instrument.eqFilterSimpleCut;\n            let startSimpleGain: number = instrument.eqFilterSimplePeak;\n            let endSimpleFreq: number = instrument.eqFilterSimpleCut;\n            let endSimpleGain: number = instrument.eqFilterSimplePeak;\n\n            let filterChanges: boolean = false;\n\n            if (synth.isModActive(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex)) {\n                startSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, false);\n                endSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, true);\n                filterChanges = true;\n            } \n            if (synth.isModActive(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex)) {\n                startSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, false);\n                endSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, true);\n                filterChanges = true;\n            } \n\n            let startPoint: FilterControlPoint;\n\n            if (filterChanges) {\n                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain);\n                eqFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain);\n\n                startPoint = eqFilterSettingsStart.controlPoints[0];\n                let endPoint: FilterControlPoint = eqFilterSettingsEnd.controlPoints[0];\n\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);\n\n                if (this.eqFilters.length < 1) this.eqFilters[0] = new DynamicBiquadFilter();\n                this.eqFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n\n            } else {\n                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, true);\n\n                startPoint = eqFilterSettingsStart.controlPoints[0];\n\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n\n                if (this.eqFilters.length < 1) this.eqFilters[0] = new DynamicBiquadFilter();\n                this.eqFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n\n            }\n\n            eqFilterVolume *= startPoint.getVolumeCompensationMult();\n\n            this.eqFilterCount = 1;\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\n        }\n        else {\n            const eqFilterSettings: FilterSettings = (instrument.tmpEqFilterStart != null) ? instrument.tmpEqFilterStart : instrument.eqFilter;\n            //const eqAllFreqsEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterAllFreqs];\n            //const eqAllFreqsEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterAllFreqs];\n            for (let i: number = 0; i < eqFilterSettings.controlPointCount; i++) {\n                //const eqFreqEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterFreq0 + i];\n                //const eqFreqEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterFreq0 + i];\n                //const eqPeakEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterGain0 + i];\n                //const eqPeakEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterGain0 + i];\n                let startPoint: FilterControlPoint = eqFilterSettings.controlPoints[i];\n                let endPoint: FilterControlPoint = (instrument.tmpEqFilterEnd != null && instrument.tmpEqFilterEnd.controlPoints[i] != null) ? instrument.tmpEqFilterEnd.controlPoints[i] : eqFilterSettings.controlPoints[i];\n\n                // If switching dot type, do it all at once and do not try to interpolate since no valid interpolation exists.\n                if (startPoint.type != endPoint.type) {\n                    startPoint = endPoint;\n                }\n\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, /*eqAllFreqsEnvelopeStart * eqFreqEnvelopeStart*/ 1.0, /*eqPeakEnvelopeStart*/ 1.0);\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, /*eqAllFreqsEnvelopeEnd   * eqFreqEnvelopeEnd*/   1.0, /*eqPeakEnvelopeEnd*/   1.0);\n                if (this.eqFilters.length <= i) this.eqFilters[i] = new DynamicBiquadFilter();\n                this.eqFilters[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n                eqFilterVolume *= startPoint.getVolumeCompensationMult();\n\n            }\n            this.eqFilterCount = eqFilterSettings.controlPointCount;\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\n        }\n\n        const mainInstrumentVolume: number = Synth.instrumentVolumeToVolumeMult(instrument.volume);\n        this.mixVolume = mainInstrumentVolume /** envelopeStarts[InstrumentAutomationIndex.mixVolume]*/;\n        let mixVolumeEnd: number = mainInstrumentVolume /** envelopeEnds[  InstrumentAutomationIndex.mixVolume]*/;\n\n        // Check for mod-related volume delta\n        if (synth.isModActive(Config.modulators.dictionary[\"mix volume\"].index, channelIndex, instrumentIndex)) {\n            // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\n            const startVal: number = synth.getModValue(Config.modulators.dictionary[\"mix volume\"].index, channelIndex, instrumentIndex, false);\n            const endVal: number = synth.getModValue(Config.modulators.dictionary[\"mix volume\"].index, channelIndex, instrumentIndex, true)\n            this.mixVolume *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\n            mixVolumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\n        } \n\n        // Check for SONG mod-related volume delta\n        if (synth.isModActive(Config.modulators.dictionary[\"song volume\"].index)) {\n            this.mixVolume *= (synth.getModValue(Config.modulators.dictionary[\"song volume\"].index, undefined, undefined, false)) / 100.0;\n            mixVolumeEnd *= (synth.getModValue(Config.modulators.dictionary[\"song volume\"].index, undefined, undefined, true)) / 100.0;\n        }\n\n        this.mixVolumeDelta = (mixVolumeEnd - this.mixVolume) / roundedSamplesPerTick;\n\n        let eqFilterVolumeStart: number = eqFilterVolume;\n        let eqFilterVolumeEnd: number = eqFilterVolume;\n        let delayInputMultStart: number = 1.0;\n        let delayInputMultEnd: number = 1.0;\n\n        if (usesPanning) {\n            //const panEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.panning] * 2.0 - 1.0;\n            //const panEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.panning] * 2.0 - 1.0;\n\n            let usePanStart: number = instrument.pan;\n            let usePanEnd: number = instrument.pan;\n            // Check for pan mods\n            if (synth.isModActive(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex)) {\n                usePanStart = synth.getModValue(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex, false);\n                usePanEnd = synth.getModValue(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex, true);\n            } \n\n            let panStart: number = Math.max(-1.0, Math.min(1.0, (usePanStart - Config.panCenter) / Config.panCenter /** panEnvelopeStart*/));\n            let panEnd: number = Math.max(-1.0, Math.min(1.0, (usePanEnd - Config.panCenter) / Config.panCenter /** panEnvelopeEnd  */));\n\n            const volumeStartL: number = Math.cos((1 + panStart) * Math.PI * 0.25) * 1.414;\n            const volumeStartR: number = Math.cos((1 - panStart) * Math.PI * 0.25) * 1.414;\n            const volumeEndL: number = Math.cos((1 + panEnd) * Math.PI * 0.25) * 1.414;\n            const volumeEndR: number = Math.cos((1 - panEnd) * Math.PI * 0.25) * 1.414;\n            const maxDelaySamples: number = samplesPerSecond * Config.panDelaySecondsMax;\n\n            let usePanDelayStart: number = instrument.panDelay;\n            let usePanDelayEnd: number = instrument.panDelay;\n            // Check for pan delay mods\n            if (synth.isModActive(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex)) {\n                usePanDelayStart = synth.getModValue(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex, false);\n                usePanDelayEnd = synth.getModValue(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex, true);\n            } \n\n            const delayStart: number = panStart * usePanDelayStart * maxDelaySamples / 10;\n            const delayEnd: number = panEnd * usePanDelayEnd * maxDelaySamples / 10;\n            const delayStartL: number = Math.max(0.0, delayStart);\n            const delayStartR: number = Math.max(0.0, -delayStart);\n            const delayEndL: number = Math.max(0.0, delayEnd);\n            const delayEndR: number = Math.max(0.0, -delayEnd);\n\n            this.panningVolumeL = volumeStartL;\n            this.panningVolumeR = volumeStartR;\n            this.panningVolumeDeltaL = (volumeEndL - volumeStartL) / roundedSamplesPerTick;\n            this.panningVolumeDeltaR = (volumeEndR - volumeStartR) / roundedSamplesPerTick;\n            this.panningOffsetL = this.panningDelayPos - delayStartL + synth.panningDelayBufferSize;\n            this.panningOffsetR = this.panningDelayPos - delayStartR + synth.panningDelayBufferSize;\n            this.panningOffsetDeltaL = (delayEndL - delayStartL) / roundedSamplesPerTick;\n            this.panningOffsetDeltaR = (delayEndR - delayStartR) / roundedSamplesPerTick;\n        }\n\n        if (usesChorus) {\n            //const chorusEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.chorus];\n            //const chorusEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.chorus];\n            let useChorusStart: number = instrument.chorus;\n            let useChorusEnd: number = instrument.chorus;\n            // Check for chorus mods\n            if (synth.isModActive(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex)) {\n                useChorusStart = synth.getModValue(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex, false);\n                useChorusEnd = synth.getModValue(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex, true);\n            } \n\n            let chorusStart: number = Math.min(1.0, /*chorusEnvelopeStart **/ useChorusStart / (Config.chorusRange - 1));\n            let chorusEnd: number = Math.min(1.0, /*chorusEnvelopeEnd   **/ useChorusEnd / (Config.chorusRange - 1));\n            chorusStart = chorusStart * 0.6 + (Math.pow(chorusStart, 6.0)) * 0.4;\n            chorusEnd = chorusEnd * 0.6 + (Math.pow(chorusEnd, 6.0)) * 0.4;\n            const chorusCombinedMultStart = 1.0 / Math.sqrt(3.0 * chorusStart * chorusStart + 1.0);\n            const chorusCombinedMultEnd = 1.0 / Math.sqrt(3.0 * chorusEnd * chorusEnd + 1.0);\n            this.chorusVoiceMult = chorusStart;\n            this.chorusVoiceMultDelta = (chorusEnd - chorusStart) / roundedSamplesPerTick;\n            this.chorusCombinedMult = chorusCombinedMultStart;\n            this.chorusCombinedMultDelta = (chorusCombinedMultEnd - chorusCombinedMultStart) / roundedSamplesPerTick;\n        }\n\n        let maxEchoMult = 0.0;\n        let averageEchoDelaySeconds: number = 0.0;\n        if (usesEcho) {\n            //const echoSustainEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.echoSustain];\n            //const echoSustainEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.echoSustain];\n            let useEchoSustainStart: number = instrument.echoSustain;\n            let useEchoSustainEnd: number = instrument.echoSustain;\n            // Check for echo mods\n            if (synth.isModActive(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex)) {\n                useEchoSustainStart = Math.max( 0.0, synth.getModValue(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex, false) );\n                useEchoSustainEnd = Math.max( 0.0, synth.getModValue(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex, true) );\n            } \n            const echoMultStart: number = Math.min(1.0, Math.pow(/*echoSustainEnvelopeStart **/ useEchoSustainStart / Config.echoSustainRange, 1.1)) * 0.9;\n            const echoMultEnd: number = Math.min(1.0, Math.pow(/*echoSustainEnvelopeEnd   **/ useEchoSustainEnd / Config.echoSustainRange, 1.1)) * 0.9;\n            this.echoMult = echoMultStart;\n            this.echoMultDelta = Math.max(0.0, (echoMultEnd - echoMultStart) / roundedSamplesPerTick);\n            maxEchoMult = Math.max(echoMultStart, echoMultEnd);\n\n            // TODO: After computing a tick's settings once for multiple run lengths (which is\n            // good for audio worklet threads), compute the echo delay envelopes at tick (or\n            // part) boundaries to interpolate between two delay taps.\n            //const echoDelayEnvelopeStart:   number = envelopeStarts[InstrumentAutomationIndex.echoDelay];\n            //const echoDelayEnvelopeEnd:     number = envelopeEnds[  InstrumentAutomationIndex.echoDelay];\n            let useEchoDelayStart: number = instrument.echoDelay;\n            let useEchoDelayEnd: number = instrument.echoDelay;\n            let ignoreTicks: boolean = false;\n            // Check for pan delay mods\n            if (synth.isModActive(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex)) {\n                useEchoDelayStart = synth.getModValue(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex, false);\n                useEchoDelayEnd = synth.getModValue(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex, true);\n                ignoreTicks = true;\n            } \n\n            const tmpEchoDelayOffsetStart: number = Math.round((useEchoDelayStart + 1) * Config.echoDelayStepTicks * samplesPerTick);\n            const tmpEchoDelayOffsetEnd: number = Math.round((useEchoDelayEnd + 1) * Config.echoDelayStepTicks * samplesPerTick);\n            if (this.echoDelayOffsetEnd != null && !ignoreTicks) {\n                this.echoDelayOffsetStart = this.echoDelayOffsetEnd;\n            } else {\n                this.echoDelayOffsetStart = tmpEchoDelayOffsetStart;\n            }\n\n            this.echoDelayOffsetEnd = tmpEchoDelayOffsetEnd;\n            averageEchoDelaySeconds = (this.echoDelayOffsetStart + this.echoDelayOffsetEnd) * 0.5 / samplesPerSecond;\n\n            this.echoDelayOffsetRatio = 0.0;\n            this.echoDelayOffsetRatioDelta = 1.0 / roundedSamplesPerTick;\n\n            const shelfRadians: number = 2.0 * Math.PI * Config.echoShelfHz / synth.samplesPerSecond;\n            Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.echoShelfGain);\n            this.echoShelfA1 = Synth.tempFilterStartCoefficients.a[1];\n            this.echoShelfB0 = Synth.tempFilterStartCoefficients.b[0];\n            this.echoShelfB1 = Synth.tempFilterStartCoefficients.b[1];\n        }\n\n        let maxReverbMult = 0.0;\n        if (usesReverb) {\n            //const reverbEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.reverb];\n            //const reverbEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.reverb];\n\n            let useReverbStart: number = instrument.reverb;\n            let useReverbEnd: number = instrument.reverb;\n\n            // Check for mod reverb, instrument level\n            if (synth.isModActive(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex)) {\n                useReverbStart = synth.getModValue(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex, false);\n                useReverbEnd = synth.getModValue(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex, true);\n            } \n            // Check for mod reverb, song scalar\n            if (synth.isModActive(Config.modulators.dictionary[\"song reverb\"].index, channelIndex, instrumentIndex)) {\n                useReverbStart *= (synth.getModValue(Config.modulators.dictionary[\"song reverb\"].index, undefined, undefined, false) - Config.modulators.dictionary[\"song reverb\"].convertRealFactor) / Config.reverbRange;\n                useReverbEnd *= (synth.getModValue(Config.modulators.dictionary[\"song reverb\"].index, undefined, undefined, true) - Config.modulators.dictionary[\"song reverb\"].convertRealFactor) / Config.reverbRange;\n            }\n\n            const reverbStart: number = Math.min(1.0, Math.pow(/*reverbEnvelopeStart **/ useReverbStart / Config.reverbRange, 0.667)) * 0.425;\n            const reverbEnd: number = Math.min(1.0, Math.pow(/*reverbEnvelopeEnd   **/ useReverbEnd / Config.reverbRange, 0.667)) * 0.425;\n\n            this.reverbMult = reverbStart;\n            this.reverbMultDelta = (reverbEnd - reverbStart) / roundedSamplesPerTick;\n            maxReverbMult = Math.max(reverbStart, reverbEnd);\n\n            const shelfRadians: number = 2.0 * Math.PI * Config.reverbShelfHz / synth.samplesPerSecond;\n            Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.reverbShelfGain);\n            this.reverbShelfA1 = Synth.tempFilterStartCoefficients.a[1];\n            this.reverbShelfB0 = Synth.tempFilterStartCoefficients.b[0];\n            this.reverbShelfB1 = Synth.tempFilterStartCoefficients.b[1];\n        }\n\n        if (this.tonesAddedInThisTick) {\n            this.attentuationProgress = 0.0;\n            this.flushedSamples = 0;\n            this.flushingDelayLines = false;\n        } else if (!this.flushingDelayLines) {\n            // If this instrument isn't playing tones anymore, the volume can fade out by the\n            // end of the first tick. It's possible for filters and the panning delay line to\n            // continue past the end of the tone but they should have mostly dissipated by the\n            // end of the tick anyway.\n            if (this.attentuationProgress == 0.0) {\n                eqFilterVolumeEnd = 0.0;\n            } else {\n                eqFilterVolumeStart = 0.0;\n                eqFilterVolumeEnd = 0.0;\n            }\n\n            const attenuationThreshold: number = 1.0 / 256.0; // when the delay line signal has attenuated this much, it should be inaudible and should be flushed to zero.\n            const halfLifeMult: number = -Math.log2(attenuationThreshold);\n            let delayDuration: number = 0.0;\n\n            if (usesChorus) {\n                delayDuration += Config.chorusMaxDelay;\n            }\n\n            if (usesEcho) {\n                const attenuationPerSecond: number = Math.pow(maxEchoMult, 1.0 / averageEchoDelaySeconds);\n                const halfLife: number = -1.0 / Math.log2(attenuationPerSecond);\n                const echoDuration: number = halfLife * halfLifeMult;\n                delayDuration += echoDuration;\n            }\n\n            if (usesReverb) {\n                const averageMult: number = maxReverbMult * 2.0;\n                const averageReverbDelaySeconds: number = (Config.reverbDelayBufferSize / 4.0) / samplesPerSecond;\n                const attenuationPerSecond: number = Math.pow(averageMult, 1.0 / averageReverbDelaySeconds);\n                const halfLife: number = -1.0 / Math.log2(attenuationPerSecond);\n                const reverbDuration: number = halfLife * halfLifeMult;\n                delayDuration += reverbDuration;\n            }\n\n            const secondsInTick: number = samplesPerTick / samplesPerSecond;\n            const progressInTick: number = secondsInTick / delayDuration;\n            const progressAtEndOfTick: number = this.attentuationProgress + progressInTick;\n            if (progressAtEndOfTick >= 1.0) {\n                delayInputMultEnd = 0.0;\n            }\n\n            this.attentuationProgress = progressAtEndOfTick;\n            if (this.attentuationProgress >= 1.0) {\n                this.flushingDelayLines = true;\n            }\n        } else {\n            // Flushing delay lines to zero since the signal has mostly dissipated.\n            eqFilterVolumeStart = 0.0;\n            eqFilterVolumeEnd = 0.0;\n            delayInputMultStart = 0.0;\n            delayInputMultEnd = 0.0;\n\n            let totalDelaySamples: number = 0;\n            if (usesChorus) totalDelaySamples += synth.chorusDelayBufferSize;\n            if (usesEcho) totalDelaySamples += this.echoDelayLineL!.length;\n            if (usesReverb) totalDelaySamples += Config.reverbDelayBufferSize;\n\n            this.flushedSamples += roundedSamplesPerTick;\n            if (this.flushedSamples >= totalDelaySamples) {\n                this.deactivateAfterThisTick = true;\n            }\n        }\n\n        this.eqFilterVolume = eqFilterVolumeStart;\n        this.eqFilterVolumeDelta = (eqFilterVolumeEnd - eqFilterVolumeStart) / roundedSamplesPerTick;\n        this.delayInputMult = delayInputMultStart;\n        this.delayInputMultDelta = (delayInputMultEnd - delayInputMultStart) / roundedSamplesPerTick;\n    }\n\n    public updateWaves(instrument: Instrument, samplesPerSecond: number): void {\n        this.volumeScale = 1.0;\n        if (instrument.type == InstrumentType.chip) {\n            this.wave = (this.aliases) ? Config.rawChipWaves[instrument.chipWave].samples : Config.chipWaves[instrument.chipWave].samples;\n\t\t\t\t\t\t // advloop addition\n                this.isUsingAdvancedLoopControls = instrument.isUsingAdvancedLoopControls;\n                this.chipWaveLoopStart = instrument.chipWaveLoopStart;\n                this.chipWaveLoopEnd = instrument.chipWaveLoopEnd;\n                this.chipWaveLoopMode = instrument.chipWaveLoopMode;\n                this.chipWavePlayBackwards = instrument.chipWavePlayBackwards;\n                this.chipWaveStartOffset = instrument.chipWaveStartOffset;\n               // advloop addition\n\n               this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        } else if (instrument.type == InstrumentType.customChipWave) {\n            this.wave = (this.aliases) ? instrument.customChipWave! : instrument.customChipWaveIntegral!;\n            this.volumeScale = 0.05;\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        } else if (instrument.type == InstrumentType.noise) {\n            this.wave = getDrumWave(instrument.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\n        } else if (instrument.type == InstrumentType.harmonics) {\n            this.wave = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        } else if (instrument.type == InstrumentType.pickedString) {\n            this.wave = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        } else if (instrument.type == InstrumentType.spectrum) {\n            this.wave = this.spectrumWave.getCustomWave(instrument.spectrumWave, 8);\n        } else if (instrument.type == InstrumentType.drumset) {\n            for (let i: number = 0; i < Config.drumCount; i++) {\n                this.drumsetSpectrumWaves[i].getCustomWave(instrument.drumsetSpectrumWaves[i], InstrumentState._drumsetIndexToSpectrumOctave(i));\n            }\n            this.wave = null;\n        } else {\n            this.wave = null;\n        }\n    }\n\n    public getDrumsetWave(pitch: number): Float32Array {\n        if (this.type == InstrumentType.drumset) {\n            return this.drumsetSpectrumWaves[pitch].wave!;\n        } else {\n            throw new Error(\"Unhandled instrument type in getDrumsetWave\");\n        }\n    }\n\n    public static drumsetIndexReferenceDelta(index: number): number {\n        return Instrument.frequencyFromPitch(Config.spectrumBasePitch + index * 6) / 44100;\n    }\n\n    private static _drumsetIndexToSpectrumOctave(index: number): number {\n        return 15 + Math.log2(InstrumentState.drumsetIndexReferenceDelta(index));\n    }\n}\n\nclass ChannelState {\n    public readonly instruments: InstrumentState[] = [];\n    public muted: boolean = false;\n    public singleSeamlessInstrument: number | null = null; // Seamless tones from a pattern with a single instrument can be transferred to a different single seamless instrument in the next pattern.\n}\n\nexport class Synth {\n\n    private syncSongState(): void {\n        const channelCount: number = this.song!.getChannelCount();\n        for (let i: number = this.channels.length; i < channelCount; i++) {\n            this.channels[i] = new ChannelState();\n        }\n        this.channels.length = channelCount;\n        for (let i: number = 0; i < channelCount; i++) {\n            const channel: Channel = this.song!.channels[i];\n            const channelState: ChannelState = this.channels[i];\n            for (let j: number = channelState.instruments.length; j < channel.instruments.length; j++) {\n                channelState.instruments[j] = new InstrumentState();\n            }\n            channelState.instruments.length = channel.instruments.length;\n\n            if (channelState.muted != channel.muted) {\n                channelState.muted = channel.muted;\n                if (channelState.muted) {\n                    for (const instrumentState of channelState.instruments) {\n                        instrumentState.resetAllEffects();\n                    }\n                }\n            }\n        }\n    }\n\n    public warmUpSynthesizer(song: Song | null): void {\n        // Don't bother to generate the drum waves unless the song actually\n        // uses them, since they may require a lot of computation.\n        if (song != null) {\n            this.syncSongState();\n            const samplesPerTick: number = this.getSamplesPerTick();\n            for (let channelIndex: number = 0; channelIndex < song.getChannelCount(); channelIndex++) {\n                for (let instrumentIndex: number = 0; instrumentIndex < song.channels[channelIndex].instruments.length; instrumentIndex++) {\n                    const instrument: Instrument = song.channels[channelIndex].instruments[instrumentIndex];\n                    const instrumentState: InstrumentState = this.channels[channelIndex].instruments[instrumentIndex];\n                    Synth.getInstrumentSynthFunction(instrument);\n                    instrument.LFOtime = 0;\n                    instrument.nextLFOtime = 0;\n                    instrument.arpTime = 0;\n                    instrument.tmpEqFilterStart = instrument.eqFilter;\n                    instrument.tmpEqFilterEnd = null;\n                    instrument.tmpNoteFilterStart = instrument.noteFilter;\n                    instrument.tmpNoteFilterEnd = null;\n                    instrumentState.updateWaves(instrument, this.samplesPerSecond);\n                    instrumentState.allocateNecessaryBuffers(this, instrument, samplesPerTick);\n                }\n\n            }\n        }\n\t    \t\t\t var dummyArray = new Float32Array(1);\n        this.isPlayingSong = true;\n        this.synthesize(dummyArray, dummyArray, 1, true);\n        this.isPlayingSong = false;\n\t\t//BUGFIX FROM JUMMBOX\n    }\n\n    public computeLatestModValues(): void {\n\n        if (this.song != null && this.song.modChannelCount > 0) {\n\n            // Clear all mod values, and set up temp variables for the time a mod would be set at.\n            let latestModTimes: (number | null)[] = [];\n            let latestModInsTimes: (number | null)[][][] = [];\n            this.modValues = [];\n            this.nextModValues = [];\n            this.modInsValues = [];\n            this.nextModInsValues = [];\n            for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                latestModInsTimes[channel] = [];\n                this.modInsValues[channel] = [];\n                this.nextModInsValues[channel] = [];\n\n                for (let instrument: number = 0; instrument < this.song.channels[channel].instruments.length; instrument++) {\n                    this.modInsValues[channel][instrument] = [];\n                    this.nextModInsValues[channel][instrument] = [];\n                    latestModInsTimes[channel][instrument] = [];\n                }\n            }\n\n            // Find out where we're at in the fraction of the current bar.\n            let currentPart: number = this.beat * Config.partsPerBeat + this.part;\n\n            // For mod channels, calculate last set value for each mod\n            for (let channelIndex: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex < this.song.getChannelCount(); channelIndex++) {\n                if (!(this.song.channels[channelIndex].muted)) {\n\n                    let pattern: Pattern | null;\n\n                    for (let currentBar: number = this.bar; currentBar >= 0; currentBar--) {\n                        pattern = this.song.getPattern(channelIndex, currentBar);\n\n                        if (pattern != null) {\n                            let instrumentIdx: number = pattern.instruments[0];\n                            let instrument: Instrument = this.song.channels[channelIndex].instruments[instrumentIdx];\n                            let latestPinParts: number[] = [];\n                            let latestPinValues: number[] = [];\n\n                            let partsInBar: number = (currentBar == this.bar)\n                                ? currentPart\n                                : this.findPartsInBar(currentBar);\n\n                            for (const note of pattern.notes) {\n                                if (note.start < partsInBar && (latestPinParts[Config.modCount - 1 - note.pitches[0]] == null || note.end > latestPinParts[Config.modCount - 1 - note.pitches[0]])) {\n                                    if (note.end <= partsInBar) {\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.end;\n                                        latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[note.pins.length - 1].size;\n                                    }\n                                    else {\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = partsInBar;\n                                        // Find the pin where bar change happens, and compute where pin volume would be at that time\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\n                                                const transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\n                                                const toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\n                                                const deltaVolume: number = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;\n\n                                                latestPinValues[Config.modCount - 1 - note.pitches[0]] = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);\n                                                pinIdx = note.pins.length;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n\n                            // Set modulator value, if it wasn't set in another pattern already scanned\n                            for (let mod: number = 0; mod < Config.modCount; mod++) {\n                                if (latestPinParts[mod] != null) {\n                                    if (Config.modulators[instrument.modulators[mod]].forSong) {\n                                        if (latestModTimes[instrument.modulators[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > (latestModTimes[instrument.modulators[mod]] as number)) {\n                                            this.setModValue(latestPinValues[mod], latestPinValues[mod], mod, instrument.modChannels[mod], instrument.modInstruments[mod], instrument.modulators[mod]);\n                                            latestModTimes[instrument.modulators[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\n                                        }\n                                    }\n                                    else {\n                                        // Generate list of used instruments\n                                        let usedInstruments: number[] = [];\n                                        // All\n                                        if (instrument.modInstruments[mod] == this.song.channels[instrument.modChannels[mod]].instruments.length) {\n                                            for (let i: number = 0; i < this.song.channels[instrument.modChannels[mod]].instruments.length; i++) {\n                                                usedInstruments.push(i);\n                                            }\n                                        }\n                                        // Active\n                                        else if (instrument.modInstruments[mod] > this.song.channels[instrument.modChannels[mod]].instruments.length) {\n                                            const tgtPattern: Pattern | null = this.song.getPattern(instrument.modChannels[mod], currentBar);\n                                            if (tgtPattern != null)\n                                                usedInstruments = tgtPattern.instruments;\n                                        } else {\n                                            usedInstruments.push(instrument.modInstruments[mod]);\n                                        }\n                                        for (let instrumentIndex: number = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {\n                                            // Iterate through all used instruments by this modulator\n                                            // Special indices for mod filter targets, since they control multiple things.\n                                            const eqFilterParam: boolean = instrument.modulators[mod] == Config.modulators.dictionary[\"eq filter\"].index;\n                                            const noteFilterParam: boolean = instrument.modulators[mod] == Config.modulators.dictionary[\"note filter\"].index\n                                            let modulatorAdjust: number = instrument.modulators[mod];\n                                            if (eqFilterParam) {\n                                                modulatorAdjust = Config.modulators.length + instrument.modFilterTypes[mod];\n                                            } else if (noteFilterParam) {\n                                                // Skip all possible indices for eq filter\n                                                modulatorAdjust = Config.modulators.length + 1 + (2 * Config.filterMaxPoints) + instrument.modFilterTypes[mod];\n                                            }\n\n                                            if (latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust] == null\n                                                || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust]!) {\n\n                                                if (eqFilterParam) {\n                                                    let tgtInstrument: Instrument = this.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n                                                    if (instrument.modFilterTypes[mod] == 0) {\n                                                        tgtInstrument.tmpEqFilterStart = tgtInstrument.eqSubFilters[latestPinValues[mod]];\n                                                    } else {\n                                                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                                                            if (tgtInstrument.tmpEqFilterStart == tgtInstrument.eqSubFilters[i]) {\n                                                                tgtInstrument.tmpEqFilterStart = new FilterSettings();\n                                                                tgtInstrument.tmpEqFilterStart.fromJsonObject(tgtInstrument.eqSubFilters[i]!.toJsonObject());\n                                                                i = Config.filterMorphCount;\n                                                            }\n                                                        }\n                                                        if (Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtInstrument.tmpEqFilterStart!.controlPointCount) {\n                                                            if (instrument.modFilterTypes[mod] % 2)\n                                                                tgtInstrument.tmpEqFilterStart!.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\n                                                            else\n                                                                tgtInstrument.tmpEqFilterStart!.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\n                                                        }\n                                                    }\n                                                    tgtInstrument.tmpEqFilterEnd = tgtInstrument.tmpEqFilterStart;\n                                                } else if (noteFilterParam) {\n                                                    let tgtInstrument: Instrument = this.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n                                                    if (instrument.modFilterTypes[mod] == 0) {\n                                                        tgtInstrument.tmpNoteFilterStart = tgtInstrument.noteSubFilters[latestPinValues[mod]];\n                                                    } else {\n                                                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                                                            if (tgtInstrument.tmpNoteFilterStart == tgtInstrument.noteSubFilters[i]) {\n                                                                tgtInstrument.tmpNoteFilterStart = new FilterSettings();\n                                                                tgtInstrument.tmpNoteFilterStart.fromJsonObject(tgtInstrument.noteSubFilters[i]!.toJsonObject());\n                                                                i = Config.filterMorphCount;\n                                                            }\n                                                        }\n                                                        if (Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtInstrument.tmpNoteFilterStart!.controlPointCount) {\n                                                            if (instrument.modFilterTypes[mod] % 2)\n                                                                tgtInstrument.tmpNoteFilterStart!.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\n                                                            else\n                                                                tgtInstrument.tmpNoteFilterStart!.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\n                                                        }\n                                                    }\n                                                    tgtInstrument.tmpNoteFilterEnd = tgtInstrument.tmpNoteFilterStart;\n                                                }\n                                                else this.setModValue(latestPinValues[mod], latestPinValues[mod], mod, instrument.modChannels[mod], usedInstruments[instrumentIndex], modulatorAdjust);\n\n                                                latestModInsTimes[instrument.modChannels[mod]][usedInstruments[instrumentIndex]][modulatorAdjust] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Detects if a modulator is set, but not valid for the current effects/instrument type/filter type\n    // Note, setting 'none' or the intermediary steps when clicking to add a mod, like an unset channel/unset instrument, counts as valid.\n    // TODO: This kind of check is mirrored in SongEditor.ts' whenUpdated. Creates a lot of redundancy for adding new mods. Can be moved into new properties for mods, to avoid this later.\n    public determineInvalidModulators(instrument: Instrument): void {\n        if (this.song == null)\n            return;\n        for (let mod: number = 0; mod < Config.modCount; mod++) {\n            instrument.invalidModulators[mod] = true;\n            // For song modulator, valid if any setting used\n            if (instrument.modChannels[mod] == -1) {\n                if (instrument.modulators[mod] != 0)\n                    instrument.invalidModulators[mod] = false;\n                continue;\n            }\n            const channel: Channel | null = this.song.channels[instrument.modChannels[mod]];\n            if (channel == null) continue;\n            let tgtInstrumentList: Instrument[] = [];\n            if (instrument.modInstruments[mod] >= channel.instruments.length) { // All or active\n                tgtInstrumentList = channel.instruments;\n            } else {\n                tgtInstrumentList = [channel.instruments[instrument.modInstruments[mod]]];\n            }\n            for (let i: number = 0; i < tgtInstrumentList.length; i++) {\n                const tgtInstrument: Instrument | null = tgtInstrumentList[i];\n                if (tgtInstrument == null) continue;\n                const str: string = Config.modulators[instrument.modulators[mod]].name;\n                // Check effects\n                if (!((Config.modulators[instrument.modulators[mod]].associatedEffect != EffectType.length && !(tgtInstrument.effects & (1 << Config.modulators[instrument.modulators[mod]].associatedEffect)))\n                    // Instrument type specific\n                    || ((tgtInstrument.type != InstrumentType.fm && tgtInstrument.type != InstrumentType.fm6op) && (str == \"fm slider 1\" || str == \"fm slider 2\" || str == \"fm slider 3\" || str == \"fm slider 4\" || str == \"fm feedback\"))\n                    || ((tgtInstrument.type != InstrumentType.pwm && tgtInstrument.type != InstrumentType.supersaw) && (str == \"pulse width\"))\n                    || tgtInstrument.type != InstrumentType.fm6op && (str == \"fm slider 5\" || str == \"fm slider 6\")\n                    // Arp check\n                    || (!tgtInstrument.getChord().arpeggiates && (str == \"arp speed\" || str == \"reset arp\"))\n                    // EQ Filter check\n                    || (tgtInstrument.eqFilterType && str == \"eq filter\")\n                    || (!tgtInstrument.eqFilterType && (str == \"eq filt cut\" || str == \"eq filt peak\"))\n                    || (str == \"eq filter\" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.eqFilter.controlPointCount)\n                    // Note Filter check\n                    || (tgtInstrument.noteFilterType && str == \"note filter\")\n                    || (!tgtInstrument.noteFilterType && (str == \"note filt cut\" || str == \"note filt peak\"))\n                    || (str == \"note filter\" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.noteFilter.controlPointCount))) {\n\n                    instrument.invalidModulators[mod] = false;\n                    i = tgtInstrumentList.length;\n                }\n            }\n\n        }\n    }\n\n    private static operatorAmplitudeCurve(amplitude: number): number {\n        return (Math.pow(16.0, amplitude / 15.0) - 1.0) / 15.0;\n    }\n\n    public samplesPerSecond: number = 44100;\n    public panningDelayBufferSize: number;\n    public panningDelayBufferMask: number;\n    public chorusDelayBufferSize: number;\n    public chorusDelayBufferMask: number;\n    // TODO: reverb\n\n    public song: Song | null = null;\n    public preferLowerLatency: boolean = false; // enable when recording performances from keyboard or MIDI. Takes effect next time you activate audio.\n    public anticipatePoorPerformance: boolean = false; // enable on mobile devices to reduce audio stutter glitches. Takes effect next time you activate audio.\n    public liveInputDuration: number = 0;\n    public liveInputStarted: boolean = false;\n    public liveInputPitches: number[] = [];\n    public liveInputChannel: number = 0;\n    public liveInputInstruments: number[] = [];\n    public loopRepeatCount: number = -1;\n    public volume: number = 1.0;\n    public oscRefreshEventTimer: number = 0;\n    public oscEnabled: boolean = true;\n    public enableMetronome: boolean = false;\n    public countInMetronome: boolean = false;\n    public renderingSong: boolean = false;\n\n    private wantToSkip: boolean = false;\n    private playheadInternal: number = 0.0;\n    private bar: number = 0;\n    private prevBar: number | null = null;\n    private nextBar: number | null = null;\n    private beat: number = 0;\n    private part: number = 0;\n    private tick: number = 0;\n    public isAtStartOfTick: boolean = true;\n    public isAtEndOfTick: boolean = true;\n    public tickSampleCountdown: number = 0;\n    private modValues: (number | null)[] = [];\n    private modInsValues: (number | null)[][][] = [];\n    private nextModValues: (number | null)[] = [];\n    private nextModInsValues: (number | null)[][][] = [];\n    private isPlayingSong: boolean = false;\n    private isRecording: boolean = false;\n    private liveInputEndTime: number = 0.0;\n    private browserAutomaticallyClearsAudioBuffer: boolean = true; // Assume true until proven otherwise. Older Chrome does not clear the buffer so it needs to be cleared manually.\n\n    public static readonly tempFilterStartCoefficients: FilterCoefficients = new FilterCoefficients();\n    public static readonly tempFilterEndCoefficients: FilterCoefficients = new FilterCoefficients();\n    private tempDrumSetControlPoint: FilterControlPoint = new FilterControlPoint();\n    public tempFrequencyResponse: FrequencyResponse = new FrequencyResponse();\n\n    private static readonly fmSynthFunctionCache: Dictionary<Function> = {};\n    private static readonly fm6SynthFunctionCache: Dictionary<Function> = {};\n    private static readonly effectsFunctionCache: Function[] = Array(1 << 7).fill(undefined); // keep in sync with the number of post-process effects.\n    private static readonly pickedStringFunctionCache: Function[] = Array(3).fill(undefined); // keep in sync with the number of unison voices.\n\n    private readonly channels: ChannelState[] = [];\n    private readonly tonePool: Deque<Tone> = new Deque<Tone>();\n    private readonly tempMatchedPitchTones: Array<Tone | null> = Array(Config.maxChordSize).fill(null);\n\n    private startedMetronome: boolean = false;\n    private metronomeSamplesRemaining: number = -1;\n    private metronomeAmplitude: number = 0.0;\n    private metronomePrevAmplitude: number = 0.0;\n    private metronomeFilter: number = 0.0;\n    private limit: number = 0.0;\n\n    private tempMonoInstrumentSampleBuffer: Float32Array | null = null;\n\n    private audioCtx: any | null = null;\n    private scriptNode: any | null = null;\n\n    public get playing(): boolean {\n        return this.isPlayingSong;\n    }\n\n    public get recording(): boolean {\n        return this.isRecording;\n    }\n\n    public get playhead(): number {\n        return this.playheadInternal;\n    }\n\n    public set playhead(value: number) {\n        if (this.song != null) {\n            this.playheadInternal = Math.max(0, Math.min(this.song.barCount, value));\n            let remainder: number = this.playheadInternal;\n            this.bar = Math.floor(remainder);\n            remainder = this.song.beatsPerBar * (remainder - this.bar);\n            this.beat = Math.floor(remainder);\n            remainder = Config.partsPerBeat * (remainder - this.beat);\n            this.part = Math.floor(remainder);\n            remainder = Config.ticksPerPart * (remainder - this.part);\n            this.tick = Math.floor(remainder);\n            this.tickSampleCountdown = 0;\n            this.isAtStartOfTick = true;\n            this.prevBar = null;\n        }\n    }\n\n    public getSamplesPerBar(): number {\n        if (this.song == null) throw new Error();\n        return this.getSamplesPerTick() * Config.ticksPerPart * Config.partsPerBeat * this.song.beatsPerBar;\n    }\n\n    public getTicksIntoBar(): number {\n        return (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\n    }\n    public getCurrentPart(): number {\n        return (this.beat * Config.partsPerBeat + this.part);\n    }\n\n    private findPartsInBar(bar: number): number {\n        if (this.song == null) return 0;\n        let partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\n        for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\n            let pattern: Pattern | null = this.song.getPattern(channel, bar);\n            if (pattern != null) {\n                let instrument: Instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\n                    if (instrument.modulators[mod] == Config.modulators.dictionary[\"next bar\"].index) {\n                        for (const note of pattern.notes) {\n                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\n                                // Find the earliest next bar note.\n                                if (partsInBar > note.start)\n                                    partsInBar = note.start;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return partsInBar;\n    }\n\n    // Returns the total samples in the song\n    public getTotalSamples(enableIntro: boolean, enableOutro: boolean, loop: number): number {\n        if (this.song == null)\n            return -1;\n\n        // Compute the window to be checked (start bar to end bar)\n        let startBar: number = enableIntro ? 0 : this.song.loopStart;\n        let endBar: number = enableOutro ? this.song.barCount : (this.song.loopStart + this.song.loopLength);\n        let hasTempoMods: boolean = false;\n        let hasNextBarMods: boolean = false;\n        let prevTempo: number = this.song.tempo;\n\n        // Determine if any tempo or next bar mods happen anywhere in the window\n        for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\n            for (let bar: number = startBar; bar < endBar; bar++) {\n                let pattern: Pattern | null = this.song.getPattern(channel, bar);\n                if (pattern != null) {\n                    let instrument: Instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\n                    for (let mod: number = 0; mod < Config.modCount; mod++) {\n                        if (instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index) {\n                            hasTempoMods = true;\n                        }\n                        if (instrument.modulators[mod] == Config.modulators.dictionary[\"next bar\"].index) {\n                            hasNextBarMods = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        // If intro is not zero length, determine what the \"entry\" tempo is going into the start part, by looking at mods that came before...\n        if (startBar > 0) {\n            let latestTempoPin: number | null = null;\n            let latestTempoValue: number = 0;\n\n            for (let bar: number = startBar - 1; bar >= 0; bar--) {\n                for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\n                    let pattern = this.song.getPattern(channel, bar);\n\n                    if (pattern != null) {\n                        let instrumentIdx: number = pattern.instruments[0];\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\n\n                        let partsInBar: number = this.findPartsInBar(bar);\n\n                        for (const note of pattern.notes) {\n                            if (instrument.modulators[Config.modCount - 1 - note.pitches[0]] == Config.modulators.dictionary[\"tempo\"].index) {\n                                if (note.start < partsInBar && (latestTempoPin == null || note.end > latestTempoPin)) {\n                                    if (note.end <= partsInBar) {\n                                        latestTempoPin = note.end;\n                                        latestTempoValue = note.pins[note.pins.length - 1].size;\n                                    }\n                                    else {\n                                        latestTempoPin = partsInBar;\n                                        // Find the pin where bar change happens, and compute where pin volume would be at that time\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\n                                                const transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\n                                                const toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\n                                                const deltaVolume: number = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;\n\n                                                latestTempoValue = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);\n                                                pinIdx = note.pins.length;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // Done once you process a pattern where tempo mods happened, since the search happens backward\n                if (latestTempoPin != null) {\n                    prevTempo = latestTempoValue + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                    bar = -1;\n                }\n            }\n        }\n\n        if (hasTempoMods || hasNextBarMods) {\n            // Run from start bar to end bar and observe looping, computing average tempo across each bar\n            let bar: number = startBar;\n            let ended: boolean = false;\n            let totalSamples: number = 0;\n\n            while (!ended) {\n                // Compute the subsection of the pattern that will play\n                let partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\n                let currentPart: number = 0;\n\n                if (hasNextBarMods) {\n                    partsInBar = this.findPartsInBar(bar);\n                }\n\n                // Compute average tempo in this tick window, or use last tempo if nothing happened\n                if (hasTempoMods) {\n                    let foundMod: boolean = false;\n                    for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\n                        if (foundMod == false) {\n                            let pattern: Pattern | null = this.song.getPattern(channel, bar);\n                            if (pattern != null) {\n                                let instrument: Instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\n                                for (let mod: number = 0; mod < Config.modCount; mod++) {\n                                    if (foundMod == false && instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index\n                                        && pattern.notes.find(n => n.pitches[0] == (Config.modCount - 1 - mod))) {\n                                        // Only the first tempo mod instrument for this bar will be checked (well, the first with a note in this bar).\n                                        foundMod = true;\n                                        // Need to re-sort the notes by start time to make the next part much less painful.\n                                        pattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });\n                                        for (const note of pattern.notes) {\n                                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\n                                                // Compute samples up to this note\n                                                totalSamples += (Math.min(partsInBar - currentPart, note.start - currentPart)) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\n\n                                                if (note.start < partsInBar) {\n                                                    for (let pinIdx: number = 1; pinIdx < note.pins.length; pinIdx++) {\n                                                        // Compute samples up to this pin\n                                                        if (note.pins[pinIdx - 1].time + note.start <= partsInBar) {\n                                                            const tickLength: number = Config.ticksPerPart * Math.min(partsInBar - (note.start + note.pins[pinIdx - 1].time), note.pins[pinIdx].time - note.pins[pinIdx - 1].time);\n                                                            const prevPinTempo: number = note.pins[pinIdx - 1].size + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                                                            let currPinTempo: number = note.pins[pinIdx].size + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\n                                                                // Compute an intermediary tempo since bar changed over mid-pin. Maybe I'm deep in \"what if\" territory now!\n                                                                currPinTempo = note.pins[pinIdx - 1].size + (note.pins[pinIdx].size - note.pins[pinIdx - 1].size) * (partsInBar - (note.start + note.pins[pinIdx - 1].time)) / (note.pins[pinIdx].time - note.pins[pinIdx - 1].time) + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                                                            }\n                                                            let bpmScalar: number = Config.partsPerBeat * Config.ticksPerPart / 60;\n\n                                                            if (currPinTempo != prevPinTempo) {\n\n                                                                // Definite integral of SamplesPerTick w/r/t beats to find total samples from start point to end point for a variable tempo\n                                                                // The starting formula is\n                                                                // SamplesPerTick = SamplesPerSec / ((PartsPerBeat * TicksPerPart) / SecPerMin) * BeatsPerMin )\n                                                                //\n                                                                // This is an expression of samples per tick \"instantaneously\", and it can be multiplied by a number of ticks to get a sample count.\n                                                                // But this isn't the full story. BeatsPerMin, e.g. tempo, changes throughout the interval so it has to be expressed in terms of ticks, \"t\"\n                                                                // ( Also from now on PartsPerBeat, TicksPerPart, and SecPerMin are combined into one scalar, called \"BPMScalar\" )\n                                                                // Substituting BPM for a step variable that moves with respect to the current tick, we get\n                                                                // SamplesPerTick = SamplesPerSec / (BPMScalar * ( (EndTempo - StartTempo / TickLength) * t + StartTempo ) )\n                                                                //\n                                                                // When this equation is integrated from 0 to TickLength with respect to t, we get the following expression:\n                                                                //   Samples = - SamplesPerSec * TickLength * ( log( BPMScalar * EndTempo * TickLength ) - log( BPMScalar * StartTempo * TickLength ) ) / BPMScalar * ( StartTempo - EndTempo )\n\n                                                                totalSamples += - this.samplesPerSecond * tickLength * (Math.log(bpmScalar * currPinTempo * tickLength) - Math.log(bpmScalar * prevPinTempo * tickLength)) / (bpmScalar * (prevPinTempo - currPinTempo));\n\n                                                            }\n                                                            else {\n\n                                                                // No tempo change between the two pins.\n                                                                totalSamples += tickLength * this.getSamplesPerTickSpecificBPM(currPinTempo);\n\n                                                            }\n                                                            prevTempo = currPinTempo;\n                                                        }\n                                                        currentPart = Math.min(note.start + note.pins[pinIdx].time, partsInBar);\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // Compute samples for the rest of the bar\n                totalSamples += (partsInBar - currentPart) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\n\n                bar++;\n                if (loop != 0 && bar == this.song.loopStart + this.song.loopLength) {\n                    bar = this.song.loopStart;\n                    if (loop > 0) loop--;\n                }\n                if (bar >= endBar) {\n                    ended = true;\n                }\n            }\n\n            return Math.ceil(totalSamples);\n        }\n        else {\n            // No tempo or next bar mods... phew! Just calculate normally.\n            return this.getSamplesPerBar() * this.getTotalBars(enableIntro, enableOutro, loop);\n        }\n    }\n\n    public getTotalBars(enableIntro: boolean, enableOutro: boolean, useLoopCount: number = this.loopRepeatCount): number {\n        if (this.song == null) throw new Error();\n        let bars: number = this.song.loopLength * (useLoopCount + 1);\n        if (enableIntro) bars += this.song.loopStart;\n        if (enableOutro) bars += this.song.barCount - (this.song.loopStart + this.song.loopLength);\n        return bars;\n    }\n\n    constructor(song: Song | string | null = null) {\n        this.computeDelayBufferSizes();\n        if (song != null) this.setSong(song);\n    }\n\n    public setSong(song: Song | string): void {\n        if (typeof (song) == \"string\") {\n            this.song = new Song(song);\n        } else if (song instanceof Song) {\n            this.song = song;\n        }\n        this.prevBar = null;\n    }\n\n    private computeDelayBufferSizes(): void {\n        this.panningDelayBufferSize = Synth.fittingPowerOfTwo(this.samplesPerSecond * Config.panDelaySecondsMax);\n        this.panningDelayBufferMask = this.panningDelayBufferSize - 1;\n        this.chorusDelayBufferSize = Synth.fittingPowerOfTwo(this.samplesPerSecond * Config.chorusMaxDelay);\n        this.chorusDelayBufferMask = this.chorusDelayBufferSize - 1;\n    }\n\n    private activateAudio(): void {\n        const bufferSize: number = this.anticipatePoorPerformance ? (this.preferLowerLatency ? 2048 : 4096) : (this.preferLowerLatency ? 512 : 2048);\n        if (this.audioCtx == null || this.scriptNode == null || this.scriptNode.bufferSize != bufferSize) {\n            if (this.scriptNode != null) this.deactivateAudio();\n            const latencyHint: string = this.anticipatePoorPerformance ? (this.preferLowerLatency ? \"balanced\" : \"playback\") : (this.preferLowerLatency ? \"interactive\" : \"balanced\");\n            this.audioCtx = this.audioCtx || new (window.AudioContext || window.webkitAudioContext)({ latencyHint: latencyHint });\n            this.samplesPerSecond = this.audioCtx.sampleRate;\n            this.scriptNode = this.audioCtx.createScriptProcessor ? this.audioCtx.createScriptProcessor(bufferSize, 0, 2) : this.audioCtx.createJavaScriptNode(bufferSize, 0, 2); // bufferSize samples per callback buffer, 0 input channels, 2 output channels (left/right)\n            this.scriptNode.onaudioprocess = this.audioProcessCallback;\n            this.scriptNode.channelCountMode = 'explicit';\n            this.scriptNode.channelInterpretation = 'speakers';\n            this.scriptNode.connect(this.audioCtx.destination);\n\n            this.computeDelayBufferSizes();\n        }\n        this.audioCtx.resume();\n    }\n\n    private deactivateAudio(): void {\n        if (this.audioCtx != null && this.scriptNode != null) {\n            this.scriptNode.disconnect(this.audioCtx.destination);\n            this.scriptNode = null;\n            if (this.audioCtx.close) this.audioCtx.close(); // firefox is missing this function?\n            this.audioCtx = null;\n        }\n    }\n\n    public maintainLiveInput(): void {\n        this.activateAudio();\n        this.liveInputEndTime = performance.now() + 10000.0;\n    }\n\n    public play(): void {\n        if (this.isPlayingSong) return;\n\t    \t\t\t this.computeLatestModValues();\n        this.warmUpSynthesizer(this.song);\n\t\t//BUGFIX FROM JUMMBOX\n        this.isPlayingSong = true;\n        this.activateAudio();\n                   //this.warmUpSynthesizer(this.song);\n           // this.computeLatestModValues();\n    }\n\n    public pause(): void {\n        if (!this.isPlayingSong) return;\n        this.isPlayingSong = false;\n        this.isRecording = false;\n        this.modValues = [];\n        this.nextModValues = [];\n        if (this.song != null) {\n            this.song.inVolumeCap = 0.0;\n            this.song.outVolumeCap = 0.0;\n            for (let channelIndex: number = 0; channelIndex < this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex++) {\n                this.modInsValues[channelIndex] = [];\n                this.nextModInsValues[channelIndex] = [];\n            }\n        }\n    }\n\n    public startRecording(): void {\n        this.preferLowerLatency = true;\n        this.isRecording = true;\n        this.play();\n    }\n\n    public resetEffects(): void {\n        this.limit = 0.0;\n        this.freeAllTones();\n        if (this.song != null) {\n            for (const channelState of this.channels) {\n                for (const instrumentState of channelState.instruments) {\n                    instrumentState.resetAllEffects();\n                }\n            }\n        }\n    }\n\n    public setModValue(volumeStart: number, volumeEnd: number, mod: number, channelIndex: number, instrumentIndex: number, setting: number): number {\n        let val: number = volumeStart + Config.modulators[setting].convertRealFactor;\n        let nextVal: number = volumeEnd + Config.modulators[setting].convertRealFactor;\n        if (Config.modulators[setting].optionalModify == \"invert-0to50\") {\n            val = 50 - val;\n            nextVal = 50 - nextVal;\n        }\n        if (Config.modulators[setting].optionalModify == \"invert-0to99\") {\n            val = 99 - val;\n            nextVal = 99 - nextVal;\n        }\n        //should this be turned into a function?\n        if (Config.modulators[setting].forSong) {\n            if (this.modValues[setting] == null || this.modValues[setting] != val || this.nextModValues[setting] != nextVal) {\n                this.modValues[setting] = val;\n                this.nextModValues[setting] = nextVal;\n            }\n        } else {\n            if (this.modInsValues[channelIndex][instrumentIndex][setting] == null\n                || this.modInsValues[channelIndex][instrumentIndex][setting] != val\n                || this.nextModInsValues[channelIndex][instrumentIndex][setting] != nextVal) {\n                this.modInsValues[channelIndex][instrumentIndex][setting] = val;\n                this.nextModInsValues[channelIndex][instrumentIndex][setting] = nextVal;\n            }\n        }\n\n        return val;\n    }\n\n    public getModValue(setting: number, channel?: number | null, instrument?: number | null, nextVal?: boolean): number {\n        const forSong: boolean = Config.modulators[setting].forSong;\n        if (forSong) {\n            if (this.modValues[setting] != null && this.nextModValues[setting] != null) {\n                return nextVal ? this.nextModValues[setting]! : this.modValues[setting]!;\n            }\n        } else if (channel != undefined && instrument != undefined) {\n            if (this.modInsValues[channel][instrument][setting] != null && this.nextModInsValues[channel][instrument][setting] != null) {\n                return nextVal ? this.nextModInsValues[channel][instrument][setting]! : this.modInsValues[channel][instrument][setting]!;\n            }\n        }\n        return -1;\n    }\n\n    // Checks if any mod is active for the given channel/instrument OR if any mod is active for the song scope. Could split the logic if needed later.\n    public isAnyModActive(channel: number, instrument: number): boolean {\n        for (let setting: number = 0; setting < Config.modulators.length; setting++) {\n            if ((this.modValues != undefined && this.modValues[setting] != null)\n                || (this.modInsValues != undefined && this.modInsValues[channel] != undefined && this.modInsValues[channel][instrument] != undefined && this.modInsValues[channel][instrument][setting] != null)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public unsetMod(setting: number, channel?: number, instrument?: number) {\n        if (this.isModActive(setting) || (channel != undefined && instrument != undefined && this.isModActive(setting, channel, instrument))) {\n            this.modValues[setting] = null;\n            this.nextModValues[setting] = null;\n            if (channel != undefined && instrument != undefined) {\n                this.modInsValues[channel][instrument][setting] = null;\n                this.nextModInsValues[channel][instrument][setting] = null;\n            }\n        }\n    }\n\n    public isFilterModActive(forNoteFilter: boolean, channelIdx: number, instrumentIdx: number) {\n        const instrument: Instrument = this.song!.channels[channelIdx].instruments[instrumentIdx];\n\n        if (forNoteFilter) {\n            if (instrument.noteFilterType)\n                return false;\n            if (instrument.tmpNoteFilterEnd != null)\n                return true;\n        }\n        else {\n            if (instrument.eqFilterType)\n                return false;\n            if (instrument.tmpEqFilterEnd != null)\n                return true;\n        }\n        return false\n    }\n\n    public isModActive(setting: number, channel?: number, instrument?: number): boolean {\n        const forSong: boolean = Config.modulators[setting].forSong;\n        if (forSong) {\n            return (this.modValues != undefined && this.modValues[setting] != null);\n        } else if (channel != undefined && instrument != undefined && this.modInsValues != undefined && this.modInsValues[channel] != null && this.modInsValues[channel][instrument] != null) {\n            return (this.modInsValues[channel][instrument][setting] != null);\n        }\n        return false;\n    }\n\n    public snapToStart(): void {\n        this.bar = 0;\n        this.resetEffects();\n        this.snapToBar();\n    }\n\n    public goToBar(bar: number): void {\n        this.bar = bar;\n        this.resetEffects();\n        this.playheadInternal = this.bar;\n    }\n\n    public snapToBar(): void {\n        this.playheadInternal = this.bar;\n        this.beat = 0;\n        this.part = 0;\n        this.tick = 0;\n        this.tickSampleCountdown = 0;\n    }\n\n    public jumpIntoLoop(): void {\n        if (!this.song) return;\n        if (this.bar < this.song.loopStart || this.bar >= this.song.loopStart + this.song.loopLength) {\n            const oldBar: number = this.bar;\n            this.bar = this.song.loopStart;\n            this.playheadInternal += this.bar - oldBar;\n\n            if (this.playing)\n                this.computeLatestModValues();\n        }\n    }\n\n    public goToNextBar(): void {\n        if (!this.song) return;\n        this.prevBar = this.bar;\n        const oldBar: number = this.bar;\n        this.bar++;\n        if (this.bar >= this.song.barCount) {\n            this.bar = 0;\n        }\n        this.playheadInternal += this.bar - oldBar;\n\n        if (this.playing)\n            this.computeLatestModValues();\n    }\n\n    public goToPrevBar(): void {\n        if (!this.song) return;\n        this.prevBar = null;\n        const oldBar: number = this.bar;\n        this.bar--;\n        if (this.bar < 0 || this.bar >= this.song.barCount) {\n            this.bar = this.song.barCount - 1;\n        }\n        this.playheadInternal += this.bar - oldBar;\n\n        if (this.playing)\n            this.computeLatestModValues();\n    }\n\n    private getNextBar(): number {\n        let nextBar: number = this.bar + 1;\n        if (this.isRecording) {\n            if (nextBar >= this.song!.barCount) {\n                nextBar = this.song!.barCount - 1;\n            }\n        } else if (this.loopRepeatCount != 0 && nextBar == this.song!.loopStart + this.song!.loopLength) {\n            nextBar = this.song!.loopStart;\n        }\n        return nextBar;\n    }\n\n    public skipBar(): void {\n        if (!this.song) return;\n        const samplesPerTick: number = this.getSamplesPerTick();\n        this.bar++;\n        this.beat = 0;\n        this.part = 0;\n        this.tick = 0;\n        this.tickSampleCountdown = samplesPerTick;\n\t    \t\t\tthis.isAtStartOfTick = true;\n\t\t\t//BUGFIX FROM JUMMBOX\n\n        if (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {\n            this.bar = this.song.loopStart;\n            if (this.loopRepeatCount > 0) this.loopRepeatCount--;\n        }\n\n    }\n\n    private audioProcessCallback = (audioProcessingEvent: any): void => {\n        const outputBuffer = audioProcessingEvent.outputBuffer;\n        const outputDataL: Float32Array = outputBuffer.getChannelData(0);\n        const outputDataR: Float32Array = outputBuffer.getChannelData(1);\n\n        if (this.browserAutomaticallyClearsAudioBuffer && (outputDataL[0] != 0.0 || outputDataR[0] != 0.0 || outputDataL[outputBuffer.length - 1] != 0.0 || outputDataR[outputBuffer.length - 1] != 0.0)) {\n            // If the buffer is ever initially nonzero, then this must be an older browser that doesn't automatically clear the audio buffer.\n            this.browserAutomaticallyClearsAudioBuffer = false;\n        }\n        if (!this.browserAutomaticallyClearsAudioBuffer) {\n            // If this browser does not clear the buffer automatically, do so manually before continuing.\n            const length: number = outputBuffer.length;\n            for (let i: number = 0; i < length; i++) {\n                outputDataL[i] = 0.0;\n                outputDataR[i] = 0.0;\n            }\n        }\n\n        if (!this.isPlayingSong && performance.now() >= this.liveInputEndTime) {\n            this.deactivateAudio();\n        } else {\n            this.synthesize(outputDataL, outputDataR, outputBuffer.length, this.isPlayingSong);\n\n            if (this.oscEnabled) {\n                if (this.oscRefreshEventTimer <= 0) {\n                    events.raise(\"oscillascopeUpdate\", outputDataL, outputDataR);\n                    this.oscRefreshEventTimer = 2;\n                } else {\n                    this.oscRefreshEventTimer--;\n                }\n            }\n        }\n    }\n\n    public synthesize(outputDataL: Float32Array, outputDataR: Float32Array, outputBufferLength: number, playSong: boolean = true): void {\n        if (this.song == null) {\n            for (let i: number = 0; i < outputBufferLength; i++) {\n                outputDataL[i] = 0.0;\n                outputDataR[i] = 0.0;\n            }\n            this.deactivateAudio();\n            return;\n        }\n\n        const song: Song = this.song;\n        this.song.inVolumeCap = 0.0 // Reset volume cap for this run\n        this.song.outVolumeCap = 0.0;\n\n        let samplesPerTick: number = this.getSamplesPerTick();\n        let ended: boolean = false;\n\n        // Check the bounds of the playhead:\n        if (this.tickSampleCountdown <= 0 || this.tickSampleCountdown > samplesPerTick) {\n            this.tickSampleCountdown = samplesPerTick;\n            this.isAtStartOfTick = true;\n        }\n        if (playSong) {\n            if (this.beat >= song.beatsPerBar) {\n                this.beat = 0;\n                this.part = 0;\n                this.tick = 0;\n                this.tickSampleCountdown = samplesPerTick;\n                this.isAtStartOfTick = true;\n\n                this.prevBar = this.bar;\n                this.bar = this.getNextBar();\n                if (this.bar <= this.prevBar && this.loopRepeatCount > 0) this.loopRepeatCount--;\n\n            }\n            if (this.bar >= song.barCount) {\n                this.bar = 0;\n                if (this.loopRepeatCount != -1) {\n                    ended = true;\n                    this.pause();\n                }\n            }\n        }\n\n        //const synthStartTime: number = performance.now();\n\n        this.syncSongState();\n\n        if (this.tempMonoInstrumentSampleBuffer == null || this.tempMonoInstrumentSampleBuffer.length < outputBufferLength) {\n            this.tempMonoInstrumentSampleBuffer = new Float32Array(outputBufferLength);\n        }\n\n        // Post processing parameters:\n        const volume: number = +this.volume;\n        const limitDecay: number = 1.0 - Math.pow(0.5, 4.0 / this.samplesPerSecond);\n        const limitRise: number = 1.0 - Math.pow(0.5, 4000.0 / this.samplesPerSecond);\n        let limit: number = +this.limit;\n\t    \t\t\tlet skippedBars = [];\n        let firstSkippedBufferIndex = -1;\n\t\t//BUGFIX FROM JUMMBOX\n\n        let bufferIndex: number = 0;\n        while (bufferIndex < outputBufferLength && !ended) {\n\n            this.nextBar = this.getNextBar();\n            if (this.nextBar >= song.barCount) this.nextBar = null;\n\n            const samplesLeftInBuffer: number = outputBufferLength - bufferIndex;\n            const samplesLeftInTick: number = Math.ceil(this.tickSampleCountdown);\n            const runLength: number = Math.min(samplesLeftInTick, samplesLeftInBuffer);\n            const runEnd: number = bufferIndex + runLength;\n\n            // Handle mod synth\n            if (this.isPlayingSong || this.renderingSong) {\n                for (let channelIndex: number = song.pitchChannelCount + song.noiseChannelCount; channelIndex < song.getChannelCount(); channelIndex++) {\n                    const channel: Channel = song.channels[channelIndex];\n                    const channelState: ChannelState = this.channels[channelIndex];\n\n                    this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong);\n\n                    for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                        const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\n\n                        for (let i: number = 0; i < instrumentState.activeModTones.count(); i++) {\n                            const tone: Tone = instrumentState.activeModTones.get(i);\n                            this.playModTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);\n                        }\n                    }\n                }\n            }\n\n            // Handle next bar mods if they were set\n            if (this.wantToSkip) {\n\t\t    \t\t\t\t\t// Unable to continue, as we have skipped back to a previously visited bar without generating new samples, which means we are infinitely skipping.\n                // In this case processing will return before the designated number of samples are processed. In other words, silence will be generated.\n                let barVisited = skippedBars.includes(this.bar);\n                if (barVisited && bufferIndex == firstSkippedBufferIndex)\n                    return;\n                if (firstSkippedBufferIndex == -1) {\n                    firstSkippedBufferIndex = bufferIndex;\n                }\n                if (!barVisited)\n                    skippedBars.push(this.bar);\n\t\t\t\t//BUGFIX FROM JUMMBOX\n                this.wantToSkip = false;\n                this.skipBar();\n\t\t    \t\t\t\t\tcontinue;\n\t\t\t\t\t//BUGFIX FROM JUMMBOX\n            }\n\n            for (let channelIndex: number = 0; channelIndex < song.pitchChannelCount + song.noiseChannelCount; channelIndex++) {\n                const channel: Channel = song.channels[channelIndex];\n                const channelState: ChannelState = this.channels[channelIndex];\n\n                if (this.isAtStartOfTick) {\n                    this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong && !this.countInMetronome);\n                    this.determineLiveInputTones(song, channelIndex, samplesPerTick);\n                }\n                for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                    const instrument: Instrument = channel.instruments[instrumentIndex];\n                    const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\n\n                    if (this.isAtStartOfTick) {\n                        let tonesPlayedInThisInstrument: number = instrumentState.activeTones.count() + instrumentState.liveInputTones.count();\n\n                        for (let i: number = 0; i < instrumentState.releasedTones.count(); i++) {\n                            const tone: Tone = instrumentState.releasedTones.get(i);\n                            if (tone.ticksSinceReleased >= Math.abs(instrument.getFadeOutTicks())) {\n                                this.freeReleasedTone(instrumentState, i);\n                                i--;\n                                continue;\n                            }\n                            const shouldFadeOutFast: boolean = (tonesPlayedInThisInstrument >= Config.maximumTonesPerChannel);\n                            this.computeTone(song, channelIndex, samplesPerTick, tone, true, shouldFadeOutFast);\n                            tonesPlayedInThisInstrument++;\n                        }\n\n                        if (instrumentState.awake) {\n                            if (!instrumentState.computed) {\n                                instrumentState.compute(this, instrument, samplesPerTick, Math.ceil(samplesPerTick), null, channelIndex, instrumentIndex);\n                            }\n\n                            instrumentState.computed = false;\n                            //instrumentState.envelopeComputer.clearEnvelopes();\n                        }\n                    }\n\n                    for (let i: number = 0; i < instrumentState.activeTones.count(); i++) {\n                        const tone: Tone = instrumentState.activeTones.get(i);\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\n                    }\n\n                    for (let i: number = 0; i < instrumentState.liveInputTones.count(); i++) {\n                        const tone: Tone = instrumentState.liveInputTones.get(i);\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\n                    }\n\n                    for (let i: number = 0; i < instrumentState.releasedTones.count(); i++) {\n                        const tone: Tone = instrumentState.releasedTones.get(i);\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\n                    }\n\n                    if (instrumentState.awake) {\n                        Synth.effectsSynth(this, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);\n                    }\n\n                    // Update LFO time for instruments (used to be deterministic based on bar position but now vibrato/arp speed messes that up!)\n\n                    const tickSampleCountdown: number = this.tickSampleCountdown;\n                    const startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\n                    const endRatio: number = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\n                    const ticksIntoBar: number = (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\n                    const partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\n                    const partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\n                    const partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\n                    const partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\n                    let useVibratoSpeed: number = instrument.vibratoSpeed;\n\n                    instrument.LFOtime = instrument.nextLFOtime;\n\n                    if (this.isModActive(Config.modulators.dictionary[\"vibrato speed\"].index, channelIndex, instrumentIndex)) {\n                        useVibratoSpeed = this.getModValue(Config.modulators.dictionary[\"vibrato speed\"].index, channelIndex, instrumentIndex);\n                    }\n\n                    if (useVibratoSpeed == 0) {\n                        instrument.LFOtime = 0;\n                        instrument.nextLFOtime = 0;\n                    }\n                    else {\n                        instrument.nextLFOtime += useVibratoSpeed * 0.1 * (partTimeEnd - partTimeStart);\n                    }\n                }\n            }\n\n            if (this.enableMetronome || this.countInMetronome) {\n                if (this.part == 0) {\n                    if (!this.startedMetronome) {\n                        const midBeat: boolean = (song.beatsPerBar > 4 && (song.beatsPerBar % 2 == 0) && this.beat == song.beatsPerBar / 2);\n                        const periods: number = (this.beat == 0) ? 8 : midBeat ? 6 : 4;\n                        const hz: number = (this.beat == 0) ? 1600 : midBeat ? 1200 : 800;\n                        const amplitude: number = (this.beat == 0) ? 0.06 : midBeat ? 0.05 : 0.04;\n                        const samplesPerPeriod: number = this.samplesPerSecond / hz;\n                        const radiansPerSample: number = Math.PI * 2.0 / samplesPerPeriod;\n                        this.metronomeSamplesRemaining = Math.floor(samplesPerPeriod * periods);\n                        this.metronomeFilter = 2.0 * Math.cos(radiansPerSample);\n                        this.metronomeAmplitude = amplitude * Math.sin(radiansPerSample);\n                        this.metronomePrevAmplitude = 0.0;\n\n                        this.startedMetronome = true;\n                    }\n                    if (this.metronomeSamplesRemaining > 0) {\n                        const stopIndex: number = Math.min(runEnd, bufferIndex + this.metronomeSamplesRemaining);\n                        this.metronomeSamplesRemaining -= stopIndex - bufferIndex;\n                        for (let i: number = bufferIndex; i < stopIndex; i++) {\n                            outputDataL[i] += this.metronomeAmplitude;\n                            outputDataR[i] += this.metronomeAmplitude;\n                            const tempAmplitude: number = this.metronomeFilter * this.metronomeAmplitude - this.metronomePrevAmplitude;\n                            this.metronomePrevAmplitude = this.metronomeAmplitude;\n                            this.metronomeAmplitude = tempAmplitude;\n                        }\n                    }\n                } else {\n                    this.startedMetronome = false;\n                }\n            }\n\n            // Post processing:\n            for (let i: number = bufferIndex; i < runEnd; i++) {\n                // A compressor/limiter.\n                const sampleL = outputDataL[i] * song.masterGain * song.masterGain;\n                const sampleR = outputDataR[i] * song.masterGain * song.masterGain;\n                const absL: number = sampleL < 0.0 ? -sampleL : sampleL;\n                const absR: number = sampleR < 0.0 ? -sampleR : sampleR;\n                const abs: number = absL > absR ? absL : absR;\n                this.song.inVolumeCap = (this.song.inVolumeCap > abs ? this.song.inVolumeCap : abs); // Analytics, spit out raw input volume\n                // Determines which formula to use. 0 when volume is between [0, compressionThreshold], 1 when between (compressionThreshold, limitThreshold], 2 above\n                const limitRange: number = (+(abs > song.compressionThreshold)) + (+(abs > song.limitThreshold));\n                // Determine the target amplification based on the range of the curve\n                const limitTarget: number =\n                    (+(limitRange == 0)) * (((abs + 1 - song.compressionThreshold) * 0.8 + 0.25) * song.compressionRatio + 1.05 * (1 - song.compressionRatio))\n                    + (+(limitRange == 1)) * (1.05)\n                    + (+(limitRange == 2)) * (1.05 * ((abs + 1 - song.limitThreshold) * song.limitRatio + (1 - song.limitThreshold)));\n                // Move the limit towards the target\n                limit += ((limitTarget - limit) * (limit < limitTarget ? limitRise : limitDecay));\n                const limitedVolume = volume / (limit >= 1 ? limit * 1.05 : limit * 0.8 + 0.25);\n                outputDataL[i] = sampleL * limitedVolume;\n                outputDataR[i] = sampleR * limitedVolume;\n\n                this.song.outVolumeCap = (this.song.outVolumeCap > abs * limitedVolume ? this.song.outVolumeCap : abs * limitedVolume); // Analytics, spit out limited output volume\n            }\n\n            bufferIndex += runLength;\n\n            this.isAtStartOfTick = false;\n            this.tickSampleCountdown -= runLength;\n            if (this.tickSampleCountdown <= 0) {\n                this.isAtStartOfTick = true;\n\n                // Track how long tones have been released, and free them if there are too many.\n                // Also reset awake InstrumentStates that didn't have any Tones during this tick.\n                for (const channelState of this.channels) {\n                    for (const instrumentState of channelState.instruments) {\n                        for (let i: number = 0; i < instrumentState.releasedTones.count(); i++) {\n                            const tone: Tone = instrumentState.releasedTones.get(i);\n                            if (tone.isOnLastTick) {\n                                this.freeReleasedTone(instrumentState, i);\n                                i--;\n                            } else {\n                                tone.ticksSinceReleased++;\n                            }\n                        }\n                        if (instrumentState.deactivateAfterThisTick) {\n                            instrumentState.deactivate();\n                        }\n                        instrumentState.tonesAddedInThisTick = false;\n                    }\n                }\n\n                // Update arpeggio time, which is used to calculate arpeggio position\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                    for (let instrumentIdx: number = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\n                        let useArpeggioSpeed: number = instrument.arpeggioSpeed;\n                        if (this.isModActive(Config.modulators.dictionary[\"arp speed\"].index, channel, instrumentIdx)) {\n                            useArpeggioSpeed = this.getModValue(Config.modulators.dictionary[\"arp speed\"].index, channel, instrumentIdx, false);\n                            if (Number.isInteger(useArpeggioSpeed)) {\n                                instrument.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\n                            } else {\n                                // Linear interpolate arpeggio values\n                                instrument.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];\n                            }\n                        }\n                        else {\n                            instrument.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\n                        }\n                    }\n                }\n\n                // Update next-used filters after each run\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                    for (let instrumentIdx: number = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\n                        if (instrument.tmpEqFilterEnd != null) {\n                            instrument.tmpEqFilterStart = instrument.tmpEqFilterEnd;\n                        } else {\n                            instrument.tmpEqFilterStart = instrument.eqFilter;\n                        }\n                        if (instrument.tmpNoteFilterEnd != null) {\n                            instrument.tmpNoteFilterStart = instrument.tmpNoteFilterEnd;\n                        } else {\n                            instrument.tmpNoteFilterStart = instrument.noteFilter;\n                        }\n                    }\n                }\n\n                this.tick++;\n                this.tickSampleCountdown += samplesPerTick;\n                if (this.tick == Config.ticksPerPart) {\n                    this.tick = 0;\n                    this.part++;\n                    this.liveInputDuration--;\n\n                    if (this.part == Config.partsPerBeat) {\n                        this.part = 0;\n\n                        if (playSong) {\n                            this.beat++;\n                            if (this.beat == song.beatsPerBar) {\n                                // bar changed, reset for next bar:\n                                this.beat = 0;\n\n                                if (this.countInMetronome) {\n                                    this.countInMetronome = false;\n                                } else {\n                                    this.prevBar = this.bar;\n                                    this.bar = this.getNextBar();\n                                    if (this.bar <= this.prevBar && this.loopRepeatCount > 0) this.loopRepeatCount--;\n\n                                    if (this.bar >= song.barCount) {\n                                        this.bar = 0;\n                                        if (this.loopRepeatCount != -1) {\n                                            ended = true;\n                                            this.resetEffects();\n                                            this.pause();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // Update mod values so that next values copy to current values\n            for (let setting: number = 0; setting < Config.modulators.length; setting++) {\n                if (this.nextModValues != null && this.nextModValues[setting] != null)\n                    this.modValues[setting] = this.nextModValues[setting];\n            }\n\n            // Set samples per tick if song tempo mods changed it\n            if (this.isModActive(Config.modulators.dictionary[\"tempo\"].index)) {\n                samplesPerTick = this.getSamplesPerTick();\n                this.tickSampleCountdown = Math.min(this.tickSampleCountdown, samplesPerTick);\n            }\n\n            // Bound LFO times to be within their period (to keep values from getting large)\n            // I figured this modulo math probably doesn't have to happen every LFO tick.\n            for (let channel: number = 0; channel < this.song.pitchChannelCount; channel++) {\n                for (let instrument of this.song.channels[channel].instruments) {\n                    instrument.nextLFOtime = (instrument.nextLFOtime % (Config.vibratoTypes[instrument.vibratoType].period / (Config.ticksPerPart * samplesPerTick / this.samplesPerSecond)));\n                    instrument.arpTime = (instrument.arpTime % (2520 * Config.ticksPerArpeggio)); // 2520 = LCM of 4, 5, 6, 7, 8, 9 (arp sizes)\n                }\n            }\n\n            for (let setting: number = 0; setting < Config.modulators.length; setting++) {\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                    for (let instrument: number = 0; instrument < this.song.getMaxInstrumentsPerChannel(); instrument++) {\n                        if (this.nextModInsValues != null && this.nextModInsValues[channel] != null && this.nextModInsValues[channel][instrument] != null && this.nextModInsValues[channel][instrument][setting] != null) {\n                            this.modInsValues[channel][instrument][setting] = this.nextModInsValues[channel][instrument][setting];\n                        }\n                    }\n                }\n            }\n        }\n\n        // Optimization: Avoid persistent reverb values in the float denormal range.\n        if (!Number.isFinite(limit) || Math.abs(limit) < epsilon) limit = 0.0;\n        this.limit = limit;\n\n        if (playSong && !this.countInMetronome) {\n            this.playheadInternal = (((this.tick + 1.0 - this.tickSampleCountdown / samplesPerTick) / 2.0 + this.part) / Config.partsPerBeat + this.beat) / song.beatsPerBar + this.bar;\n        }\n\n        /*\n        const synthDuration: number = performance.now() - synthStartTime;\n        // Performance measurements:\n        samplesAccumulated += outputBufferLength;\n        samplePerformance += synthDuration;\n    \t\n        if (samplesAccumulated >= 44100 * 4) {\n            const secondsGenerated = samplesAccumulated / 44100;\n            const secondsRequired = samplePerformance / 1000;\n            const ratio = secondsRequired / secondsGenerated;\n            console.log(ratio);\n            samplePerformance = 0;\n            samplesAccumulated = 0;\n        }\n        */\n    }\n\n    private freeTone(tone: Tone): void {\n        this.tonePool.pushBack(tone);\n    }\n\n    private newTone(): Tone {\n        if (this.tonePool.count() > 0) {\n            const tone: Tone = this.tonePool.popBack();\n            tone.freshlyAllocated = true;\n            return tone;\n        }\n        return new Tone();\n    }\n\n    private releaseTone(instrumentState: InstrumentState, tone: Tone): void {\n        instrumentState.releasedTones.pushFront(tone);\n        tone.atNoteStart = false;\n        tone.passedEndOfNote = true;\n    }\n\n    private freeReleasedTone(instrumentState: InstrumentState, toneIndex: number): void {\n        this.freeTone(instrumentState.releasedTones.get(toneIndex));\n        instrumentState.releasedTones.remove(toneIndex);\n    }\n\n    public freeAllTones(): void {\n        for (const channelState of this.channels) {\n            for (const instrumentState of channelState.instruments) {\n                while (instrumentState.activeTones.count() > 0) this.freeTone(instrumentState.activeTones.popBack());\n                while (instrumentState.activeModTones.count() > 0) this.freeTone(instrumentState.activeModTones.popBack());\n                while (instrumentState.releasedTones.count() > 0) this.freeTone(instrumentState.releasedTones.popBack());\n                while (instrumentState.liveInputTones.count() > 0) this.freeTone(instrumentState.liveInputTones.popBack());\n            }\n        }\n    }\n\n    private determineLiveInputTones(song: Song, channelIndex: number, samplesPerTick: number): void {\n        const channel: Channel = song.channels[channelIndex];\n        const channelState: ChannelState = this.channels[channelIndex];\n        const pitches: number[] = this.liveInputPitches;\n\n        for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n            const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\n            const toneList: Deque<Tone> = instrumentState.liveInputTones;\n            let toneCount: number = 0;\n            if (this.liveInputDuration > 0 && channelIndex == this.liveInputChannel && pitches.length > 0 && this.liveInputInstruments.indexOf(instrumentIndex) != -1) {\n                const instrument: Instrument = channel.instruments[instrumentIndex];\n\n                if (instrument.getChord().singleTone) {\n                    let tone: Tone;\n                    if (toneList.count() <= toneCount) {\n                        tone = this.newTone();\n                        toneList.pushBack(tone);\n                    } else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\n                        this.releaseTone(instrumentState, toneList.get(toneCount));\n                        tone = this.newTone();\n                        toneList.set(toneCount, tone);\n                    } else {\n                        tone = toneList.get(toneCount);\n                    }\n                    toneCount++;\n\n                    for (let i: number = 0; i < pitches.length; i++) {\n                        tone.pitches[i] = pitches[i];\n                    }\n                    tone.pitchCount = pitches.length;\n                    tone.chordSize = 1;\n                    tone.instrumentIndex = instrumentIndex;\n                    tone.note = tone.prevNote = tone.nextNote = null;\n                    tone.atNoteStart = this.liveInputStarted;\n                    tone.forceContinueAtStart = false;\n                    tone.forceContinueAtEnd = false;\n                    this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                } else {\n                    //const transition: Transition = instrument.getTransition();\n\n                    this.moveTonesIntoOrderedTempMatchedList(toneList, pitches);\n\n                    for (let i: number = 0; i < pitches.length; i++) {\n                        //const strumOffsetParts: number = i * instrument.getChord().strumParts;\n\n                        let tone: Tone;\n                        if (this.tempMatchedPitchTones[toneCount] != null) {\n                            tone = this.tempMatchedPitchTones[toneCount]!;\n                            this.tempMatchedPitchTones[toneCount] = null;\n                            if (tone.pitchCount != 1 || tone.pitches[0] != pitches[i]) {\n                                this.releaseTone(instrumentState, tone);\n                                tone = this.newTone();\n                            }\n                            toneList.pushBack(tone);\n                        } else {\n                            tone = this.newTone();\n                            toneList.pushBack(tone);\n                        }\n                        toneCount++;\n\n                        tone.pitches[0] = pitches[i];\n                        tone.pitchCount = 1;\n                        tone.chordSize = pitches.length;\n                        tone.instrumentIndex = instrumentIndex;\n                        tone.note = tone.prevNote = tone.nextNote = null;\n                        tone.atNoteStart = this.liveInputStarted;\n                        tone.forceContinueAtStart = false;\n                        tone.forceContinueAtEnd = false;\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                    }\n                }\n            }\n\n            while (toneList.count() > toneCount) {\n                this.releaseTone(instrumentState, toneList.popBack());\n            }\n\n            this.clearTempMatchedPitchTones(toneCount, instrumentState);\n        }\n\n        this.liveInputStarted = false;\n    }\n\n    // Returns the chord type of the instrument in the adjacent pattern if it is compatible for a\n    // seamless transition across patterns, otherwise returns null.\n    private adjacentPatternHasCompatibleInstrumentTransition(song: Song, channel: Channel, pattern: Pattern, otherPattern: Pattern, instrumentIndex: number, transition: Transition, chord: Chord, note: Note, otherNote: Note, forceContinue: boolean): Chord | null {\n        if (song.patternInstruments && otherPattern.instruments.indexOf(instrumentIndex) == -1) {\n            // The adjacent pattern does not contain the same instrument as the current pattern.\n\n            if (pattern.instruments.length > 1 || otherPattern.instruments.length > 1) {\n                // The current or adjacent pattern contains more than one instrument, don't bother\n                // trying to connect them.\n                return null;\n            }\n            // Otherwise, the two patterns each contain one instrument, but not the same instrument.\n            // Try to connect them.\n            const otherInstrument: Instrument = channel.instruments[otherPattern.instruments[0]];\n\n            if (forceContinue) {\n                // Even non-seamless instruments can be connected across patterns if forced.\n                return otherInstrument.getChord();\n            }\n\n            // Otherwise, check that both instruments are seamless across patterns.\n            const otherTransition: Transition = otherInstrument.getTransition();\n            if (transition.includeAdjacentPatterns && otherTransition.includeAdjacentPatterns && otherTransition.slides == transition.slides) {\n                return otherInstrument.getChord();\n            } else {\n                return null;\n            }\n        } else {\n            // If both patterns contain the same instrument, check that it is seamless across patterns.\n            return (forceContinue || transition.includeAdjacentPatterns) ? chord : null;\n        }\n    }\n\n    public static adjacentNotesHaveMatchingPitches(firstNote: Note, secondNote: Note): boolean {\n        if (firstNote.pitches.length != secondNote.pitches.length) return false;\n        const firstNoteInterval: number = firstNote.pins[firstNote.pins.length - 1].interval;\n        for (const pitch of firstNote.pitches) {\n            if (secondNote.pitches.indexOf(pitch + firstNoteInterval) == -1) return false;\n        }\n        return true;\n    }\n\n    private moveTonesIntoOrderedTempMatchedList(toneList: Deque<Tone>, notePitches: number[]): void {\n        // The tones are about to seamlessly transition to a new note. The pitches\n        // from the old note may or may not match any of the pitches in the new\n        // note, and not necessarily in order, but if any do match, they'll sound\n        // better if those tones continue to have the same pitch. Attempt to find\n        // the right spot for each old tone in the new chord if possible.\n\n        for (let i: number = 0; i < toneList.count(); i++) {\n            const tone: Tone = toneList.get(i);\n            const pitch: number = tone.pitches[0] + tone.lastInterval;\n            for (let j: number = 0; j < notePitches.length; j++) {\n                if (notePitches[j] == pitch) {\n                    this.tempMatchedPitchTones[j] = tone;\n                    toneList.remove(i);\n                    i--;\n                    break;\n                }\n            }\n        }\n\n        // Any tones that didn't get matched should just fill in the gaps.\n        while (toneList.count() > 0) {\n            const tone: Tone = toneList.popFront();\n            for (let j: number = 0; j < this.tempMatchedPitchTones.length; j++) {\n                if (this.tempMatchedPitchTones[j] == null) {\n                    this.tempMatchedPitchTones[j] = tone;\n                    break;\n                }\n            }\n        }\n    }\n\n    private determineCurrentActiveTones(song: Song, channelIndex: number, samplesPerTick: number, playSong: boolean): void {\n        const channel: Channel = song.channels[channelIndex];\n        const channelState: ChannelState = this.channels[channelIndex];\n        const pattern: Pattern | null = song.getPattern(channelIndex, this.bar);\n        const currentPart: number = this.getCurrentPart();\n        const currentTick: number = this.tick + Config.ticksPerPart * currentPart;\n\n        if (playSong && song.getChannelIsMod(channelIndex)) {\n\n            // For mod channels, notes aren't strictly arranged chronologically. Also, each pitch value could play or not play at a given time. So... a bit more computation involved!\n            // The same transition logic should apply though, even though it isn't really used by mod channels.\n            let notes: (Note | null)[] = [];\n            let prevNotes: (Note | null)[] = [];\n            let nextNotes: (Note | null)[] = [];\n            let fillCount: number = Config.modCount;\n            while (fillCount--) {\n                notes.push(null);\n                prevNotes.push(null);\n                nextNotes.push(null);\n            }\n\n            if (pattern != null && !channel.muted) {\n                for (let i: number = 0; i < pattern.notes.length; i++) {\n                    if (pattern.notes[i].end <= currentPart) {\n                        // Actually need to check which note starts closer to the start of this note.\n                        if (prevNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].end > (prevNotes[pattern.notes[i].pitches[0]] as Note).start) {\n                            prevNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\n                        }\n                    }\n                    else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {\n                        notes[pattern.notes[i].pitches[0]] = pattern.notes[i];\n                    }\n                    else if (pattern.notes[i].start > currentPart) {\n                        // Actually need to check which note starts closer to the end of this note.\n                        if (nextNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].start < (nextNotes[pattern.notes[i].pitches[0]] as Note).start) {\n                            nextNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\n                        }\n                    }\n                }\n            }\n\n            let modToneCount: number = 0;\n            const newInstrumentIndex: number = (song.patternInstruments && (pattern != null)) ? pattern!.instruments[0] : 0;\n            const instrumentState: InstrumentState = channelState.instruments[newInstrumentIndex];\n            const toneList: Deque<Tone> = instrumentState.activeModTones;\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\n                if (notes[mod] != null) {\n                    if (prevNotes[mod] != null && (prevNotes[mod] as Note).end != (notes[mod] as Note).start) prevNotes[mod] = null;\n                    if (nextNotes[mod] != null && (nextNotes[mod] as Note).start != (notes[mod] as Note).end) nextNotes[mod] = null;\n\n                }\n\n                if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {\n                    const sourceInstrumentState: InstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];\n                    const destInstrumentState: InstrumentState = channelState.instruments[newInstrumentIndex];\n                    while (sourceInstrumentState.activeModTones.count() > 0) {\n                        destInstrumentState.activeModTones.pushFront(sourceInstrumentState.activeModTones.popBack());\n                    }\n                }\n                channelState.singleSeamlessInstrument = newInstrumentIndex;\n\n                if (notes[mod] != null) {\n                    let prevNoteForThisInstrument: Note | null = prevNotes[mod];\n                    let nextNoteForThisInstrument: Note | null = nextNotes[mod];\n\n                    let forceContinueAtStart: boolean = false;\n                    let forceContinueAtEnd: boolean = false;\n                    const atNoteStart: boolean = (Config.ticksPerPart * notes[mod]!.start == currentTick) && this.isAtStartOfTick;\n                    let tone: Tone;\n                    if (toneList.count() <= modToneCount) {\n                        tone = this.newTone();\n                        toneList.pushBack(tone);\n                    } else if (atNoteStart && (prevNoteForThisInstrument == null)) {\n                        const oldTone: Tone = toneList.get(modToneCount);\n                        if (oldTone.isOnLastTick) {\n                            this.freeTone(oldTone);\n                        } else {\n                            this.releaseTone(instrumentState, oldTone);\n                        }\n                        tone = this.newTone();\n                        toneList.set(modToneCount, tone);\n                    } else {\n                        tone = toneList.get(modToneCount);\n                    }\n                    modToneCount++;\n\n                    for (let i: number = 0; i < notes[mod]!.pitches.length; i++) {\n                        tone.pitches[i] = notes[mod]!.pitches[i];\n                    }\n                    tone.pitchCount = notes[mod]!.pitches.length;\n                    tone.chordSize = 1;\n                    tone.instrumentIndex = newInstrumentIndex;\n                    tone.note = notes[mod];\n                    tone.noteStartPart = notes[mod]!.start;\n                    tone.noteEndPart = notes[mod]!.end;\n                    tone.prevNote = prevNoteForThisInstrument;\n                    tone.nextNote = nextNoteForThisInstrument;\n                    tone.prevNotePitchIndex = 0;\n                    tone.nextNotePitchIndex = 0;\n                    tone.atNoteStart = atNoteStart;\n                    tone.passedEndOfNote = false;\n                    tone.forceContinueAtStart = forceContinueAtStart;\n                    tone.forceContinueAtEnd = forceContinueAtEnd;\n                }\n            }\n            // Automatically free or release seamless tones if there's no new note to take over.\n            while (toneList.count() > modToneCount) {\n                const tone: Tone = toneList.popBack();\n                const channel: Channel = song.channels[channelIndex];\n                if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {\n                    const instrumentState: InstrumentState = this.channels[channelIndex].instruments[tone.instrumentIndex];\n                    this.releaseTone(instrumentState, tone);\n                } else {\n                    this.freeTone(tone);\n                }\n            }\n\n        }\n        else if (!song.getChannelIsMod(channelIndex)) {\n\n            let note: Note | null = null;\n            let prevNote: Note | null = null;\n            let nextNote: Note | null = null;\n\n            if (playSong && pattern != null && !channel.muted && (!this.isRecording || this.liveInputChannel != channelIndex)) {\n                for (let i: number = 0; i < pattern.notes.length; i++) {\n                    if (pattern.notes[i].end <= currentPart) {\n                        prevNote = pattern.notes[i];\n                    } else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {\n                        note = pattern.notes[i];\n                    } else if (pattern.notes[i].start > currentPart) {\n                        nextNote = pattern.notes[i];\n                        break;\n                    }\n                }\n\n                if (note != null) {\n                    if (prevNote != null && prevNote.end != note.start) prevNote = null;\n                    if (nextNote != null && nextNote.start != note.end) nextNote = null;\n                }\n            }\n\n            // Seamless tones from a pattern with a single instrument can be transferred to a different single seamless instrument in the next pattern.\n            if (pattern != null && (!song.layeredInstruments || channel.instruments.length == 1 || (song.patternInstruments && pattern.instruments.length == 1))) {\n                const newInstrumentIndex: number = song.patternInstruments ? pattern.instruments[0] : 0;\n                if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {\n                    const sourceInstrumentState: InstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];\n                    const destInstrumentState: InstrumentState = channelState.instruments[newInstrumentIndex];\n                    while (sourceInstrumentState.activeTones.count() > 0) {\n                        destInstrumentState.activeTones.pushFront(sourceInstrumentState.activeTones.popBack());\n                    }\n                }\n                channelState.singleSeamlessInstrument = newInstrumentIndex;\n            } else {\n                channelState.singleSeamlessInstrument = null;\n            }\n\n            for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\n                const toneList: Deque<Tone> = instrumentState.activeTones;\n                let toneCount: number = 0;\n                if ((note != null) && (!song.patternInstruments || (pattern!.instruments.indexOf(instrumentIndex) != -1))) {\n                    const instrument: Instrument = channel.instruments[instrumentIndex];\n                    let prevNoteForThisInstrument: Note | null = prevNote;\n                    let nextNoteForThisInstrument: Note | null = nextNote;\n\n                    const partsPerBar: Number = Config.partsPerBeat * song.beatsPerBar;\n                    const transition: Transition = instrument.getTransition();\n                    const chord: Chord = instrument.getChord();\n                    let forceContinueAtStart: boolean = false;\n                    let forceContinueAtEnd: boolean = false;\n                    let tonesInPrevNote: number = 0;\n                    let tonesInNextNote: number = 0;\n                    if (note.start == 0) {\n                        // If the beginning of the note coincides with the beginning of the pattern,\n                        let prevPattern: Pattern | null = (this.prevBar == null) ? null : song.getPattern(channelIndex, this.prevBar);\n                        if (prevPattern != null) {\n                            const lastNote: Note | null = (prevPattern.notes.length <= 0) ? null : prevPattern.notes[prevPattern.notes.length - 1];\n                            if (lastNote != null && lastNote.end == partsPerBar) {\n                                const patternForcesContinueAtStart: boolean = note.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(lastNote, note);\n                                const chordOfCompatibleInstrument: Chord | null = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern!, prevPattern, instrumentIndex, transition, chord, note, lastNote, patternForcesContinueAtStart);\n                                if (chordOfCompatibleInstrument != null) {\n                                    prevNoteForThisInstrument = lastNote;\n                                    tonesInPrevNote = chordOfCompatibleInstrument.singleTone ? 1 : prevNoteForThisInstrument.pitches.length\n                                    forceContinueAtStart = patternForcesContinueAtStart;\n                                }\n                            }\n                        }\n                    } else if (prevNoteForThisInstrument != null) {\n                        tonesInPrevNote = chord.singleTone ? 1 : prevNoteForThisInstrument.pitches.length\n                    }\n                    if (note.end == partsPerBar) {\n                        // If the end of the note coincides with the end of the pattern, look for an\n                        // adjacent note at the beginning of the next pattern.\n                        let nextPattern: Pattern | null = (this.nextBar == null) ? null : song.getPattern(channelIndex, this.nextBar);\n                        if (nextPattern != null) {\n                            const firstNote: Note | null = (nextPattern.notes.length <= 0) ? null : nextPattern.notes[0];\n                            if (firstNote != null && firstNote.start == 0) {\n                                const nextPatternForcesContinueAtStart: boolean = firstNote.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(note, firstNote);\n                                const chordOfCompatibleInstrument: Chord | null = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern!, nextPattern, instrumentIndex, transition, chord, note, firstNote, nextPatternForcesContinueAtStart);\n                                if (chordOfCompatibleInstrument != null) {\n                                    nextNoteForThisInstrument = firstNote;\n                                    tonesInNextNote = chordOfCompatibleInstrument.singleTone ? 1 : nextNoteForThisInstrument.pitches.length\n                                    forceContinueAtEnd = nextPatternForcesContinueAtStart;\n                                }\n                            }\n                        }\n                    } else if (nextNoteForThisInstrument != null) {\n                        tonesInNextNote = chord.singleTone ? 1 : nextNoteForThisInstrument.pitches.length\n                    }\n\n                    if (chord.singleTone) {\n                        const atNoteStart: boolean = (Config.ticksPerPart * note.start == currentTick);\n                        let tone: Tone;\n                        if (toneList.count() <= toneCount) {\n                            tone = this.newTone();\n                            toneList.pushBack(tone);\n                        } else if (atNoteStart && ((!(transition.isSeamless || instrument.clicklessTransition) && !forceContinueAtStart) || prevNoteForThisInstrument == null)) {\n                            const oldTone: Tone = toneList.get(toneCount);\n                            if (oldTone.isOnLastTick) {\n                                this.freeTone(oldTone);\n                            } else {\n                                this.releaseTone(instrumentState, oldTone);\n                            }\n                            tone = this.newTone();\n                            toneList.set(toneCount, tone);\n                        } else {\n                            tone = toneList.get(toneCount);\n                        }\n                        toneCount++;\n\n                        for (let i: number = 0; i < note.pitches.length; i++) {\n                            tone.pitches[i] = note.pitches[i];\n                        }\n                        tone.pitchCount = note.pitches.length;\n                        tone.chordSize = 1;\n                        tone.instrumentIndex = instrumentIndex;\n                        tone.note = note;\n                        tone.noteStartPart = note.start;\n                        tone.noteEndPart = note.end;\n                        tone.prevNote = prevNoteForThisInstrument;\n                        tone.nextNote = nextNoteForThisInstrument;\n                        tone.prevNotePitchIndex = 0;\n                        tone.nextNotePitchIndex = 0;\n                        tone.atNoteStart = atNoteStart;\n                        tone.passedEndOfNote = false;\n                        tone.forceContinueAtStart = forceContinueAtStart;\n                        tone.forceContinueAtEnd = forceContinueAtEnd;\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                    } else {\n                        const transition: Transition = instrument.getTransition();\n\n                        if (((transition.isSeamless && !transition.slides && chord.strumParts == 0) || forceContinueAtStart) && (Config.ticksPerPart * note.start == currentTick) && prevNoteForThisInstrument != null) {\n                            this.moveTonesIntoOrderedTempMatchedList(toneList, note.pitches);\n                        }\n\n                        let strumOffsetParts: number = 0;\n                        for (let i: number = 0; i < note.pitches.length; i++) {\n\n                            let prevNoteForThisTone: Note | null = (tonesInPrevNote > i) ? prevNoteForThisInstrument : null;\n                            let noteForThisTone: Note = note;\n                            let nextNoteForThisTone: Note | null = (tonesInNextNote > i) ? nextNoteForThisInstrument : null;\n                            let noteStartPart: number = noteForThisTone.start + strumOffsetParts;\n                            let passedEndOfNote: boolean = false;\n\n                            // Strumming may mean that a note's actual start time may be after the\n                            // note's displayed start time. If the note start hasn't been reached yet,\n                            // carry over the previous tone if available and seamless, otherwise skip\n                            // the new tone until it is ready to start.\n                            if (noteStartPart > currentPart) {\n                                if (toneList.count() > i && (transition.isSeamless || forceContinueAtStart) && prevNoteForThisTone != null) {\n                                    // Continue the previous note's chord until the current one takes over.\n                                    nextNoteForThisTone = noteForThisTone;\n                                    noteForThisTone = prevNoteForThisTone;\n                                    prevNoteForThisTone = null;\n                                    noteStartPart = noteForThisTone.start + strumOffsetParts;\n                                    passedEndOfNote = true;\n                                } else {\n                                    // This and the rest of the tones in the chord shouldn't start yet.\n                                    break;\n                                }\n                            }\n\n                            let noteEndPart: number = noteForThisTone.end;\n                            if ((transition.isSeamless || forceContinueAtStart) && nextNoteForThisTone != null) {\n                                noteEndPart = Math.min(Config.partsPerBeat * this.song!.beatsPerBar, noteEndPart + strumOffsetParts);\n                            }\n                            if ((!transition.continues && !forceContinueAtStart) || prevNoteForThisTone == null) {\n                                strumOffsetParts += chord.strumParts;\n                            }\n\n                            const atNoteStart: boolean = (Config.ticksPerPart * noteStartPart == currentTick);\n                            let tone: Tone;\n                            if (this.tempMatchedPitchTones[toneCount] != null) {\n                                tone = this.tempMatchedPitchTones[toneCount]!;\n                                this.tempMatchedPitchTones[toneCount] = null;\n                                toneList.pushBack(tone);\n                            } else if (toneList.count() <= toneCount) {\n                                tone = this.newTone();\n                                toneList.pushBack(tone);\n                            } else if (atNoteStart && ((!transition.isSeamless && !forceContinueAtStart) || prevNoteForThisTone == null)) {\n                                const oldTone: Tone = toneList.get(toneCount);\n                                if (oldTone.isOnLastTick) {\n                                    this.freeTone(oldTone);\n                                } else {\n                                    this.releaseTone(instrumentState, oldTone);\n                                }\n                                tone = this.newTone();\n                                toneList.set(toneCount, tone);\n                            } else {\n                                tone = toneList.get(toneCount);\n                            }\n                            toneCount++;\n\n                            tone.pitches[0] = noteForThisTone.pitches[i];\n                            tone.pitchCount = 1;\n                            tone.chordSize = noteForThisTone.pitches.length;\n                            tone.instrumentIndex = instrumentIndex;\n                            tone.note = noteForThisTone;\n                            tone.noteStartPart = noteStartPart;\n                            tone.noteEndPart = noteEndPart;\n                            tone.prevNote = prevNoteForThisTone;\n                            tone.nextNote = nextNoteForThisTone;\n                            tone.prevNotePitchIndex = i;\n                            tone.nextNotePitchIndex = i;\n                            tone.atNoteStart = atNoteStart;\n                            tone.passedEndOfNote = passedEndOfNote;\n                            tone.forceContinueAtStart = forceContinueAtStart && prevNoteForThisTone != null;\n                            tone.forceContinueAtEnd = forceContinueAtEnd && nextNoteForThisTone != null;\n                            this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                        }\n                    }\n                }\n                // Automatically free or release seamless tones if there's no new note to take over.\n                while (toneList.count() > toneCount) {\n                    const tone: Tone = toneList.popBack();\n                    const channel: Channel = song.channels[channelIndex];\n                    if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {\n                        const instrumentState: InstrumentState = channelState.instruments[tone.instrumentIndex];\n                        this.releaseTone(instrumentState, tone);\n                    } else {\n                        this.freeTone(tone);\n                    }\n                }\n\n                this.clearTempMatchedPitchTones(toneCount, instrumentState);\n            }\n        }\n    }\n\n    private clearTempMatchedPitchTones(toneCount: number, instrumentState: InstrumentState): void {\n        for (let i: number = toneCount; i < this.tempMatchedPitchTones.length; i++) {\n            const oldTone: Tone | null = this.tempMatchedPitchTones[i];\n            if (oldTone != null) {\n                if (oldTone.isOnLastTick) {\n                    this.freeTone(oldTone);\n                } else {\n                    this.releaseTone(instrumentState, oldTone);\n                }\n                this.tempMatchedPitchTones[i] = null;\n            }\n        }\n    }\n\n\n    private playTone(channelIndex: number, bufferIndex: number, runLength: number, tone: Tone): void {\n        const channelState: ChannelState = this.channels[channelIndex];\n        const instrumentState: InstrumentState = channelState.instruments[tone.instrumentIndex];\n\n        if (instrumentState.synthesizer != null) instrumentState.synthesizer!(this, bufferIndex, runLength, tone, instrumentState);\n        tone.envelopeComputer.clearEnvelopes();\n    }\n\n    // Computes mod note position at the start and end of the window and \"plays\" the mod tone, setting appropriate mod data.\n    private playModTone(song: Song, channelIndex: number, samplesPerTick: number, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\n        const channel: Channel = song.channels[channelIndex];\n        const instrument: Instrument = channel.instruments[tone.instrumentIndex];\n\n        if (tone.note != null) {\n            const ticksIntoBar: number = this.getTicksIntoBar();\n            const partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\n            const partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\n            const tickSampleCountdown: number = this.tickSampleCountdown;\n            const startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\n            const endRatio: number = 1.0 - (tickSampleCountdown - roundedSamplesPerTick) / samplesPerTick;\n            const partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\n            const partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\n            const tickTimeStart: number = Config.ticksPerPart * partTimeStart;\n            const tickTimeEnd: number = Config.ticksPerPart * partTimeEnd;\n            const endPinIndex: number = tone.note.getEndPinIndex(this.getCurrentPart());\n            const startPin: NotePin = tone.note.pins[endPinIndex - 1];\n            const endPin: NotePin = tone.note.pins[endPinIndex];\n            const startPinTick: number = (tone.note.start + startPin.time) * Config.ticksPerPart;\n            const endPinTick: number = (tone.note.start + endPin.time) * Config.ticksPerPart;\n            const ratioStart: number = (tickTimeStart - startPinTick) / (endPinTick - startPinTick);\n            const ratioEnd: number = (tickTimeEnd - startPinTick) / (endPinTick - startPinTick);\n            tone.expression = startPin.size + (endPin.size - startPin.size) * ratioStart;\n            tone.expressionDelta = (startPin.size + (endPin.size - startPin.size) * ratioEnd) - tone.expression;\n\n            Synth.modSynth(this, bufferIndex, roundedSamplesPerTick, tone, instrument);\n        }\n    }\n\n    private static computeChordExpression(chordSize: number): number {\n        return 1.0 / ((chordSize - 1) * 0.25 + 1.0);\n    }\n\n    private computeTone(song: Song, channelIndex: number, samplesPerTick: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\n        const roundedSamplesPerTick: number = Math.ceil(samplesPerTick);\n        const channel: Channel = song.channels[channelIndex];\n        const channelState: ChannelState = this.channels[channelIndex];\n        const instrument: Instrument = channel.instruments[tone.instrumentIndex];\n        const instrumentState: InstrumentState = channelState.instruments[tone.instrumentIndex];\n        instrumentState.awake = true;\n        instrumentState.tonesAddedInThisTick = true;\n        if (!instrumentState.computed) {\n            instrumentState.compute(this, instrument, samplesPerTick, roundedSamplesPerTick, tone, channelIndex, tone.instrumentIndex);\n        }\n        const transition: Transition = instrument.getTransition();\n        const chord: Chord = instrument.getChord();\n        const chordExpression: number = chord.singleTone ? 1.0 : Synth.computeChordExpression(tone.chordSize);\n        const isNoiseChannel: boolean = song.getChannelIsNoise(channelIndex);\n        const intervalScale: number = isNoiseChannel ? Config.noiseInterval : 1;\n        const secondsPerPart: number = Config.ticksPerPart * samplesPerTick / this.samplesPerSecond;\n        const sampleTime: number = 1.0 / this.samplesPerSecond;\n        const beatsPerPart: number = 1.0 / Config.partsPerBeat;\n        const ticksIntoBar: number = this.getTicksIntoBar();\n        const partTimeStart: number = (ticksIntoBar) / Config.ticksPerPart;\n        const partTimeEnd: number = (ticksIntoBar + 1.0) / Config.ticksPerPart;\n        const currentPart: number = this.getCurrentPart();\n\n        let specialIntervalMult: number = 1.0;\n        tone.specialIntervalExpressionMult = 1.0;\n\n        //if (synth.isModActive(ModSetting.mstPan, channelIndex, tone.instrumentIndex)) {\n        //    startPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, false);\n        //    endPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, true);\n        //}\n\n        let toneIsOnLastTick: boolean = shouldFadeOutFast;\n        let intervalStart: number = 0.0;\n        let intervalEnd: number = 0.0;\n        let fadeExpressionStart: number = 1.0;\n        let fadeExpressionEnd: number = 1.0;\n        let chordExpressionStart: number = chordExpression;\n        let chordExpressionEnd: number = chordExpression;\n\n        let expressionReferencePitch: number = 16; // A low \"E\" as a MIDI pitch.\n        let basePitch: number = Config.keys[song.key].basePitch + (Config.pitchesPerOctave * song.octave);\n        let baseExpression: number = 1.0;\n        let pitchDamping: number = 48;\n        if (instrument.type == InstrumentType.spectrum) {\n            baseExpression = Config.spectrumBaseExpression;\n            if (isNoiseChannel) {\n                basePitch = Config.spectrumBasePitch;\n                baseExpression *= 2.0; // Note: spectrum is louder for drum channels than pitch channels!\n            }\n            expressionReferencePitch = Config.spectrumBasePitch;\n            pitchDamping = 28;\n        } else if (instrument.type == InstrumentType.drumset) {\n            basePitch = Config.spectrumBasePitch;\n            baseExpression = Config.drumsetBaseExpression;\n            expressionReferencePitch = basePitch;\n        } else if (instrument.type == InstrumentType.noise) {\n            // dogebox2 code, makes basic noise affected by keys in pitch channels\n            basePitch = isNoiseChannel ? Config.chipNoises[instrument.chipNoise].basePitch : basePitch + Config.chipNoises[instrument.chipNoise].basePitch - 12;\n            // maybe also lower expression in pitch channels?\n            baseExpression = Config.noiseBaseExpression;\n            expressionReferencePitch = basePitch;\n            pitchDamping = Config.chipNoises[instrument.chipNoise].isSoft ? 24.0 : 60.0;\n        } else if (instrument.type == InstrumentType.fm || instrument.type == InstrumentType.fm6op) {\n            baseExpression = Config.fmBaseExpression;\n        } else if (instrument.type == InstrumentType.chip){\n                baseExpression = Config.chipBaseExpression;\n\t\t\t\tif (Config.chipWaves[instrument.chipWave].isCustomSampled) {\n\t\t\t\t\tif (Config.chipWaves[instrument.chipWave].isPercussion){\n\t\t\t\t\t\tbasePitch = -84.37 + Math.log2(Config.chipWaves[instrument.chipWave].samples.length/Config.chipWaves[instrument.chipWave].sampleRate!) * -12 - (-60 + Config.chipWaves[instrument.chipWave].rootKey!);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\telse {\n\t\t\t\t\t\tbasePitch += -96.37 + Math.log2(Config.chipWaves[instrument.chipWave].samples.length/Config.chipWaves[instrument.chipWave].sampleRate!) * -12 - (-60 + Config.chipWaves[instrument.chipWave].rootKey!); \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (Config.chipWaves[instrument.chipWave].isSampled && !Config.chipWaves[instrument.chipWave].isPercussion) {\n\t\t\t\t\t\tbasePitch = basePitch - 63 + Config.chipWaves[instrument.chipWave].extraSampleDetune!\n\t\t\t\t\t}\n\t\t\t\t\telse if (Config.chipWaves[instrument.chipWave].isSampled && Config.chipWaves[instrument.chipWave].isPercussion) {\n\t\t\t\t\tbasePitch = -51 + Config.chipWaves[instrument.chipWave].extraSampleDetune!;\n\t\t\t\t\t}\n\t\t\t\t}\n            } else if (instrument.type == InstrumentType.customChipWave) {\n            baseExpression = Config.chipBaseExpression;\n        } else if (instrument.type == InstrumentType.harmonics) {\n            baseExpression = Config.harmonicsBaseExpression;\n        } else if (instrument.type == InstrumentType.pwm) {\n            baseExpression = Config.pwmBaseExpression;\n        } else if (instrument.type == InstrumentType.supersaw) {\n\t\t\tbaseExpression = Config.supersawBaseExpression;\n        } else if (instrument.type == InstrumentType.pickedString) {\n            baseExpression = Config.pickedStringBaseExpression;\n        } else if (instrument.type == InstrumentType.mod) {\n            baseExpression = 1.0;\n            expressionReferencePitch = 0;\n            pitchDamping = 1.0;\n            basePitch = 0;\n        } else {\n            throw new Error(\"Unknown instrument type in computeTone.\");\n        }\n\n        if ((tone.atNoteStart && !transition.isSeamless && !tone.forceContinueAtStart) || tone.freshlyAllocated) {\n            tone.reset();\n\t\t\t\t\t\t // advloop addition\n                const chipWaveLength = Config.rawRawChipWaves[instrument.chipWave].samples.length - 1;\n                const firstOffset = instrument.chipWaveStartOffset / chipWaveLength;\n                // const lastOffset = (chipWaveLength - 0.01) / chipWaveLength;\n                // @TODO: This is silly and I should actually figure out how to\n                // properly keep lastOffset as 1.0 and not get it wrapped back\n                // to 0 once it's in `Synth.loopableChipSynth`.\n                const lastOffset = 0.999999999999999;\n                for (let i = 0; i < Config.maxPitchOrOperatorCount; i++) {\n                    tone.phases[i] = instrument.chipWavePlayBackwards ? Math.max(0, Math.min(lastOffset, firstOffset)) : Math.max(0, firstOffset);\n                    tone.directions[i] = instrument.chipWavePlayBackwards ? -1 : 1;\n                    tone.chipWaveCompletions[i] = 0;\n                    tone.chipWavePrevWaves[i] = 0;\n                    tone.chipWaveCompletionsLastWave[i] = 0;\n                }\n                // console.log(tone.directions);\n                // advloop addition\n        }\n        tone.freshlyAllocated = false;\n\n        for (let i: number = 0; i < Config.maxPitchOrOperatorCount; i++) {\n            tone.phaseDeltas[i] = 0.0;\n            tone.phaseDeltaScales[i] = 0.0;\n            tone.operatorExpressions[i] = 0.0;\n            tone.operatorExpressionDeltas[i] = 0.0;\n        }\n        tone.expression = 0.0;\n        tone.expressionDelta = 0.0;\n        for (let i: number = 0; i < Config.operatorCount; i++) {\n            tone.operatorWaves[i] = Synth.getOperatorWave(instrument.operators[i].waveform, instrument.operators[i].pulseWidth);\n        }\n\n        if (released) {\n            const startTicksSinceReleased: number = tone.ticksSinceReleased;\n            const endTicksSinceReleased: number = tone.ticksSinceReleased + 1.0;\n            intervalStart = intervalEnd = tone.lastInterval;\n            const fadeOutTicks: number = Math.abs(instrument.getFadeOutTicks());\n            fadeExpressionStart = Synth.noteSizeToVolumeMult((1.0 - startTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);\n            fadeExpressionEnd = Synth.noteSizeToVolumeMult((1.0 - endTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);\n\n            if (shouldFadeOutFast) {\n                fadeExpressionEnd = 0.0;\n            }\n\n            if (tone.ticksSinceReleased + 1 >= fadeOutTicks) toneIsOnLastTick = true;\n        } else if (tone.note == null) {\n            fadeExpressionStart = fadeExpressionEnd = 1.0;\n            tone.lastInterval = 0;\n            tone.ticksSinceReleased = 0;\n            tone.liveInputSamplesHeld += roundedSamplesPerTick;\n        } else {\n            const note: Note = tone.note;\n            const nextNote: Note | null = tone.nextNote;\n\n            const noteStartPart: number = tone.noteStartPart;\n            const noteEndPart: number = tone.noteEndPart;\n\n\n            const endPinIndex: number = note.getEndPinIndex(currentPart);\n            const startPin: NotePin = note.pins[endPinIndex - 1];\n            const endPin: NotePin = note.pins[endPinIndex];\n            const noteStartTick: number = noteStartPart * Config.ticksPerPart;\n            const noteEndTick: number = noteEndPart * Config.ticksPerPart;\n            const pinStart: number = (note.start + startPin.time) * Config.ticksPerPart;\n            const pinEnd: number = (note.start + endPin.time) * Config.ticksPerPart;\n\n            tone.ticksSinceReleased = 0;\n\n            const tickTimeStart: number = currentPart * Config.ticksPerPart + this.tick;\n            const tickTimeEnd: number = tickTimeStart + 1.0;\n            const noteTicksPassedTickStart: number = tickTimeStart - noteStartTick;\n            const noteTicksPassedTickEnd: number = tickTimeEnd - noteStartTick;\n            const pinRatioStart: number = Math.min(1.0, (tickTimeStart - pinStart) / (pinEnd - pinStart));\n            const pinRatioEnd: number = Math.min(1.0, (tickTimeEnd - pinStart) / (pinEnd - pinStart));\n            fadeExpressionStart = 1.0;\n            fadeExpressionEnd = 1.0;\n            intervalStart = startPin.interval + (endPin.interval - startPin.interval) * pinRatioStart;\n            intervalEnd = startPin.interval + (endPin.interval - startPin.interval) * pinRatioEnd;\n            tone.lastInterval = intervalEnd;\n\n            if ((!transition.isSeamless && !tone.forceContinueAtEnd) || nextNote == null) {\n                const fadeOutTicks: number = -instrument.getFadeOutTicks();\n                if (fadeOutTicks > 0.0) {\n                    // If the tone should fade out before the end of the note, do so here.\n                    const noteLengthTicks: number = noteEndTick - noteStartTick;\n                    fadeExpressionStart *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickStart) / fadeOutTicks);\n                    fadeExpressionEnd *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickEnd) / fadeOutTicks);\n                    if (tickTimeEnd >= noteStartTick + noteLengthTicks) toneIsOnLastTick = true;\n                }\n            }\n\n        }\n\n        tone.isOnLastTick = toneIsOnLastTick;\n\n        let tmpNoteFilter: FilterSettings = instrument.noteFilter;\n        let startPoint: FilterControlPoint;\n        let endPoint: FilterControlPoint;\n\n        if (instrument.noteFilterType) {\n            // Simple EQ filter (old style). For analysis, using random filters from normal style since they are N/A in this context.\n            const noteFilterSettingsStart: FilterSettings = instrument.noteFilter;\n            if (instrument.noteSubFilters[1] == null)\n                instrument.noteSubFilters[1] = new FilterSettings();\n            const noteFilterSettingsEnd: FilterSettings = instrument.noteSubFilters[1];\n\n            // Change location based on slider values\n            let startSimpleFreq: number = instrument.noteFilterSimpleCut;\n            let startSimpleGain: number = instrument.noteFilterSimplePeak;\n            let endSimpleFreq: number = instrument.noteFilterSimpleCut;\n            let endSimpleGain: number = instrument.noteFilterSimplePeak;\n            let filterChanges: boolean = false;\n\n            if (this.isModActive(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex)) {\n                startSimpleFreq = this.getModValue(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex, false);\n                endSimpleFreq = this.getModValue(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex, true);\n                filterChanges = true;\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex)) {\n                startSimpleGain = this.getModValue(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex, false);\n                endSimpleGain = this.getModValue(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex, true);\n                filterChanges = true;\n            }\n\n            noteFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, !filterChanges);\n            noteFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain, !filterChanges);\n\n            startPoint = noteFilterSettingsStart.controlPoints[0];\n            endPoint = noteFilterSettingsEnd.controlPoints[0];\n\n            // Temporarily override so that envelope computer uses appropriate computed note filter\n            instrument.noteFilter = noteFilterSettingsStart;\n            instrument.tmpNoteFilterStart = noteFilterSettingsStart;\n        }\n\n        // Compute envelopes *after* resetting the tone, otherwise the envelope computer gets reset too!\n        const envelopeComputer: EnvelopeComputer = tone.envelopeComputer;\n        envelopeComputer.computeEnvelopes(instrument, currentPart, Config.ticksPerPart * partTimeStart, samplesPerTick / this.samplesPerSecond, tone);\n        const envelopeStarts: number[] = tone.envelopeComputer.envelopeStarts;\n        const envelopeEnds: number[] = tone.envelopeComputer.envelopeEnds;\n        instrument.noteFilter = tmpNoteFilter;\n\n        if (tone.note != null && transition.slides) {\n            // Slide interval and chordExpression at the start and/or end of the note if necessary.\n            const prevNote: Note | null = tone.prevNote;\n            const nextNote: Note | null = tone.nextNote;\n            if (prevNote != null) {\n                const intervalDiff: number = prevNote.pitches[tone.prevNotePitchIndex] + prevNote.pins[prevNote.pins.length - 1].interval - tone.pitches[0];\n                if (envelopeComputer.prevSlideStart) intervalStart += intervalDiff * envelopeComputer.prevSlideRatioStart;\n                if (envelopeComputer.prevSlideEnd) intervalEnd += intervalDiff * envelopeComputer.prevSlideRatioEnd;\n                if (!chord.singleTone) {\n                    const chordSizeDiff: number = prevNote.pitches.length - tone.chordSize;\n                    if (envelopeComputer.prevSlideStart) chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioStart);\n                    if (envelopeComputer.prevSlideEnd) chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioEnd);\n                }\n            }\n            if (nextNote != null) {\n                const intervalDiff: number = nextNote.pitches[tone.nextNotePitchIndex] - (tone.pitches[0] + tone.note.pins[tone.note.pins.length - 1].interval);\n                if (envelopeComputer.nextSlideStart) intervalStart += intervalDiff * envelopeComputer.nextSlideRatioStart;\n                if (envelopeComputer.nextSlideEnd) intervalEnd += intervalDiff * envelopeComputer.nextSlideRatioEnd;\n                if (!chord.singleTone) {\n                    const chordSizeDiff: number = nextNote.pitches.length - tone.chordSize;\n                    if (envelopeComputer.nextSlideStart) chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioStart);\n                    if (envelopeComputer.nextSlideEnd) chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioEnd);\n                }\n            }\n        }\n\n        if (effectsIncludePitchShift(instrument.effects)) {\n            let pitchShift: number = Config.justIntonationSemitones[instrument.pitchShift] / intervalScale;\n            let pitchShiftScalarStart: number = 1.0;\n            let pitchShiftScalarEnd: number = 1.0;\n            if (this.isModActive(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex)) {\n                pitchShift = Config.justIntonationSemitones[Config.justIntonationSemitones.length - 1];\n                pitchShiftScalarStart = (this.getModValue(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pitchShiftCenter);\n                pitchShiftScalarEnd = (this.getModValue(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pitchShiftCenter);\n            }\n            const envelopeStart: number = envelopeStarts[EnvelopeComputeIndex.pitchShift];\n            const envelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.pitchShift];\n            intervalStart += pitchShift * envelopeStart * pitchShiftScalarStart;\n            intervalEnd += pitchShift * envelopeEnd * pitchShiftScalarEnd;\n        }\n        if (effectsIncludeDetune(instrument.effects) || this.isModActive(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex)) {\n            const envelopeStart: number = envelopeStarts[EnvelopeComputeIndex.detune];\n            const envelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.detune];\n            let modDetuneStart: number = instrument.detune;\n            let modDetuneEnd: number = instrument.detune;\n            if (this.isModActive(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex)) {\n                modDetuneStart = this.getModValue(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex, false) + Config.detuneCenter;\n                modDetuneEnd = this.getModValue(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex, true) + Config.detuneCenter;\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex)) {\n                modDetuneStart += 4 * this.getModValue(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex, false);\n                modDetuneEnd += 4 * this.getModValue(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex, true);\n            }\n            intervalStart += Synth.detuneToCents((modDetuneStart) * envelopeStart) * Config.pitchesPerOctave / (12.0 * 100.0);\n            intervalEnd += Synth.detuneToCents((modDetuneEnd) * envelopeEnd) * Config.pitchesPerOctave / (12.0 * 100.0);\n        }\n\n        if (effectsIncludeVibrato(instrument.effects)) {\n            let delayTicks: number;\n            let vibratoAmplitudeStart: number;\n            let vibratoAmplitudeEnd: number;\n            // Custom vibrato\n            if (instrument.vibrato == Config.vibratos.length) {\n                delayTicks = instrument.vibratoDelay * 2; // Delay was changed from parts to ticks in BB v9\n                // Special case: if vibrato delay is max, NEVER vibrato.\n                if (instrument.vibratoDelay == Config.modulators.dictionary[\"vibrato delay\"].maxRawVol)\n                    delayTicks = Number.POSITIVE_INFINITY;\n                vibratoAmplitudeStart = instrument.vibratoDepth;\n                vibratoAmplitudeEnd = vibratoAmplitudeStart;\n            } else {\n                delayTicks = Config.vibratos[instrument.vibrato].delayTicks;\n                vibratoAmplitudeStart = Config.vibratos[instrument.vibrato].amplitude;\n                vibratoAmplitudeEnd = vibratoAmplitudeStart;\n            }\n\n            if (this.isModActive(Config.modulators.dictionary[\"vibrato delay\"].index, channelIndex, tone.instrumentIndex)) {\n                delayTicks = this.getModValue(Config.modulators.dictionary[\"vibrato delay\"].index, channelIndex, tone.instrumentIndex, false) * 2; // Delay was changed from parts to ticks in BB v9\n                if (delayTicks == Config.modulators.dictionary[\"vibrato delay\"].maxRawVol * 2)\n                    delayTicks = Number.POSITIVE_INFINITY;\n\n            }\n\n            if (this.isModActive(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex)) {\n                vibratoAmplitudeStart = this.getModValue(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex, false) / 25;\n                vibratoAmplitudeEnd = this.getModValue(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex, true) / 25;\n            }\n\n\n            // To maintain pitch continuity, (mostly for picked string which retriggers impulse\n            // otherwise) remember the vibrato at the end of this run and reuse it at the start\n            // of the next run if available.\n            let vibratoStart: number;\n            if (tone.prevVibrato != null) {\n                vibratoStart = tone.prevVibrato;\n            } else {\n                let lfoStart: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrument.LFOtime);\n                const vibratoDepthEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.vibratoDepth];\n                vibratoStart = vibratoAmplitudeStart * lfoStart * vibratoDepthEnvelopeStart;\n                if (delayTicks > 0.0) {\n                    const ticksUntilVibratoStart: number = delayTicks - envelopeComputer.noteTicksStart;\n                    vibratoStart *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoStart / 2.0));\n                }\n            }\n\n            let lfoEnd: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrument.nextLFOtime);\n            const vibratoDepthEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.vibratoDepth];\n            if (instrument.type != InstrumentType.mod) {\n                let vibratoEnd: number = vibratoAmplitudeEnd * lfoEnd * vibratoDepthEnvelopeEnd;\n                if (delayTicks > 0.0) {\n                    const ticksUntilVibratoEnd: number = delayTicks - envelopeComputer.noteTicksEnd;\n                    vibratoEnd *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoEnd / 2.0));\n                }\n\n                tone.prevVibrato = vibratoEnd;\n\n                intervalStart += vibratoStart;\n                intervalEnd += vibratoEnd;\n            }\n        }\n\n        if ((!transition.isSeamless && !tone.forceContinueAtStart) || tone.prevNote == null) {\n            // Fade in the beginning of the note.\n            const fadeInSeconds: number = instrument.getFadeInSeconds();\n            if (fadeInSeconds > 0.0) {\n                fadeExpressionStart *= Math.min(1.0, envelopeComputer.noteSecondsStart / fadeInSeconds);\n                fadeExpressionEnd *= Math.min(1.0, envelopeComputer.noteSecondsEnd / fadeInSeconds);\n            }\n        }\n\n\n        if (instrument.type == InstrumentType.drumset && tone.drumsetPitch == null) {\n            // It's possible that the note will change while the user is editing it,\n            // but the tone's pitches don't get updated because the tone has already\n            // ended and is fading out. To avoid an array index out of bounds error, clamp the pitch.\n            tone.drumsetPitch = tone.pitches[0];\n            if (tone.note != null) tone.drumsetPitch += tone.note.pickMainInterval();\n            tone.drumsetPitch = Math.max(0, Math.min(Config.drumCount - 1, tone.drumsetPitch));\n        }\n\n        let noteFilterExpression: number = envelopeComputer.lowpassCutoffDecayVolumeCompensation;\n        if (!effectsIncludeNoteFilter(instrument.effects)) {\n            tone.noteFilterCount = 0;\n        } else {\n\n            const noteAllFreqsEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterAllFreqs];\n            const noteAllFreqsEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterAllFreqs];\n\n            // Simple note filter\n            if (instrument.noteFilterType) {\n                const noteFreqEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterFreq0];\n                const noteFreqEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterFreq0];\n                const notePeakEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterGain0];\n                const notePeakEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterGain0];\n\n                startPoint!.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);\n                endPoint!.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);\n\n                if (tone.noteFilters.length < 1) tone.noteFilters[0] = new DynamicBiquadFilter();\n                tone.noteFilters[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint!.type == FilterType.lowPass);\n                noteFilterExpression *= startPoint!.getVolumeCompensationMult();\n\n                tone.noteFilterCount = 1;\n            }\n            else {\n                const noteFilterSettings: FilterSettings = (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter;\n\n                for (let i: number = 0; i < noteFilterSettings.controlPointCount; i++) {\n                    const noteFreqEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterFreq0 + i];\n                    const noteFreqEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterFreq0 + i];\n                    const notePeakEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterGain0 + i];\n                    const notePeakEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterGain0 + i];\n                    let startPoint: FilterControlPoint = noteFilterSettings.controlPoints[i];\n                    const endPoint: FilterControlPoint = (instrument.tmpNoteFilterEnd != null && instrument.tmpNoteFilterEnd.controlPoints[i] != null) ? instrument.tmpNoteFilterEnd.controlPoints[i] : noteFilterSettings.controlPoints[i];\n\n                    // If switching dot type, do it all at once and do not try to interpolate since no valid interpolation exists.\n                    if (startPoint.type != endPoint.type) {\n                        startPoint = endPoint;\n                    }\n\n                    startPoint.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);\n                    endPoint.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);\n                    if (tone.noteFilters.length <= i) tone.noteFilters[i] = new DynamicBiquadFilter();\n                    tone.noteFilters[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n                    noteFilterExpression *= startPoint.getVolumeCompensationMult();\n                }\n                tone.noteFilterCount = noteFilterSettings.controlPointCount;\n            }\n        }\n\n        if (instrument.type == InstrumentType.drumset) {\n            const drumsetFilterEnvelope: Envelope = instrument.getDrumsetEnvelope(tone.drumsetPitch!);\n            // If the drumset lowpass cutoff decays, compensate by increasing expression.\n            noteFilterExpression *= EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(drumsetFilterEnvelope)\n\n            // Drumset filters use the same envelope timing as the rest of the envelopes, but do not include support for slide transitions.\n            let drumsetFilterEnvelopeStart: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.noteSecondsStart, beatsPerPart * partTimeStart, envelopeComputer.noteSizeStart);\n            let drumsetFilterEnvelopeEnd: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.noteSecondsEnd, beatsPerPart * partTimeEnd, envelopeComputer.noteSizeEnd);\n\n            // Apply slide interpolation to drumset envelope.\n            if (envelopeComputer.prevSlideStart) {\n                const other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.prevNoteSecondsStart, beatsPerPart * partTimeStart, envelopeComputer.prevNoteSize);\n                drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * envelopeComputer.prevSlideRatioStart;\n            }\n            if (envelopeComputer.prevSlideEnd) {\n                const other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, envelopeComputer.prevNoteSecondsEnd, beatsPerPart * partTimeEnd, envelopeComputer.prevNoteSize);\n                drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * envelopeComputer.prevSlideRatioEnd;\n            }\n            if (envelopeComputer.nextSlideStart) {\n                const other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, 0.0, beatsPerPart * partTimeStart, envelopeComputer.nextNoteSize);\n                drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * envelopeComputer.nextSlideRatioStart;\n            }\n            if (envelopeComputer.nextSlideEnd) {\n                const other: number = EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, 0.0, beatsPerPart * partTimeEnd, envelopeComputer.nextNoteSize);\n                drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * envelopeComputer.nextSlideRatioEnd;\n            }\n\n            const point: FilterControlPoint = this.tempDrumSetControlPoint;\n            point.type = FilterType.lowPass;\n            point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(0.5);\n            point.freq = FilterControlPoint.getRoundedSettingValueFromHz(8000.0);\n            // Drumset envelopes are warped to better imitate the legacy simplified 2nd order lowpass at ~48000Hz that I used to use.\n            point.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeStart * (1.0 + drumsetFilterEnvelopeStart), 1.0);\n            point.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeEnd * (1.0 + drumsetFilterEnvelopeEnd), 1.0);\n            if (tone.noteFilters.length == tone.noteFilterCount) tone.noteFilters[tone.noteFilterCount] = new DynamicBiquadFilter();\n            tone.noteFilters[tone.noteFilterCount].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, true);\n            tone.noteFilterCount++;\n        }\n\n        noteFilterExpression = Math.min(3.0, noteFilterExpression);\n\n        if (instrument.type == InstrumentType.fm || instrument.type == InstrumentType.fm6op) {\n            // phase modulation!\n\n            let sineExpressionBoost: number = 1.0;\n            let totalCarrierExpression: number = 0.0;\n\n            let arpeggioInterval: number = 0;\n            const arpeggiates: boolean = chord.arpeggiates;\n            if (tone.pitchCount > 1 && arpeggiates) {\n                const arpeggio: number = Math.floor(instrument.arpTime / Config.ticksPerArpeggio);\n                arpeggioInterval = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\n            }\n\n\n            const carrierCount: number = (instrument.type == InstrumentType.fm6op ? instrument.customAlgorithm.carrierCount : Config.algorithms[instrument.algorithm].carrierCount);\n            for (let i: number = 0; i < (instrument.type == InstrumentType.fm6op? 6 : Config.operatorCount); i++) {\n\n                const associatedCarrierIndex: number = (instrument.type == InstrumentType.fm6op ? instrument.customAlgorithm.associatedCarrier[i]-1:Config.algorithms[instrument.algorithm].associatedCarrier[i] - 1);\n                const pitch: number = tone.pitches[arpeggiates ? 0 : ((i < tone.pitchCount) ? i : ((associatedCarrierIndex < tone.pitchCount) ? associatedCarrierIndex : 0))];\n                const freqMult = Config.operatorFrequencies[instrument.operators[i].frequency].mult;\n                const interval = Config.operatorCarrierInterval[associatedCarrierIndex] + arpeggioInterval;\n                const pitchStart: number = basePitch + (pitch + intervalStart) * intervalScale + interval;\n                const pitchEnd: number = basePitch + (pitch + intervalEnd) * intervalScale + interval;\n                const baseFreqStart: number = Instrument.frequencyFromPitch(pitchStart);\n                const baseFreqEnd: number = Instrument.frequencyFromPitch(pitchEnd);\n                const hzOffset: number = Config.operatorFrequencies[instrument.operators[i].frequency].hzOffset;\n                const targetFreqStart: number = freqMult * baseFreqStart + hzOffset;\n                const targetFreqEnd: number = freqMult * baseFreqEnd + hzOffset;\n\n                \n                const freqEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.operatorFrequency0 + i];\n                const freqEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.operatorFrequency0 + i];\n                let freqStart: number;\n                let freqEnd: number;\n                if (freqEnvelopeStart != 1.0 || freqEnvelopeEnd != 1.0) {\n                    freqStart = Math.pow(2.0, Math.log2(targetFreqStart / baseFreqStart) * freqEnvelopeStart) * baseFreqStart;\n                    freqEnd = Math.pow(2.0, Math.log2(targetFreqEnd / baseFreqEnd) * freqEnvelopeEnd) * baseFreqEnd;\n                } else {\n                    freqStart = targetFreqStart;\n                    freqEnd = targetFreqEnd;\n                }\n                tone.phaseDeltas[i] = freqStart * sampleTime;\n                tone.phaseDeltaScales[i] = Math.pow(freqEnd / freqStart, 1.0 / roundedSamplesPerTick);\n\n                let amplitudeStart: number = instrument.operators[i].amplitude;\n                let amplitudeEnd: number = instrument.operators[i].amplitude;\n                if (i < 4){\n                    if (this.isModActive(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex)) {\n                        amplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex, false) / 15.0;\n                        amplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex, true) / 15.0;\n                    }\n                } else {\n                    if (this.isModActive(Config.modulators.dictionary[\"fm slider 5\"].index + i-4, channelIndex, tone.instrumentIndex)) {\n                        amplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm slider 5\"].index + i-4, channelIndex, tone.instrumentIndex, false) / 15.0;\n                        amplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm slider 5\"].index + i-4, channelIndex, tone.instrumentIndex, true) / 15.0;\n                    }\n                }\n\n                const amplitudeCurveStart: number = Synth.operatorAmplitudeCurve(amplitudeStart);\n                const amplitudeCurveEnd: number = Synth.operatorAmplitudeCurve(amplitudeEnd);\n                const amplitudeMultStart: number = amplitudeCurveStart * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\n                const amplitudeMultEnd: number = amplitudeCurveEnd * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\n\n                let expressionStart: number = amplitudeMultStart;\n                let expressionEnd: number = amplitudeMultEnd;\n\n\n                if (i < carrierCount) {\n                    // carrier\n                    let pitchExpressionStart: number;\n                    if (tone.prevPitchExpressions[i] != null) {\n                        pitchExpressionStart = tone.prevPitchExpressions[i]!;\n                    } else {\n                        pitchExpressionStart = Math.pow(2.0, -(pitchStart - expressionReferencePitch) / pitchDamping);\n                    }\n                    const pitchExpressionEnd: number = Math.pow(2.0, -(pitchEnd - expressionReferencePitch) / pitchDamping);\n                    tone.prevPitchExpressions[i] = pitchExpressionEnd;\n                    expressionStart *= pitchExpressionStart;\n                    expressionEnd *= pitchExpressionEnd;\n\n                    totalCarrierExpression += amplitudeCurveEnd;\n                } else {\n                    // modulator\n                    expressionStart *= Config.sineWaveLength * 1.5;\n                    expressionEnd *= Config.sineWaveLength * 1.5;\n\n                    sineExpressionBoost *= 1.0 - Math.min(1.0, instrument.operators[i].amplitude / 15);\n                }\n\n                expressionStart *= envelopeStarts[EnvelopeComputeIndex.operatorAmplitude0 + i];\n                expressionEnd *= envelopeEnds[EnvelopeComputeIndex.operatorAmplitude0 + i];\n\n                // Check for mod-related volume delta\n                // @jummbus - This amplification is also applied to modulator FM operators which distorts the sound.\n                // The fix is to apply this only to carriers, but as this is a legacy bug and it can cause some interesting sounds, it's left in.\n                // You can use the mix volume modulator instead to avoid this effect.\n\n                if (this.isModActive(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex)) {\n                    // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\n                    const startVal: number = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, false);\n                    const endVal: number = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, true);\n                    expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\n                    expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\n                }\n\n                tone.operatorExpressions[i] = expressionStart;\n                tone.operatorExpressionDeltas[i] = (expressionEnd - expressionStart) / roundedSamplesPerTick;\n\n            }\n\n            sineExpressionBoost *= (Math.pow(2.0, (2.0 - 1.4 * instrument.feedbackAmplitude / 15.0)) - 1.0) / 3.0;\n            sineExpressionBoost *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierExpression - 1) / 2.0);\n            sineExpressionBoost = 1.0 + sineExpressionBoost * 3.0;\n            const expressionStart: number = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionStart * chordExpressionStart * envelopeStarts[EnvelopeComputeIndex.noteVolume];\n            const expressionEnd: number = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionEnd * chordExpressionEnd * envelopeEnds[EnvelopeComputeIndex.noteVolume];\n            tone.expression = expressionStart;\n            tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;\n\n\n            let useFeedbackAmplitudeStart: number = instrument.feedbackAmplitude;\n            let useFeedbackAmplitudeEnd: number = instrument.feedbackAmplitude;\n            if (this.isModActive(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex)) {\n                useFeedbackAmplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex, false) / 15.0;\n                useFeedbackAmplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex, true) / 15.0;\n            }\n\n            let feedbackAmplitudeStart: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeStart / 15.0;\n            const feedbackAmplitudeEnd: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeEnd / 15.0;\n\n            let feedbackStart: number = feedbackAmplitudeStart * envelopeStarts[EnvelopeComputeIndex.feedbackAmplitude];\n            let feedbackEnd: number = feedbackAmplitudeEnd * envelopeEnds[EnvelopeComputeIndex.feedbackAmplitude];\n            tone.feedbackMult = feedbackStart;\n            tone.feedbackDelta = (feedbackEnd - feedbackStart) / roundedSamplesPerTick;\n\n\n        } else {\n            const freqEndRatio: number = Math.pow(2.0, (intervalEnd - intervalStart) * intervalScale / 12.0);\n            const basePhaseDeltaScale: number = Math.pow(freqEndRatio, 1.0 / roundedSamplesPerTick);\n\n            let pitch: number = tone.pitches[0];\n            if (tone.pitchCount > 1 && (chord.arpeggiates || chord.customInterval)) {\n                const arpeggio: number = Math.floor(instrument.arpTime / Config.ticksPerArpeggio);\n                if (chord.customInterval) {\n                    const intervalOffset: number = tone.pitches[1 + getArpeggioPitchIndex(tone.pitchCount - 1, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\n                    specialIntervalMult = Math.pow(2.0, intervalOffset / 12.0);\n                    tone.specialIntervalExpressionMult = Math.pow(2.0, -intervalOffset / pitchDamping);\n                } else {\n                    pitch = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)];\n                }\n            }\n\n            const startPitch: number = basePitch + (pitch + intervalStart) * intervalScale;\n            const endPitch: number = basePitch + (pitch + intervalEnd) * intervalScale;\n            let pitchExpressionStart: number;\n            // TODO: use the second element of prevPitchExpressions for the unison voice, compute a separate expression delta for it.\n            if (tone.prevPitchExpressions[0] != null) {\n                pitchExpressionStart = tone.prevPitchExpressions[0]!;\n            } else {\n                pitchExpressionStart = Math.pow(2.0, -(startPitch - expressionReferencePitch) / pitchDamping);\n            }\n            const pitchExpressionEnd: number = Math.pow(2.0, -(endPitch - expressionReferencePitch) / pitchDamping);\n            tone.prevPitchExpressions[0] = pitchExpressionEnd;\n            let settingsExpressionMult: number = baseExpression * noteFilterExpression;\n\n            if (instrument.type == InstrumentType.noise) {\n                settingsExpressionMult *= Config.chipNoises[instrument.chipNoise].expression;\n            }\n            if (instrument.type == InstrumentType.chip) {\n                settingsExpressionMult *= Config.chipWaves[instrument.chipWave].expression;\n            }\n            if (instrument.type == InstrumentType.pwm) {\n                const basePulseWidth: number = getPulseWidthRatio(instrument.pulseWidth);\n\n                // Check for PWM mods to this instrument\n                let pulseWidthModStart: number = basePulseWidth;\n                let pulseWidthModEnd: number = basePulseWidth;\n                if (this.isModActive(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex)) {\n                    pulseWidthModStart = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pulseWidthRange * 2);\n                    pulseWidthModEnd = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pulseWidthRange * 2);\n                }\n\n                const pulseWidthStart: number = pulseWidthModStart * envelopeStarts[EnvelopeComputeIndex.pulseWidth];\n                const pulseWidthEnd: number = pulseWidthModEnd * envelopeEnds[EnvelopeComputeIndex.pulseWidth];\n                tone.pulseWidth = pulseWidthStart;\n                tone.pulseWidthDelta = (pulseWidthEnd - pulseWidthStart) / roundedSamplesPerTick;\n\n                //decimal offset mods\n                let decimalOffsetModStart: number = instrument.decimalOffset;\n                if (this.isModActive(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex)) {\n                    decimalOffsetModStart = this.getModValue(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex, false);\n                }\n \n                const decimalOffsetStart: number = decimalOffsetModStart * envelopeStarts[EnvelopeComputeIndex.decimalOffset];\n                tone.decimalOffset = decimalOffsetStart;\n                \n                tone.pulseWidth -= (tone.decimalOffset) / 10000;\n            }\n            if (instrument.type == InstrumentType.pickedString) {\n                // Check for sustain mods\n                let useSustainStart: number = instrument.stringSustain;\n                let useSustainEnd: number = instrument.stringSustain;\n                if (this.isModActive(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex)) {\n                    useSustainStart = this.getModValue(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex, false);\n                    useSustainEnd = this.getModValue(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex, true);\n                }\n\n                tone.stringSustainStart = useSustainStart;\n                tone.stringSustainEnd = useSustainEnd;\n\n                // Increase expression to compensate for string decay.\n                settingsExpressionMult *= Math.pow(2.0, 0.7 * (1.0 - useSustainStart / (Config.stringSustainRange - 1)));\n\n            }\n\n            const startFreq: number = Instrument.frequencyFromPitch(startPitch);\n            if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave || instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pickedString) {\n                // These instruments have two waves at different frequencies for the unison feature.\n                //const unison: Unison = Config.unisons[instrument.unison];\n                const unisonVoices: number = instrument.unisonVoices;\n                const unisonSpread: number = instrument.unisonSpread;\n                const unisonOffset: number = instrument.unisonOffset;\n                const unisonExpression: number = instrument.unisonExpression;\n                //const unisonSign: number = Config.unisons[instrument.unisonSign];\n                //const unison: Unison = [voices:, ];\n                const voiceCountExpression: number = (instrument.type == InstrumentType.pickedString) ? 1 : unisonVoices / 2.0;\n                settingsExpressionMult *= unisonExpression * voiceCountExpression;\n                const unisonEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.unison];\n                const unisonEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.unison];\n                const unisonAStart: number = Math.pow(2.0, (unisonOffset + unisonSpread) * unisonEnvelopeStart / 12.0);\n                const unisonAEnd: number = Math.pow(2.0, (unisonOffset + unisonSpread) * unisonEnvelopeEnd / 12.0);\n                const unisonBStart: number = Math.pow(2.0, (unisonOffset - unisonSpread) * unisonEnvelopeStart / 12.0) * specialIntervalMult;\n                const unisonBEnd: number = Math.pow(2.0, (unisonOffset- unisonSpread) * unisonEnvelopeEnd / 12.0) * specialIntervalMult;\n                tone.phaseDeltas[0] = startFreq * sampleTime * unisonAStart;\n                tone.phaseDeltas[1] = startFreq * sampleTime * unisonBStart;\n                tone.phaseDeltaScales[0] = basePhaseDeltaScale * Math.pow(unisonAEnd / unisonAStart, 1.0 / roundedSamplesPerTick);\n                tone.phaseDeltaScales[1] = basePhaseDeltaScale * Math.pow(unisonBEnd / unisonBStart, 1.0 / roundedSamplesPerTick);\n            } else {\n                tone.phaseDeltas[0] = startFreq * sampleTime;\n                tone.phaseDeltaScales[0] = basePhaseDeltaScale;\n            }\n    let supersawExpressionStart: number = 1.0;\n\t\tlet supersawExpressionEnd: number = 1.0;\n\t\t\tif (instrument.type == InstrumentType.supersaw) {\n\t\t\t\tconst minFirstVoiceAmplitude: number = 1.0 / Math.sqrt(Config.supersawVoiceCount);\n\t\t\t\tlet baseDynamismSliderStart: number = instrument.supersawDynamism / Config.supersawDynamismMax;\n                let baseDynamismSliderEnd: number = instrument.supersawDynamism / Config.supersawDynamismMax;\n                if (this.isModActive(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex)) {\n                  baseDynamismSliderStart = Math.max(0.0, this.getModValue(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex, false) / Config.supersawDynamismMax);\n                  baseDynamismSliderEnd = Math.max(0.0, this.getModValue(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex, true) / Config.supersawDynamismMax);\n                }\n                const curvedDynamismStart: number = 1.0 - Math.pow(Math.max(0.0, 1.0 - baseDynamismSliderStart * envelopeStarts[EnvelopeComputeIndex.supersawDynamism]), 0.2);\n                const curvedDynamismEnd:   number = 1.0 - Math.pow(Math.max(0.0, 1.0 - baseDynamismSliderEnd * envelopeEnds[  EnvelopeComputeIndex.supersawDynamism]), 0.2);\n                const firstVoiceAmplitudeStart: number = Math.pow(2.0, Math.log2(minFirstVoiceAmplitude) * curvedDynamismStart);\n\t\t\t\tconst firstVoiceAmplitudeEnd:   number = Math.pow(2.0, Math.log2(minFirstVoiceAmplitude) * curvedDynamismEnd);\n\n\t\t\t\tlet dynamismStart: number = Math.sqrt((1.0 / Math.pow(firstVoiceAmplitudeStart, 2.0) - 1.0) / (Config.supersawVoiceCount - 1.0));\n\t\t\t\tlet dynamismEnd:   number = Math.sqrt((1.0 / Math.pow(firstVoiceAmplitudeEnd, 2.0) - 1.0) / (Config.supersawVoiceCount - 1.0));\n\n\t\t\t\ttone.supersawDynamism = dynamismStart;\n\t\t\t\ttone.supersawDynamismDelta = (dynamismEnd - dynamismStart) / roundedSamplesPerTick;\n\t\t\t\t\n\t\t\t\tconst initializeSupersaw: boolean = (tone.supersawDelayIndex == -1);\n\t\t\t\tif (initializeSupersaw) {\n\t\t\t\t\t// Goal: generate sawtooth phases such that the combined initial amplitude\n\t\t\t\t\t// cancel out to minimize pop. Algorithm: generate sorted phases, iterate over\n\t\t\t\t\t// their sawtooth drop points to find a combined zero crossing, then offset the\n\t\t\t\t\t// phases so they start there.\n\t\t\t\t\t\n\t\t\t\t\t// Generate random phases in ascending order by adding positive randomly\n\t\t\t\t\t// sized gaps between adjacent phases. For a proper distribution of random\n\t\t\t\t\t// events, the gaps sizes should be an \"exponential distribution\", which is\n\t\t\t\t\t// just: -Math.log(Math.random()). At the end, normalize the phases to a 0-1\n\t\t\t\t\t// range by dividing by the final value of the accumulator.\n\t\t\t\t\tlet accumulator: number = 0.0;\n\t\t\t\t\tfor (let i: number = 0; i < Config.supersawVoiceCount; i++) {\n\t\t\t\t\t\ttone.phases[i] = accumulator;\n\t\t\t\t\t\taccumulator += -Math.log(Math.random());\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tconst amplitudeSum: number = 1.0 + (Config.supersawVoiceCount - 1.0) * dynamismStart;\n\t\t\t\t\tconst slope: number = amplitudeSum;\n\t\t\t\t\t\n\t\t\t\t\t// Find the initial amplitude of the sum of sawtooths with the normalized\n\t\t\t\t\t// set of phases.\n\t\t\t\t\tlet sample: number = 0.0;\n\t\t\t\t\tfor (let i: number = 0; i < Config.supersawVoiceCount; i++) {\n\t\t\t\t\t\tconst amplitude: number = (i == 0) ? 1.0 : dynamismStart;\n\t\t\t\t\t\tconst normalizedPhase: number = tone.phases[i] / accumulator;\n\t\t\t\t\t\ttone.phases[i] = normalizedPhase;\n\t\t\t\t\t\tsample += (normalizedPhase - 0.5) * amplitude;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Find the phase of the zero crossing of the sum of the sawtooths. You can\n\t\t\t\t\t// use a constant slope and the distance between sawtooth drops to determine if\n\t\t\t\t\t// the zero crossing occurs between them. Note that a small phase means that\n\t\t\t\t\t// the corresponding drop for that wave is far away, and a big phase means the\n\t\t\t\t\t// drop is nearby, so to iterate forward through the drops we iterate backward\n\t\t\t\t\t// through the phases.\n\t\t\t\t\tlet zeroCrossingPhase: number = 1.0;\n\t\t\t\t\tlet prevDrop: number = 0.0;\n\t\t\t\t\tfor (let i: number = Config.supersawVoiceCount - 1; i >= 0; i--) {\n\t\t\t\t\t\tconst nextDrop: number = 1.0 - tone.phases[i];\n\t\t\t\t\t\tconst phaseDelta: number = nextDrop - prevDrop;\n\t\t\t\t\t\tif (sample < 0.0) {\n\t\t\t\t\t\t\tconst distanceToZeroCrossing: number = -sample / slope;\n\t\t\t\t\t\t\tif (distanceToZeroCrossing < phaseDelta) {\n\t\t\t\t\t\t\t\tzeroCrossingPhase = prevDrop + distanceToZeroCrossing;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst amplitude: number = (i == 0) ? 1.0 : dynamismStart;\n\t\t\t\t\t\tsample += phaseDelta * slope - amplitude;\n\t\t\t\t\t\tprevDrop = nextDrop;\n\t\t\t\t\t}\n\t\t\t\t\tfor (let i: number = 0; i < Config.supersawVoiceCount; i++) {\n\t\t\t\t\t\ttone.phases[i] += zeroCrossingPhase;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Randomize the (initially sorted) order of the phases (aside from the\n\t\t\t\t\t// first one) so that they don't correlate to the detunes that are also\n\t\t\t\t\t// based on index.\n\t\t\t\t\tfor (let i: number = 1; i < Config.supersawVoiceCount - 1; i++) {\n\t\t\t\t\t\tconst swappedIndex: number = i + Math.floor(Math.random() * (Config.supersawVoiceCount - i));\n\t\t\t\t\t\tconst temp: number = tone.phases[i];\n\t\t\t\t\t\ttone.phases[i] = tone.phases[swappedIndex];\n\t\t\t\t\t\ttone.phases[swappedIndex] = temp;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst baseSpreadSlider: number = instrument.supersawSpread / Config.supersawSpreadMax;\n\t\t\t\tlet spreadSliderStart: number = Math.max(0.0, baseSpreadSlider * envelopeStarts[EnvelopeComputeIndex.supersawSpread]);\n\t\t\t\tlet spreadSliderEnd:   number = Math.max(0.0, baseSpreadSlider * envelopeEnds[  EnvelopeComputeIndex.supersawSpread]);\n                if (this.isModActive(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex)) {\n                  spreadSliderStart = Math.max(0.0, this.getModValue(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex, false) / Config.supersawSpreadMax);\n                  spreadSliderEnd = Math.max(0.0, this.getModValue(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex, true) / Config.supersawSpreadMax);\n                    }\n\t\t\t\t// Just use the average detune for the current tick in the below loop.\n\t\t\t\tconst averageSpreadSlider: number = (spreadSliderStart + spreadSliderEnd) * 0.5;\n\t\t\t\tconst curvedSpread: number = Math.pow(1.0 - Math.sqrt(Math.max(0.0, 1.0 - averageSpreadSlider)), 1.75);\n\t\t\t\tfor (let i = 0; i < Config.supersawVoiceCount; i++) {\n\t\t\t\t\t// Spread out the detunes around the center;\n\t\t\t\t\tconst offset: number = (i == 0) ? 0.0 : Math.pow((((i + 1) >> 1) - 0.5 + 0.025 * ((i & 2) - 1)) / (Config.supersawVoiceCount >> 1), 1.1) * ((i & 1) * 2 - 1);\n\t\t\t\t\ttone.supersawUnisonDetunes[i] = Math.pow(2.0, curvedSpread * offset / 12.0);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconst baseShape: number = instrument.supersawShape / Config.supersawShapeMax;\n\t\t\t\tlet shapeStart: number = baseShape * envelopeStarts[EnvelopeComputeIndex.supersawShape];\n\t\t\t\tlet shapeEnd:   number = baseShape * envelopeEnds[  EnvelopeComputeIndex.supersawShape];\n                if (this.isModActive(Config.modulators.dictionary[\"shape\"].index, channelIndex, tone.instrumentIndex)) {\n                  shapeStart = Math.max(0.0, this.getModValue(Config.modulators.dictionary[\"shape\"].index, channelIndex, tone.instrumentIndex, false) / Config.supersawShapeMax);\n                  shapeEnd = Math.max(0.0, this.getModValue(Config.modulators.dictionary[\"shape\"].index, channelIndex, tone.instrumentIndex, true) / Config.supersawShapeMax);\n                }\n\t\t\t\ttone.supersawShape = shapeStart;\n\t\t\t\ttone.supersawShapeDelta = (shapeEnd - shapeStart) / roundedSamplesPerTick;\n\t\t\t\t\n\t\t\t\tconst basePulseWidth: number = getPulseWidthRatio(instrument.pulseWidth);\n\t\t\t\t\n                // Just like pulse width, check for PWM mods.\n                let pulseWidthModStart: number = basePulseWidth;\n                let pulseWidthModEnd: number = basePulseWidth;\n                if (this.isModActive(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex)) {\n                  pulseWidthModStart = Math.max(0.0, this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, false) / (Config.pulseWidthRange * 2));\n                  pulseWidthModEnd = Math.max(0.0, this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, true) / (Config.pulseWidthRange * 2));\n                }\n\n\t\t\t\tconst pulseWidthStart: number = pulseWidthModStart * envelopeStarts[EnvelopeComputeIndex.pulseWidth];\n\t\t\t\tconst pulseWidthEnd:   number = pulseWidthModEnd * envelopeEnds[  EnvelopeComputeIndex.pulseWidth];\n                tone.pulseWidth = pulseWidthStart;\n                tone.pulseWidthDelta = (pulseWidthEnd - pulseWidthStart) / roundedSamplesPerTick;\n\n                //decimal offset mods\n                let decimalOffsetModStart: number = instrument.decimalOffset;\n                if (this.isModActive(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex)) {\n                    decimalOffsetModStart = this.getModValue(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex, false);\n                }\n \n                const decimalOffsetStart: number = decimalOffsetModStart * envelopeStarts[EnvelopeComputeIndex.decimalOffset];\n                tone.decimalOffset = decimalOffsetStart;\n                \n                tone.pulseWidth -= (tone.decimalOffset) / 10000;\n\t\t\t\tconst phaseDeltaStart: number = (tone.supersawPrevPhaseDelta != null) ? tone.supersawPrevPhaseDelta : startFreq * sampleTime;\n\t\t\t\tconst phaseDeltaEnd: number = startFreq * sampleTime * freqEndRatio;\n\t\t\t\ttone.supersawPrevPhaseDelta = phaseDeltaEnd;\n\t\t\t\tconst delayLengthStart = pulseWidthStart / phaseDeltaStart;\n\t\t\t\tconst delayLengthEnd = pulseWidthEnd / phaseDeltaEnd;\n\t\t\t\ttone.supersawDelayLength = delayLengthStart;\n\t\t\t\ttone.supersawDelayLengthDelta = (delayLengthEnd - delayLengthStart) / roundedSamplesPerTick;\n\t\t\t\tconst minBufferLength: number = Math.ceil(Math.max(delayLengthStart, delayLengthEnd)) + 2;\n\t\t\t\t\n\t\t\t\tif (tone.supersawDelayLine == null || tone.supersawDelayLine.length <= minBufferLength) {\n\t\t\t\t\t// The delay line buffer will get reused for other tones so might as well\n\t\t\t\t\t// start off with a buffer size that is big enough for most notes.\n\t\t\t\t\tconst likelyMaximumLength: number = Math.ceil(0.5 * this.samplesPerSecond / Instrument.frequencyFromPitch(24));\n\t\t\t\t\tconst newDelayLine: Float32Array = new Float32Array(Synth.fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength)));\n\t\t\t\t\tif (!initializeSupersaw && tone.supersawDelayLine != null) {\n\t\t\t\t\t\t// If the tone has already started but the buffer needs to be reallocated,\n\t\t\t\t\t\t// transfer the old data to the new buffer.\n\t\t\t\t\t\tconst oldDelayBufferMask: number = (tone.supersawDelayLine.length - 1) >> 0;\n\t\t\t\t\t\tconst startCopyingFromIndex: number = tone.supersawDelayIndex;\n\t\t\t\t\t\tfor (let i: number = 0; i < tone.supersawDelayLine.length; i++) {\n\t\t\t\t\t\t\tnewDelayLine[i] = tone.supersawDelayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\ttone.supersawDelayLine = newDelayLine;\n\t\t\t\t\ttone.supersawDelayIndex = tone.supersawDelayLine.length;\n\t\t\t\t} else if (initializeSupersaw) {\n\t\t\t\t\ttone.supersawDelayLine.fill(0.0);\n\t\t\t\t\ttone.supersawDelayIndex = tone.supersawDelayLine.length;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconst pulseExpressionRatio: number = Config.pwmBaseExpression / Config.supersawBaseExpression;\n\t\t\t\tsupersawExpressionStart *= (1.0 + (pulseExpressionRatio - 1.0) * shapeStart) / Math.sqrt(1.0 + (Config.supersawVoiceCount - 1.0) * dynamismStart * dynamismStart);\n\t\t\t\tsupersawExpressionEnd *= (1.0 + (pulseExpressionRatio - 1.0) * shapeEnd) / Math.sqrt(1.0 + (Config.supersawVoiceCount - 1.0) * dynamismEnd * dynamismEnd);\n\n        }\n            let expressionStart: number = settingsExpressionMult * fadeExpressionStart * chordExpressionStart * pitchExpressionStart * envelopeStarts[EnvelopeComputeIndex.noteVolume] * supersawExpressionStart;\n            let expressionEnd: number = settingsExpressionMult * fadeExpressionEnd * chordExpressionEnd * pitchExpressionEnd * envelopeEnds[EnvelopeComputeIndex.noteVolume] * supersawExpressionEnd;\n\n            // Check for mod-related volume delta\n            if (this.isModActive(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex)) {\n                // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\n                const startVal: number = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, false);\n                const endVal: number = this.getModValue(Config.modulators.dictionary[\"note volume\"].index, channelIndex, tone.instrumentIndex, true)\n                expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\n                expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\n            }\n\n            tone.expression = expressionStart;\n            tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;\n\n\n            if (instrument.type == InstrumentType.pickedString) {\n                let stringDecayStart: number;\n                if (tone.prevStringDecay != null) {\n                    stringDecayStart = tone.prevStringDecay;\n                } else {\n                    const sustainEnvelopeStart: number = tone.envelopeComputer.envelopeStarts[EnvelopeComputeIndex.stringSustain];\n                    stringDecayStart = 1.0 - Math.min(1.0, sustainEnvelopeStart * tone.stringSustainStart / (Config.stringSustainRange - 1));\n                }\n                const sustainEnvelopeEnd: number = tone.envelopeComputer.envelopeEnds[EnvelopeComputeIndex.stringSustain];\n                let stringDecayEnd: number = 1.0 - Math.min(1.0, sustainEnvelopeEnd * tone.stringSustainEnd / (Config.stringSustainRange - 1));\n                tone.prevStringDecay = stringDecayEnd;\n\n                //const unison: Unison = Config.unisons[instrument.unison];\n                const unisonVoices: number = instrument.unisonVoices;\n                for (let i: number = tone.pickedStrings.length; i < unisonVoices; i++) {\n                    tone.pickedStrings[i] = new PickedString();\n                }\n\n                if (tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {\n                    for (const pickedString of tone.pickedStrings) {\n                        // Force the picked string to retrigger the attack impulse at the start of the note.\n                        pickedString.delayIndex = -1;\n                    }\n                }\n\n                for (let i: number = 0; i < unisonVoices; i++) {\n                    tone.pickedStrings[i].update(this, instrumentState, tone, i, roundedSamplesPerTick, stringDecayStart, stringDecayEnd);\n                }\n            }\n        }\n    }\n\n    public static getLFOAmplitude(instrument: Instrument, secondsIntoBar: number): number {\n        let effect: number = 0.0;\n        for (const vibratoPeriodSeconds of Config.vibratoTypes[instrument.vibratoType].periodsSeconds) {\n            effect += Math.sin(Math.PI * 2.0 * secondsIntoBar / vibratoPeriodSeconds);\n        }\n        return effect;\n    }\n\n\n    public static getInstrumentSynthFunction(instrument: Instrument): Function {\n        if (instrument.type == InstrumentType.fm) {\n            const fingerprint: string = instrument.algorithm + \"_\" + instrument.feedbackType;\n            if (Synth.fmSynthFunctionCache[fingerprint] == undefined) {\n                const synthSource: string[] = [];\n\n                for (const line of Synth.fmSourceTemplate) {\n                    if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\n                        const outputs: string[] = [];\n                        for (let j: number = 0; j < Config.algorithms[instrument.algorithm].carrierCount; j++) {\n                            outputs.push(\"operator\" + j + \"Scaled\");\n                        }\n                        synthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\n                    } else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\n                        for (let j: number = Config.operatorCount - 1; j >= 0; j--) {\n                            for (const operatorLine of Synth.operatorSourceTemplate) {\n                                if (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\n                                    let modulators = \"\";\n                                    for (const modulatorNumber of Config.algorithms[instrument.algorithm].modulatedBy[j]) {\n                                        modulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\n                                    }\n\n                                    const feedbackIndices: ReadonlyArray<number> = Config.feedbacks[instrument.feedbackType].indices[j];\n                                    if (feedbackIndices.length > 0) {\n                                        modulators += \" + feedbackMult * (\";\n                                        const feedbacks: string[] = [];\n                                        for (const modulatorNumber of feedbackIndices) {\n                                            feedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\n                                        }\n                                        modulators += feedbacks.join(\" + \") + \")\";\n                                    }\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\n                                } else {\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\n                                }\n                            }\n                        }\n                    } else if (line.indexOf(\"#\") != -1) {\n                        for (let j: number = 0; j < Config.operatorCount; j++) {\n                            synthSource.push(line.replace(/\\#/g, j + \"\"));\n                        }\n                    } else {\n                        synthSource.push(line);\n                    }\n                }\n\n                //console.log(synthSource.join(\"\\n\"));\n\n                Synth.fmSynthFunctionCache[fingerprint] = new Function(\"synth\", \"bufferIndex\", \"roundedSamplesPerTick\", \"tone\", \"instrumentState\", synthSource.join(\"\\n\"));\n            }\n            return Synth.fmSynthFunctionCache[fingerprint];\n        } else if (instrument.type == InstrumentType.chip) {\n\t\t                 // advloop addition\n                if (instrument.isUsingAdvancedLoopControls) {\n                    return Synth.loopableChipSynth;\n                }\n                // advloop addition\n            return Synth.chipSynth;\n        } else if (instrument.type == InstrumentType.customChipWave) {\n            return Synth.chipSynth;\n        } else if (instrument.type == InstrumentType.harmonics) {\n            return Synth.harmonicsSynth;\n        } else if (instrument.type == InstrumentType.pwm) {\n            return Synth.pulseWidthSynth;\n        } else if (instrument.type == InstrumentType.supersaw) {\n\t\t\treturn Synth.supersawSynth;\n        } else if (instrument.type == InstrumentType.pickedString) {\n            return Synth.pickedStringSynth;\n        } else if (instrument.type == InstrumentType.noise) {\n            return Synth.noiseSynth;\n        } else if (instrument.type == InstrumentType.spectrum) {\n            return Synth.spectrumSynth;\n        } else if (instrument.type == InstrumentType.drumset) {\n            return Synth.drumsetSynth;\n        } else if (instrument.type == InstrumentType.mod) {\n            return Synth.modSynth;\n        } else if (instrument.type == InstrumentType.fm6op) {\n            const fingerprint: string = instrument.customAlgorithm.name + \"_\" + instrument.customFeedbackType.name;\n            if (Synth.fm6SynthFunctionCache[fingerprint] == undefined) {\n                const synthSource: string[] = [];\n\n                for (const line of Synth.fmSourceTemplate) {\n                    if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\n                        const outputs: string[] = [];\n                        for (let j: number = 0; j < instrument.customAlgorithm.carrierCount; j++) {\n                            outputs.push(\"operator\" + j + \"Scaled\");\n                        }\n                        synthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\n                    } else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\n                        for (let j: number = Config.operatorCount+2 - 1; j >= 0; j--) {\n                            for (const operatorLine of Synth.operatorSourceTemplate) {\n                                if (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\n                                    let modulators = \"\";\n                                    for (const modulatorNumber of instrument.customAlgorithm.modulatedBy[j]) {\n                                        modulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\n                                    }\n\n                                    const feedbackIndices: ReadonlyArray<number> = instrument.customFeedbackType.indices[j];\n                                    if (feedbackIndices.length > 0) {\n                                        modulators += \" + feedbackMult * (\";\n                                        const feedbacks: string[] = [];\n                                        for (const modulatorNumber of feedbackIndices) {\n                                            feedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\n                                        }\n                                        modulators += feedbacks.join(\" + \") + \")\";\n                                    }\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\n                                } else {\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\n                                }\n                            }\n                        }\n                    } else if (line.indexOf(\"#\") != -1) {\n                        for (let j = 0; j < Config.operatorCount+2; j++) {\n                            synthSource.push(line.replace(/\\#/g, j + \"\"));\n                        }\n                    } else {\n                        synthSource.push(line);\n                    }\n                }\n\n                //console.log(synthSource.join(\"\\n\"));\n\n                Synth.fm6SynthFunctionCache[fingerprint] = new Function(\"synth\", \"bufferIndex\", \"roundedSamplesPerTick\", \"tone\", \"instrumentState\", synthSource.join(\"\\n\"));\n            }\n            return Synth.fm6SynthFunctionCache[fingerprint];\n        }else{\n            throw new Error(\"Unrecognized instrument type: \" + instrument.type);\n        }\n    }\n// advloop addition\n        static wrap(x: number, b: number): number {\n            return (x % b + b) % b;\n        }\n        static loopableChipSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\n            // @TODO:\n            // - Longer declicking? This is more difficult than I thought.\n            //   When determining this automatically is difficult (or the input\n            //   samples are expected to vary too much), this is left up to the\n            //   user.\n            const aliases: boolean = (effectsIncludeDistortion(instrumentState.effects) && instrumentState.aliases);\n            // const aliases = false;\n            const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n            const wave: Float32Array = instrumentState.wave!;\n            const volumeScale: number = instrumentState.volumeScale;\n            const waveLength: number = (aliases && instrumentState.type == 8) ? wave.length : wave.length - 1;\n            let chipWaveLoopEnd: number = Math.max(0, Math.min(waveLength, instrumentState.chipWaveLoopEnd));\n            let chipWaveLoopStart: number = Math.max(0, Math.min(chipWaveLoopEnd - 1, instrumentState.chipWaveLoopStart));\n\t\t\t// @TODO: This is where to set things up for the release loop mode.\n           // const ticksSinceReleased = tone.ticksSinceReleased;\n            // if (ticksSinceReleased > 0) {\n            //     chipWaveLoopStart = 0;\n            //     chipWaveLoopEnd = waveLength - 1;\n            // }\n            let chipWaveLoopLength: number = chipWaveLoopEnd - chipWaveLoopStart;\n\t\t\tif (chipWaveLoopLength < 2) {\n                chipWaveLoopStart = 0;\n                chipWaveLoopEnd = waveLength;\n                chipWaveLoopLength = waveLength;\n            }\n            const chipWaveLoopMode: number = instrumentState.chipWaveLoopMode;\n            const chipWavePlayBackwards: boolean = instrumentState.chipWavePlayBackwards;\n            const unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n            if (instrumentState.unisonVoices == 1 && !instrumentState.chord!.customInterval)\n                tone.phases[1] = tone.phases[0];\n            let phaseDeltaA: number = tone.phaseDeltas[0] * waveLength;\n            let phaseDeltaB: number = tone.phaseDeltas[1] * waveLength;\n            let directionA: number = tone.directions[0];\n            let directionB: number = tone.directions[1];\n            let chipWaveCompletionA: number = tone.chipWaveCompletions[0];\n            let chipWaveCompletionB: number = tone.chipWaveCompletions[1];\n            if (chipWaveLoopMode === 3 || chipWaveLoopMode === 2 || chipWaveLoopMode === 0) {\n                // If playing once or looping, we force the correct direction,\n                // since it shouldn't really change. This is mostly so that if\n                // the mode is changed midway through playback, it won't get\n                // stuck on the wrong direction.\n                if (!chipWavePlayBackwards) {\n                    directionA = 1;\n                    directionB = 1;\n                } else {\n                    directionA = -1;\n                    directionB = -1;\n                }\n            }\n            if (chipWaveLoopMode === 0 || chipWaveLoopMode === 1) {\n                // If looping or ping-ponging, we clear the completion status,\n                // as it's not relevant anymore. This is mostly so that if the\n                // mode is changed midway through playback, it won't get stuck\n                // on zero volume.\n                chipWaveCompletionA = 0;\n                chipWaveCompletionB = 0;\n            }\n            let lastWaveA: number = tone.chipWaveCompletionsLastWave[0];\n            let lastWaveB: number = tone.chipWaveCompletionsLastWave[1];\n            const chipWaveCompletionFadeLength: number = 1000;\n            const phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\n            const phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\n            let expression: number = +tone.expression;\n            const expressionDelta: number = +tone.expressionDelta;\n            let phaseA: number = Synth.wrap(tone.phases[0], 1) * waveLength;\n            let phaseB: number = Synth.wrap(tone.phases[1], 1) * waveLength;\n            let prevWaveIntegralA: number = 0;\n            let prevWaveIntegralB: number = 0;\n            if (!aliases) {\n                const phaseAInt = Math.floor(phaseA);\n                const phaseBInt = Math.floor(phaseB);\n                const indexA = Synth.wrap(phaseAInt, waveLength);\n               const indexB = Synth.wrap(phaseBInt, waveLength);\n                const phaseRatioA = phaseA - phaseAInt;\n                const phaseRatioB = phaseB - phaseBInt;\n                prevWaveIntegralA = +wave[indexA];\n                prevWaveIntegralB = +wave[indexB];\n                prevWaveIntegralA += (wave[Synth.wrap(indexA + 1, waveLength)] - prevWaveIntegralA) * phaseRatioA;\n                prevWaveIntegralB += (wave[Synth.wrap(indexB + 1, waveLength)] - prevWaveIntegralB) * phaseRatioB;\n           }\n            const filters = tone.noteFilters;\n            const filterCount: number = tone.noteFilterCount | 0;\n            let initialFilterInput1: number = +tone.initialNoteFilterInput1;\n            let initialFilterInput2: number = +tone.initialNoteFilterInput2;\n            const applyFilters: Function = Synth.applyFilters;\n            const stopIndex: number = bufferIndex + roundedSamplesPerTick;\n            let prevWaveA: number = tone.chipWavePrevWaves[0];\n            let prevWaveB: number = tone.chipWavePrevWaves[1];\n            for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n                if (chipWaveCompletionA > 0 && chipWaveCompletionA < chipWaveCompletionFadeLength) {\n                    chipWaveCompletionA++;\n                }\n                if (chipWaveCompletionB > 0 && chipWaveCompletionB < chipWaveCompletionFadeLength) {\n                    chipWaveCompletionB++;\n                }\n               let wrapped: number = 0;\n                phaseA += phaseDeltaA * directionA;\n                phaseB += phaseDeltaB * directionB;\n                if (chipWaveLoopMode === 2) {\n                    // once\n                    if (directionA === 1) {\n                        if (phaseA > waveLength) {\n                            if (chipWaveCompletionA <= 0) {\n                                lastWaveA = prevWaveA;\n                                chipWaveCompletionA++;\n                            }\n                            wrapped = 1;\n                        }\n                    } else if (directionA === -1) {\n                        if (phaseA < 0) {\n                            if (chipWaveCompletionA <= 0) {\n                                lastWaveA = prevWaveA;\n                                chipWaveCompletionA++;\n                            }\n                            wrapped = 1;\n                        }\n                    }\n                    if (directionB === 1) {\n                        if (phaseB > waveLength) {\n                            if (chipWaveCompletionB <= 0) {\n                                lastWaveB = prevWaveB;\n                                chipWaveCompletionB++;\n                            }\n                            wrapped = 1;\n                        }\n                    } else if (directionA === -1) {\n                        if (phaseB < 0) {\n                            if (chipWaveCompletionB <= 0) {\n                                lastWaveB = prevWaveB;\n                                chipWaveCompletionB++;\n                            }\n                            wrapped = 1;\n                        }\n                    }\n                } else if (chipWaveLoopMode === 3) {\n                    // loop once\n                    if (directionA === 1) {\n                        if (phaseA > chipWaveLoopEnd) {\n                            if (chipWaveCompletionA <= 0) {\n                                lastWaveA = prevWaveA;\n                                chipWaveCompletionA++;\n                            }\n                            wrapped = 1;\n                        }\n                    } else if (directionA === -1) {\n                        if (phaseA < chipWaveLoopStart) {\n                            if (chipWaveCompletionA <= 0) {\n                                lastWaveA = prevWaveA;\n                                chipWaveCompletionA++;\n                            }\n                            wrapped = 1;\n                        }\n                    }\n                    if (directionB === 1) {\n                        if (phaseB > chipWaveLoopEnd) {\n                            if (chipWaveCompletionB <= 0) {\n                                lastWaveB = prevWaveB;\n                                chipWaveCompletionB++;\n                            }\n                            wrapped = 1;\n                        }\n                    } else if (directionA === -1) {\n                        if (phaseB < chipWaveLoopStart) {\n                            if (chipWaveCompletionB <= 0) {\n                                lastWaveB = prevWaveB;\n                                chipWaveCompletionB++;\n                            }\n                            wrapped = 1;\n                        }\n                    }\n                } else if (chipWaveLoopMode === 0) {\n                    // loop\n                    if (directionA === 1) {\n                        if (phaseA > chipWaveLoopEnd) {\n                            phaseA = chipWaveLoopStart + Synth.wrap(phaseA - chipWaveLoopEnd, chipWaveLoopLength);\n                            // phaseA = chipWaveLoopStart;\n                            wrapped = 1;\n                        }\n                    } else if (directionA === -1) {\n                        if (phaseA < chipWaveLoopStart) {\n                            phaseA = chipWaveLoopEnd - Synth.wrap(chipWaveLoopStart - phaseA, chipWaveLoopLength);\n                            // phaseA = chipWaveLoopEnd;\n                            wrapped = 1;\n                        }\n                    }\n                    if (directionB === 1) {\n                        if (phaseB > chipWaveLoopEnd) {\n                            phaseB = chipWaveLoopStart + Synth.wrap(phaseB - chipWaveLoopEnd, chipWaveLoopLength);\n                            // phaseB = chipWaveLoopStart;\n                            wrapped = 1;\n                        }\n                    } else if (directionB === -1) {\n                        if (phaseB < chipWaveLoopStart) {\n                            phaseB = chipWaveLoopEnd - Synth.wrap(chipWaveLoopStart - phaseB, chipWaveLoopLength);\n                            // phaseB = chipWaveLoopEnd;\n                            wrapped = 1;\n                        }\n                    }\n                } else if (chipWaveLoopMode === 1) {\n                    // ping-pong\n                    if (directionA === 1) {\n                        if (phaseA > chipWaveLoopEnd) {\n                            phaseA = chipWaveLoopEnd - Synth.wrap(phaseA - chipWaveLoopEnd, chipWaveLoopLength);\n                            // phaseA = chipWaveLoopEnd;\n                            directionA = -1;\n                           wrapped = 1;\n                        }\n                    } else if (directionA === -1) {\n                        if (phaseA < chipWaveLoopStart) {\n                            phaseA = chipWaveLoopStart + Synth.wrap(chipWaveLoopStart - phaseA, chipWaveLoopLength);\n                            // phaseA = chipWaveLoopStart;\n                            directionA = 1;\n                           wrapped = 1;\n                        }\n                    }\n                    if (directionB === 1) {\n                        if (phaseB > chipWaveLoopEnd) {\n                            phaseB = chipWaveLoopEnd - Synth.wrap(phaseB - chipWaveLoopEnd, chipWaveLoopLength);\n                            // phaseB = chipWaveLoopEnd;\n                            directionB = -1;\n                            wrapped = 1;\n                        }\n                    } else if (directionB === -1) {\n                        if (phaseB < chipWaveLoopStart) {\n                            phaseB = chipWaveLoopStart + Synth.wrap(chipWaveLoopStart - phaseB, chipWaveLoopLength);\n                            // phaseB = chipWaveLoopStart;\n                            directionB = 1;\n                            wrapped = 1;\n                        }\n                    }\n               }\n                let waveA = 0;\n                let waveB = 0;\n                let inputSample = 0;\n                if (aliases) {\n                    waveA = wave[Synth.wrap(Math.floor(phaseA), waveLength)];\n                    waveB = wave[Synth.wrap(Math.floor(phaseB), waveLength)];\n                    prevWaveA = waveA;\n                    prevWaveB = waveB;\n                    const completionFadeA: number = chipWaveCompletionA > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionA, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\n                    const completionFadeB: number = chipWaveCompletionB > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionB, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\n                    inputSample = 0;\n                    if (chipWaveCompletionA > 0) {\n                        inputSample += lastWaveA * completionFadeA;\n                    } else {\n                        inputSample += waveA;\n                    }\n                    if (chipWaveCompletionB > 0) {\n                        inputSample += lastWaveB * completionFadeB;\n                    } else {\n                        inputSample += waveB;\n                    }\n                }\n                else {\n                    const phaseAInt = Math.floor(phaseA);\n                    const phaseBInt = Math.floor(phaseB);\n                    const indexA = Synth.wrap(phaseAInt, waveLength);\n                    const indexB = Synth.wrap(phaseBInt, waveLength);\n                    let nextWaveIntegralA = wave[indexA];\n                    let nextWaveIntegralB = wave[indexB];\n                    const phaseRatioA = phaseA - phaseAInt;\n                    const phaseRatioB = phaseB - phaseBInt;\n                    nextWaveIntegralA += (wave[Synth.wrap(indexA + 1, waveLength)] - nextWaveIntegralA) * phaseRatioA;\n                    nextWaveIntegralB += (wave[Synth.wrap(indexB + 1, waveLength)] - nextWaveIntegralB) * phaseRatioB;\n                    if (!(chipWaveLoopMode === 0 && chipWaveLoopStart === 0 && chipWaveLoopEnd === waveLength) && wrapped !== 0) {\n                        let pwia = 0;\n                        let pwib = 0;\n                        const phaseA_ = Math.max(0, phaseA - phaseDeltaA * directionA);\n                        const phaseB_ = Math.max(0, phaseB - phaseDeltaB * directionB);\n                        const phaseAInt = Math.floor(phaseA_);\n                        const phaseBInt = Math.floor(phaseB_);\n                        const indexA = Synth.wrap(phaseAInt, waveLength);\n                        const indexB = Synth.wrap(phaseBInt, waveLength);\n                        pwia = wave[indexA];\n                        pwib = wave[indexB];\n                        pwia += (wave[Synth.wrap(indexA + 1, waveLength)] - pwia) * (phaseA_ - phaseAInt) * directionA;\n                        pwib += (wave[Synth.wrap(indexB + 1, waveLength)] - pwib) * (phaseB_ - phaseBInt) * directionB;\n                        prevWaveIntegralA = pwia;\n                        prevWaveIntegralB = pwib;\n\t\t\t\t   }\n                   if (chipWaveLoopMode === 1 && wrapped !== 0) {\n                       waveA = prevWaveA;\n                       waveB = prevWaveB;\n                   } else {\n                       waveA = (nextWaveIntegralA - prevWaveIntegralA) / (phaseDeltaA * directionA);\n                       waveB = (nextWaveIntegralB - prevWaveIntegralB) / (phaseDeltaB * directionB);\n                   }\n                   prevWaveA = waveA;\n                   prevWaveB = waveB;\n\t\t\t\t   prevWaveIntegralA = nextWaveIntegralA;\n\t\t\t\t   prevWaveIntegralB = nextWaveIntegralB;\n                    const completionFadeA = chipWaveCompletionA > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionA, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\n                    const completionFadeB = chipWaveCompletionB > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionB, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\n                    if (chipWaveCompletionA > 0) {\n                        inputSample += lastWaveA * completionFadeA;\n                    } else {\n                        inputSample += waveA;\n                    }\n                    if (chipWaveCompletionB > 0) {\n                        inputSample += lastWaveB * completionFadeB;\n                    } else {\n                        inputSample += waveB * unisonSign;\n                    }\n                }\n                const sample = applyFilters(inputSample * volumeScale, initialFilterInput1, initialFilterInput2, filterCount, filters);\n                initialFilterInput2 = initialFilterInput1;\n                initialFilterInput1 = inputSample * volumeScale;\n                phaseDeltaA *= phaseDeltaScaleA;\n                phaseDeltaB *= phaseDeltaScaleB;\n                const output = sample * expression;\n                expression += expressionDelta;\n                data[sampleIndex] += output;\n            }\n            tone.phases[0] = phaseA / waveLength;\n            tone.phases[1] = phaseB / waveLength;\n            tone.phaseDeltas[0] = phaseDeltaA / waveLength;\n            tone.phaseDeltas[1] = phaseDeltaB / waveLength;\n            tone.directions[0] = directionA;\n            tone.directions[1] = directionB;\n            tone.chipWaveCompletions[0] = chipWaveCompletionA;\n            tone.chipWaveCompletions[1] = chipWaveCompletionB;\n            tone.chipWavePrevWaves[0] = prevWaveA;\n            tone.chipWavePrevWaves[1] = prevWaveB;\n            tone.chipWaveCompletionsLastWave[0] = lastWaveA;\n            tone.chipWaveCompletionsLastWave[1] = lastWaveB;\n            tone.expression = expression;\n            synth.sanitizeFilters(filters);\n            tone.initialNoteFilterInput1 = initialFilterInput1;\n            tone.initialNoteFilterInput2 = initialFilterInput2;\n        }\n        // advloop addition\n    private static chipSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\n        const aliases: boolean = (effectsIncludeDistortion(instrumentState.effects) && instrumentState.aliases);\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n        const wave: Float32Array = instrumentState.wave!;\n        const volumeScale = instrumentState.volumeScale;\n\n        const waveLength = (aliases && instrumentState.type == 8) ? wave.length : wave.length - 1;\n\t\t\t//BUGFIX FROM JUMMBOX\n\n        const unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        if (instrumentState.unisonVoices == 1 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\n        let phaseDeltaA: number = tone.phaseDeltas[0] * waveLength;\n        let phaseDeltaB: number = tone.phaseDeltas[1] * waveLength;\n        const phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\n        const phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\n        let expression: number = +tone.expression;\n        const expressionDelta: number = +tone.expressionDelta;\n        let phaseA: number = (tone.phases[0] % 1) * waveLength;\n        let phaseB: number = (tone.phases[1] % 1) * waveLength;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\n        const filterCount: number = tone.noteFilterCount | 0;\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\n        const applyFilters: Function = Synth.applyFilters;\n        let prevWaveIntegralA: number = 0;\n        let prevWaveIntegralB: number = 0;\n\n        if (!aliases) {\n            const phaseAInt: number = phaseA | 0;\n            const phaseBInt: number = phaseB | 0;\n            const indexA: number = phaseAInt % waveLength;\n            const indexB: number = phaseBInt % waveLength;\n            const phaseRatioA: number = phaseA - phaseAInt;\n            const phaseRatioB: number = phaseB - phaseBInt;\n            prevWaveIntegralA = +wave[indexA];\n            prevWaveIntegralB = +wave[indexB];\n            prevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\n            prevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\n        }\n\n        const stopIndex: number = bufferIndex + roundedSamplesPerTick;\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\n            phaseA += phaseDeltaA;\n            phaseB += phaseDeltaB;\n\n            let waveA: number;\n            let waveB: number;\n            let inputSample: number;\n\n            if (aliases) {\n                waveA = wave[(0 | phaseA) % waveLength];\n                waveB = wave[(0 | phaseB) % waveLength];\n                inputSample = waveA + waveB;\n            } else {\n                const phaseAInt: number = phaseA | 0;\n                const phaseBInt: number = phaseB | 0;\n                const indexA: number = phaseAInt % waveLength;\n                const indexB: number = phaseBInt % waveLength;\n                let nextWaveIntegralA: number = wave[indexA];\n                let nextWaveIntegralB: number = wave[indexB];\n                const phaseRatioA: number = phaseA - phaseAInt;\n                const phaseRatioB: number = phaseB - phaseBInt;\n                nextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\n                nextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\n                waveA = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\n                waveB = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\n                prevWaveIntegralA = nextWaveIntegralA;\n                prevWaveIntegralB = nextWaveIntegralB;\n                inputSample = waveA + waveB * unisonSign;\n            }\n\n            const sample: number = applyFilters(inputSample * volumeScale, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t//BUGFIX FROM JUMMBOX\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample * volumeScale;\n\n            phaseDeltaA *= phaseDeltaScaleA;\n            phaseDeltaB *= phaseDeltaScaleB;\n\n            const output: number = sample * expression;\n\t\t//BUGFIX FROM JUMMBOX\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phases[0] = phaseA / waveLength;\n        tone.phases[1] = phaseB / waveLength;\n        tone.phaseDeltas[0] = phaseDeltaA / waveLength;\n        tone.phaseDeltas[1] = phaseDeltaB / waveLength;\n        tone.expression = expression;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }\n\n    private static harmonicsSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n        const wave: Float32Array = instrumentState.wave!;\n        const waveLength: number = wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\n\n        const unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        if (instrumentState.unisonVoices == 1 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\n        let phaseDeltaA: number = tone.phaseDeltas[0] * waveLength;\n        let phaseDeltaB: number = tone.phaseDeltas[1] * waveLength;\n        const phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\n        const phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\n        let expression: number = +tone.expression;\n        const expressionDelta: number = +tone.expressionDelta;\n        let phaseA: number = (tone.phases[0] % 1) * waveLength;\n        let phaseB: number = (tone.phases[1] % 1) * waveLength;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\n        const filterCount: number = tone.noteFilterCount | 0;\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\n        const applyFilters: Function = Synth.applyFilters;\n\n        const phaseAInt: number = phaseA | 0;\n        const phaseBInt: number = phaseB | 0;\n        const indexA: number = phaseAInt % waveLength;\n        const indexB: number = phaseBInt % waveLength;\n        const phaseRatioA: number = phaseA - phaseAInt;\n        const phaseRatioB: number = phaseB - phaseBInt;\n        let prevWaveIntegralA: number = +wave[indexA];\n        let prevWaveIntegralB: number = +wave[indexB];\n        prevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\n        prevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\n\n        const stopIndex: number = bufferIndex + roundedSamplesPerTick;\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\n            phaseA += phaseDeltaA;\n            phaseB += phaseDeltaB;\n\n            const phaseAInt: number = phaseA | 0;\n            const phaseBInt: number = phaseB | 0;\n            const indexA: number = phaseAInt % waveLength;\n            const indexB: number = phaseBInt % waveLength;\n            let nextWaveIntegralA: number = wave[indexA];\n            let nextWaveIntegralB: number = wave[indexB];\n            const phaseRatioA: number = phaseA - phaseAInt;\n            const phaseRatioB: number = phaseB - phaseBInt;\n            nextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\n            nextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\n            const waveA: number = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\n            const waveB: number = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\n            prevWaveIntegralA = nextWaveIntegralA;\n            prevWaveIntegralB = nextWaveIntegralB;\n\n            const inputSample: number = waveA + waveB * unisonSign;\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n\n            phaseDeltaA *= phaseDeltaScaleA;\n            phaseDeltaB *= phaseDeltaScaleB;\n\n            const output: number = sample * expression;\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phases[0] = phaseA / waveLength;\n        tone.phases[1] = phaseB / waveLength;\n        tone.phaseDeltas[0] = phaseDeltaA / waveLength;\n        tone.phaseDeltas[1] = phaseDeltaB / waveLength;\n        tone.expression = expression;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }\n\n    private static pickedStringSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\n        // This algorithm is similar to the Karpluss-Strong algorithm in principle, but with an\n        // all-pass filter for dispersion and with more control over the impulse harmonics.\n        // The source code is processed as a string before being compiled, in order to\n        // handle the unison feature. If unison is disabled or set to none, then only one\n        // string voice is required, otherwise two string voices are required. We only want\n        // to compute the minimum possible number of string voices, so omit the code for\n        // processing extra ones if possible. Any line containing a \"#\" is duplicated for\n        // each required voice, replacing the \"#\" with the voice index.\n\n        const voiceCount: number = instrumentState.unisonVoices;\n        let pickedStringFunction: Function = Synth.pickedStringFunctionCache[voiceCount];\n        if (pickedStringFunction == undefined) {\n            let pickedStringSource: string = \"\";\n\n            pickedStringSource += `\n\t\t\t\tconst Config = beepbox.Config;\n\t\t\t\tconst Synth = beepbox.Synth;\n\t\t\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\n\t\t\t\t\n\t\t\t\tlet pickedString# = tone.pickedStrings[#];\n\t\t\t\tlet allPassSample# = +pickedString#.allPassSample;\n\t\t\t\tlet allPassPrevInput# = +pickedString#.allPassPrevInput;\n\t\t\t\tlet shelfSample# = +pickedString#.shelfSample;\n\t\t\t\tlet shelfPrevInput# = +pickedString#.shelfPrevInput;\n\t\t\t\tlet fractionalDelaySample# = +pickedString#.fractionalDelaySample;\n\t\t\t\tconst delayLine# = pickedString#.delayLine;\n\t\t\t\tconst delayBufferMask# = (delayLine#.length - 1) >> 0;\n\t\t\t\tlet delayIndex# = pickedString#.delayIndex|0;\n\t\t\t\tdelayIndex# = (delayIndex# & delayBufferMask#) + delayLine#.length;\n\t\t\t\tlet delayLength# = +pickedString#.prevDelayLength;\n\t\t\t\tconst delayLengthDelta# = +pickedString#.delayLengthDelta;\n\t\t\t\tlet allPassG# = +pickedString#.allPassG;\n\t\t\t\tlet shelfA1# = +pickedString#.shelfA1;\n\t\t\t\tlet shelfB0# = +pickedString#.shelfB0;\n\t\t\t\tlet shelfB1# = +pickedString#.shelfB1;\n\t\t\t\tconst allPassGDelta# = +pickedString#.allPassGDelta;\n\t\t\t\tconst shelfA1Delta# = +pickedString#.shelfA1Delta;\n\t\t\t\tconst shelfB0Delta# = +pickedString#.shelfB0Delta;\n\t\t\t\tconst shelfB1Delta# = +pickedString#.shelfB1Delta;\n\t\t\t\t\n\t\t\t\tlet expression = +tone.expression;\n\t\t\t\tconst expressionDelta = +tone.expressionDelta;\n\t\t\t\t\n\t\t\t\tconst unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n\t\t\t\tconst delayResetOffset# = pickedString#.delayResetOffset|0;\n\t\t\t\t\n\t\t\t\tconst filters = tone.noteFilters;\n\t\t\t\tconst filterCount = tone.noteFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\n\t\t\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\n\t\t\t\tconst applyFilters = Synth.applyFilters;\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tconst targetSampleTime# = delayIndex# - delayLength#;\n\t\t\t\t\tconst lowerIndex# = (targetSampleTime# + 0.125) | 0; // Offset to improve stability of all-pass filter.\n\t\t\t\t\tconst upperIndex# = lowerIndex# + 1;\n\t\t\t\t\tconst fractionalDelay# = upperIndex# - targetSampleTime#;\n\t\t\t\t\tconst fractionalDelayG# = (1.0 - fractionalDelay#) / (1.0 + fractionalDelay#); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\t\tconst prevInput# = delayLine#[lowerIndex# & delayBufferMask#];\n\t\t\t\t\tconst input# = delayLine#[upperIndex# & delayBufferMask#];\n\t\t\t\t\tfractionalDelaySample# = fractionalDelayG# * input# + prevInput# - fractionalDelayG# * fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tallPassSample# = fractionalDelaySample# * allPassG# + allPassPrevInput# - allPassG# * allPassSample#;\n\t\t\t\t\tallPassPrevInput# = fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tshelfSample# = shelfB0# * allPassSample# + shelfB1# * shelfPrevInput# - shelfA1# * shelfSample#;\n\t\t\t\t\tshelfPrevInput# = allPassSample#;\n\t\t\t\t\t\n\t\t\t\t\tdelayLine#[delayIndex# & delayBufferMask#] += shelfSample#;\n\t\t\t\t\tdelayLine#[(delayIndex# + delayResetOffset#) & delayBufferMask#] = 0.0;\n\t\t\t\t\tdelayIndex#++;\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = (`\n\n            const sampleList: string[] = [];\n            for (let voice: number = 0; voice < voiceCount; voice++) {\n                sampleList.push(\"fractionalDelaySample\" + voice + (voice == 1 ? \" * unisonSign\" : \"\"));\n            }\n\n            pickedStringSource += sampleList.join(\" + \");\n\n            pickedStringSource += `) * expression;\n\t\t\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\t\tdata[sampleIndex] += sample;\n\t\t\t\t\t\n\t\t\t\t\texpression += expressionDelta;\n\t\t\t\t\tdelayLength# += delayLengthDelta#;\n\t\t\t\t\tallPassG# += allPassGDelta#;\n\t\t\t\t\tshelfA1# += shelfA1Delta#;\n\t\t\t\t\tshelfB0# += shelfB0Delta#;\n\t\t\t\t\tshelfB1# += shelfB1Delta#;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);\n\t\t\t\tif (!Number.isFinite(allPassSample#) || Math.abs(allPassSample#) < epsilon) allPassSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(allPassPrevInput#) || Math.abs(allPassPrevInput#) < epsilon) allPassPrevInput# = 0.0;\n\t\t\t\tif (!Number.isFinite(shelfSample#) || Math.abs(shelfSample#) < epsilon) shelfSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(shelfPrevInput#) || Math.abs(shelfPrevInput#) < epsilon) shelfPrevInput# = 0.0;\n\t\t\t\tif (!Number.isFinite(fractionalDelaySample#) || Math.abs(fractionalDelaySample#) < epsilon) fractionalDelaySample# = 0.0;\n\t\t\t\tpickedString#.allPassSample = allPassSample#;\n\t\t\t\tpickedString#.allPassPrevInput = allPassPrevInput#;\n\t\t\t\tpickedString#.shelfSample = shelfSample#;\n\t\t\t\tpickedString#.shelfPrevInput = shelfPrevInput#;\n\t\t\t\tpickedString#.fractionalDelaySample = fractionalDelaySample#;\n\t\t\t\tpickedString#.delayIndex = delayIndex#;\n\t\t\t\tpickedString#.prevDelayLength = delayLength#;\n\t\t\t\tpickedString#.allPassG = allPassG#;\n\t\t\t\tpickedString#.shelfA1 = shelfA1#;\n\t\t\t\tpickedString#.shelfB0 = shelfB0#;\n\t\t\t\tpickedString#.shelfB1 = shelfB1#;\n\t\t\t\t\n\t\t\t\ttone.expression = expression;\n\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\t\t\ttone.initialNoteFilterInput2 = initialFilterInput2;`\n\n            // Duplicate lines containing \"#\" for each voice and replace the \"#\" with the voice index.\n            pickedStringSource = pickedStringSource.replace(/^.*\\#.*$/mg, line => {\n                const lines = [];\n                for (let voice: number = 0; voice < voiceCount; voice++) {\n                    lines.push(line.replace(/\\#/g, String(voice)));\n                }\n                return lines.join(\"\\n\");\n            });\n\n            //console.log(pickedStringSource);\n            pickedStringFunction = new Function(\"synth\", \"bufferIndex\", \"runLength\", \"tone\", \"instrumentState\", pickedStringSource);\n            Synth.pickedStringFunctionCache[voiceCount] = pickedStringFunction;\n        }\n\n        pickedStringFunction(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState);\n    }\n\n    private static effectsSynth(synth: Synth, outputDataL: Float32Array, outputDataR: Float32Array, bufferIndex: number, runLength: number, instrumentState: InstrumentState): void {\n        // TODO: If automation is involved, don't assume sliders will stay at zero.\n        // @jummbus - ^ Correct, removed the non-zero checks as modulation can change them.\n\n        const usesDistortion: boolean = effectsIncludeDistortion(instrumentState.effects);\n        const usesBitcrusher: boolean = effectsIncludeBitcrusher(instrumentState.effects);\n        const usesEqFilter: boolean = instrumentState.eqFilterCount > 0;\n        const usesPanning: boolean = effectsIncludePanning(instrumentState.effects);\n        const usesChorus: boolean = effectsIncludeChorus(instrumentState.effects);\n        const usesEcho: boolean = effectsIncludeEcho(instrumentState.effects);\n        const usesReverb: boolean = effectsIncludeReverb(instrumentState.effects);\n        let signature: number = 0; if (usesDistortion) signature = signature | 1;\n        signature = signature << 1; if (usesBitcrusher) signature = signature | 1;\n        signature = signature << 1; if (usesEqFilter) signature = signature | 1;\n        signature = signature << 1; if (usesPanning) signature = signature | 1;\n        signature = signature << 1; if (usesChorus) signature = signature | 1;\n        signature = signature << 1; if (usesEcho) signature = signature | 1;\n        signature = signature << 1; if (usesReverb) signature = signature | 1;\n\n        let effectsFunction: Function = Synth.effectsFunctionCache[signature];\n        if (effectsFunction == undefined) {\n            let effectsSource: string = \"\";\n\n            const usesDelays: boolean = usesChorus || usesReverb || usesEcho;\n\n            effectsSource += `\n\t\t\t\tconst Config = beepbox.Config;\n\t\t\t\tconst tempMonoInstrumentSampleBuffer = synth.tempMonoInstrumentSampleBuffer;\n\t\t\t\t\n\t\t\t\tlet mixVolume = +instrumentState.mixVolume;\n\t\t\t\tconst mixVolumeDelta = +instrumentState.mixVolumeDelta;`\n\n            if (usesDelays) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tlet delayInputMult = +instrumentState.delayInputMult;\n\t\t\t\tconst delayInputMultDelta = +instrumentState.delayInputMultDelta;`\n            }\n\n            if (usesDistortion) {\n                // Distortion can sometimes create noticeable aliasing.\n                // It seems the established industry best practice for distortion antialiasing\n                // is to upsample the inputs (\"zero stuffing\" followed by a brick wall lowpass\n                // at the original nyquist frequency), perform the distortion, then downsample\n                // (the lowpass again followed by dropping in-between samples). This is\n                // \"mathematically correct\" in that it preserves only the intended frequencies,\n                // but it has several unfortunate tradeoffs depending on the choice of filter,\n                // introducing latency and/or time smearing, since no true brick wall filter\n                // exists. For the time being, I've opted to instead generate in-between input\n                // samples using fractional delay all-pass filters, and after distorting them,\n                // I \"downsample\" these with a simple weighted sum.\n\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tconst distortionBaseVolume = +Config.distortionBaseVolume;\n\t\t\t\tlet distortion = instrumentState.distortion;\n\t\t\t\tconst distortionDelta = instrumentState.distortionDelta;\n\t\t\t\tlet distortionDrive = instrumentState.distortionDrive;\n\t\t\t\tconst distortionDriveDelta = instrumentState.distortionDriveDelta;\n\t\t\t\tconst distortionFractionalResolution = 4.0;\n\t\t\t\tconst distortionOversampleCompensation = distortionBaseVolume / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay1 = 1.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay2 = 2.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelay3 = 3.0 / distortionFractionalResolution;\n\t\t\t\tconst distortionFractionalDelayG1 = (1.0 - distortionFractionalDelay1) / (1.0 + distortionFractionalDelay1); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG2 = (1.0 - distortionFractionalDelay2) / (1.0 + distortionFractionalDelay2); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionFractionalDelayG3 = (1.0 - distortionFractionalDelay3) / (1.0 + distortionFractionalDelay3); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\tconst distortionNextOutputWeight1 = Math.cos(Math.PI * distortionFractionalDelay1) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight2 = Math.cos(Math.PI * distortionFractionalDelay2) * 0.5 + 0.5;\n\t\t\t\tconst distortionNextOutputWeight3 = Math.cos(Math.PI * distortionFractionalDelay3) * 0.5 + 0.5;\n\t\t\t\tconst distortionPrevOutputWeight1 = 1.0 - distortionNextOutputWeight1;\n\t\t\t\tconst distortionPrevOutputWeight2 = 1.0 - distortionNextOutputWeight2;\n\t\t\t\tconst distortionPrevOutputWeight3 = 1.0 - distortionNextOutputWeight3;\n\t\t\t\t\n\t\t\t\tlet distortionFractionalInput1 = +instrumentState.distortionFractionalInput1;\n\t\t\t\tlet distortionFractionalInput2 = +instrumentState.distortionFractionalInput2;\n\t\t\t\tlet distortionFractionalInput3 = +instrumentState.distortionFractionalInput3;\n\t\t\t\tlet distortionPrevInput = +instrumentState.distortionPrevInput;\n\t\t\t\tlet distortionNextOutput = +instrumentState.distortionNextOutput;`\n            }\n\n            if (usesBitcrusher) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tlet bitcrusherPrevInput = +instrumentState.bitcrusherPrevInput;\n\t\t\t\tlet bitcrusherCurrentOutput = +instrumentState.bitcrusherCurrentOutput;\n\t\t\t\tlet bitcrusherPhase = +instrumentState.bitcrusherPhase;\n\t\t\t\tlet bitcrusherPhaseDelta = +instrumentState.bitcrusherPhaseDelta;\n\t\t\t\tconst bitcrusherPhaseDeltaScale = +instrumentState.bitcrusherPhaseDeltaScale;\n\t\t\t\tlet bitcrusherScale = +instrumentState.bitcrusherScale;\n\t\t\t\tconst bitcrusherScaleScale = +instrumentState.bitcrusherScaleScale;\n\t\t\t\tlet bitcrusherFoldLevel = +instrumentState.bitcrusherFoldLevel;\n\t\t\t\tconst bitcrusherFoldLevelScale = +instrumentState.bitcrusherFoldLevelScale;`\n            }\n\n            if (usesEqFilter) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tlet filters = instrumentState.eqFilters;\n\t\t\t\tconst filterCount = instrumentState.eqFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +instrumentState.initialEqFilterInput1;\n\t\t\t\tlet initialFilterInput2 = +instrumentState.initialEqFilterInput2;\n\t\t\t\tconst applyFilters = beepbox.Synth.applyFilters;`\n            }\n\n            // The eq filter volume is also used to fade out the instrument state, so always include it.\n            effectsSource += `\n\t\t\t\t\n\t\t\t\tlet eqFilterVolume = +instrumentState.eqFilterVolume;\n\t\t\t\tconst eqFilterVolumeDelta = +instrumentState.eqFilterVolumeDelta;`\n\n            if (usesPanning) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tconst panningMask = synth.panningDelayBufferMask >>> 0;\n\t\t\t\tconst panningDelayLine = instrumentState.panningDelayLine;\n\t\t\t\tlet panningDelayPos = instrumentState.panningDelayPos & panningMask;\n\t\t\t\tlet   panningVolumeL      = +instrumentState.panningVolumeL;\n\t\t\t\tlet   panningVolumeR      = +instrumentState.panningVolumeR;\n\t\t\t\tconst panningVolumeDeltaL = +instrumentState.panningVolumeDeltaL;\n\t\t\t\tconst panningVolumeDeltaR = +instrumentState.panningVolumeDeltaR;\n\t\t\t\tlet   panningOffsetL      = +instrumentState.panningOffsetL;\n\t\t\t\tlet   panningOffsetR      = +instrumentState.panningOffsetR;\n\t\t\t\tconst panningOffsetDeltaL = 1.0 - instrumentState.panningOffsetDeltaL;\n\t\t\t\tconst panningOffsetDeltaR = 1.0 - instrumentState.panningOffsetDeltaR;`\n            }\n\n            if (usesChorus) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tconst chorusMask = synth.chorusDelayBufferMask >>> 0;\n\t\t\t\tconst chorusDelayLineL = instrumentState.chorusDelayLineL;\n\t\t\t\tconst chorusDelayLineR = instrumentState.chorusDelayLineR;\n\t\t\t\tinstrumentState.chorusDelayLineDirty = true;\n\t\t\t\tlet chorusDelayPos = instrumentState.chorusDelayPos & chorusMask;\n\t\t\t\t\n\t\t\t\tlet chorusVoiceMult = +instrumentState.chorusVoiceMult;\n\t\t\t\tconst chorusVoiceMultDelta = +instrumentState.chorusVoiceMultDelta;\n\t\t\t\tlet chorusCombinedMult = +instrumentState.chorusCombinedMult;\n\t\t\t\tconst chorusCombinedMultDelta = +instrumentState.chorusCombinedMultDelta;\n\t\t\t\t\n\t\t\t\tconst chorusDuration = +beepbox.Config.chorusPeriodSeconds;\n\t\t\t\tconst chorusAngle = Math.PI * 2.0 / (chorusDuration * synth.samplesPerSecond);\n\t\t\t\tconst chorusRange = synth.samplesPerSecond * beepbox.Config.chorusDelayRange;\n\t\t\t\tconst chorusOffset0 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][0] * chorusRange;\n\t\t\t\tconst chorusOffset1 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][1] * chorusRange;\n\t\t\t\tconst chorusOffset2 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[0][2] * chorusRange;\n\t\t\t\tconst chorusOffset3 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][0] * chorusRange;\n\t\t\t\tconst chorusOffset4 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][1] * chorusRange;\n\t\t\t\tconst chorusOffset5 = synth.chorusDelayBufferSize - beepbox.Config.chorusDelayOffsets[1][2] * chorusRange;\n\t\t\t\tlet chorusPhase = instrumentState.chorusPhase % (Math.PI * 2.0);\n\t\t\t\tlet chorusTap0Index = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]);\n\t\t\t\tlet chorusTap1Index = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]);\n\t\t\t\tlet chorusTap2Index = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]);\n\t\t\t\tlet chorusTap3Index = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]);\n\t\t\t\tlet chorusTap4Index = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]);\n\t\t\t\tlet chorusTap5Index = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]);\n\t\t\t\tchorusPhase += chorusAngle * runLength;\n\t\t\t\tconst chorusTap0End = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][0]) + runLength;\n\t\t\t\tconst chorusTap1End = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][1]) + runLength;\n\t\t\t\tconst chorusTap2End = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[0][2]) + runLength;\n\t\t\t\tconst chorusTap3End = chorusDelayPos + chorusOffset3 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][0]) + runLength;\n\t\t\t\tconst chorusTap4End = chorusDelayPos + chorusOffset4 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][1]) + runLength;\n\t\t\t\tconst chorusTap5End = chorusDelayPos + chorusOffset5 - chorusRange * Math.sin(chorusPhase + beepbox.Config.chorusPhaseOffsets[1][2]) + runLength;\n\t\t\t\tconst chorusTap0Delta = (chorusTap0End - chorusTap0Index) / runLength;\n\t\t\t\tconst chorusTap1Delta = (chorusTap1End - chorusTap1Index) / runLength;\n\t\t\t\tconst chorusTap2Delta = (chorusTap2End - chorusTap2Index) / runLength;\n\t\t\t\tconst chorusTap3Delta = (chorusTap3End - chorusTap3Index) / runLength;\n\t\t\t\tconst chorusTap4Delta = (chorusTap4End - chorusTap4Index) / runLength;\n\t\t\t\tconst chorusTap5Delta = (chorusTap5End - chorusTap5Index) / runLength;`\n            }\n\n            if (usesEcho) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tlet echoMult = +instrumentState.echoMult;\n\t\t\t\tconst echoMultDelta = +instrumentState.echoMultDelta;\n\t\t\t\t\n\t\t\t\tconst echoDelayLineL = instrumentState.echoDelayLineL;\n\t\t\t\tconst echoDelayLineR = instrumentState.echoDelayLineR;\n\t\t\t\tconst echoMask = (echoDelayLineL.length - 1) >>> 0;\n\t\t\t\tinstrumentState.echoDelayLineDirty = true;\n\t\t\t\t\n\t\t\t\tlet echoDelayPos = instrumentState.echoDelayPos & echoMask;\n\t\t\t\tconst echoDelayOffsetStart = (echoDelayLineL.length - instrumentState.echoDelayOffsetStart) & echoMask;\n\t\t\t\tconst echoDelayOffsetEnd   = (echoDelayLineL.length - instrumentState.echoDelayOffsetEnd) & echoMask;\n\t\t\t\tlet echoDelayOffsetRatio = +instrumentState.echoDelayOffsetRatio;\n\t\t\t\tconst echoDelayOffsetRatioDelta = +instrumentState.echoDelayOffsetRatioDelta;\n\t\t\t\t\n\t\t\t\tconst echoShelfA1 = +instrumentState.echoShelfA1;\n\t\t\t\tconst echoShelfB0 = +instrumentState.echoShelfB0;\n\t\t\t\tconst echoShelfB1 = +instrumentState.echoShelfB1;\n\t\t\t\tlet echoShelfSampleL = +instrumentState.echoShelfSampleL;\n\t\t\t\tlet echoShelfSampleR = +instrumentState.echoShelfSampleR;\n\t\t\t\tlet echoShelfPrevInputL = +instrumentState.echoShelfPrevInputL;\n\t\t\t\tlet echoShelfPrevInputR = +instrumentState.echoShelfPrevInputR;`\n            }\n\n            if (usesReverb) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tconst reverbMask = Config.reverbDelayBufferMask >>> 0; //TODO: Dynamic reverb buffer size.\n\t\t\t\tconst reverbDelayLine = instrumentState.reverbDelayLine;\n\t\t\t\tinstrumentState.reverbDelayLineDirty = true;\n\t\t\t\tlet reverbDelayPos = instrumentState.reverbDelayPos & reverbMask;\n\t\t\t\t\n\t\t\t\tlet reverb = +instrumentState.reverbMult;\n\t\t\t\tconst reverbDelta = +instrumentState.reverbMultDelta;\n\t\t\t\t\n\t\t\t\tconst reverbShelfA1 = +instrumentState.reverbShelfA1;\n\t\t\t\tconst reverbShelfB0 = +instrumentState.reverbShelfB0;\n\t\t\t\tconst reverbShelfB1 = +instrumentState.reverbShelfB1;\n\t\t\t\tlet reverbShelfSample0 = +instrumentState.reverbShelfSample0;\n\t\t\t\tlet reverbShelfSample1 = +instrumentState.reverbShelfSample1;\n\t\t\t\tlet reverbShelfSample2 = +instrumentState.reverbShelfSample2;\n\t\t\t\tlet reverbShelfSample3 = +instrumentState.reverbShelfSample3;\n\t\t\t\tlet reverbShelfPrevInput0 = +instrumentState.reverbShelfPrevInput0;\n\t\t\t\tlet reverbShelfPrevInput1 = +instrumentState.reverbShelfPrevInput1;\n\t\t\t\tlet reverbShelfPrevInput2 = +instrumentState.reverbShelfPrevInput2;\n\t\t\t\tlet reverbShelfPrevInput3 = +instrumentState.reverbShelfPrevInput3;`\n            }\n\n            effectsSource += `\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tlet sample = tempMonoInstrumentSampleBuffer[sampleIndex];\n\t\t\t\t\ttempMonoInstrumentSampleBuffer[sampleIndex] = 0.0;`\n\n            if (usesDistortion) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tconst distortionReverse = 1.0 - distortion;\n\t\t\t\t\tconst distortionNextInput = sample * distortionDrive;\n\t\t\t\t\tsample = distortionNextOutput;\n\t\t\t\t\tdistortionNextOutput = distortionNextInput / (distortionReverse * Math.abs(distortionNextInput) + distortion);\n\t\t\t\t\tdistortionFractionalInput1 = distortionFractionalDelayG1 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG1 * distortionFractionalInput1;\n\t\t\t\t\tdistortionFractionalInput2 = distortionFractionalDelayG2 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG2 * distortionFractionalInput2;\n\t\t\t\t\tdistortionFractionalInput3 = distortionFractionalDelayG3 * distortionNextInput + distortionPrevInput - distortionFractionalDelayG3 * distortionFractionalInput3;\n\t\t\t\t\tconst distortionOutput1 = distortionFractionalInput1 / (distortionReverse * Math.abs(distortionFractionalInput1) + distortion);\n\t\t\t\t\tconst distortionOutput2 = distortionFractionalInput2 / (distortionReverse * Math.abs(distortionFractionalInput2) + distortion);\n\t\t\t\t\tconst distortionOutput3 = distortionFractionalInput3 / (distortionReverse * Math.abs(distortionFractionalInput3) + distortion);\n\t\t\t\t\tdistortionNextOutput += distortionOutput1 * distortionNextOutputWeight1 + distortionOutput2 * distortionNextOutputWeight2 + distortionOutput3 * distortionNextOutputWeight3;\n\t\t\t\t\tsample += distortionOutput1 * distortionPrevOutputWeight1 + distortionOutput2 * distortionPrevOutputWeight2 + distortionOutput3 * distortionPrevOutputWeight3;\n\t\t\t\t\tsample *= distortionOversampleCompensation;\n\t\t\t\t\tdistortionPrevInput = distortionNextInput;\n\t\t\t\t\tdistortion += distortionDelta;\n\t\t\t\t\tdistortionDrive += distortionDriveDelta;`\n            }\n\n            if (usesBitcrusher) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tbitcrusherPhase += bitcrusherPhaseDelta;\n\t\t\t\t\tif (bitcrusherPhase < 1.0) {\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\n\t\t\t\t\t\tsample = bitcrusherCurrentOutput;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbitcrusherPhase = bitcrusherPhase % 1.0;\n\t\t\t\t\t\tconst ratio = bitcrusherPhase / bitcrusherPhaseDelta;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst lerpedInput = sample + (bitcrusherPrevInput - sample) * ratio;\n\t\t\t\t\t\tbitcrusherPrevInput = sample;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst bitcrusherWrapLevel = bitcrusherFoldLevel * 4.0;\n\t\t\t\t\t\tconst wrappedSample = (((lerpedInput + bitcrusherFoldLevel) % bitcrusherWrapLevel) + bitcrusherWrapLevel) % bitcrusherWrapLevel;\n\t\t\t\t\t\tconst foldedSample = bitcrusherFoldLevel - Math.abs(bitcrusherFoldLevel * 2.0 - wrappedSample);\n\t\t\t\t\t\tconst scaledSample = foldedSample / bitcrusherScale;\n\t\t\t\t\t\tconst oldValue = bitcrusherCurrentOutput;\n\t\t\t\t\t\tconst newValue = (((scaledSample > 0 ? scaledSample + 1 : scaledSample)|0)-.5) * bitcrusherScale;\n\t\t\t\t\t\t\n\t\t\t\t\t\tsample = oldValue + (newValue - oldValue) * ratio;\n\t\t\t\t\t\tbitcrusherCurrentOutput = newValue;\n\t\t\t\t\t}\n\t\t\t\t\tbitcrusherPhaseDelta *= bitcrusherPhaseDeltaScale;\n\t\t\t\t\tbitcrusherScale *= bitcrusherScaleScale;\n\t\t\t\t\tbitcrusherFoldLevel *= bitcrusherFoldLevelScale;`\n            }\n\n            if (usesEqFilter) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = sample;\n\t\t\t\t\tsample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;`\n            }\n\n            // The eq filter volume is also used to fade out the instrument state, so always include it.\n            effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tsample *= eqFilterVolume;\n\t\t\t\t\teqFilterVolume += eqFilterVolumeDelta;`\n\n            if (usesPanning) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tpanningDelayLine[panningDelayPos] = sample;\n\t\t\t\t\tconst panningRatioL  = panningOffsetL % 1;\n\t\t\t\t\tconst panningRatioR  = panningOffsetR % 1;\n\t\t\t\t\tconst panningTapLA   = panningDelayLine[(panningOffsetL) & panningMask];\n\t\t\t\t\tconst panningTapLB   = panningDelayLine[(panningOffsetL + 1) & panningMask];\n\t\t\t\t\tconst panningTapRA   = panningDelayLine[(panningOffsetR) & panningMask];\n\t\t\t\t\tconst panningTapRB   = panningDelayLine[(panningOffsetR + 1) & panningMask];\n\t\t\t\t\tconst panningTapL    = panningTapLA + (panningTapLB - panningTapLA) * panningRatioL;\n\t\t\t\t\tconst panningTapR    = panningTapRA + (panningTapRB - panningTapRA) * panningRatioR;\n\t\t\t\t\tlet sampleL = panningTapL * panningVolumeL;\n\t\t\t\t\tlet sampleR = panningTapR * panningVolumeR;\n\t\t\t\t\tpanningDelayPos = (panningDelayPos + 1) & panningMask;\n\t\t\t\t\tpanningVolumeL += panningVolumeDeltaL;\n\t\t\t\t\tpanningVolumeR += panningVolumeDeltaR;\n\t\t\t\t\tpanningOffsetL += panningOffsetDeltaL;\n\t\t\t\t\tpanningOffsetR += panningOffsetDeltaR;`\n            } else {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tlet sampleL = sample;\n\t\t\t\t\tlet sampleR = sample;`\n            }\n\n            if (usesChorus) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tconst chorusTap0Ratio = chorusTap0Index % 1;\n\t\t\t\t\tconst chorusTap1Ratio = chorusTap1Index % 1;\n\t\t\t\t\tconst chorusTap2Ratio = chorusTap2Index % 1;\n\t\t\t\t\tconst chorusTap3Ratio = chorusTap3Index % 1;\n\t\t\t\t\tconst chorusTap4Ratio = chorusTap4Index % 1;\n\t\t\t\t\tconst chorusTap5Ratio = chorusTap5Index % 1;\n\t\t\t\t\tconst chorusTap0A = chorusDelayLineL[(chorusTap0Index) & chorusMask];\n\t\t\t\t\tconst chorusTap0B = chorusDelayLineL[(chorusTap0Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap1A = chorusDelayLineL[(chorusTap1Index) & chorusMask];\n\t\t\t\t\tconst chorusTap1B = chorusDelayLineL[(chorusTap1Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap2A = chorusDelayLineL[(chorusTap2Index) & chorusMask];\n\t\t\t\t\tconst chorusTap2B = chorusDelayLineL[(chorusTap2Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap3A = chorusDelayLineR[(chorusTap3Index) & chorusMask];\n\t\t\t\t\tconst chorusTap3B = chorusDelayLineR[(chorusTap3Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap4A = chorusDelayLineR[(chorusTap4Index) & chorusMask];\n\t\t\t\t\tconst chorusTap4B = chorusDelayLineR[(chorusTap4Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap5A = chorusDelayLineR[(chorusTap5Index) & chorusMask];\n\t\t\t\t\tconst chorusTap5B = chorusDelayLineR[(chorusTap5Index + 1) & chorusMask];\n\t\t\t\t\tconst chorusTap0 = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;\n\t\t\t\t\tconst chorusTap1 = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;\n\t\t\t\t\tconst chorusTap2 = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;\n\t\t\t\t\tconst chorusTap3 = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;\n\t\t\t\t\tconst chorusTap4 = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;\n\t\t\t\t\tconst chorusTap5 = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;\n\t\t\t\t\tchorusDelayLineL[chorusDelayPos] = sampleL * delayInputMult;\n\t\t\t\t\tchorusDelayLineR[chorusDelayPos] = sampleR * delayInputMult;\n\t\t\t\t\tsampleL = chorusCombinedMult * (sampleL + chorusVoiceMult * (chorusTap1 - chorusTap0 - chorusTap2));\n\t\t\t\t\tsampleR = chorusCombinedMult * (sampleR + chorusVoiceMult * (chorusTap4 - chorusTap3 - chorusTap5));\n\t\t\t\t\tchorusDelayPos = (chorusDelayPos + 1) & chorusMask;\n\t\t\t\t\tchorusTap0Index += chorusTap0Delta;\n\t\t\t\t\tchorusTap1Index += chorusTap1Delta;\n\t\t\t\t\tchorusTap2Index += chorusTap2Delta;\n\t\t\t\t\tchorusTap3Index += chorusTap3Delta;\n\t\t\t\t\tchorusTap4Index += chorusTap4Delta;\n\t\t\t\t\tchorusTap5Index += chorusTap5Delta;\n\t\t\t\t\tchorusVoiceMult += chorusVoiceMultDelta;\n\t\t\t\t\tchorusCombinedMult += chorusCombinedMultDelta;`\n            }\n\n            if (usesEcho) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tconst echoTapStartIndex = (echoDelayPos + echoDelayOffsetStart) & echoMask;\n\t\t\t\t\tconst echoTapEndIndex   = (echoDelayPos + echoDelayOffsetEnd  ) & echoMask;\n\t\t\t\t\tconst echoTapStartL = echoDelayLineL[echoTapStartIndex];\n\t\t\t\t\tconst echoTapEndL   = echoDelayLineL[echoTapEndIndex];\n\t\t\t\t\tconst echoTapStartR = echoDelayLineR[echoTapStartIndex];\n\t\t\t\t\tconst echoTapEndR   = echoDelayLineR[echoTapEndIndex];\n\t\t\t\t\tconst echoTapL = (echoTapStartL + (echoTapEndL - echoTapStartL) * echoDelayOffsetRatio) * echoMult;\n\t\t\t\t\tconst echoTapR = (echoTapStartR + (echoTapEndR - echoTapStartR) * echoDelayOffsetRatio) * echoMult;\n\t\t\t\t\t\n\t\t\t\t\techoShelfSampleL = echoShelfB0 * echoTapL + echoShelfB1 * echoShelfPrevInputL - echoShelfA1 * echoShelfSampleL;\n\t\t\t\t\techoShelfSampleR = echoShelfB0 * echoTapR + echoShelfB1 * echoShelfPrevInputR - echoShelfA1 * echoShelfSampleR;\n\t\t\t\t\techoShelfPrevInputL = echoTapL;\n\t\t\t\t\techoShelfPrevInputR = echoTapR;\n\t\t\t\t\tsampleL += echoShelfSampleL;\n\t\t\t\t\tsampleR += echoShelfSampleR;\n\t\t\t\t\t\n\t\t\t\t\techoDelayLineL[echoDelayPos] = sampleL * delayInputMult;\n\t\t\t\t\techoDelayLineR[echoDelayPos] = sampleR * delayInputMult;\n\t\t\t\t\techoDelayPos = (echoDelayPos + 1) & echoMask;\n\t\t\t\t\techoDelayOffsetRatio += echoDelayOffsetRatioDelta;\n\t\t\t\t\techoMult += echoMultDelta;\n                    `\n            }\n\n            if (usesReverb) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\t// Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\n\t\t\t\t\t// good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\n\t\t\t\t\t// Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\n\t\t\t\t\t// Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\n\t\t\t\t\tconst reverbDelayPos1 = (reverbDelayPos +  3041) & reverbMask;\n\t\t\t\t\tconst reverbDelayPos2 = (reverbDelayPos +  6426) & reverbMask;\n\t\t\t\t\tconst reverbDelayPos3 = (reverbDelayPos + 10907) & reverbMask;\n\t\t\t\t\tconst reverbSample0 = (reverbDelayLine[reverbDelayPos]);\n\t\t\t\t\tconst reverbSample1 = reverbDelayLine[reverbDelayPos1];\n\t\t\t\t\tconst reverbSample2 = reverbDelayLine[reverbDelayPos2];\n\t\t\t\t\tconst reverbSample3 = reverbDelayLine[reverbDelayPos3];\n\t\t\t\t\tconst reverbTemp0 = -(reverbSample0 + sampleL) + reverbSample1;\n\t\t\t\t\tconst reverbTemp1 = -(reverbSample0 + sampleR) - reverbSample1;\n\t\t\t\t\tconst reverbTemp2 = -reverbSample2 + reverbSample3;\n\t\t\t\t\tconst reverbTemp3 = -reverbSample2 - reverbSample3;\n\t\t\t\t\tconst reverbShelfInput0 = (reverbTemp0 + reverbTemp2) * reverb;\n\t\t\t\t\tconst reverbShelfInput1 = (reverbTemp1 + reverbTemp3) * reverb;\n\t\t\t\t\tconst reverbShelfInput2 = (reverbTemp0 - reverbTemp2) * reverb;\n\t\t\t\t\tconst reverbShelfInput3 = (reverbTemp1 - reverbTemp3) * reverb;\n\t\t\t\t\treverbShelfSample0 = reverbShelfB0 * reverbShelfInput0 + reverbShelfB1 * reverbShelfPrevInput0 - reverbShelfA1 * reverbShelfSample0;\n\t\t\t\t\treverbShelfSample1 = reverbShelfB0 * reverbShelfInput1 + reverbShelfB1 * reverbShelfPrevInput1 - reverbShelfA1 * reverbShelfSample1;\n\t\t\t\t\treverbShelfSample2 = reverbShelfB0 * reverbShelfInput2 + reverbShelfB1 * reverbShelfPrevInput2 - reverbShelfA1 * reverbShelfSample2;\n\t\t\t\t\treverbShelfSample3 = reverbShelfB0 * reverbShelfInput3 + reverbShelfB1 * reverbShelfPrevInput3 - reverbShelfA1 * reverbShelfSample3;\n\t\t\t\t\treverbShelfPrevInput0 = reverbShelfInput0;\n\t\t\t\t\treverbShelfPrevInput1 = reverbShelfInput1;\n\t\t\t\t\treverbShelfPrevInput2 = reverbShelfInput2;\n\t\t\t\t\treverbShelfPrevInput3 = reverbShelfInput3;\n\t\t\t\t\treverbDelayLine[reverbDelayPos1] = reverbShelfSample0 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos2] = reverbShelfSample1 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos3] = reverbShelfSample2 * delayInputMult;\n\t\t\t\t\treverbDelayLine[reverbDelayPos ] = reverbShelfSample3 * delayInputMult;\n\t\t\t\t\treverbDelayPos = (reverbDelayPos + 1) & reverbMask;\n\t\t\t\t\tsampleL += reverbSample1 + reverbSample2 + reverbSample3;\n\t\t\t\t\tsampleR += reverbSample0 + reverbSample2 - reverbSample3;\n\t\t\t\t\treverb += reverbDelta;`\n            }\n\n            effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\toutputDataL[sampleIndex] += sampleL * mixVolume;\n\t\t\t\t\toutputDataR[sampleIndex] += sampleR * mixVolume;\n\t\t\t\t\tmixVolume += mixVolumeDelta;`\n\n            if (usesDelays) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\t\tdelayInputMult += delayInputMultDelta;`\n            }\n\n            effectsSource += `\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tinstrumentState.mixVolume = mixVolume;\n\t\t\t\tinstrumentState.eqFilterVolume = eqFilterVolume;\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);`\n\n            if (usesDelays) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tinstrumentState.delayInputMult = delayInputMult;`\n            }\n\n            if (usesDistortion) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tinstrumentState.distortion = distortion;\n\t\t\t\tinstrumentState.distortionDrive = distortionDrive;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput1) || Math.abs(distortionFractionalInput1) < epsilon) distortionFractionalInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput2) || Math.abs(distortionFractionalInput2) < epsilon) distortionFractionalInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionFractionalInput3) || Math.abs(distortionFractionalInput3) < epsilon) distortionFractionalInput3 = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionPrevInput) || Math.abs(distortionPrevInput) < epsilon) distortionPrevInput = 0.0;\n\t\t\t\tif (!Number.isFinite(distortionNextOutput) || Math.abs(distortionNextOutput) < epsilon) distortionNextOutput = 0.0;\n\t\t\t\t\n\t\t\t\tinstrumentState.distortionFractionalInput1 = distortionFractionalInput1;\n\t\t\t\tinstrumentState.distortionFractionalInput2 = distortionFractionalInput2;\n\t\t\t\tinstrumentState.distortionFractionalInput3 = distortionFractionalInput3;\n\t\t\t\tinstrumentState.distortionPrevInput = distortionPrevInput;\n\t\t\t\tinstrumentState.distortionNextOutput = distortionNextOutput;`\n            }\n\n            if (usesBitcrusher) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\tif (Math.abs(bitcrusherPrevInput) < epsilon) bitcrusherPrevInput = 0.0;\n\t\t\t\tif (Math.abs(bitcrusherCurrentOutput) < epsilon) bitcrusherCurrentOutput = 0.0;\n\t\t\t\tinstrumentState.bitcrusherPrevInput = bitcrusherPrevInput;\n\t\t\t\tinstrumentState.bitcrusherCurrentOutput = bitcrusherCurrentOutput;\n\t\t\t\tinstrumentState.bitcrusherPhase = bitcrusherPhase;\n\t\t\t\tinstrumentState.bitcrusherPhaseDelta = bitcrusherPhaseDelta;\n\t\t\t\tinstrumentState.bitcrusherScale = bitcrusherScale;\n\t\t\t\tinstrumentState.bitcrusherFoldLevel = bitcrusherFoldLevel;`\n\n            }\n\n            if (usesEqFilter) {\n                effectsSource += `\n\t\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\t// The filter input here is downstream from another filter so we\n\t\t\t\t// better make sure it's safe too.\n\t\t\t\tif (!(initialFilterInput1 < 100) || !(initialFilterInput2 < 100)) {\n\t\t\t\t\tinitialFilterInput1 = 0.0;\n\t\t\t\t\tinitialFilterInput2 = 0.0;\n\t\t\t\t}\n\t\t\t\tif (Math.abs(initialFilterInput1) < epsilon) initialFilterInput1 = 0.0;\n\t\t\t\tif (Math.abs(initialFilterInput2) < epsilon) initialFilterInput2 = 0.0;\n\t\t\t\tinstrumentState.initialEqFilterInput1 = initialFilterInput1;\n\t\t\t\tinstrumentState.initialEqFilterInput2 = initialFilterInput2;`\n            }\n\n            if (usesPanning) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(panningDelayLine, panningDelayPos, panningMask);\n\t\t\t\tinstrumentState.panningDelayPos = panningDelayPos;\n\t\t\t\tinstrumentState.panningVolumeL = panningVolumeL;\n\t\t\t\tinstrumentState.panningVolumeR = panningVolumeR;\n\t\t\t\tinstrumentState.panningOffsetL = panningOffsetL;\n\t\t\t\tinstrumentState.panningOffsetR = panningOffsetR;`\n            }\n\n            if (usesChorus) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(chorusDelayLineL, chorusDelayPos, chorusMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(chorusDelayLineR, chorusDelayPos, chorusMask);\n\t\t\t\tinstrumentState.chorusPhase = chorusPhase;\n\t\t\t\tinstrumentState.chorusDelayPos = chorusDelayPos;\n\t\t\t\tinstrumentState.chorusVoiceMult = chorusVoiceMult;\n\t\t\t\tinstrumentState.chorusCombinedMult = chorusCombinedMult;`\n            }\n\n            if (usesEcho) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(echoDelayLineL, echoDelayPos, echoMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(echoDelayLineR, echoDelayPos, echoMask);\n\t\t\t\tinstrumentState.echoDelayPos = echoDelayPos;\n\t\t\t\tinstrumentState.echoMult = echoMult;\n\t\t\t\tinstrumentState.echoDelayOffsetRatio = echoDelayOffsetRatio;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(echoShelfSampleL) || Math.abs(echoShelfSampleL) < epsilon) echoShelfSampleL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfSampleR) || Math.abs(echoShelfSampleR) < epsilon) echoShelfSampleR = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputL) || Math.abs(echoShelfPrevInputL) < epsilon) echoShelfPrevInputL = 0.0;\n\t\t\t\tif (!Number.isFinite(echoShelfPrevInputR) || Math.abs(echoShelfPrevInputR) < epsilon) echoShelfPrevInputR = 0.0;\n\t\t\t\tinstrumentState.echoShelfSampleL = echoShelfSampleL;\n\t\t\t\tinstrumentState.echoShelfSampleR = echoShelfSampleR;\n\t\t\t\tinstrumentState.echoShelfPrevInputL = echoShelfPrevInputL;\n\t\t\t\tinstrumentState.echoShelfPrevInputR = echoShelfPrevInputR;`\n            }\n\n            if (usesReverb) {\n                effectsSource += `\n\t\t\t\t\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos        , reverbMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  3041, reverbMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos +  6426, reverbMask);\n\t\t\t\tbeepbox.Synth.sanitizeDelayLine(reverbDelayLine, reverbDelayPos + 10907, reverbMask);\n\t\t\t\tinstrumentState.reverbDelayPos = reverbDelayPos;\n\t\t\t\tinstrumentState.reverbMult = reverb;\n\t\t\t\t\n\t\t\t\tif (!Number.isFinite(reverbShelfSample0) || Math.abs(reverbShelfSample0) < epsilon) reverbShelfSample0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample1) || Math.abs(reverbShelfSample1) < epsilon) reverbShelfSample1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample2) || Math.abs(reverbShelfSample2) < epsilon) reverbShelfSample2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfSample3) || Math.abs(reverbShelfSample3) < epsilon) reverbShelfSample3 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput0) || Math.abs(reverbShelfPrevInput0) < epsilon) reverbShelfPrevInput0 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput1) || Math.abs(reverbShelfPrevInput1) < epsilon) reverbShelfPrevInput1 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput2) || Math.abs(reverbShelfPrevInput2) < epsilon) reverbShelfPrevInput2 = 0.0;\n\t\t\t\tif (!Number.isFinite(reverbShelfPrevInput3) || Math.abs(reverbShelfPrevInput3) < epsilon) reverbShelfPrevInput3 = 0.0;\n\t\t\t\tinstrumentState.reverbShelfSample0 = reverbShelfSample0;\n\t\t\t\tinstrumentState.reverbShelfSample1 = reverbShelfSample1;\n\t\t\t\tinstrumentState.reverbShelfSample2 = reverbShelfSample2;\n\t\t\t\tinstrumentState.reverbShelfSample3 = reverbShelfSample3;\n\t\t\t\tinstrumentState.reverbShelfPrevInput0 = reverbShelfPrevInput0;\n\t\t\t\tinstrumentState.reverbShelfPrevInput1 = reverbShelfPrevInput1;\n\t\t\t\tinstrumentState.reverbShelfPrevInput2 = reverbShelfPrevInput2;\n\t\t\t\tinstrumentState.reverbShelfPrevInput3 = reverbShelfPrevInput3;`\n            }\n\n            //console.log(effectsSource);\n            effectsFunction = new Function(\"synth\", \"outputDataL\", \"outputDataR\", \"bufferIndex\", \"runLength\", \"instrumentState\", effectsSource);\n            Synth.effectsFunctionCache[signature] = effectsFunction;\n        }\n\n        effectsFunction(synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);\n    }\n\n    private static pulseWidthSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrument: Instrument): void {\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n\n        let phaseDelta: number = tone.phaseDeltas[0];\n        const phaseDeltaScale: number = +tone.phaseDeltaScales[0];\n        let expression: number = +tone.expression;\n        const expressionDelta: number = +tone.expressionDelta;\n        let phase: number = (tone.phases[0] % 1);\n\n        let pulseWidth: number = tone.pulseWidth;\n        const pulseWidthDelta: number = tone.pulseWidthDelta;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\n        const filterCount: number = tone.noteFilterCount | 0;\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\n        const applyFilters: Function = Synth.applyFilters;\n\n        const stopIndex: number = bufferIndex + roundedSamplesPerTick;\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\n            const sawPhaseA: number = phase % 1;\n            const sawPhaseB: number = (phase + pulseWidth) % 1;\n\n            let pulseWave: number = sawPhaseB - sawPhaseA;\n\n            // This is a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing. \n            if (!instrument.aliases) {\n                if (sawPhaseA < phaseDelta) {\n                    var t = sawPhaseA / phaseDelta;\n                    pulseWave += (t + t - t * t - 1) * 0.5;\n                } else if (sawPhaseA > 1.0 - phaseDelta) {\n                    var t = (sawPhaseA - 1.0) / phaseDelta;\n                    pulseWave += (t + t + t * t + 1) * 0.5;\n                }\n                if (sawPhaseB < phaseDelta) {\n                    var t = sawPhaseB / phaseDelta;\n                    pulseWave -= (t + t - t * t - 1) * 0.5;\n                } else if (sawPhaseB > 1.0 - phaseDelta) {\n                    var t = (sawPhaseB - 1.0) / phaseDelta;\n                    pulseWave -= (t + t + t * t + 1) * 0.5;\n                }\n            }\n\n            const inputSample: number = pulseWave;\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n\n            phase += phaseDelta;\n            phaseDelta *= phaseDeltaScale;\n            pulseWidth += pulseWidthDelta;\n\n            const output: number = sample * expression;\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phases[0] = phase;\n        tone.phaseDeltas[0] = phaseDelta;\n        tone.expression = expression;\n        tone.pulseWidth = pulseWidth;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }\n\n     private static supersawSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\n\t\tconst data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n\t\tconst voiceCount: number = Config.supersawVoiceCount|0;\n\t\t\n\t\tlet phaseDelta: number = tone.phaseDeltas[0];\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScales[0];\n\t\tlet expression: number = +tone.expression;\n\t\tconst expressionDelta: number = +tone.expressionDelta;\n\t\tlet phases: number[] = tone.phases;\n\t\t\n\t\tlet dynamism: number = +tone.supersawDynamism;\n\t\tconst dynamismDelta: number = +tone.supersawDynamismDelta;\n\t\tconst unisonDetunes: number[] = tone.supersawUnisonDetunes;\n\t\tlet shape: number = +tone.supersawShape;\n\t\tconst shapeDelta: number = +tone.supersawShapeDelta;\n\t\tlet delayLength: number = +tone.supersawDelayLength;\n\t\tconst delayLengthDelta: number = +tone.supersawDelayLengthDelta;\n\t\tconst delayLine: Float32Array = tone.supersawDelayLine!;\n\t\tconst delayBufferMask: number = (delayLine.length - 1) >> 0;\n\t\tlet delayIndex: number = tone.supersawDelayIndex|0;\n\t\tdelayIndex = (delayIndex & delayBufferMask) + delayLine.length;\n\t\t\n\t\tconst filters: DynamicBiquadFilter[] = tone.noteFilters;\n\t\tconst filterCount: number = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1: number = +tone.initialNoteFilterInput1;\n\t\tlet initialFilterInput2: number = +tone.initialNoteFilterInput2;\n\t\tconst applyFilters: Function = Synth.applyFilters;\n\t\t\n\t\tconst stopIndex: number = bufferIndex + runLength;\n\t\tfor (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t// The phase initially starts at a zero crossing so apply\n\t\t\t// the delta before first sample to get a nonzero value.\n\t\t\tlet phase: number = (phases[0] + phaseDelta) % 1.0;\n\t\t\tlet supersawSample: number = phase - 0.5 * (1.0 + (voiceCount - 1.0) * dynamism);\n\t\t\t\n\t\t\t// This is a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing. \n\t\t\tif (phase < phaseDelta) {\n\t\t\t\tvar t: number = phase / phaseDelta;\n\t\t\t\tsupersawSample -= (t+t-t*t-1) * 0.5;\n\t\t\t} else if (phase > 1.0 - phaseDelta) {\n\t\t\t\tvar t: number = (phase - 1.0) / phaseDelta;\n\t\t\t\tsupersawSample -= (t+t+t*t+1) * 0.5;\n\t\t\t}\n\t\t\t\n\t\t\tphases[0] = phase;\n\t\t\t\n\t\t\tfor (let i: number = 1; i < voiceCount; i++) {\n\t\t\t\tconst detunedPhaseDelta: number = phaseDelta * unisonDetunes[i];\n\t\t\t\t// The phase initially starts at a zero crossing so apply\n\t\t\t\t// the delta before first sample to get a nonzero value.\n\t\t\t\tlet phase: number = (phases[i] + detunedPhaseDelta) % 1.0;\n\t\t\t\tsupersawSample += phase * dynamism;\n\t\t\t\t\n\t\t\t\t// This is a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing. \n\t\t\t\tif (phase < detunedPhaseDelta) {\n\t\t\t\t\tconst t: number = phase / detunedPhaseDelta;\n\t\t\t\t\tsupersawSample -= (t+t-t*t-1) * 0.5 * dynamism;\n\t\t\t\t} else if (phase > 1.0 - detunedPhaseDelta) {\n\t\t\t\t\tconst t: number = (phase - 1.0) / detunedPhaseDelta;\n\t\t\t\t\tsupersawSample -= (t+t+t*t+1) * 0.5 * dynamism;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tphases[i] = phase;\n\t\t\t}\n\t\t\t\n\t\t\tdelayLine[delayIndex & delayBufferMask] = supersawSample;\n\t\t\tconst delaySampleTime: number = delayIndex - delayLength;\n\t\t\tconst lowerIndex: number = delaySampleTime | 0;\n\t\t\tconst upperIndex: number = lowerIndex + 1;\n\t\t\tconst delayRatio: number = delaySampleTime - lowerIndex;\n\t\t\tconst prevDelaySample: number = delayLine[lowerIndex & delayBufferMask];\n\t\t\tconst nextDelaySample: number = delayLine[upperIndex & delayBufferMask];\n\t\t\tconst delaySample: number = prevDelaySample + (nextDelaySample - prevDelaySample) * delayRatio;\n\t\t\tdelayIndex++;\n\t\t\t\n\t\t\tconst inputSample: number = supersawSample - delaySample * shape;\n\t\t\tconst sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\n\t\t\tphaseDelta *= phaseDeltaScale;\n\t\t\tdynamism += dynamismDelta;\n\t\t\tshape += shapeDelta;\n\t\t\tdelayLength += delayLengthDelta;\n\t\t\t\n\t\t\tconst output: number = sample * expression;\n\t\t\texpression += expressionDelta;\n\t\t\t\n\t\t\tdata[sampleIndex] += output;\n\t\t}\n\t\t\n\t\ttone.phaseDeltas[0] = phaseDelta;\n\t\ttone.expression = expression;\n\t\ttone.supersawDynamism = dynamism;\n\t\ttone.supersawShape = shape;\n\t\ttone.supersawDelayLength = delayLength;\n\t\ttone.supersawDelayIndex = delayIndex;\n\t\t\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t}\n\n    private static fmSourceTemplate: string[] = (`\n\t\tconst data = synth.tempMonoInstrumentSampleBuffer;\n\t\tconst sineWave = beepbox.Config.sineWave;\n\t\t\t\n\t\t// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\n\t\tlet operator#Phase       = +((tone.phases[#] % 1) + 1000) * ` + Config.sineWaveLength + `;\n\t\tlet operator#PhaseDelta  = +tone.phaseDeltas[#] * ` + Config.sineWaveLength + `;\n\t\tlet operator#PhaseDeltaScale = +tone.phaseDeltaScales[#];\n\t\tlet operator#OutputMult  = +tone.operatorExpressions[#];\n\t\tconst operator#OutputDelta = +tone.operatorExpressionDeltas[#];\n\t\tlet operator#Output      = +tone.feedbackOutputs[#];\n        const operator#Wave      = tone.operatorWaves[#].samples;\n\t\tlet feedbackMult         = +tone.feedbackMult;\n\t\tconst feedbackDelta        = +tone.feedbackDelta;\n        let expression = +tone.expression;\n\t\tconst expressionDelta = +tone.expressionDelta;\n\t\t\n\t\tconst filters = tone.noteFilters;\n\t\tconst filterCount = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1 = +tone.initialNoteFilterInput1;\n\t\tlet initialFilterInput2 = +tone.initialNoteFilterInput2;\n\t\tconst applyFilters = beepbox.Synth.applyFilters;\n\t\t\n\t\tconst stopIndex = bufferIndex + roundedSamplesPerTick;\n\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t// INSERT OPERATOR COMPUTATION HERE\n\t\t\t\tconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\n\t\t\t\t\n\t\t\tconst inputSample = fmOutput;\n\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\t\n\t\t\t\tfeedbackMult += feedbackDelta;\n\t\t\t\toperator#OutputMult += operator#OutputDelta;\n\t\t\t\toperator#Phase += operator#PhaseDelta;\n\t\t\toperator#PhaseDelta *= operator#PhaseDeltaScale;\n\t\t\t\n\t\t\tconst output = sample * expression;\n\t\t\texpression += expressionDelta;\n\n\t\t\tdata[sampleIndex] += output;\n\t\t\t}\n\t\t\t\n\t\t\ttone.phases[#] = operator#Phase / ` + Config.sineWaveLength + `;\n\t\t\ttone.phaseDeltas[#] = operator#PhaseDelta / ` + Config.sineWaveLength + `;\n\t\t\ttone.operatorExpressions[#] = operator#OutputMult;\n\t\t    tone.feedbackOutputs[#] = operator#Output;\n\t\t    tone.feedbackMult = feedbackMult;\n\t\t    tone.expression = expression;\n\t\t\t\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInput1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInput2 = initialFilterInput2;\n\t\t`).split(\"\\n\");\n\n    private static operatorSourceTemplate: string[] = (`\n\t\t\t\tconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\n\t\t\t\tconst operator#PhaseInt = operator#PhaseMix|0;\n\t\t\t\tconst operator#Index    = operator#PhaseInt & ` + Config.sineWaveMask + `;\n                const operator#Sample   = operator#Wave[operator#Index];\n                operator#Output         = operator#Sample + (operator#Wave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\n\t\t\t\tconst operator#Scaled   = operator#OutputMult * operator#Output;\n\t\t`).split(\"\\n\");\n\n    private static noiseSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n        const wave: Float32Array = instrumentState.wave!;\n        let phaseDelta: number = +tone.phaseDeltas[0];\n        const phaseDeltaScale: number = +tone.phaseDeltaScales[0];\n        let expression: number = +tone.expression;\n        const expressionDelta: number = +tone.expressionDelta;\n        let phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\n        if (tone.phases[0] == 0) {\n            // Zero phase means the tone was reset, just give noise a random start phase instead.\n            phase = Math.random() * Config.chipNoiseLength;\n        }\n        const phaseMask: number = Config.chipNoiseLength - 1;\n        let noiseSample: number = +tone.noiseSample;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\n        const filterCount: number = tone.noteFilterCount | 0;\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\n        const applyFilters: Function = Synth.applyFilters;\n\n        // This is for a \"legacy\" style simplified 1st order lowpass filter with\n        // a cutoff frequency that is relative to the tone's fundamental frequency.\n        const pitchRelativefilter: number = Math.min(1.0, phaseDelta * instrumentState.noisePitchFilterMult);\n\n        const stopIndex: number = bufferIndex + runLength;\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            const waveSample: number = wave[phase & phaseMask];\n\n            noiseSample += (waveSample - noiseSample) * pitchRelativefilter;\n\n            const inputSample: number = noiseSample;\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n\n            phase += phaseDelta;\n            phaseDelta *= phaseDeltaScale;\n\n            const output: number = sample * expression;\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phases[0] = phase / Config.chipNoiseLength;\n        tone.phaseDeltas[0] = phaseDelta;\n        tone.expression = expression;\n        tone.noiseSample = noiseSample;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }\n\n    private static spectrumSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n        const wave: Float32Array = instrumentState.wave!;\n        const samplesInPeriod: number = (1 << 7);\n        let phaseDelta: number = tone.phaseDeltas[0] * samplesInPeriod;\n        const phaseDeltaScale: number = +tone.phaseDeltaScales[0];\n        let expression: number = +tone.expression;\n        const expressionDelta: number = +tone.expressionDelta;\n        let noiseSample: number = +tone.noiseSample;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\n        const filterCount: number = tone.noteFilterCount | 0;\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\n        const applyFilters: Function = Synth.applyFilters;\n\n        let phase: number = (tone.phases[0] % 1) * Config.spectrumNoiseLength;\n        // Zero phase means the tone was reset, just give noise a random start phase instead.\n        if (tone.phases[0] == 0) phase = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta;\n        const phaseMask: number = Config.spectrumNoiseLength - 1;\n\n        // This is for a \"legacy\" style simplified 1st order lowpass filter with\n        // a cutoff frequency that is relative to the tone's fundamental frequency.\n        const pitchRelativefilter: number = Math.min(1.0, phaseDelta);\n\n        const stopIndex: number = bufferIndex + runLength;\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            const phaseInt: number = phase | 0;\n            const index: number = phaseInt & phaseMask;\n            let waveSample: number = wave[index];\n            const phaseRatio: number = phase - phaseInt;\n            waveSample += (wave[index + 1] - waveSample) * phaseRatio;\n\n            noiseSample += (waveSample - noiseSample) * pitchRelativefilter;\n\n\n            const inputSample: number = noiseSample;\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n\n            phase += phaseDelta;\n            phaseDelta *= phaseDeltaScale;\n\n            const output: number = sample * expression;\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phases[0] = phase / Config.spectrumNoiseLength;\n        tone.phaseDeltas[0] = phaseDelta / samplesInPeriod;\n        tone.expression = expression;\n        tone.noiseSample = noiseSample;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }\n\n    private static drumsetSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\n        const data: Float32Array = synth.tempMonoInstrumentSampleBuffer!;\n        let wave: Float32Array = instrumentState.getDrumsetWave(tone.drumsetPitch!);\n        const referenceDelta: number = InstrumentState.drumsetIndexReferenceDelta(tone.drumsetPitch!);\n        let phaseDelta: number = tone.phaseDeltas[0] / referenceDelta;\n        const phaseDeltaScale: number = +tone.phaseDeltaScales[0];\n        let expression: number = +tone.expression;\n        const expressionDelta: number = +tone.expressionDelta;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFilters;\n        const filterCount: number = tone.noteFilterCount | 0;\n        let initialFilterInput1: number = +tone.initialNoteFilterInput1;\n        let initialFilterInput2: number = +tone.initialNoteFilterInput2;\n        const applyFilters: Function = Synth.applyFilters;\n\n        let phase: number = (tone.phases[0] % 1) * Config.spectrumNoiseLength;\n        // Zero phase means the tone was reset, just give noise a random start phase instead.\n        if (tone.phases[0] == 0) phase = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta;\n        const phaseMask: number = Config.spectrumNoiseLength - 1;\n\n        const stopIndex: number = bufferIndex + runLength;\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            const phaseInt: number = phase | 0;\n            const index: number = phaseInt & phaseMask;\n            let noiseSample: number = wave[index];\n            const phaseRatio: number = phase - phaseInt;\n            noiseSample += (wave[index + 1] - noiseSample) * phaseRatio;\n\n            const inputSample: number = noiseSample;\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n\n            phase += phaseDelta;\n            phaseDelta *= phaseDeltaScale;\n\n            const output: number = sample * expression;\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phases[0] = phase / Config.spectrumNoiseLength;\n        tone.phaseDeltas[0] = phaseDelta * referenceDelta;\n        tone.expression = expression;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInput1 = initialFilterInput1;\n        tone.initialNoteFilterInput2 = initialFilterInput2;\n    }\n\n    private static modSynth(synth: Synth, stereoBufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrument: Instrument): void {\n        // Note: present modulator value is tone.expressionStarts[0].\n\n        if (!synth.song) return;\n\n        let mod: number = Config.modCount - 1 - tone.pitches[0];\n\n        // Flagged as invalid because unused by current settings, skip\n        if (instrument.invalidModulators[mod]) return;\n\n        let setting: number = instrument.modulators[mod];\n\n        // Generate list of used instruments\n        let usedInstruments: number[] = [];\n        if (Config.modulators[instrument.modulators[mod]].forSong) {\n            // Instrument doesn't matter for song, just push a random index to run the modsynth once\n            usedInstruments.push(0);\n        } else {\n            // All\n            if (instrument.modInstruments[mod] == synth.song.channels[instrument.modChannels[mod]].instruments.length) {\n                for (let i: number = 0; i < synth.song.channels[instrument.modChannels[mod]].instruments.length; i++) {\n                    usedInstruments.push(i);\n                }\n            }\n            // Active\n            else if (instrument.modInstruments[mod] > synth.song.channels[instrument.modChannels[mod]].instruments.length) {\n                if (synth.song.getPattern(instrument.modChannels[mod], synth.bar) != null)\n                    usedInstruments = synth.song.getPattern(instrument.modChannels[mod], synth.bar)!.instruments;\n            } else {\n                usedInstruments.push(instrument.modInstruments[mod]);\n            }\n        }\n\n        for (let instrumentIndex: number = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {\n\n            synth.setModValue(tone.expression, tone.expression + tone.expressionDelta, mod, instrument.modChannels[mod], usedInstruments[instrumentIndex], setting);\n\n            // Reset arps, but only at the start of the note\n            if (setting == Config.modulators.dictionary[\"reset arp\"].index && synth.tick == 0 && tone.noteStartPart == synth.beat * Config.partsPerBeat + synth.part) {\n                synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]].arpTime = 0;\n            }\n            // Denote next bar skip\n            else if (setting == Config.modulators.dictionary[\"next bar\"].index) {\n                synth.wantToSkip = true;\n            }\n            // Extra info for eq filter target needs to be set as well\n            else if (setting == Config.modulators.dictionary[\"eq filter\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n\n                if (!tgtInstrument.eqFilterType) {\n\n                    let dotTarget = instrument.modFilterTypes[mod] | 0;\n\n                    if (dotTarget == 0) { // Morph. Figure out the target filter's X/Y coords for this point. If no point exists with this index, or point types don't match, do lerp-out for this point and lerp-in of a new point\n\n                        let pinIdx: number = 0;\n                        const currentPart: number = synth.getTicksIntoBar() / Config.ticksPerPart;\n                        while (tone.note!.start + tone.note!.pins[pinIdx].time <= currentPart) pinIdx++;\n                        // 0 to 1 based on distance to next morph\n                        //let lerpStartRatio: number = (currentPart - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\n                        let lerpEndRatio: number = ((currentPart - tone.note!.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\n\n                        // Compute the new settings to go to.\n                        if (tgtInstrument.eqSubFilters[tone.note!.pins[pinIdx - 1].size] != null || tgtInstrument.eqSubFilters[tone.note!.pins[pinIdx].size] != null) {\n                            tgtInstrument.tmpEqFilterEnd = FilterSettings.lerpFilters(tgtInstrument.eqSubFilters[tone.note!.pins[pinIdx - 1].size]!, tgtInstrument.eqSubFilters[tone.note!.pins[pinIdx].size]!, lerpEndRatio);\n                        } else {\n                            // No mutation will occur to the filter object so we can safely return it without copying\n                            tgtInstrument.tmpEqFilterEnd = tgtInstrument.eqFilter;\n                        }\n\n                    } // Target (1 is dot 1 X, 2 is dot 1 Y, etc.)\n                    else {\n                        // Since we are directly manipulating the filter, make sure it is a new one and not an actual one of the instrument's filters\n                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                            if (tgtInstrument.tmpEqFilterEnd == tgtInstrument.eqSubFilters[i] && tgtInstrument.tmpEqFilterEnd != null) {\n                                tgtInstrument.tmpEqFilterEnd = new FilterSettings();\n                                tgtInstrument.tmpEqFilterEnd.fromJsonObject(tgtInstrument.eqSubFilters[i]!.toJsonObject());\n                            }\n                        }\n                        if (tgtInstrument.tmpEqFilterEnd == null) {\n                            tgtInstrument.tmpEqFilterEnd = new FilterSettings();\n                            tgtInstrument.tmpEqFilterEnd.fromJsonObject(tgtInstrument.eqFilter.toJsonObject());\n                        }\n\n                        if (tgtInstrument.tmpEqFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\n                            if (dotTarget % 2) { // X\n                                tgtInstrument.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\n                            } else { // Y\n                                tgtInstrument.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\n                            }\n                        }\n                    }\n                }\n            }\n            // Extra info for note filter target needs to be set as well\n            else if (setting == Config.modulators.dictionary[\"note filter\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod]].instruments[usedInstruments[instrumentIndex]];\n\n                if (!tgtInstrument.noteFilterType) {\n                    let dotTarget = instrument.modFilterTypes[mod] | 0;\n\n                    if (dotTarget == 0) { // Morph. Figure out the target filter's X/Y coords for this point. If no point exists with this index, or point types don't match, do lerp-out for this point and lerp-in of a new point\n\n                        let pinIdx: number = 0;\n                        const currentPart: number = synth.getTicksIntoBar() / Config.ticksPerPart;\n                        while (tone.note!.start + tone.note!.pins[pinIdx].time <= currentPart) pinIdx++;\n                        // 0 to 1 based on distance to next morph\n                        //let lerpStartRatio: number = (currentPart - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\n                        let lerpEndRatio: number = ((currentPart - tone.note!.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\n\n                        // Compute the new settings to go to.\n                        if (tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx - 1].size] != null || tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx].size] != null) {\n                            tgtInstrument.tmpNoteFilterEnd = FilterSettings.lerpFilters(tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx - 1].size]!, tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx].size]!, lerpEndRatio);\n                        } else {\n                            // No mutation will occur to the filter object so we can safely return it without copying\n                            tgtInstrument.tmpNoteFilterEnd = tgtInstrument.noteFilter;\n                        }\n\n                    } // Target (1 is dot 1 X, 2 is dot 1 Y, etc.)\n                    else {\n                        // Since we are directly manipulating the filter, make sure it is a new one and not an actual one of the instrument's filters\n\n                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                            if (tgtInstrument.tmpNoteFilterEnd == tgtInstrument.noteSubFilters[i] && tgtInstrument.tmpNoteFilterEnd != null) {\n                                tgtInstrument.tmpNoteFilterEnd = new FilterSettings();\n                                tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteSubFilters[i]!.toJsonObject());\n                            }\n                        }\n                        if (tgtInstrument.tmpNoteFilterEnd == null) {\n                            tgtInstrument.tmpNoteFilterEnd = new FilterSettings();\n                            tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteFilter.toJsonObject());\n                        }\n\n                        if (tgtInstrument.tmpNoteFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\n                            if (dotTarget % 2) { // X\n                                tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\n                            } else { // Y\n                                tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private static findRandomZeroCrossing(wave: Float32Array, waveLength: number): number {\n        let phase: number = Math.random() * waveLength;\n        const phaseMask: number = waveLength - 1;\n\n        // Spectrum and drumset waves sounds best when they start at a zero crossing,\n        // otherwise they pop. Try to find a zero crossing.\n        let indexPrev: number = phase & phaseMask;\n        let wavePrev: number = wave[indexPrev];\n        const stride: number = 16;\n        for (let attemptsRemaining: number = 128; attemptsRemaining > 0; attemptsRemaining--) {\n            const indexNext: number = (indexPrev + stride) & phaseMask;\n            const waveNext: number = wave[indexNext];\n            if (wavePrev * waveNext <= 0.0) {\n                // Found a zero crossing! Now let's narrow it down to two adjacent sample indices.\n                for (let i: number = 0; i < stride; i++) {\n                    const innerIndexNext: number = (indexPrev + 1) & phaseMask;\n                    const innerWaveNext: number = wave[innerIndexNext];\n                    if (wavePrev * innerWaveNext <= 0.0) {\n                        // Found the zero crossing again! Now let's find the exact intersection.\n                        const slope: number = innerWaveNext - wavePrev;\n                        phase = indexPrev;\n                        if (Math.abs(slope) > 0.00000001) {\n                            phase += -wavePrev / slope;\n                        }\n                        phase = Math.max(0, phase) % waveLength;\n                        break;\n                    } else {\n                        indexPrev = innerIndexNext;\n                        wavePrev = innerWaveNext;\n                    }\n                }\n                break;\n            } else {\n                indexPrev = indexNext;\n                wavePrev = waveNext;\n            }\n        }\n\n        return phase;\n    }\n\n    public static instrumentVolumeToVolumeMult(instrumentVolume: number): number {\n        return (instrumentVolume == -Config.volumeRange / 2.0) ? 0.0 : Math.pow(2, Config.volumeLogScale * instrumentVolume);\n    }\n    public static volumeMultToInstrumentVolume(volumeMult: number): number {\n        return (volumeMult <= 0.0) ? -Config.volumeRange / 2 : Math.min(Config.volumeRange, (Math.log(volumeMult) / Math.LN2) / Config.volumeLogScale);\n    }\n    public static noteSizeToVolumeMult(size: number): number {\n        return Math.pow(Math.max(0.0, size) / Config.noteSizeMax, 1.5);\n    }\n    public static volumeMultToNoteSize(volumeMult: number): number {\n        return Math.pow(Math.max(0.0, volumeMult), 1 / 1.5) * Config.noteSizeMax;\n    }\n\n    public static fadeInSettingToSeconds(setting: number): number {\n        return 0.0125 * (0.95 * setting + 0.05 * setting * setting);\n    }\n    public static secondsToFadeInSetting(seconds: number): number {\n        return clamp(0, Config.fadeInRange, Math.round((-0.95 + Math.sqrt(0.9025 + 0.2 * seconds / 0.0125)) / 0.1));\n    }\n    public static fadeOutSettingToTicks(setting: number): number {\n        return Config.fadeOutTicks[setting];\n    }\n    public static ticksToFadeOutSetting(ticks: number): number {\n        let lower: number = Config.fadeOutTicks[0];\n        if (ticks <= lower) return 0;\n        for (let i: number = 1; i < Config.fadeOutTicks.length; i++) {\n            let upper: number = Config.fadeOutTicks[i];\n            if (ticks <= upper) return (ticks < (lower + upper) / 2) ? i - 1 : i;\n            lower = upper;\n        }\n        return Config.fadeOutTicks.length - 1;\n    }\n\n    public static detuneToCents(detune: number): number {\n        // BeepBox formula, for reference:\n        // return detune * (Math.abs(detune) + 1) / 2;\n        return detune - Config.detuneCenter;\n    }\n    public static centsToDetune(cents: number): number {\n        // BeepBox formula, for reference:\n        // return Math.sign(cents) * (Math.sqrt(1 + 8 * Math.abs(cents)) - 1) / 2.0;\n        return cents + Config.detuneCenter;\n    }\n\n    public static getOperatorWave(waveform: number, pulseWidth: number) {\n        if (waveform != 2) {\n            return Config.operatorWaves[waveform];\n        }\n        else {\n            return Config.pwmOperatorWaves[pulseWidth];\n        }\n    }\n\n    private getSamplesPerTick(): number {\n        if (this.song == null) return 0;\n        let beatsPerMinute: number = this.song.getBeatsPerMinute();\n        if (this.isModActive(Config.modulators.dictionary[\"tempo\"].index)) {\n            beatsPerMinute = this.getModValue(Config.modulators.dictionary[\"tempo\"].index);\n        }\n        return this.getSamplesPerTickSpecificBPM(beatsPerMinute);\n    }\n\n    private getSamplesPerTickSpecificBPM(beatsPerMinute: number): number {\n        const beatsPerSecond: number = beatsPerMinute / 60.0;\n        const partsPerSecond: number = Config.partsPerBeat * beatsPerSecond;\n        const tickPerSecond: number = Config.ticksPerPart * partsPerSecond;\n        return this.samplesPerSecond / tickPerSecond;\n    }\n\n    public static fittingPowerOfTwo(x: number): number {\n        return 1 << (32 - Math.clz32(Math.ceil(x) - 1));\n    }\n\n    private sanitizeFilters(filters: DynamicBiquadFilter[]): void {\n        let reset: boolean = false;\n        for (const filter of filters) {\n            const output1: number = Math.abs(filter.output1);\n            const output2: number = Math.abs(filter.output2);\n            // If either is a large value, Infinity, or NaN, then just reset all filter history.\n            if (!(output1 < 100) || !(output2 < 100)) {\n                reset = true;\n                break;\n            }\n            if (output1 < epsilon) filter.output1 = 0.0;\n            if (output2 < epsilon) filter.output2 = 0.0;\n        }\n        if (reset) {\n            for (const filter of filters) {\n                filter.output1 = 0.0;\n                filter.output2 = 0.0;\n            }\n        }\n    }\n\n    public static sanitizeDelayLine(delayLine: Float32Array, lastIndex: number, mask: number): void {\n        while (true) {\n            lastIndex--;\n            const index: number = lastIndex & mask;\n            const sample: number = Math.abs(delayLine[index]);\n            if (Number.isFinite(sample) && (sample == 0.0 || sample >= epsilon)) break;\n            delayLine[index] = 0.0;\n        }\n    }\n\n    public static applyFilters(sample: number, input1: number, input2: number, filterCount: number, filters: DynamicBiquadFilter[]): number {\n        for (let i: number = 0; i < filterCount; i++) {\n            const filter: DynamicBiquadFilter = filters[i];\n            const output1: number = filter.output1;\n            const output2: number = filter.output2;\n            const a1: number = filter.a1;\n            const a2: number = filter.a2;\n            const b0: number = filter.b0;\n            const b1: number = filter.b1;\n            const b2: number = filter.b2;\n            sample = b0 * sample + b1 * input1 + b2 * input2 - a1 * output1 - a2 * output2;\n            filter.a1 = a1 + filter.a1Delta;\n            filter.a2 = a2 + filter.a2Delta;\n            if (filter.useMultiplicativeInputCoefficients) {\n                filter.b0 = b0 * filter.b0Delta;\n                filter.b1 = b1 * filter.b1Delta;\n                filter.b2 = b2 * filter.b2Delta;\n            } else {\n                filter.b0 = b0 + filter.b0Delta;\n                filter.b1 = b1 + filter.b1Delta;\n                filter.b2 = b2 + filter.b2Delta;\n            }\n            filter.output2 = output1;\n            filter.output1 = sample;\n            // Updating the input values is waste if the next filter doesn't exist...\n            input2 = output2;\n            input1 = output1;\n        }\n        return sample;\n    }\n}\n\n// When compiling synth.ts as a standalone module named \"beepbox\", expose these classes as members to JavaScript:\nexport { Dictionary, DictionaryArray, FilterType, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config };\n","// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config } from \"../synth/SynthConfig\";\nimport { ColorConfig } from \"../editor/ColorConfig\";\nimport { NotePin, Note, Pattern, Instrument, Channel, Synth } from \"../synth/synth\";\nimport { oscilascopeCanvas } from \"../global/Oscilascope\";\nimport { HTML, SVG } from \"imperative-html/dist/esm/elements-strict\";\n\n\tconst {a, button, div, h1, input, canvas} = HTML;\n\tconst {svg, circle, rect, path} = SVG;\n\n\tconst isMobile: boolean = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);\n\n\tdocument.head.appendChild(HTML.style({type: \"text/css\"}, `\n\tbody {\n\t\tcolor: ${ColorConfig.primaryText};\n\t\tbackground: ${ColorConfig.editorBackground};\n\t}\n\th1 {\n\t\tfont-weight: bold;\n\t\tfont-size: 14px;\n\t\tline-height: 22px;\n\t\ttext-align: initial;\n\t\tmargin: 0;\n\t}\n\ta {\n\t\tfont-weight: bold;\n\t\tfont-size: 12px;\n\t\tline-height: 22px;\n\t\twhite-space: nowrap;\n\t\tcolor: ${ColorConfig.linkAccent};\n\t}\n\tbutton {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tposition: relative;\n\t\tborder: none;\n\t\tborder-radius: 5px;\n\t\tbackground: ${ColorConfig.uiWidgetBackground};\n\t\tcolor: ${ColorConfig.primaryText};\n\t\tcursor: pointer;\n\t\tfont-size: 14px;\n\t\tfont-family: inherit;\n\t}\n\tbutton:hover, button:focus {\n\t\tbackground: ${ColorConfig.uiWidgetFocus};\n\t}\n\t.playButton, .pauseButton {\n\t\tpadding-left: 24px;\n\t\tpadding-right: 6px;\n\t}\n\t.playButton::before {\n\t\tcontent: \"\";\n\t\tposition: absolute;\n\t\tleft: 6px;\n\t\ttop: 50%;\n\t\tmargin-top: -6px;\n\t\twidth: 12px;\n\t\theight: 12px;\n\t\tpointer-events: none;\n\t\tbackground: ${ColorConfig.primaryText};\n\t\t-webkit-mask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><path d=\"M 6 0 L -5 6 L -5 -6 z\" fill=\"gray\"/></svg>');\n\t\t-webkit-mask-repeat: no-repeat;\n\t\t-webkit-mask-position: center;\n\t\tmask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><path d=\"M 6 0 L -5 6 L -5 -6 z\" fill=\"gray\"/></svg>');\n\t\tmask-repeat: no-repeat;\n\t\tmask-position: center;\n\t}\n\t.pauseButton::before {\n\t\tcontent: \"\";\n\t\tposition: absolute;\n\t\tleft: 6px;\n\t\ttop: 50%;\n\t\tmargin-top: -6px;\n\t\twidth: 12px;\n\t\theight: 12px;\n\t\tpointer-events: none;\n\t\tbackground: ${ColorConfig.primaryText};\n\t\t-webkit-mask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><rect x=\"-5\" y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/><rect x=\"2\"  y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/></svg>');\n\t\t-webkit-mask-repeat: no-repeat;\n\t\t-webkit-mask-position: center;\n\t\tmask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><rect x=\"-5\" y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/><rect x=\"2\"  y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/></svg>');\n\t\tmask-repeat: no-repeat;\n\t\tmask-position: center;\n\t}\n\t\n\tinput[type=range] {\n\t\t-webkit-appearance: none;\n\t\tappearance: none;\n\t\theight: 16px;\n\t\tmargin: 0;\n\t\tcursor: pointer;\n\t\tbackground-color: ${ColorConfig.editorBackground};\n\t\ttouch-action: pan-y;\n\t}\n\tinput[type=range]:focus {\n\t\toutline: none;\n\t}\n\tinput[type=range]::-webkit-slider-runnable-track {\n\t\twidth: 100%;\n\t\theight: 4px;\n\t\tcursor: pointer;\n\t\tbackground: ${ColorConfig.uiWidgetBackground};\n\t}\n\tinput[type=range]::-webkit-slider-thumb {\n\t\theight: 16px;\n\t\twidth: 4px;\n\t\tborder-radius: 2px;\n\t\tbackground: ${ColorConfig.primaryText};\n\t\tcursor: pointer;\n\t\t-webkit-appearance: none;\n\t\tmargin-top: -6px;\n\t}\n\tinput[type=range]:focus::-webkit-slider-runnable-track, input[type=range]:hover::-webkit-slider-runnable-track {\n\t\tbackground: ${ColorConfig.uiWidgetFocus};\n\t}\n\tinput[type=range]::-moz-range-track {\n\t\twidth: 100%;\n\t\theight: 4px;\n\t\tcursor: pointer;\n\t\tbackground: ${ColorConfig.uiWidgetBackground};\n\t}\n\tinput[type=range]:focus::-moz-range-track, input[type=range]:hover::-moz-range-track  {\n\t\tbackground: ${ColorConfig.uiWidgetFocus};\n\t}\n\tinput[type=range]::-moz-range-thumb {\n\t\theight: 16px;\n\t\twidth: 4px;\n\t\tborder-radius: 2px;\n\t\tborder: none;\n\t\tbackground: ${ColorConfig.primaryText};\n\t\tcursor: pointer;\n\t}\n\tinput[type=range]::-ms-track {\n\t\twidth: 100%;\n\t\theight: 4px;\n\t\tcursor: pointer;\n\t\tbackground: ${ColorConfig.uiWidgetBackground};\n\t\tborder-color: transparent;\n\t}\n\tinput[type=range]:focus::-ms-track, input[type=range]:hover::-ms-track {\n\t\tbackground: ${ColorConfig.uiWidgetFocus};\n\t}\n\tinput[type=range]::-ms-thumb {\n\t\theight: 16px;\n\t\twidth: 4px;\n\t\tborder-radius: 2px;\n\t\tbackground: ${ColorConfig.primaryText};\n\t\tcursor: pointer;\n\t}\n`));\nconst colorTheme: string | null = getLocalStorage(\"colorTheme\");\nColorConfig.setTheme(colorTheme === null ? \"dark classic\" : colorTheme);\n\nlet prevHash: string | null = null;\nlet id: string = ((Math.random() * 0xffffffff) >>> 0).toString(16);\nlet pauseButtonDisplayed: boolean = false;\nlet animationRequest: number | null;\nlet zoomEnabled: boolean = false;\nlet timelineWidth: number = 1;\nlet outVolumeHistoricTimer: number = 0;\nlet outVolumeHistoricCap: number = 0;\n\nconst synth: Synth = new Synth();\nconst oscilascope: oscilascopeCanvas = new oscilascopeCanvas(canvas({ width: isMobile? 144:288, height: isMobile?32:64, style: `border:2px solid ${ColorConfig.uiWidgetBackground}; overflow: hidden;` , id: \"oscilascopeAll\" }), isMobile?1:2);\nconst showOscilloscope: boolean = getLocalStorage(\"showOscilloscope\") != \"false\";\nif (!showOscilloscope) {\n\toscilascope.canvas.style.display = \"none\";\n\tsynth.oscEnabled = false;\n}\nlet titleText: HTMLHeadingElement = h1({ style: \"flex-grow: 1; margin: 0 1px; margin-left: 10px; overflow: hidden;\" }, \"\");\n\tlet editLink: HTMLAnchorElement = a({target: \"_top\", style: \"margin: 0 4px;\"}, \"✎ Edit\");\n\tlet copyLink: HTMLAnchorElement = a({href: \"javascript:void(0)\", style: \"margin: 0 4px;\"}, \"⎘ Copy URL\");\n\tlet shareLink: HTMLAnchorElement = a({href: \"javascript:void(0)\", style: \"margin: 0 4px;\"}, \"⤳ Share\");\n\tlet fullscreenLink: HTMLAnchorElement = a({target: \"_top\", style: \"margin: 0 4px;\"}, \"⇱ Fullscreen\");\n\nlet draggingPlayhead: boolean = false;\n\tconst playButton: HTMLButtonElement = button({style: \"width: 100%; height: 100%; max-height: 50px;\"});\n\tconst playButtonContainer: HTMLDivElement = div({style: \"flex-shrink: 0; display: flex; padding: 2px; width: 80px; height: 100%; box-sizing: border-box; align-items: center;\"},\n\tplayButton,\n);\n\tconst loopIcon: SVGPathElement = path({d: \"M 4 2 L 4 0 L 7 3 L 4 6 L 4 4 Q 2 4 2 6 Q 2 8 4 8 L 4 10 Q 0 10 0 6 Q 0 2 4 2 M 8 10 L 8 12 L 5 9 L 8 6 L 8 8 Q 10 8 10 6 Q 10 4 8 4 L 8 2 Q 12 2 12 6 Q 12 10 8 10 z\"});\n\tconst loopButton: HTMLButtonElement = button({title: \"loop\", style: \"background: none; flex: 0 0 12px; margin: 0 3px; width: 12px; height: 12px; display: flex;\"}, svg({width: 12, height: 12, viewBox: \"0 0 12 12\"},\n\tloopIcon,\n));\n\n\tconst volumeIcon: SVGSVGElement = svg({style: \"flex: 0 0 12px; margin: 0 1px; width: 12px; height: 12px;\", viewBox: \"0 0 12 12\"},\n\t\tpath({fill: ColorConfig.uiWidgetBackground, d: \"M 1 9 L 1 3 L 4 3 L 7 0 L 7 12 L 4 9 L 1 9 M 9 3 Q 12 6 9 9 L 8 8 Q 10.5 6 8 4 L 9 3 z\"}),\n);\nconst volumeSlider: HTMLInputElement = input({ title: \"volume\", type: \"range\", value: 75, min: 0, max: 75, step: 1, style: \"width: 12vw; max-width: 100px; margin: 0 1px;\" });\n\n\tconst zoomIcon: SVGSVGElement = svg({width: 12, height: 12, viewBox: \"0 0 12 12\"},\n\t\tcircle({cx: \"5\", cy: \"5\", r: \"4.5\", \"stroke-width\": \"1\", stroke: \"currentColor\", fill: \"none\"}),\n\t\tpath({stroke: \"currentColor\", \"stroke-width\": \"2\", d: \"M 8 8 L 11 11 M 5 2 L 5 8 M 2 5 L 8 5\", fill: \"none\"}),\n);\n\tconst zoomButton: HTMLButtonElement = button({title: \"zoom\", style: \"background: none; flex: 0 0 12px; margin: 0 3px; width: 12px; height: 12px; display: flex;\"},\n\tzoomIcon,\n);\n\n\tconst timeline: SVGSVGElement = svg({style: \"min-width: 0; min-height: 0; touch-action: pan-y pinch-zoom;\"});\n\tconst playhead: HTMLDivElement = div({style: `position: absolute; left: 0; top: 0; width: 2px; height: 100%; background: ${ColorConfig.playhead}; pointer-events: none;`});\n\tconst timelineContainer: HTMLDivElement = div({style: \"display: flex; flex-grow: 1; flex-shrink: 1; position: relative;\"}, timeline, playhead);\n\tconst visualizationContainer: HTMLDivElement = div({style: \"display: flex; flex-grow: 1; flex-shrink: 1; height: 0; position: relative; align-items: center; overflow: hidden;\"}, timelineContainer);\n\nconst outVolumeBarBg: SVGRectElement = SVG.rect({ \"pointer-events\": \"none\", width: \"90%\", height: \"50%\", x: \"5%\", y: \"25%\", fill: ColorConfig.uiWidgetBackground });\nconst outVolumeBar: SVGRectElement = SVG.rect({ \"pointer-events\": \"none\", height: \"50%\", width: \"0%\", x: \"5%\", y: \"25%\", fill: \"url('#volumeGrad2')\" });\nconst outVolumeCap: SVGRectElement = SVG.rect({ \"pointer-events\": \"none\", width: \"2px\", height: \"50%\", x: \"5%\", y: \"25%\", fill: ColorConfig.uiWidgetFocus });\nconst stop1: SVGStopElement = SVG.stop({ \"stop-color\": \"lime\", offset: \"60%\" });\nconst stop2: SVGStopElement = SVG.stop({ \"stop-color\": \"orange\", offset: \"90%\" });\nconst stop3: SVGStopElement = SVG.stop({ \"stop-color\": \"red\", offset: \"100%\" });\nconst gradient: SVGGradientElement = SVG.linearGradient({ id: \"volumeGrad2\", gradientUnits: \"userSpaceOnUse\" }, stop1, stop2, stop3);\nconst defs: SVGDefsElement = SVG.defs({}, gradient);\nconst volumeBarContainer: SVGSVGElement = SVG.svg({ style: `touch-action: none; overflow: hidden; margin: auto;`, width: \"160px\", height: \"10px\", preserveAspectRatio: \"none\" },\n\tdefs,\n\toutVolumeBarBg,\n\toutVolumeBar,\n\toutVolumeCap,\n);\ndocument.body.appendChild(visualizationContainer);\ndocument.body.appendChild(\n\t\tdiv({style: `flex-shrink: 0; height: 20vh; min-height: 22px; max-height: 70px; display: flex; align-items: center;`},\n\t\tplayButtonContainer,\n\t\tloopButton,\n\t\tvolumeIcon,\n\t\tvolumeSlider,\n\t\tzoomButton,\n\t\tvolumeBarContainer,\n\t\toscilascope.canvas, //make it auto remove itself later\n\t\ttitleText,\n\t\teditLink,\n\t\tcopyLink,\n\t\tshareLink,\n\t\tfullscreenLink,\n\t),\n);\n\n// Some browsers have an option to \"block third-party cookies\" (it's enabled by\n// default in icognito Chrome windows) that throws an error on trying to access\n// localStorage from cross-domain iframe such as this song player, so wrap the\n// access in a try-catch block to ignore the error instead of interrupting\n// execution.\nfunction setLocalStorage(key: string, value: string): void {\n\ttry {\n\t\tlocalStorage.setItem(key, value);\n\t} catch (error) {\n\t\t// Ignore the error since we can't fix it.\n\t}\n}\nfunction getLocalStorage(key: string): string | null {\n\ttry {\n\t\treturn localStorage.getItem(key);\n\t} catch (error) {\n\t\t// Ignore the error since we can't fix it.\n\t\treturn null;\n\t}\n}\n\nfunction loadSong(songString: string, reuseParams: boolean): void {\n\tsynth.setSong(songString);\n\tsynth.snapToStart();\n\tconst updatedSongString: string = synth.song!.toBase64String();\n\teditLink.href = \"../#\" + updatedSongString;\n\t//@jummbus - these lines convert old url vers loaded into the player to the new url ver. The problem is, if special chars are included,\n\t// they appear to get double-encoded (e.g. the '%' in %20 is encoded again), which breaks the link. Disabled for now until I have a chance\n\t// to look into it more.\n\t//const hashQueryParams = new URLSearchParams(reuseParams ? location.hash.slice(1) : \"\");\n\t//hashQueryParams.set(\"song\", updatedSongString);\n\t//location.hash = hashQueryParams.toString();\n}\n\nfunction hashUpdatedExternally(): void {\n\tlet myHash: string = location.hash;\n\tif (prevHash == myHash || myHash == \"\") return;\n\t\t\n\tprevHash = myHash;\n\t\t\n\tif (myHash.charAt(0) == \"#\") {\n\t\tmyHash = myHash.substring(1);\n\t}\n\t\t\n\t\n\tfullscreenLink.href = location.href;\n\t\t\n\tfor (const parameter of myHash.split(\"&\")) {\n\t\tlet equalsIndex: number = parameter.indexOf(\"=\");\n\t\tif (equalsIndex != -1) {\n\t\t\tlet paramName: string = parameter.substring(0, equalsIndex);\n\t\t\tlet value: string = parameter.substring(equalsIndex + 1);\n\t\t\tswitch (paramName) {\n\t\t\t\tcase \"song\":\n\t\t\t\t\tloadSong(value, true);\n\t\t\t\t\tif (synth.song) {\n\t\t\t\t\t\ttitleText.textContent = synth.song.title;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t//case \"title\":\n\t\t\t\t//\ttitleText.textContent = decodeURIComponent(value);\n\t\t\t\t//\tbreak;\n\t\t\t\tcase \"loop\":\n\t\t\t\t\tsynth.loopRepeatCount = (value != \"1\") ? 0 : -1;\n\t\t\t\t\trenderLoopIcon();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tloadSong(myHash, false);\n\t\t}\n\t}\n\t\t\n\trenderTimeline();\n}\n\nfunction onWindowResize(): void {\n\trenderTimeline();\n}\n\nlet pauseIfAnotherPlayerStartsHandle: ReturnType<typeof setInterval> | null = null;\nfunction pauseIfAnotherPlayerStarts(): void {\n\tif (!synth.playing) {\n\t\tclearInterval(pauseIfAnotherPlayerStartsHandle!);\n\t\treturn;\n\t}\n\n\tconst storedPlayerId: string | null = getLocalStorage(\"playerId\");\n\tif (storedPlayerId != null && storedPlayerId != id) {\n\t\tonTogglePlay();\n\t\trenderPlayhead();\n\t\tclearInterval(pauseIfAnotherPlayerStartsHandle!);\n\t}\n}\n\nfunction animate(): void {\n\tif (synth.playing) {\n\t\tanimationRequest = requestAnimationFrame(animate);\n\t\trenderPlayhead();\n\n\t\tvolumeUpdate();\n\t}\n\tif (pauseButtonDisplayed != synth.playing) {\n\t\trenderPlayButton();\n\t}\n\n}\n\nfunction volumeUpdate(): void {\n\tif (synth.song == null) {\n\t\toutVolumeCap.setAttribute(\"x\", \"5%\");\n\t\toutVolumeBar.setAttribute(\"width\", \"0%\");\n\t\treturn;\n}\n\toutVolumeHistoricTimer--;\n\tif (outVolumeHistoricTimer <= 0) {\n\t\toutVolumeHistoricCap -= 0.03;\n\t}\n\tif (synth.song.outVolumeCap > outVolumeHistoricCap) {\n\t\toutVolumeHistoricCap = synth.song.outVolumeCap;\n\t\toutVolumeHistoricTimer = 50;\n\t}\n\n\tanimateVolume(synth.song.outVolumeCap, outVolumeHistoricCap);\n\n\tif (!synth.playing) {\n\t\toutVolumeCap.setAttribute(\"x\", \"5%\");\n\t\toutVolumeBar.setAttribute(\"width\", \"0%\");\n\t}\n}\n\nfunction animateVolume(useOutVolumeCap: number, historicOutCap: number): void {\n\toutVolumeBar.setAttribute(\"width\", \"\" + Math.min(144, useOutVolumeCap * 144));\n\toutVolumeCap.setAttribute(\"x\", \"\" + (8 + Math.min(144, historicOutCap * 144)));\n}\n\nfunction onTogglePlay(): void {\n\tif (synth.song != null) {\n\t\tif (animationRequest != null) cancelAnimationFrame(animationRequest);\n\t\tanimationRequest = null;\n\t\tif (synth.playing) {\n\t\t\tsynth.pause();\n\t\t\tvolumeUpdate();\n\t\t} else {\n\t\t\tsynth.play();\n\t\t\tsetLocalStorage(\"playerId\", id);\n\t\t\tanimate();\n\t\t\tclearInterval(pauseIfAnotherPlayerStartsHandle!);\n\t\t\tpauseIfAnotherPlayerStartsHandle = setInterval(pauseIfAnotherPlayerStarts, 100);\n\t\t}\n\t}\n\trenderPlayButton();\n}\n\nfunction onToggleLoop(): void {\n\tif (synth.loopRepeatCount == -1) {\n\t\tsynth.loopRepeatCount = 0;\n\t} else {\n\t\tsynth.loopRepeatCount = -1;\n\t}\n\trenderLoopIcon();\n}\n\nfunction onVolumeChange(): void {\n\tsetLocalStorage(\"volume\", volumeSlider.value);\n\tsetSynthVolume();\n}\n\nfunction onToggleZoom(): void {\n\tzoomEnabled = !zoomEnabled;\n\trenderZoomIcon();\n\trenderTimeline();\n}\n\nfunction onTimelineMouseDown(event: MouseEvent): void {\n\tdraggingPlayhead = true;\n\tonTimelineMouseMove(event);\n}\n\nfunction onTimelineMouseMove(event: MouseEvent): void {\n\tif (!draggingPlayhead) return;\n\tevent.preventDefault();\n\tonTimelineCursorMove(event.clientX || event.pageX);\n}\n\nfunction onTimelineTouchDown(event: TouchEvent): void {\n\tdraggingPlayhead = true;\n\tonTimelineTouchMove(event);\n}\n\nfunction onTimelineTouchMove(event: TouchEvent): void {\n\tonTimelineCursorMove(event.touches[0].clientX);\n}\n\nfunction onTimelineCursorMove(mouseX: number): void {\n\tif (draggingPlayhead && synth.song != null) {\n\t\tconst boundingRect: ClientRect = visualizationContainer.getBoundingClientRect();\n\t\tsynth.playhead = synth.song.barCount * (mouseX - boundingRect.left) / (boundingRect.right - boundingRect.left);\n\t\tsynth.computeLatestModValues();\n\t\trenderPlayhead();\n\t}\n}\n\nfunction onTimelineCursorUp(): void {\n\tdraggingPlayhead = false;\n}\n\nfunction setSynthVolume(): void {\n\tconst volume: number = +volumeSlider.value;\n\tsynth.volume = Math.min(1.0, Math.pow(volume / 50.0, 0.5)) * Math.pow(2.0, (volume - 75.0) / 25.0);\n}\n\nfunction renderPlayhead(): void {\n\tif (synth.song != null) {\n\t\tlet pos: number = synth.playhead / synth.song.barCount;\n\t\tplayhead.style.left = (timelineWidth * pos) + \"px\";\n\t\t\t\n\t\tconst boundingRect: ClientRect = visualizationContainer.getBoundingClientRect();\n\t\tvisualizationContainer.scrollLeft = pos * (timelineWidth - boundingRect.width);\n\t}\n}\n\nfunction renderTimeline(): void {\n\ttimeline.innerHTML = \"\";\n\tif (synth.song == null) return;\n\t\t\n\tconst boundingRect: ClientRect = visualizationContainer.getBoundingClientRect();\n\t\t\n\tlet timelineHeight: number;\n\tlet windowOctaves: number;\n\tlet windowPitchCount: number;\n\t\t\n\tif (zoomEnabled) {\n\t\ttimelineHeight = boundingRect.height;\n\t\twindowOctaves = Math.max(1, Math.min(Config.pitchOctaves, Math.round(timelineHeight / (12 * 2))));\n\t\twindowPitchCount = windowOctaves * 12 + 1;\n\t\tconst semitoneHeight: number = (timelineHeight - 1) / windowPitchCount;\n\t\tconst targetBeatWidth: number = Math.max(8, semitoneHeight * 4);\n\t\ttimelineWidth = Math.max(boundingRect.width, targetBeatWidth * synth.song.barCount * synth.song.beatsPerBar);\n\t} else {\n\t\ttimelineWidth = boundingRect.width;\n\t\tconst targetSemitoneHeight: number = Math.max(1, timelineWidth / (synth.song.barCount * synth.song.beatsPerBar) / 6.0);\n\t\ttimelineHeight = Math.min(boundingRect.height, targetSemitoneHeight * (Config.maxPitch + 1) + 1);\n\t\twindowOctaves = Math.max(3, Math.min(Config.pitchOctaves, Math.round(timelineHeight / (12 * targetSemitoneHeight))));\n\t\twindowPitchCount = windowOctaves * 12 + 1;\n\t}\n\t\t\n\ttimelineContainer.style.width = timelineWidth + \"px\";\n\ttimelineContainer.style.height = timelineHeight + \"px\";\n\ttimeline.style.width = timelineWidth + \"px\";\n\ttimeline.style.height = timelineHeight + \"px\";\n\t\t\n\tconst barWidth: number = timelineWidth / synth.song.barCount;\n\tconst partWidth: number = barWidth / (synth.song.beatsPerBar * Config.partsPerBeat);\n\n\t\tconst wavePitchHeight: number = (timelineHeight-1) / windowPitchCount;\n\t\tconst drumPitchHeight: number =  (timelineHeight-1) / Config.drumCount;\n\t\t\n\tfor (let bar: number = 0; bar < synth.song.barCount + 1; bar++) {\n\t\tconst color: string = (bar == synth.song.loopStart || bar == synth.song.loopStart + synth.song.loopLength) ? ColorConfig.loopAccent : ColorConfig.uiWidgetBackground;\n\t\t\ttimeline.appendChild(rect({x: bar * barWidth - 1, y: 0, width: 2, height: timelineHeight, fill: color}));\n\t}\n\t\t\n\tfor (let octave: number = 0; octave <= windowOctaves; octave++) {\n\t\t\ttimeline.appendChild(rect({x: 0, y: octave * 12 * wavePitchHeight, width: timelineWidth, height: wavePitchHeight + 1, fill: ColorConfig.tonic, opacity: 0.75}));\n\t}\n\t\t\n\tfor (let channel: number = synth.song.channels.length - 1 - synth.song.modChannelCount; channel >= 0; channel--) {\n\n\t\tconst isNoise: boolean = synth.song.getChannelIsNoise(channel);\n\t\tconst pitchHeight: number = isNoise ? drumPitchHeight : wavePitchHeight;\n\t\t\t\n\t\tconst configuredOctaveScroll: number = synth.song.channels[channel].octave;\n\t\tconst newOctaveScroll: number = Math.max(0, Math.min(Config.pitchOctaves - windowOctaves, Math.ceil(configuredOctaveScroll - windowOctaves * 0.5)));\n\t\t\t\n\t\tconst offsetY: number = newOctaveScroll * pitchHeight * 12 + timelineHeight - pitchHeight * 0.5 - 0.5;\n\t\t\t\n\t\tfor (let bar: number = 0; bar < synth.song.barCount; bar++) {\n\t\t\tconst pattern: Pattern | null = synth.song.getPattern(channel, bar);\n\t\t\tif (pattern == null) continue;\n\t\t\tconst offsetX: number = bar * barWidth;\n\t\t\t\t\n\t\t\tfor (let i: number = 0; i < pattern.notes.length; i++) {\n\t\t\t\tconst note: Note = pattern.notes[i];\n\t\t\t\t\t\n\t\t\t\tfor (const pitch of note.pitches) {\n\t\t\t\t\tconst d: string = drawNote(pitch, note.start, note.pins, (pitchHeight + 1) / 2, offsetX, offsetY, partWidth, pitchHeight);\n\t\t\t\t\t\tconst noteElement: SVGPathElement = path({d: d, fill: ColorConfig.getChannelColor(synth.song, channel).primaryChannel});\n\t\t\t\t\tif (isNoise) noteElement.style.opacity = String(0.6);\n\t\t\t\t\ttimeline.appendChild(noteElement);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\t\n\trenderPlayhead();\n}\n\nfunction drawNote(pitch: number, start: number, pins: NotePin[], radius: number, offsetX: number, offsetY: number, partWidth: number, pitchHeight: number): string {\n\tlet d: string = `M ${offsetX + partWidth * (start + pins[0].time)} ${offsetY - pitch * pitchHeight + radius * (pins[0].size / Config.noteSizeMax)} `; \n\tfor (let i: number = 0; i < pins.length; i++) {\n\t\tconst pin: NotePin = pins[i];\n\t\t\tconst x:   number = offsetX + partWidth * (start + pin.time);\n\t\tconst y: number = offsetY - pitchHeight * (pitch + pin.interval);\n\t\tconst expression: number = pin.size / Config.noteSizeMax;\n\t\td += `L ${x} ${y - radius * expression} `;\n\t}\n\tfor (let i: number = pins.length - 1; i >= 0; i--) {\n\t\tconst pin: NotePin = pins[i];\n\t\t\tconst x:   number = offsetX + partWidth * (start + pin.time);\n\t\tconst y: number = offsetY - pitchHeight * (pitch + pin.interval);\n\t\tconst expression: number = pin.size / Config.noteSizeMax;\n\t\td += `L ${x} ${y + radius * expression} `;\n\t}\n\treturn d;\n}\n\nfunction renderPlayButton(): void {\n\tif (synth.playing) {\n\t\tplayButton.classList.remove(\"playButton\");\n\t\tplayButton.classList.add(\"pauseButton\");\n\t\tplayButton.title = \"Pause (Space)\";\n\t\tplayButton.textContent = \"Pause\";\n\t} else {\n\t\tplayButton.classList.remove(\"pauseButton\");\n\t\tplayButton.classList.add(\"playButton\");\n\t\tplayButton.title = \"Play (Space)\";\n\t\tplayButton.textContent = \"Play\";\n\t}\n\tpauseButtonDisplayed = synth.playing;\n}\n\nfunction renderLoopIcon(): void {\n\tloopIcon.setAttribute(\"fill\", (synth.loopRepeatCount == -1) ? ColorConfig.linkAccent : ColorConfig.uiWidgetBackground);\n}\n\nfunction renderZoomIcon(): void {\n\tzoomIcon.style.color = zoomEnabled ? ColorConfig.linkAccent : ColorConfig.uiWidgetBackground;\n}\n\nfunction onKeyPressed(event: KeyboardEvent): void {\n\tswitch (event.keyCode) {\n\t\tcase 70: // first bar\n\t\t\tsynth.playhead = 0;\n\t\t\tsynth.computeLatestModValues();\n\t\t\tevent.preventDefault();\n\t\t\tbreak;\n\t\tcase 32: // space\n\t\t\tonTogglePlay();\n\t\t\tsynth.computeLatestModValues();\n\t\t\tevent.preventDefault();\n\t\t\tbreak;\n\t\tcase 219: // left brace\n\t\t\tsynth.goToPrevBar();\n\t\t\tsynth.computeLatestModValues();\n\t\t\trenderPlayhead();\n\t\t\tevent.preventDefault();\n\t\t\tbreak;\n\t\tcase 221: // right brace\n\t\t\tsynth.goToNextBar();\n\t\t\tsynth.computeLatestModValues();\n\t\t\trenderPlayhead();\n\t\t\tevent.preventDefault();\n\t\t\tbreak;\n\t}\n}\n\nfunction onCopyClicked(): void {\n\t// Set as any to allow compilation without clipboard types (since, uh, I didn't write this bit and don't know the proper types library) -jummbus\n\tlet nav: any;\n\tnav = navigator;\n\n\tif (nav.clipboard && nav.clipboard.writeText) {\n\t\tnav.clipboard.writeText(location.href).catch(() => {\n\t\t\twindow.prompt(\"Copy to clipboard:\", location.href);\n\t\t});\n\t\treturn;\n\t}\n\tconst textField: HTMLTextAreaElement = document.createElement(\"textarea\");\n\ttextField.textContent = location.href;\n\tdocument.body.appendChild(textField);\n\ttextField.select();\n\tconst succeeded: boolean = document.execCommand(\"copy\");\n\ttextField.remove();\n\tif (!succeeded) window.prompt(\"Copy this:\", location.href);\n}\n\nfunction onShareClicked(): void {\n\t(<any>navigator).share({ url: location.href });\n}\n\n\tif ( top !== self ) {\n\t// In an iframe.\n\tcopyLink.style.display = \"none\";\n\tshareLink.style.display = \"none\";\n} else {\n\t// Fullscreen.\n\tfullscreenLink.style.display = \"none\";\n\tif (!(\"share\" in navigator)) shareLink.style.display = \"none\";\n}\n\nif (getLocalStorage(\"volume\") != null) {\n\tvolumeSlider.value = getLocalStorage(\"volume\")!;\n}\nsetSynthVolume();\n\nwindow.addEventListener(\"resize\", onWindowResize);\nwindow.addEventListener(\"keydown\", onKeyPressed);\n\ntimeline.addEventListener(\"mousedown\", onTimelineMouseDown);\nwindow.addEventListener(\"mousemove\", onTimelineMouseMove);\nwindow.addEventListener(\"mouseup\", onTimelineCursorUp);\ntimeline.addEventListener(\"touchstart\", onTimelineTouchDown);\ntimeline.addEventListener(\"touchmove\", onTimelineTouchMove);\ntimeline.addEventListener(\"touchend\", onTimelineCursorUp);\ntimeline.addEventListener(\"touchcancel\", onTimelineCursorUp);\n\nplayButton.addEventListener(\"click\", onTogglePlay);\nloopButton.addEventListener(\"click\", onToggleLoop);\nvolumeSlider.addEventListener(\"input\", onVolumeChange);\nzoomButton.addEventListener(\"click\", onToggleZoom);\ncopyLink.addEventListener(\"click\", onCopyClicked);\nshareLink.addEventListener(\"click\", onShareClicked);\nwindow.addEventListener(\"hashchange\", hashUpdatedExternally);\n\nhashUpdatedExternally();\nrenderLoopIcon();\nrenderZoomIcon();\nrenderPlayButton();\n\n// When compiling synth.ts as a standalone module named \"beepbox\", expose these classes as members to JavaScript:\n\texport {Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config, NotePin, Note, Pattern, Instrument, Channel, Synth};\n","import { ColorConfig } from \"../editor/ColorConfig\";\nimport { events } from \"./Events\";\n\nexport class oscilascopeCanvas {\n    public _EventUpdateCanvas:Function;\n\n    constructor(public readonly canvas: HTMLCanvasElement, readonly scale: number = 1) {\n        this._EventUpdateCanvas = function(directlinkL: Float32Array, directlinkR ?: Float32Array): void {\n            if(directlinkR) {\n                var ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n                ctx.fillStyle = ColorConfig.getComputed(\"--editor-background\");\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n                ctx.fillStyle = ColorConfig.getComputed(\"--oscilloscope-line-L\") !== \"\" ? ColorConfig.getComputed(\"--oscilloscope-line-L\") : ColorConfig.getComputed(\"--primary-text\");\n                for (let i: number = directlinkL.length - 1; i >= directlinkL.length - 1 - (canvas.width/scale); i--) {\n                    let x = i - (directlinkL.length - 1) + (canvas.width/scale);\n                    let yl = (directlinkL[i] * (canvas.height/scale / 2) + (canvas.height/scale / 2));\n\n                    ctx.fillRect((x - 1)*scale, (yl - 1)*scale, 1*scale, 1.5*scale);\n                    if (x == 0) break;\n                }\n                ctx.fillStyle = ColorConfig.getComputed(\"--oscilloscope-line-R\") !== \"\" ? ColorConfig.getComputed(\"--oscilloscope-line-R\") : ColorConfig.getComputed(\"--text-selection\"); //less ctx style calls = less expensive??? also avoiding uncached colors\n                for (let i: number = directlinkR.length - 1; i >= directlinkR.length - 1 - (canvas.width/scale); i--) {\n                    let x = i - (directlinkR.length - 1) + (canvas.width/scale);\n                    let yr = (directlinkR[i] * (canvas.height/scale / 2) + (canvas.height/scale / 2));\n                    \n                    ctx.fillRect((x - 1)*scale, (yr - 1)*scale, 1*scale, 1.5*scale);\n                    if (x == 0) break;\n                }\n            }\n        };\n        events.listen(\"oscillascopeUpdate\", this._EventUpdateCanvas);\n    }\n\n    \n}\n"],"mappings":"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AS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,MAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAS,QAAS,QAAS,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,QAAS,QAAS,OAAS,OAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,GAAS,OAAS,QAAS,QAAS,QAAS,QAAS,OAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,IAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,IAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAS,QAAS,QAAS,QAAS,OAAS,QAAS,QAAS,QAAS,OAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAS,QAAS,QAAS,QAAS,QAAS,OAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,OAAS,QAAS,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,KAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,MAAQ,MAAQ,OAAQ,QAAS,OAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAS,QAAS,OAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAS,OAAS,QAAS,OAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAS,OAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAS,QAAS,QAAS,QAAS,OAAS,QAAS,QAAS,QAAS,OAAQ,OAAQ,OAAQ,MAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAS,MAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,MAAQ,OAAQ,MAAQ,OAAQ,MAAQ,OAAQ,MAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAQ,OAAQ,OAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAS,OAAS,QAAS,OAAQ,EAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAS,QAAS,QAAS,QAAS,QAAS,OAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAS,QAAS,QAAS,QAAS,OAAS,QAAS,QAAS,OAAS,QAAS,QAAS,QAAS,OAAS,QAAS,QAAS,QAAS,QAAS,QAAS,MAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAS,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,UAYp4Q,CAAEzG,KAAM,+BAAgCC,WAAY,GAAK7B,QAASqI,EAAuB,EAAE,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,QAAS,OAAQ,OAAS,QAAS,OAAQ,OAAQ,MAAQ,MAAQ,MAAQ,QAAS,OAAQ,OAAQ,OAAQ,MAAQ,QAAS,QAAS,QAAS,QAAS,OAAQ,MAAQ,OAAQ,OAAQ,OAAQ,QAAS,QAAS,QAAS,QAAS,OAAQ,OAAQ,QAAS,OAAQ,QAAS,QAAS,OAAQ,QAAS,OAAS,OAAQ,OAAQ,OAAQ,OAAQ,MAAQ,OAAQ,OAAQ,MAAQ,QAAS,OAAQ,OAAQ,QAAS,QAAS,QAAS,QAAS,QAAS,OAAS,QAAS,YAIl3BrJ,EAAAC,UAw9BT,SAA8BwR,GAChC,MAAMC,EAA4B,IAAIxQ,MAAgBuQ,EAAIlQ,QACpD6B,EAAmC,GACzC,IAAK,IAAI6F,EAAY,EAAGA,EAAIyI,EAASnQ,OAAQ0H,IAAK,CAC9CyI,EAASzI,GAAK0I,OAAOC,OAAO,GAAIH,EAAIxI,IACpC,MAAMqE,EAAaoE,EAASzI,GAC5BqE,EAAMpK,MAAQ+F,EACd7F,EAAWkK,EAAM1K,MAAkB0K,CACtC,CACD,IAAK,IAAIuE,KAAOzO,EACZA,EAAWyO,GAAK7Q,QAAUM,EAAgB8B,EAAWyO,GAAK7Q,SAE9D,MAAMuM,EAAoEmE,EAE1E,OADAnE,EAAOnK,WAAaA,EACbmK,CACX,CAv+BsDuE,CAAoB9R,EAAOG,cAClEH,EAAAK,gBAA6CL,EAAOG,aAEpDH,EAAA+R,mCAA6C/R,EAAOC,UAAUsB,OAGrDvB,EAAUkK,WAA+BkD,EAAU,CACzE,CAAExK,KAAM,QAASC,WAAY,IAAMkM,UAAW,GAAIiD,gBAAiB,KAAQC,QAAQ,EAAOjR,QAAS,MACnG,CAAE4B,KAAM,QAASC,WAAY,EAAKkM,UAAW,GAAIiD,gBAAiB,EAAKC,QAAQ,EAAMjR,QAAS,MAE9F,CAAE4B,KAAM,QAASC,WAAY,GAAKkM,UAAW,GAAIiD,gBAAiB,KAAQC,QAAQ,EAAOjR,QAAS,MAClG,CAAE4B,KAAM,OAAQC,WAAY,GAAKkM,UAAW,GAAIiD,gBAAiB,KAAQC,QAAQ,EAAOjR,QAAS,MACjG,CAAE4B,KAAM,SAAUC,WAAY,IAAKkM,UAAW,GAAIiD,gBAAiB,EAAKC,QAAQ,EAAMjR,QAAS,MAC/F,CAAE4B,KAAM,QAASC,WAAY,EAAKkM,UAAW,GAAIiD,gBAAiB,KAAQC,QAAQ,EAAOjR,QAAS,MAClG,CAAE4B,KAAM,OAAQC,WAAY,IAAKkM,UAAW,IAAKiD,gBAAiB,KAAQC,QAAQ,EAAMjR,QAAS,MACjG,CAAE4B,KAAM,SAAUC,WAAY,KAAOkM,UAAW,GAAIiD,gBAAiB,KAAQC,QAAQ,EAAOjR,QAAS,MAC/F,CAAE4B,KAAM,WAAYC,WAAY,EAAKkM,UAAW,GAAIiD,gBAAiB,KAAQC,QAAQ,EAAOjR,QAAS,MACrG,CAAE4B,KAAM,SAAUC,WAAY,EAAKkM,UAAW,GAAIiD,gBAAiB,KAAQC,QAAQ,EAAOjR,QAAS,MAEzG,CAAE4B,KAAM,cAAeC,WAAY,GAAKkM,UAAW,MAAOiD,gBAAiB,KAAQC,QAAQ,EAAOjR,QAAS,MAC3G,CAAE4B,KAAM,iBAAkBC,WAAY,GAAKkM,UAAW,MAAOiD,gBAAiB,KAAQC,QAAQ,EAAOjR,QAAS,MAE9G,CAAE4B,KAAM,YAAaC,WAAY,GAAKkM,UAAW,GAAIiD,gBAAiB,KAAQC,QAAQ,EAAOjR,QAAS,MACtG,CAAE4B,KAAM,OAAQC,WAAY,EAAKkM,UAAW,GAAIiD,gBAAiB,EAAKC,QAAQ,EAAMjR,QAAS,MAC7F,CAAE4B,KAAM,WAAYC,WAAY,EAAKkM,UAAW,GAAIiD,gBAAiB,EAAKC,QAAQ,EAAMjR,QAAS,QAIxEhB,EAAAkS,eAAyB,EAAM,EAC/BlS,EAAemS,gBAAW,GAC1BnS,EAA0BoS,2BAAW,GACrCpS,EAAqBqS,sBAAW,IAChCrS,EAAesS,gBAAWtS,EAAOqS,sBAAwB9I,KAAKoB,IAAI,EAAK3K,EAAOkS,gBAAkBlS,EAAOmS,gBAAkB,EAAInS,EAAOoS,6BACpIpS,EAAeuS,gBAAW,EAC1BvS,EAAewS,gBAAW,GAC1BxS,EAAgByS,iBAAW,EAC3BzS,EAAA0S,eAAyB,GACzB1S,EAAe2S,gBAAW,EAC1B3S,EAAe4S,gBAA0B,CAAC,WAAY,YAAa,QACnE5S,EAAgB6S,iBAAW,GAE3B7S,EAAoB8S,qBAAW,GAC/B9S,EAAqB+S,sBAAW,EAEhC/S,EAAWgT,YAAW,GACtBhT,EAAAiT,aAAsC,EAAE,IAAK,IAAK,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,IAChFjT,EAAckT,eAAW,EACzBlT,EAAmBmT,oBAAW,GACjCnT,EAAWoT,YAAgChG,EAAU,CACrE,CAAExK,KAAM,SAAUyQ,YAAY,EAAOC,WAAW,EAAOC,QAAQ,EAAOC,WAAY,EAAGC,yBAAyB,GAC9G,CAAE7Q,KAAM,YAAayQ,YAAY,EAAMC,WAAW,EAAOC,QAAQ,EAAOC,WAAY,EAAGC,yBAAyB,GAChH,CAAE7Q,KAAM,WAAYyQ,YAAY,EAAMC,WAAW,EAAMC,QAAQ,EAAOC,WAAY,EAAGC,yBAAyB,GAC9G,CAAE7Q,KAAM,QAASyQ,YAAY,EAAMC,WAAW,EAAOC,QAAQ,EAAMC,WAAY,EAAGC,yBAAyB,GAC3G,CAAE7Q,KAAM,mBAAoByQ,YAAY,EAAMC,WAAW,EAAOC,QAAQ,EAAMC,WAAY,EAAGC,yBAAyB,KAEtGzT,EAAQ0T,SAA6BtG,EAAU,CAC/D,CAAExK,KAAM,OAAQuJ,UAAW,EAAKwH,KAAM,EAAGC,WAAY,GACrD,CAAEhR,KAAM,QAASuJ,UAAW,IAAMwH,KAAM,EAAGC,WAAY,GACvD,CAAEhR,KAAM,UAAWuJ,UAAW,GAAKwH,KAAM,EAAGC,WAAY,IACxD,CAAEhR,KAAM,QAASuJ,UAAW,IAAMwH,KAAM,EAAGC,WAAY,GACvD,CAAEhR,KAAM,QAASuJ,UAAW,GAAKwH,KAAM,EAAGC,WAAY,KActC5T,EAAY6T,aAAiCzG,EAAU,CAC7E,CAAExK,KAAM,SAAUkR,eAAgB,CAAC,KAAOC,OAAQ,KAClD,CAAEnR,KAAM,QAASkR,eAAgB,CAAC,IAAM,OAAc,KAAWC,OAAQ,UAInD/T,EAAagU,cAA0B,CAAC,EAAG,MAAQ,KAAO,GAAK,IAAM,EAAI,EAAG,GAAK,GAAK,EAAI,EAAG,IAAM,GAAK,GAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,KAAM,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,GAChShU,EAAOiU,QAA4B7G,EAAU,CAC7D,CAAExK,KAAM,OAAQsR,OAAQ,EAAGC,OAAQ,EAAKC,OAAQ,EAAKvR,WAAY,IAAKwR,KAAM,GAC5E,CAAEzR,KAAM,UAAWsR,OAAQ,EAAGC,OAAQ,KAAOC,OAAQ,EAAKvR,WAAY,GAAKwR,KAAM,GACjF,CAAEzR,KAAM,MAAOsR,OAAQ,EAAGC,OAAQ,KAAOC,OAAQ,EAAKvR,WAAY,EAAKwR,KAAM,GAC7E,CAAEzR,KAAM,aAAcsR,OAAQ,EAAGC,OAAQ,IAAMC,OAAQ,EAAKvR,WAAY,EAAKwR,KAAM,GACnF,CAAEzR,KAAM,YAAasR,OAAQ,EAAGC,OAAQ,IAAMC,OAAQ,EAAKvR,WAAY,GAAKwR,KAAM,GAClF,CAAEzR,KAAM,QAASsR,OAAQ,EAAGC,OAAQ,IAAKC,OAAQ,IAAKvR,WAAY,GAAKwR,KAAM,GAC7E,CAAEzR,KAAM,SAAUsR,OAAQ,EAAGC,OAAQ,EAAKC,OAAQ,EAAKvR,WAAY,GAAKwR,KAAM,GAC9E,CAAEzR,KAAM,QAASsR,OAAQ,EAAGC,OAAQ,IAAMC,OAAQ,EAAKvR,WAAY,EAAKwR,MAAO,GAC/E,CAAEzR,KAAM,QAASsR,OAAQ,EAAGC,OAAQ,IAAMC,OAAQ,EAAKvR,WAAY,EAAKwR,KAAM,IAC9E,CAAEzR,KAAM,UAAWsR,OAAQ,EAAGC,OAAQ,IAAMC,OAAQ,IAAMvR,WAAY,GAAKwR,MAAO,IAClF,CAAEzR,KAAM,eAAgBsR,OAAQ,EAAGC,OAAQ,KAAMC,QAAS,EAAKvR,WAAY,GAAKwR,MAAO,IAC7F,CAAEzR,KAAM,UAAWsR,OAAQ,EAAGC,OAAQ,IAAMC,OAAQ,EAAKvR,WAAY,EAAKwR,KAAM,GAChF,CAAEzR,KAAM,SAAUsR,OAAQ,EAAGC,OAAQ,EAAKC,OAAQ,IAAMvR,WAAY,EAAKwR,KAAM,GAC/E,CAAEzR,KAAM,SAAUsR,OAAQ,EAAGC,OAAQ,EAAKC,OAAQ,GAAKvR,WAAY,IAAMwR,KAAM,GAC/E,CAAEzR,KAAM,UAAWsR,OAAQ,EAAGC,OAAQ,IAAKC,OAAQ,EAAGvR,WAAY,KAAOwR,KAAM,GAC/E,CAAEzR,KAAM,UAAWsR,OAAQ,EAAGC,OAAQ,EAAGC,OAAQ,EAAGvR,WAAY,IAAMwR,KAAM,GAC5E,CAAEzR,KAAM,OAAQsR,OAAQ,EAAGC,OAAQ,EAAGC,QAAS,EAAGvR,WAAY,EAAKwR,KAAM,GACzE,CAAEzR,KAAM,QAASsR,OAAQ,EAAGC,OAAQ,EAAGC,OAAQ,GAAKvR,WAAY,KAAOwR,KAAM,GAC7E,CAAEzR,KAAM,aAAcsR,OAAQ,EAAGC,OAAQ,IAAKC,OAAQ,EAAKvR,WAAY,GAAKwR,KAAM,GAClF,CAAEzR,KAAM,UAAWsR,OAAQ,EAAGC,OAAQ,KAAOC,OAAQ,EAAKvR,WAAY,EAAKwR,KAAM,GACjF,CAAEzR,KAAM,SAAUsR,OAAQ,EAAGC,OAAQ,IAAKC,OAAQ,EAAKvR,WAAY,EAAKwR,KAAM,GAC9E,CAAEzR,KAAM,YAAasR,OAAQ,EAAGC,OAAQ,GAAIC,OAAQ,EAAKvR,WAAY,EAAKwR,KAAM,GAChF,CAAEzR,KAAM,OAAQsR,OAAQ,EAAGC,OAAQ,EAAKC,OAAQ,GAAMvR,WAAY,EAAKwR,KAAM,GAC7E,CAAEzR,KAAM,SAAUsR,OAAQ,EAAGC,OAAQ,EAAKC,OAAQ,GAAKvR,WAAY,EAAKwR,KAAM,GAC3E,CAAEzR,KAAM,UAAWsR,OAAQ,EAAGC,OAAQ,EAAKC,OAAQ,IAAMvR,WAAY,GAAKwR,KAAM,GAC7E,CAAEzR,KAAM,YAAasR,OAAQ,EAAGC,OAAQ,MAAQC,OAAQ,GAAKvR,WAAY,GAAKwR,MAAO,KAC3F,CAAEzR,KAAM,OAAQsR,OAAQ,EAAGC,OAAQ,GAAIC,QAAS,EAAGvR,WAAY,EAAKwR,MAAO,KAIlDrU,EAAWsU,YAA0B,CAAC,SAAU,SAAU,UAAW,aAAc,aAAc,cAAe,OAAQ,cAAe,SAAU,UAAW,kBAAmB,cAC/KtU,EAAWuU,YAA8B,4BACzCvU,EAAWwU,YAAW,EACzBxU,EAAWyU,YAAW,GAGtBzU,EAAc0U,eAAW,MACzB1U,EAAS2U,UAAW,GACpB3U,EAAA4U,OAAoC,EAAnB5U,EAAO2U,UACxB3U,EAAkB6U,mBAAW,KAC1B7U,EAAW8U,YAAW,EACtB9U,EAAmB+U,oBAAW,EAC9B/U,EAAgBgV,iBAAW,MAC3BhV,EAAAiV,mBAA2D,CAAC,CAAC,KAAM,IAAM,MAAO,CAAC,KAAM,KAAM,OAC7FjV,EAAAkV,mBAA2D,CAAC,CAAC,EAAK,IAAK,KAAM,CAAC,IAAK,IAAK,IACxFlV,EAAcmV,eAAWnV,EAAOgV,kBAAoB,EAAMhV,EAAOiV,mBAAmB,GAAGG,OAAOpV,EAAOiV,mBAAmB,IAAII,QAAO,CAACC,EAAGC,IAAMhM,KAAKiM,IAAIF,EAAGC,MAC5JvV,EAAMyV,OAA2BrI,EAAU,CAC3D,CAAExK,KAAM,eAAgB8S,gBAAgB,EAAOC,aAAa,EAAOC,WAAY,EAAGC,YAAY,GAC9F,CAAEjT,KAAM,QAAS8S,gBAAgB,EAAOC,aAAa,EAAOC,WAAY,EAAGC,YAAY,GACvF,CAAEjT,KAAM,WAAY8S,gBAAgB,EAAOC,aAAa,EAAMC,WAAY,EAAGC,YAAY,GACzF,CAAEjT,KAAM,kBAAmB8S,gBAAgB,EAAMC,aAAa,EAAOC,WAAY,EAAGC,YAAY,KAE7E7V,EAAY8V,aAAW,EACvB9V,EAAa+V,cAAW,EAC3B/V,EAAAgW,wBAAkCzM,KAAKiM,IAAIxV,EAAO8V,aAAc9V,EAAO+V,cAAc,GAClF/V,EAAUiW,WAA+B7I,EAAU,CACtE,CAAExK,KAAM,YAAasT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,KACxG,CAAExT,KAAM,YAAasT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,GAAI,GAAI,CAAC,GAAI,KACtG,CAAExT,KAAM,YAAasT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,EAAG,GAAI,GAAI,KACtG,CAAExT,KAAM,YAAasT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,GAAI,CAAC,GAAI,CAAC,GAAI,KACvG,CAAExT,KAAM,UAAWsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,KAClG,CAAExT,KAAM,UAAWsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,GAAI,KACjG,CAAExT,KAAM,YAAasT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,CAAC,EAAG,GAAI,GAAI,KACrG,CAAExT,KAAM,UAAWsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,KACjG,CAAExT,KAAM,YAAasT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,KACpG,CAAExT,KAAM,cAAesT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,GAAI,KAC3G,CAAExT,KAAM,UAAWsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,GAAI,CAAC,GAAI,KAChG,CAAExT,KAAM,YAAasT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,KACpG,CAAExT,KAAM,UAAWsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,GAAI,GAAI,KAC/F,CAAExT,KAAM,cAAesT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,GAAI,CAAC,GAAI,GAAI,KACxG,CAAExT,KAAM,aAAcsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,GAAI,OAE3FpW,EAAaqW,cAA+BjJ,EAAU,CAEzE,CAAExK,KAAM,SAAUsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,KAGzH,CAAExT,KAAM,cAAesT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,KACtH,CAAExT,KAAM,cAAesT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,CAAC,GAAI,KACrH,CAAExT,KAAM,cAAesT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,KACrH,CAAExT,KAAM,cAAesT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,GAAI,KAEpH,CAAExT,KAAM,gBAAiBsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,EAAG,GAAI,GAAI,GAAI,CAAC,GAAI,KACzH,CAAExT,KAAM,gBAAiBsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,GAAI,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,KACzH,CAAExT,KAAM,gBAAiBsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,KAC3H,CAAExT,KAAM,gBAAiBsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,EAAG,GAAI,GAAI,CAAC,GAAI,CAAC,GAAI,KAC1H,CAAExT,KAAM,gBAAiBsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,GAAI,CAAC,EAAG,GAAI,GAAI,KACzH,CAAExT,KAAM,gBAAiBsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,KAChI,CAAExT,KAAM,gBAAiBsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,EAAG,GAAI,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,KAC5H,CAAExT,KAAM,gBAAiBsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,CAAC,GAAI,CAAC,GAAI,KAE5H,CAAExT,KAAM,gBAAiBsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,KACvH,CAAExT,KAAM,gBAAiBsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,KAC1H,CAAExT,KAAM,kBAAmBsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,EAAG,GAAI,GAAI,GAAI,KAC3H,CAAExT,KAAM,kBAAmBsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,KACzH,CAAExT,KAAM,kBAAmBsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,KAC1I,CAAExT,KAAM,gBAAiBsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,KACvH,CAAExT,KAAM,gBAAiBsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,KACtH,CAAExT,KAAM,gBAAiBsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,KACtH,CAAExT,KAAM,gBAAiBsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,CAAC,GAAI,KAErH,CAAExT,KAAM,gBAAiBsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,CAAC,GAAI,CAAC,EAAG,GAAI,GAAI,GAAI,KACxH,CAAExT,KAAM,gBAAiBsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAKC,YAAa,CAAC,CAAC,GAAI,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,KACzH,CAAExT,KAAM,cAAesT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,KACnH,CAAExT,KAAM,gBAAiBsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAKC,YAAa,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,CAAC,GAAI,KACvH,CAAExT,KAAM,cAAesT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,GAAI,CAAC,EAAG,GAAI,GAAI,GAAI,KACrH,CAAExT,KAAM,gBAAiBsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,KACxH,CAAExT,KAAM,cAAesT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,GAAI,GAAI,GAAI,CAAC,GAAI,KAClH,CAAExT,KAAM,cAAesT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,KAEjH,CAAExT,KAAM,mBAAoBsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,GAAI,KACzJ,CAAExT,KAAM,eAAgBsT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,GAAI,KACrJ,CAAExT,KAAM,cAAesT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,GAAI,GAAI,GAAI,KAC7H,CAAExT,KAAM,cAAesT,aAAc,EAAGC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAIC,YAAa,CAAC,CAAC,EAAG,EAAG,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,GAAI,OAEvGpW,EAAAsW,wBAAiD,CAAC,EAAK,KAAO,KAAO,KAAO,KAAO,MACtFtW,EAAoBuW,qBAAW,GAC5BvW,EAAmBwW,oBAAuCpJ,EAAU,CACvF,CAAExK,KAAM,QAAS6T,KAAM,KAAOC,SAAU,EAAKC,cAAe,GAC5D,CAAE/T,KAAM,QAAS6T,KAAM,IAAMC,SAAU,EAAKC,cAAe,GAC3D,CAAE/T,KAAM,OAAQ6T,KAAM,GAAKC,SAAU,EAAKC,cAAe,GACzD,CAAE/T,KAAM,QAAS6T,KAAM,IAAMC,SAAU,EAAKC,cAAe,GAC3D,CAAE/T,KAAM,KAAM6T,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAE/T,KAAM,MAAO6T,KAAM,EAAKC,SAAU,IAAKC,eAAgB,GACzD,CAAE/T,KAAM,KAAM6T,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAE/T,KAAM,MAAO6T,KAAM,EAAKC,UAAW,IAAKC,eAAgB,GAC1D,CAAE/T,KAAM,KAAM6T,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAE/T,KAAM,OAAQ6T,KAAM,IAAKC,UAAW,IAAMC,cAAe,GAC3D,CAAE/T,KAAM,KAAM6T,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAE/T,KAAM,MAAO6T,KAAM,EAAKC,UAAW,IAAKC,eAAgB,GAC1D,CAAE/T,KAAM,KAAM6T,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAE/T,KAAM,KAAM6T,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAE/T,KAAM,KAAM6T,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAE/T,KAAM,KAAM6T,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAE/T,KAAM,KAAM6T,KAAM,EAAKC,SAAU,EAAKC,cAAe,GACvD,CAAE/T,KAAM,MAAO6T,KAAM,GAAMC,SAAU,EAAKC,cAAe,GACzD,CAAE/T,KAAM,MAAO6T,KAAM,GAAMC,SAAU,EAAKC,cAAe,GACzD,CAAE/T,KAAM,MAAO6T,KAAM,GAAMC,SAAU,EAAKC,cAAe,GACzD,CAAE/T,KAAM,MAAO6T,KAAM,GAAMC,SAAU,EAAKC,cAAe,GACzD,CAAE/T,KAAM,MAAO6T,KAAM,GAAMC,SAAU,EAAKC,cAAe,GAC1D,CAAE/T,KAAM,MAAO6T,KAAM,GAAMC,SAAU,EAAKC,cAAe,GAExD,CAAE/T,KAAM,MAAO6T,KAAM,GAAMC,SAAU,EAAKC,cAAe,GAC1D,CAAE/T,KAAM,MAAO6T,KAAM,GAAMC,SAAU,EAAKC,cAAe,GAExD,CAAE/T,KAAM,MAAO6T,KAAM,GAAMC,SAAU,EAAKC,cAAe,GAC1D,CAAE/T,KAAM,MAAO6T,KAAM,GAAMC,SAAU,EAAKC,cAAe,GAExD,CAAE/T,KAAM,MAAO6T,KAAM,GAAMC,SAAU,EAAKC,cAAe,GAC3D,CAAE/T,KAAM,OAAQ6T,KAAM,GAAMC,UAAW,EAAKC,eAAgB,GAEhE,CAAE/T,KAAM,MAAO6T,KAAM,GAAMC,SAAU,EAAKC,cAAe,GAC1D,CAAE/T,KAAM,MAAO6T,KAAM,GAAMC,SAAU,EAAKC,cAAe,GACzD,CAAE/T,KAAM,MAAO6T,KAAM,GAAMC,SAAU,EAAKC,cAAe,GACzD,CAAE/T,KAAM,OAAQ6T,KAAM,IAAOC,SAAU,EAAKC,cAAe,KAIjC3W,EAAS4W,UAA8BxJ,EAAU,CACpE,CAAExK,KAAM,OAAQ+Q,KAAI,EAAqBkD,MAAO,GAChD,CAAEjU,KAAM,YAAa+Q,KAAI,EAAyBkD,MAAO,GACzD,CAAEjU,KAAM,QAAS+Q,KAAI,EAAsBkD,MAAO,GAClD,CAAEjU,KAAM,WAAY+Q,KAAI,EAAsBkD,MAAO,KACrD,CAAEjU,KAAM,UAAW+Q,KAAI,EAAsBkD,MAAO,IACpD,CAAEjU,KAAM,UAAW+Q,KAAI,EAAsBkD,MAAO,GACpD,CAAEjU,KAAM,UAAW+Q,KAAI,EAAsBkD,MAAO,GACpD,CAAEjU,KAAM,WAAY+Q,KAAI,EAAsBkD,MAAO,KACrD,CAAEjU,KAAM,UAAW+Q,KAAI,EAAsBkD,MAAO,IACpD,CAAEjU,KAAM,UAAW+Q,KAAI,EAAsBkD,MAAO,GACpD,CAAEjU,KAAM,UAAW+Q,KAAI,EAAsBkD,MAAO,GACpD,CAAEjU,KAAM,WAAY+Q,KAAI,EAAsBkD,MAAO,KACrD,CAAEjU,KAAM,UAAW+Q,KAAI,EAAsBkD,MAAO,IACpD,CAAEjU,KAAM,UAAW+Q,KAAI,EAAsBkD,MAAO,GACpD,CAAEjU,KAAM,UAAW+Q,KAAI,EAAsBkD,MAAO,GACpD,CAAEjU,KAAM,WAAY+Q,KAAI,EAAwBkD,MAAO,GACvD,CAAEjU,KAAM,WAAY+Q,KAAI,EAAwBkD,MAAO,GACvD,CAAEjU,KAAM,WAAY+Q,KAAI,EAAwBkD,MAAO,GACvD,CAAEjU,KAAM,WAAY+Q,KAAI,EAAwBkD,MAAO,GACvD,CAAEjU,KAAM,WAAY+Q,KAAI,EAAyBkD,MAAO,GACxD,CAAEjU,KAAM,WAAY+Q,KAAI,EAAyBkD,MAAO,GACxD,CAAEjU,KAAM,WAAY+Q,KAAI,EAAyBkD,MAAO,GACxD,CAAEjU,KAAM,WAAY+Q,KAAI,EAAsBkD,MAAO,IACrD,CAAEjU,KAAM,UAAW+Q,KAAI,EAAsBkD,MAAO,IACpD,CAAEjU,KAAM,UAAW+Q,KAAI,EAAsBkD,MAAO,GACpD,CAAEjU,KAAM,UAAW+Q,KAAI,EAAsBkD,MAAO,GACpD,CAAEjU,KAAM,WAAY+Q,KAAI,EAAuBkD,MAAO,IACtD,CAAEjU,KAAM,WAAY+Q,KAAI,EAAuBkD,MAAO,IACtD,CAAEjU,KAAM,WAAY+Q,KAAI,EAAuBkD,MAAO,IACtD,CAAEjU,KAAM,WAAY+Q,KAAI,EAAuBkD,MAAO,GACtD,CAAEjU,KAAM,WAAY+Q,KAAI,GAAuBkD,MAAO,KACtD,CAAEjU,KAAM,WAAY+Q,KAAI,GAAuBkD,MAAO,KACtD,CAAEjU,KAAM,WAAY+Q,KAAI,GAAuBkD,MAAO,IACtD,CAAEjU,KAAM,WAAY+Q,KAAI,GAAuBkD,MAAO,GACtD,CAAEjU,KAAM,WAAY+Q,KAAI,GAAuBkD,MAAO,GACtD,CAAEjU,KAAM,UAAW+Q,KAAI,GAAqBkD,MAAO,KACnD,CAAEjU,KAAM,UAAW+Q,KAAI,GAAqBkD,MAAO,KACnD,CAAEjU,KAAM,SAAU+Q,KAAI,GAAqBkD,MAAO,IAClD,CAAEjU,KAAM,SAAU+Q,KAAI,GAAqBkD,MAAO,GAClD,CAAEjU,KAAM,SAAU+Q,KAAI,GAAqBkD,MAAO,GACnD,CAAEjU,KAAM,UAAW+Q,KAAM,EAAGkD,MAAO,IACxC,CAAEjU,KAAM,UAAW+Q,KAAM,EAAGkD,MAAO,GACnC,CAAEjU,KAAM,UAAW+Q,KAAM,EAAGkD,MAAO,GAEnC,CAAEjU,KAAM,WAAY+Q,KAAM,EAAGkD,MAAO,GAC9B,CAAEjU,KAAM,WAAY+Q,KAAM,EAAGkD,MAAO,GACpC,CAAEjU,KAAM,WAAY+Q,KAAM,EAAGkD,MAAO,GACpC,CAAEjU,KAAM,WAAY+Q,KAAM,EAAGkD,MAAO,GACpC,CAAEjU,KAAM,WAAY+Q,KAAM,EAAGkD,MAAO,GACpC,CAAEjU,KAAM,WAAY+Q,KAAM,EAAGkD,MAAO,GACpC,CAAEjU,KAAM,WAAY+Q,KAAM,EAAGkD,MAAO,IACpC,CAAEjU,KAAM,WAAY+Q,KAAM,EAAGkD,MAAO,GACpC,CAAEjU,KAAM,WAAY+Q,KAAM,EAAGkD,MAAO,KACpC,CAAEjU,KAAM,WAAY+Q,KAAM,EAAGkD,MAAO,IACpC,CAAEjU,KAAM,WAAY+Q,KAAM,EAAGkD,MAAO,GACpC,CAAEjU,KAAM,WAAY+Q,KAAM,EAAGkD,MAAO,KAEvC,CAAEjU,KAAM,YAAa+Q,KAAM,EAAGkD,MAAO,IAClC,CAAEjU,KAAM,YAAa+Q,KAAM,EAAGkD,MAAO,IACrC,CAAEjU,KAAM,kBAAmB+Q,KAAM,EAAGkD,MAAO,KAG3B7W,EAAS8W,UAA8B1J,EAAU,CACvE,CAAExK,KAAM,KAAMmU,QAAS,CAAC,CAAC,GAAI,GAAI,GAAI,KACrC,CAAEnU,KAAM,KAAMmU,QAAS,CAAC,GAAI,CAAC,GAAI,GAAI,KACrC,CAAEnU,KAAM,KAAMmU,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,KACrC,CAAEnU,KAAM,KAAMmU,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,KACrC,CAAEnU,KAAM,QAASmU,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,GAAI,KACzC,CAAEnU,KAAM,QAASmU,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,CAAC,KACzC,CAAEnU,KAAM,WAAYmU,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,KAC7C,CAAEnU,KAAM,WAAYmU,QAAS,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KAC7C,CAAEnU,KAAM,cAAemU,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KACjD,CAAEnU,KAAM,MAAOmU,QAAS,CAAC,GAAI,CAAC,GAAI,GAAI,KACtC,CAAEnU,KAAM,MAAOmU,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,KACtC,CAAEnU,KAAM,MAAOmU,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,KACtC,CAAEnU,KAAM,MAAOmU,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,KACtC,CAAEnU,KAAM,MAAOmU,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,KACtC,CAAEnU,KAAM,MAAOmU,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,KACtC,CAAEnU,KAAM,UAAWmU,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,CAAC,KAC3C,CAAEnU,KAAM,UAAWmU,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,CAAC,KACrC,CAAEnU,KAAM,UAAWmU,QAAS,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KAC5C,CAAEnU,KAAM,UAAWmU,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KAC7C,CAAEnU,KAAM,UAAWmU,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KAC7C,CAAEnU,KAAM,YAAamU,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KAC/C,CAAEnU,KAAM,YAAamU,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KAC/C,CAAEnU,KAAM,YAAamU,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,EAAG,EAAG,KAClD,CAAEnU,KAAM,MAAOmU,QAAS,CAAC,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAE,EAAE,EAAE,GAAI,CAAC,EAAG,EAAG,EAAE,OAEhD/W,EAAYgX,aAA8B5J,EAAU,CAEvE,CAAExK,KAAM,SAAUmU,QAAS,CAAC,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,KAE7D,CAAEnU,KAAM,KAAMmU,QAAS,CAAC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,KAC7C,CAAEnU,KAAM,KAAMmU,QAAS,CAAC,GAAI,CAAC,GAAI,GAAI,GAAI,GAAI,KAC7C,CAAEnU,KAAM,KAAMmU,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,GAAI,KAC7C,CAAEnU,KAAM,KAAMmU,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,GAAI,KAC7C,CAAEnU,KAAM,KAAMmU,QAAS,CAAC,GAAI,GAAI,GAAI,GAAI,CAAC,GAAI,KAC7C,CAAEnU,KAAM,KAAMmU,QAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,CAAC,KAC7C,CAAEnU,KAAM,QAASmU,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,GAAI,GAAI,GAAI,KACjD,CAAEnU,KAAM,QAASmU,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,KACjD,CAAEnU,KAAM,WAAYmU,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,GAAI,KACrD,CAAEnU,KAAM,WAAYmU,QAAS,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,KACrD,CAAEnU,KAAM,cAAemU,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,GAAI,KACzD,CAAEnU,KAAM,iBAAkBmU,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,KAC7D,CAAEnU,KAAM,oBAAqBmU,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KACjE,CAAEnU,KAAM,MAAOmU,QAAS,CAAC,GAAI,CAAC,GAAI,GAAI,GAAI,GAAI,KAC9C,CAAEnU,KAAM,MAAOmU,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,GAAI,KAC9C,CAAEnU,KAAM,MAAOmU,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,GAAI,KAC9C,CAAEnU,KAAM,MAAOmU,QAAS,CAAC,GAAI,GAAI,GAAI,GAAI,CAAC,GAAI,KAC9C,CAAEnU,KAAM,MAAOmU,QAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,CAAC,KAC9C,CAAEnU,KAAM,MAAOmU,QAAS,CAAC,GAAI,GAAI,CAAC,GAAI,GAAI,GAAI,KAC9C,CAAEnU,KAAM,MAAOmU,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,GAAI,KAC9C,CAAEnU,KAAM,MAAOmU,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,GAAI,KAC9C,CAAEnU,KAAM,MAAOmU,QAAS,CAAC,GAAI,GAAI,GAAI,GAAI,CAAC,GAAI,KAC9C,CAAEnU,KAAM,cAAemU,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KACxD,CAAEnU,KAAM,cAAemU,QAAS,CAAC,GAAI,GAAI,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KACxD,CAAEnU,KAAM,cAAemU,QAAS,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KAC1D,CAAEnU,KAAM,gBAAiBmU,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KAC7D,CAAEnU,KAAM,gBAAiBmU,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KAC7D,CAAEnU,KAAM,cAAemU,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KAC3D,CAAEnU,KAAM,cAAemU,QAAS,CAAC,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,GAAI,CAAC,KAC3D,CAAEnU,KAAM,gBAAiBmU,QAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,KACpE,CAAEnU,KAAM,MAAOmU,QAAS,CAAC,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,OAE1H/W,EAAAmK,gBAA0B,MAC1BnK,EAAAiX,oBAA8B,MAC9BjX,EAAiBkX,kBAAW,GAC5BlX,EAAqBmX,sBAAW,GAChCnX,EAA8BoX,+BAAW,EACzCpX,EAAwBqX,yBAAW,EACnCrX,EAAWsX,aAAY,GAAKtX,EAAOqX,0BAA4B,EAC/DrX,EAAsBuX,uBAAW,GACjCvX,EAAiBwX,kBAAW,GAC5BxX,EAAAyX,iCAA2C,IAC3CzX,EAAyB0X,0BAAW,EACpC1X,EAAY2X,cAAY,GAAK3X,EAAO0X,2BAA6B,EACjE1X,EAAA4X,oBAA8B,KAC9B5X,EAAe8J,gBAAW,GAC1B9J,EAAmB6X,oBAAW,GAC9B7X,EAAkB8X,mBAAW,EAC7B9X,EAAmB+X,oBAAW,EAC9B/X,EAAiBgY,kBAAW,GAC5BhY,EAAgBiY,iBAAW,EAC3BjY,EAAoBkY,qBAAW,EAC/BlY,EAAoBmY,qBAAW,GAC/BnY,EAAoBoY,qBAAW,EAC/BpY,EAAoBqY,qBAAW,GAC/BrY,EAAkBsY,mBAAW,EAC7BtY,EAAkBuY,mBAAW,GAC7BvY,EAAawY,cAAW,EACxBxY,EAAgByY,iBAAW,GAC3BzY,EAAS0Y,UAAW,GACpB1Y,EAAY2Y,aAAW,EACvB3Y,EAAQ4Y,SAAW,EACnB5Y,EAAQ6Y,SAAW7Y,EAAO2Y,aAAe3Y,EAAOyY,iBAChDzY,EAAA8Y,uBAAuD,EAAtB9Y,EAAO8V,aACxC9V,EAAuB+Y,wBAAa,CAAC,GAAW,EAAM,GAAM,EAAM,GAAM,GAAW,EAAM,EAAK,EAAM,EAAK,GAAO,GAAM,EAAM,EAAK,GAAW,EAAM,EAAK,EAAM,EAAK,GAAO,GAAM,EAAK,GAAO,GAAM,EAAM,EAAK,IAAW,EAAM,EAAK,EAAM,EAAK,GAAO,GAAM,IAAW,IAAW,EAAM,EAAK,GAAO,EAAK,GAAO,EAAK,GAAKC,KAAI1D,GAAK/L,KAAK2C,KAAKoJ,GAAKtV,EAAOyY,mBACvVzY,EAAAiZ,gBAA0BjZ,EAAO+Y,wBAAwBxX,OACzDvB,EAAAkZ,iBAA2BlZ,EAAOiZ,iBAAmB,EACrDjZ,EAAYmZ,aAAW,IACvBnZ,EAASoZ,UAAW,IACpBpZ,EAASqZ,UAAW,EACpBrZ,EAAasZ,cAAW,EACxBtZ,EAAauZ,cAAW,IACxBvZ,EAAA0M,eAAyB,IACzB1M,EAAAwZ,aAAuBxZ,EAAO0M,eAAiB,EAC/C1M,EAAQyZ,SAmcnC,WACI,MAAM1Q,EAAqB,IAAIK,aAAapJ,EAAO0M,eAAiB,GACpE,IAAK,IAAIzD,EAAY,EAAGA,EAAIjJ,EAAO0M,eAAiB,EAAGzD,IACnDF,EAAKE,GAAKM,KAAKgD,IAAItD,EAAIM,KAAK8C,GAAK,EAAMrM,EAAO0M,gBAElD,OAAO3D,CACX,CAzcoD2Q,GAGzB1Z,EAAgC2Z,iCAAW,IAC3C3Z,EAA+B4Z,gCAAW,GAC1C5Z,EAA8B6Z,+BAAW,EACzC7Z,EAAmB8Z,oBAAW,IAE9B9Z,EAAe+Z,gBAAW,EAC1B/Z,EAAkBga,mBAAW,GAC7Bha,EAAeia,gBAAW,IAC1Bja,EAAmBka,oBAAW,GAC9Bla,EAAoBma,qBAAW,GAC/Bna,EAA2Boa,4BAAW,EAEtCpa,EAAgBqa,iBAAW,GAC3Bra,EAAsBsa,uBAAW,GACjCta,EAA2Bua,4BAAsCnN,EAAU,CAC9F,CAAExK,KAAM,OAAQ4X,aAAc,KAAMC,YAAa,OAAwCC,YAAY,EAAOC,UAAU,EAAsDC,SAAU,EAAGC,OAAQ,KAAMC,sBAAuB,MAC9N,CAAElY,KAAM,aAAc4X,aAAY,EAAmCC,YAAa,cAAwCC,YAAY,EAAOC,UAAU,EAAsDC,SAAU,EAAGC,OAAQ,KAAMC,sBAAuB,MAC/P,CAAElY,KAAM,aAAc4X,aAAY,EAAmCC,YAAa,cAAwCC,YAAY,EAAOC,UAAU,EAAsDC,SAAU,EAAGC,OAAQ,KAAMC,sBAAuB,QAC/P,CAAElY,KAAM,gBAAiB4X,aAAY,EAAsCC,YAAa,UAAwCC,YAAY,EAAOC,UAAU,EAAsDC,SAAU,EAAGC,OAAQ,KAAMC,sBAAuB,KACrQ,CAAElY,KAAM,SAAU4X,aAAY,EAA+BC,YAAa,SAAwCC,YAAY,EAAOC,UAAU,EAAsDC,SAAU,EAAGC,OAAQ,KAAMC,sBAAuB,WACvP,CAAElY,KAAM,oBAAqB4X,aAAqD,EAAEC,YAAa,WAAwCC,YAAY,EAAMC,UAAU,EAAsDC,SAAU5a,EAAO+V,cAAc,EAAG8E,OAAQ,KAAMC,sBAAuB,QAClS,CAAElY,KAAM,oBAAqB4X,aAAqD,GAAEC,YAAa,aAAwCC,YAAY,EAAOC,UAAU,EAAsDC,SAAU5a,EAAO+V,cAAc,EAAG8E,OAAQ,KAAMC,sBAAuB,QACnS,CAAElY,KAAM,oBAAqB4X,aAAY,GAA0CC,YAAa,cAAwCC,YAAY,EAAOC,UAAU,EAAsDC,SAAU,EAAGC,OAAQ,KAAMC,sBAAuB,QAC7Q,CAAElY,KAAM,aAAc4X,aAAY,GAAmCC,YAAa,cAAwCC,YAAY,EAAOC,UAAU,EAAsDC,SAAU,EAAGC,OAA6B,EAAEC,sBAAuB,MAChR,CAAElY,KAAM,SAAU4X,aAAY,GAA+BC,YAAa,SAAwCC,YAAY,EAAOC,UAAU,EAAsDC,SAAU,EAAGC,OAAyB,EAAEC,sBAAuB,MACpQ,CAAElY,KAAM,eAAgB4X,aAAY,GAAqCC,YAAa,gBAAwCC,YAAY,EAAOC,UAAU,EAAsDC,SAAU,EAAGC,OAA0B,EAAEC,sBAAuB,MACjR,CAAElY,KAAM,qBAAsB4X,aAAY,EAA2CC,YAAa,kBAAwCC,YAAY,EAAOC,UAAU,EAAqDC,SAAU,EAAGC,OAA6B,EAAEC,sBAAuB,MAC/R,CAAElY,KAAM,iBAAkB4X,aAAY,GAAwCC,YAAa,mBAAwCC,YAAY,EAAeC,UAAU,EAAqDC,SAAU5a,EAAO2S,gBAAiBkI,OAA6B,EAAEC,sBAAuB,MACrT,CAAElY,KAAM,gBAAiB4X,aAAY,GAAsCC,YAAa,iBAA2CC,YAAY,EAAOC,UAAU,EAAsDC,SAAU,EAAGC,OAAQ,KAAMC,sBAAuB,KAC/Q,CAAClY,KAAM,mBAAoB4X,aAAY,GAAyCC,YAAa,WAAsCC,YAAY,EAAOC,UAAU,EAAsDC,SAAU,EAAMC,OAAQ,KAAMC,sBAAuB,MAC3Q,CAAClY,KAAM,iBAAkB4X,aAAY,GAAuCC,YAAa,SAAwCC,YAAY,EAAOC,UAAU,EAAsDC,SAAU,EAAMC,OAAQ,KAAMC,sBAAuB,MACzQ,CAAClY,KAAM,gBAAiB4X,aAAY,GAAsCC,YAAa,YAAwCC,YAAY,EAAOC,UAAU,EAAsDC,SAAU,EAAMC,OAAQ,KAAMC,sBAAuB,QAsB7O9a,EAAa+a,cAAkC3N,EAAU,CAClF,CAAExK,KAAM,OAAQ5B,QAAShB,EAAOyZ,UAChC,CAAE7W,KAAM,WAAY5B,QAiZtB,WACI,MAAM+H,EAAqB,IAAIK,aAAapJ,EAAO0M,eAAiB,GACpE,IAAK,IAAIzD,EAAY,EAAGA,EAAIjJ,EAAO0M,eAAiB,EAAGzD,IACnDF,EAAKE,GAAKM,KAAKyR,KAAKzR,KAAKgD,IAAItD,EAAIM,KAAK8C,GAAK,EAAMrM,EAAO0M,kBAAoBnD,KAAK8C,GAAK,GAE1F,OAAOtD,CACX,CAvZ+BkS,IAC7B,CAAErY,KAAM,cAAe5B,QAASwL,KAChC,CAAE5J,KAAM,WAAY5B,QAAS4L,KAC7B,CAAEhK,KAAM,OAAQ5B,QAAS4L,GAAgB,IACzC,CAAEhK,KAAM,YAAa5B,QAqZvB,SAA+Bka,EAAgB,GAC3C,MAAMnS,EAAqB,IAAIK,aAAapJ,EAAO0M,eAAiB,GACpE,IAAK,IAAIzD,EAAY,EAAGA,EAAIjJ,EAAO0M,eAAiB,EAAGzD,IACnDF,EAAKE,GAAKM,KAAKiM,KAAK,EAAKjM,KAAKuC,IAAI,EAAKvC,KAAKyR,KAAKzR,KAAKgD,IAAItD,EAAIM,KAAK8C,GAAK,EAAMrM,EAAO0M,iBAAmBwO,IAE5G,OAAOnS,CACX,CA3ZgCoS,CAAsB,IACjD,CAAEvY,KAAM,UAAW5B,QA6bvB,WACO,MAAM+H,EAAO,IAAIK,aAAapJ,EAAO0M,eAAiB,GACtD,IAAK,IAAIzD,EAAI,EAAGA,EAAIjJ,EAAO0M,eAAiB,EAAGzD,IAC3CF,EAAKE,GAAKM,KAAKkB,MAAMlB,KAAKgD,IAAItD,EAAIM,KAAK8C,GAAK,EAAMrM,EAAO0M,iBAE7D,OAAO3D,CACd,CAncgCqS,MAINpb,EAAgBqb,iBAAkCjO,EAAU,CAC/E,CAAExK,KAAM,KAAM5B,QAASwL,EAAmB,MAC1C,CAAE5J,KAAM,KAAM5B,QAASwL,EAAmB,MAC1C,CAAE5J,KAAM,QAAS5B,QAASwL,EAAmB,OAC7C,CAAE5J,KAAM,MAAO5B,QAASwL,EAAmB,MAC3C,CAAE5J,KAAM,MAAO5B,QAASwL,EAAmB,EAAI,IAC/C,CAAE5J,KAAM,MAAO5B,QAASwL,EAAmB,KAC3C,CAAE5J,KAAM,MAAO5B,QAASwL,EAAmB,EAAI,IAC/C,CAAE5J,KAAM,MAAO5B,QAASwL,EAAmB,MAC3C,CAAE5J,KAAM,QAAS5B,QAASwL,EAAmB,OAC7C,CAAE5J,KAAM,MAAO5B,QAASwL,EAAmB,MAC3C,CAAE5J,KAAM,MAAO5B,QAASwL,EAAmB,QAKxBxM,EAAesb,gBAAW,GAG1Btb,EAAUub,WAA+BnO,EAAU,CACtE,CAAExK,KAAM,OAAQ4Y,UAAW,OAAQC,UAAW,EAAGC,WAAY,EAAGC,SAAS,EAAMC,kBAAmB,EAAGC,iBAAmC,GACpIC,WAAY,iBAAkBC,WAAY,CAAE,4JAA6J,gBAC7M,CAAEnZ,KAAM,cAAe4Y,UAAW,SAAUC,UAAW,IAAKC,WAAY,IAAKC,SAAS,EAAMC,kBAAmB,EAAGC,iBAAmC,GACjJC,WAAY,cAAeC,WAAY,CAAE,yFAA0F,oGAAqG,qCAC5O,CAAEnZ,KAAM,QAAS4Y,UAAW,QAASC,UAAWzb,EAAOkP,SAAWlP,EAAOiP,SAAUyM,WAAYnS,KAAKyS,MAAMhc,EAAOkP,SAAWlP,EAAOiP,UAAY,GAAI0M,SAAS,EAAMC,kBAAmB5b,EAAOiP,SAAU4M,iBAAmC,GACrOC,WAAY,aAAcC,WAAY,CAAE,kFAAmF,4LAA6L,wFAAyF,oCACrZ,CAAEnZ,KAAM,cAAe4Y,UAAW,SAAUC,UAAgC,EAArBzb,EAAO4P,YAAiB8L,WAAY1b,EAAO4P,YAAa+L,SAAS,EAAMC,mBAAoB5b,EAAO4P,YAAaiM,iBAAmC,GACrMC,WAAY,cAAeC,WAAY,CAAE,iKAAkK,qJAAsJ,iCACrW,CAAEnZ,KAAM,WAAY4Y,UAAW,WAAYC,UAAW,EAAGC,WAAY,EAAGC,SAAS,EAAMC,kBAAmB,EAAGC,iBAAmC,GAC5IC,WAAY,iBAAkBC,WAAY,CAAE,yJAA0J,yNAA0N,4GAA6G,gBACjhB,CAAEnZ,KAAM,cAAe4Y,UAAW,YAAaC,UAAWzb,EAAOyU,YAAaiH,WAAYnS,KAAKyS,KAAKhc,EAAOyU,YAAc,GAAIkH,SAAS,EAAOC,kBAAmBrS,KAAKyS,MAAMhc,EAAOyU,YAAc,GAAMoH,iBAAmC,GACrOC,WAAY,cAAeC,WAAY,CAAE,0FAA2F,qOAAsO,wdAAyd,qNAAsN,iCAC7hC,CAAEnZ,KAAM,MAAO4Y,UAAW,MAAOC,UAAWzb,EAAO4U,OAAQ8G,WAAYnS,KAAKyS,KAAKhc,EAAO4U,OAAS,GAAI+G,SAAS,EAAOC,kBAAmB,EAAGC,iBAAoC,EAC3KC,WAAY,qBAAsBC,WAAY,CAAE,sFAAuF,+KAAgL,oCAC3T,CAAEnZ,KAAM,SAAU4Y,UAAW,SAAUC,UAAWzb,EAAO4P,YAAa8L,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAmC,EAC1JC,WAAY,oBAAqBC,WAAY,CAAE,oFAAqF,8EAA+E,8BACvN,CAAEnZ,KAAM,aAAc4Y,UAAW,aAAcC,UAAWzb,EAAO+Z,gBAAgB,EAAG2B,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAuC,EAC5KC,WAAY,wBAAyBC,WAAY,CAAE,uGAAwG,kFAAmF,8BAClP,CAAEnZ,KAAM,cAAe4Y,UAAW,OAAQC,UAAW,GAAIC,WAAY,GAAIC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAmC,GAC9IC,WAAY,cAAeC,WAAY,CAAE,mHAAoH,6KAA8K,qGAAsG,qCACrb,CAAEnZ,KAAM,cAAe4Y,UAAW,OAAQC,UAAW,GAAIC,WAAY,GAAIC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAmC,GAC9IC,WAAY,cAAeC,WAAY,CAAC,oHAAqH,6KAA8K,qGAAsG,qCACrb,CAAEnZ,KAAM,cAAe4Y,UAAW,OAAQC,UAAW,GAAIC,WAAY,GAAIC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAmC,GAC9IC,WAAY,cAAeC,WAAY,CAAC,mHAAoH,6KAA8K,qGAAsG,qCACpb,CAAEnZ,KAAM,cAAe4Y,UAAW,OAAQC,UAAW,GAAIC,WAAY,GAAIC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAmC,GAC9IC,WAAY,cAAeC,WAAY,CAAC,oHAAqH,6KAA8K,qGAAsG,qCACrb,CAAEnZ,KAAM,cAAe4Y,UAAW,cAAeC,UAAW,GAAIC,WAAY,GAAIC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAmC,GACrJC,WAAY,cAAeC,WAAY,CAAC,sHAAuH,6KAA8K,qGAAsG,qCACvb,CAAEnZ,KAAM,cAAe4Y,UAAW,cAAeC,UAAWzb,EAAO8J,gBAAiB4R,WAAY1b,EAAO8J,gBAAiB6R,SAAS,EAAOC,kBAAmB,EAAGC,iBAAmC,GAC7LC,WAAY,cAAeC,WAAY,CAAC,qGAAsG,0LAA2L,2IAA4I,sCACzd,CAAEnZ,KAAM,SAAU4Y,UAAW,SAAUC,UAAWzb,EAAOoZ,UAAYpZ,EAAOqZ,UAAWqC,WAAY1b,EAAOmZ,aAAcwC,SAAS,EAAOC,mBAAoB5b,EAAOmZ,aAAc0C,iBAAmC,EAChNC,WAAY,oBAAqBC,WAAY,CAAC,qFAAsF,8PAA+P,sCACvY,CAAEnZ,KAAM,gBAAiB4Y,UAAW,gBAAiBC,UAAW,GAAIC,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAoC,EACzJC,WAAY,gBAAiBC,WAAY,CAAC,4HAA6H,oKAAqK,0CAChV,CAAEnZ,KAAM,cAAe4Y,UAAW,SAAUC,UAAWzb,EAAOuZ,cAAgBvZ,EAAOsZ,cAAeoC,WAAYnS,KAAKyS,MAAMhc,EAAOuZ,cAAgBvZ,EAAOsZ,eAAiB,GAAIqC,SAAS,EAAMC,mBAAoB,IAAKC,iBAAmC,GACrPC,WAAY,cAAeC,WAAY,CAAC,8FAA+F,gSAAiS,4CAC5a,CAAEnZ,KAAM,gBAAiB4Y,UAAW,gBAAiBC,UAAW,GAAIC,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAoC,EACzJC,WAAY,gBAAiBC,WAAY,CAAC,yFAA0F,4KAA6K,8BACrT,CAAEnZ,KAAM,gBAAiB4Y,UAAW,gBAAiBC,UAAW,GAAIC,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAoC,EACzJC,WAAY,gBAAiBC,WAAY,CAAC,oIAAqI,+NAAgO,0CACnZ,CAAEnZ,KAAM,YAAa4Y,UAAW,YAAaC,UAAW,GAAIC,WAAY,GAAIC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkC,GAChJC,WAAY,iBAAkBC,WAAY,CAAC,qHAAsH,+GAC7J,gCAAiC,6BAA8B,qCAAsC,yCAA0C,uCAAwC,yCAA0C,uCAAwC,yCAA0C,wCAAyC,wCAAyC,8BAC7Y,CAAEnZ,KAAM,YAAa4Y,UAAW,YAAaC,UAAW,GAAIC,WAAY,GAAIC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAoC,EAClJC,WAAY,gBAAiBC,WAAY,CAAC,0GAA2G,4LAA6L,8BACtV,CAAEnZ,KAAM,YAAa4Y,UAAW,YAAaC,UAAW,EAAGC,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAkC,GAC9IC,WAAY,iBAAkBC,WAAY,CAAC,2SAA4S,qKAAsK,gBACjgB,CAAEnZ,KAAM,YAAa4Y,UAAW,QAASC,UAAW,GAAIC,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAmC,GAC5IC,WAAY,YAAaC,WAAY,CAAC,+EAAgF,wjBAAyjB,+PAAgQ,0LAA2L,8BAC9mC,CAAEnZ,KAAM,cAAe4Y,UAAW,QAASC,UAAW,GAAIC,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAuC,EAClJC,WAAY,cAAeC,WAAY,CAAC,iFAAkF,0jBAA2jB,+PAAgQ,0LAA2L,8BACpnC,CAAEnZ,KAAM,YAAa4Y,UAAW,WAAYC,UAAWzb,EAAOoa,4BAA4B,EAAGsB,WAAYnS,KAAKkB,MAAMzK,EAAOoa,4BAA8B,GAAIuB,SAAS,EAAOC,kBAAmB,EAAGC,iBAAuC,EACtOC,WAAY,uBAAwBC,WAAY,CAAC,0FAA2F,0IAA2I,8BAC3R,CAAEnZ,KAAM,aAAc4Y,UAAW,aAAcC,UAAWzb,EAAOka,oBAAoB,EAAGwB,WAAYnS,KAAKkB,MAAMzK,EAAOka,oBAAsB,GAAIyB,SAAS,EAAOC,kBAAmB,EAAGC,iBAAuC,EACzNC,WAAY,6BAA8BC,WAAY,CAAC,iGAAkG,sJAAuJ,8BACpT,CAAEnZ,KAAM,OAAQ4Y,UAAW,OAAQC,UAAWzb,EAAOuP,iBAAiB,EAAGmM,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAiC,EAC3JC,WAAY,0BAA2BC,WAAY,CAAC,wGAAyG,4KAA6K,8BAC9U,CAAEnZ,KAAM,aAAc4Y,UAAW,aAAcC,UAAWzb,EAAOqP,eAAgBqM,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAmC,GACrKC,WAAY,wBAAyBC,WAAY,CAAC,4FAA6F,8GAA+G,2CAElQ,CAAEnZ,KAAM,SAAU4Y,UAAW,SAAUC,UAAWzb,EAAO8U,YAAa4G,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAmC,EAC1JC,WAAY,oBAAqBC,WAAY,CAAC,6FAA8F,oHAAqH,8BACrQ,CAAEnZ,KAAM,cAAe4Y,UAAW,YAAaC,UAAWzb,EAAO8S,qBAAuB,EAAG4I,WAAY1b,EAAO8S,qBAAuB,EAAG6I,SAAS,EAAOC,kBAAmB,EAAGC,iBAAmC,GAC7MC,WAAY,6BAA8BC,WAAY,CAAC,qGAAsG,iLAAkL,8BACnV,CAAEnZ,KAAM,eAAgB4Y,UAAW,aAAcC,UAAWzb,EAAO+S,sBAAwB,EAAG2I,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAmC,GAClLC,WAAY,sBAAuBC,WAAY,CAAC,uGAAwG,wPAAyP,8BACrZ,CAAEnZ,KAAM,gBAAiB4Y,UAAW,YAAaC,UAAWzb,EAAO8S,qBAAuB,EAAG4I,WAAY1b,EAAO8S,qBAAuB,EAAG6I,SAAS,EAAOC,kBAAmB,EAAGC,iBAAuC,EACnNC,WAAY,+BAAgCC,WAAY,CAAC,qGAAsG,iLAAkL,8BACrV,CAAEnZ,KAAM,iBAAkB4Y,UAAW,aAAcC,UAAWzb,EAAO+S,sBAAwB,EAAG2I,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAuC,EACxLC,WAAY,wBAAyBC,WAAY,CAAC,uGAAwG,wPAAyP,8BACvZ,CAAEnZ,KAAM,cAAe4Y,UAAW,cAAeC,UAAWzb,EAAOiZ,gBAAkB,EAAGyC,WAAY1b,EAAOkZ,iBAAkByC,SAAS,EAAOC,mBAAoB5b,EAAOkZ,iBAAkB2C,iBAAuC,EAC7NC,WAAY,cAAeC,WAAY,CAAC,+FAAgG,sLAAuL,sCACnU,CAAEnZ,KAAM,UAAW4Y,UAAW,UAAWC,UAAWzb,EAAOga,mBAAqB,EAAG0B,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAmC,GACvKC,WAAY,wBAAyBC,WAAY,CAAC,oGAAqG,2JAA4J,8BACvT,CAAEnZ,KAAM,aAAc4Y,UAAW,WAAYC,UAAWzb,EAAOyU,YAAaiH,WAAYnS,KAAKyS,KAAKhc,EAAOyU,YAAc,GAAIkH,SAAS,EAAOC,kBAAmBrS,KAAKyS,MAAMhc,EAAOyU,YAAc,GAAMoH,iBAAmC,GACnOC,WAAY,aAAcC,WAAY,CAAC,6FAA8F,qSAAsS,yJAA0J,iCACzkB,CAAEnZ,KAAM,cAAe4Y,UAAW,OAAQC,UAAW,GAAIC,WAAY,GAAIC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAmC,GAC9IC,WAAY,cAAeC,WAAY,CAAC,mHAAoH,6KAA8K,qGAAsG,qCACpb,CAAEnZ,KAAM,cAAe4Y,UAAW,OAAQC,UAAW,GAAIC,WAAY,GAAIC,SAAS,EAAOC,kBAAmB,EAAGC,iBAAmC,GAC9IC,WAAY,cAAeC,WAAY,CAAC,mHAAoH,6KAA8K,qGAAsG,qCACpb,CAAEnZ,KAAM,iBAAkB4Y,UAAW,iBAAkBC,UAAW,GAAIC,WAAY,EAAGC,SAAS,EAAOC,kBAAmB,EAAGK,eAAgB,eAAgBJ,iBAAmC,GAC1LC,WAAY,iBAAkBC,WAAY,CAAC,oIAAqI,wBACpL,CAAEnZ,KAAM,WAAmB4Y,UAAW,WAA0BC,UAAWzb,EAAO+X,oBAAiD2D,WAAY,EAA8DC,SAAS,EAASC,kBAAmB,EAAsCC,iBAAmC,GACvTC,WAAY,oBAAgCC,WAAY,CAAC,mFAAoF,8BAEjJ,CAAEnZ,KAAM,SAAmB4Y,UAAW,SAA0BC,UAAWzb,EAAOgY,kBAAiD0D,WAAY,EAA8DC,SAAS,EAASC,kBAAmB,EAAsCC,iBAAmC,GACvTC,WAAY,kBAAgCC,WAAY,CAAC,iFAAkF,8BAE/I,CAAEnZ,KAAM,QAAmB4Y,UAAW,QAA0BC,UAAWzb,EAAOiY,iBAAiDyD,WAAY,EAA8DC,SAAS,EAASC,kBAAmB,EAAsCC,iBAAmC,GACvTC,WAAY,iBAAgCC,WAAY,CAAC,4EAA6E,uIAAwI,gC,6rBCpmD1Q,SAAAG,EAAwEC,EAAYC,G,oBACnG,IAAkB,IAAAC,EAAAC,EAAAF,GAAIG,EAAAF,EAAAG,QAAED,EAAAE,KAAAF,EAAAF,EAAAG,OAAA,CAAnB,IAAME,EAAGH,EAAAjP,MACb,GAAIoP,aAAeC,KAClBR,EAAQ9Z,YAAYqa,QACd,GAAmB,iBAARA,EACjBP,EAAQ9Z,YAAYJ,SAAS2a,eAAeF,SACtC,GAAmB,mBAARA,EACjBR,EAAiBC,EAAS,CAACO,WACrB,GAAIxb,MAAM2b,QAAQH,GACxBR,EAAiBC,EAASO,QACpB,GAAIA,GAAyB,oBAAXI,QAA0D,mBAAzBJ,EAAII,OAAOC,UACpEb,EAAiBC,EAAaa,EAAAN,SACxB,GAAIA,GAAOA,EAAIje,cAAgBkT,QAAUwK,aAAmBc,Q,IAElE,IAAkB,IAAAC,GAAAC,OAAA,EAAAb,EAAA3K,OAAO9C,KAAK6N,KAAIU,EAAAF,EAAAV,QAAEY,EAAAX,KAAAW,EAAAF,EAAAV,OAAA,CAA/B,IAAM3K,EAAGuL,EAAA9P,MACPA,EAAQoP,EAAI7K,GAST,GAAY,UAARA,EACS,iBAAVvE,EACV6O,EAAQkB,aAAa,QAAS/P,GACpBpM,MAAM2b,QAAQH,IAASpP,GAA2B,oBAAXwP,QAA4D,mBAA3BxP,EAAMwP,OAAOC,UAC/FZ,EAAQkB,aAAa,QAASL,EAAI1P,GAAOgQ,KAAK,MAE9CzU,QAAQ0U,KAAK,WAAa1L,EAAM,WAAcvE,EAAQ,QAAW6O,EAAQqB,QAAU,kBAE9E,GAAY,UAAR3L,EACV,GAAIvE,GAASA,EAAM7O,cAAgBkT,O,IAClC,IAAuB,IAAA8L,GAAAC,OAAA,EAAApB,EAAA3K,OAAO9C,KAAKvB,KAAMqQ,EAAAF,EAAAjB,QAAEmB,EAAAlB,KAAAkB,EAAAF,EAAAjB,OAAA,CAAtC,IAAMoB,EAAQD,EAAArQ,MACdsQ,KAAuCzB,EAAS0B,MAE5C1B,EAAS0B,MAAMD,GAAYtQ,EAAMsQ,GAGbzB,EAAS0B,MAAMC,YAAYF,EAAUtQ,EAAMsQ,GAEvE,C,uGAEDzB,EAAQkB,aAAaxL,EAAKvE,OAEC,mBAAlB,EAEJ6O,EAAStK,GAAOvE,EACM,kBAAlB,EAENA,EAAO6O,EAAQkB,aAAaxL,EAAK,IAChCsK,EAAQ4B,gBAAgBlM,GAG7BsK,EAAQkB,aAAaxL,EAAKvE,EAE3B,C,uGAGD6O,EAAQ9Z,YAAYJ,SAAS2a,eAAeF,GAE7C,C,kGACD,OAAOP,CACR,CAEO,IAAM6B,EAAgB,6B,gUC8IhBC,E,eD5Ia,IAAmB7B,EAAA,GAAA8B,EAAA,EAAnBA,EAAmBC,UAAA5c,OAAnB2c,IAAA9B,EAAmB8B,GAAAC,UAAAD,GAC5C,OAAOjc,SAASmc,cAAcC,yBAAyBjC,EAAKkB,OAC7D,EC2IagB,E,eDxIY,IAAmBlC,EAAA,GAAA8B,EAAA,EAAnBA,EAAmBC,UAAA5c,OAAnB2c,IAAA9B,EAAmB8B,GAAAC,UAAAD,GAU3C,IATA,IAAMK,EAA6Btc,SAASuc,yBAQtCC,GAAqB,IAAIC,WAAYC,gBAAgB,2CAA+CvC,EAAKkB,OAAS,SAAU,iBAAiBsB,gBACnH,OAAzBH,EAAUI,YAChB5c,SAAS6c,WAAWL,EAAUI,YAAY,GAC1CN,EAASlc,YAAYoc,EAAUI,YAGhC,OAAON,CACR,E,WC0HWQ,GACJd,EAAMc,GAAQ,W,IAAC,IAAmB3C,EAAA,GAAA8B,EAAA,EAAnBA,EAAmBC,UAAA5c,OAAnB2c,IAAA9B,EAAmB8B,GAAAC,UAAAD,GAAK,OAAAhC,EAAiBja,SAASC,cAAc6c,GAAO3C,EAA/C,C,MAD9C,IAAmB,IAAA4C,EAAA1C,EAAA,+jBAA+jB2C,MAAM,MAAI/B,EAAA8B,EAAAxC,QAAAU,EAAAT,KAAAS,EAAA8B,EAAAxC,OAAA,C,EAA7kBU,EAAA5P,MAEd,C,iHACU4R,GAEV,GADMZ,EAAKY,GAAQ,W,IAAC,IAAmB9C,EAAA,GAAA8B,EAAA,EAAnBA,EAAmBC,UAAA5c,OAAnB2c,IAAA9B,EAAmB8B,GAAAC,UAAAD,GAAK,OAAAhC,EAA8Bja,SAASkd,gBAAgBnB,EAAOkB,GAAO9C,EAArE,EACxC,IAAIgD,KAAKF,GAAO,CACnB,IAAMG,EAAgBH,EAAKI,QAAQ,KAAM,KACnChB,EAAKe,GAAiB,W,IAAC,IAAmBjD,EAAA,GAAA8B,EAAA,EAAnBA,EAAmBC,UAAA5c,OAAnB2c,IAAA9B,EAAmB8B,GAAAC,UAAAD,GAAK,OAAAhC,EAA8Bja,SAASkd,gBAAgBnB,EAAOkB,GAAO9C,EAArE,CACrD,C,MALF,IAAmB,IAAAgB,EAAAd,EAAA,8vBAA8vB2C,MAAM,MAAIxB,EAAAL,EAAAZ,QAAAiB,EAAAhB,KAAAgB,EAAAL,EAAAZ,OAAA,C,EAA5wBiB,EAAAnQ,MAMd,C,wGCjNYiS,EAk9NF,kBAAOC,GACV9gB,KAAK+gB,YAAYC,O,CAGjB,8BAAOC,CAAwBhM,EAAciM,GAE7C,GAA2F,SAAvFC,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,uBAAuBC,OAAmB,CAChG,IAAIC,EACJ,OAAQtM,GACJ,YACIsM,EAA2D,IAApDV,EAAYW,YAAY,yBAC5CX,EAAYY,cAAcP,EAAUL,EAAYY,cAAc5e,QAC9Dge,EAAYY,cAAcP,GAAWQ,OAAOb,EAAYW,YAAY,0BAA4BX,EAAYY,cAAc5e,SAC7G,MAEJ,UACI0e,EAAyD,IAAlDV,EAAYW,YAAY,uBAC5CX,EAAYc,YAAYT,EAAUL,EAAYc,YAAY9e,QAC1Dge,EAAYc,YAAYT,GAAWQ,OAAOb,EAAYW,YAAY,wBAA0BX,EAAYc,YAAY9e,SACvG,MAGJ,QACI0e,EAA2D,IAApDV,EAAYW,YAAY,yBAC5CX,EAAYe,cAAcV,EAAUL,EAAYe,cAAc/e,QAC9Dge,EAAYe,cAAcV,GAAWQ,OAAOb,EAAYW,YAAY,0BAA4BX,EAAYe,cAAc/e,SAIrH,IAAIgf,EAAQ,cAKZ,MAAsB,CAAEC,iBAJUjB,EAAYW,YAAaK,EAAME,KAAKR,EAAKO,kBAAsC,IAIlDE,eAH/BnB,EAAYW,YAAaK,EAAME,KAAKR,EAAKS,gBAAoC,IAGXC,cAFnEpB,EAAYW,YAAaK,EAAME,KAAKR,EAAKU,eAAmC,IAEwBC,YADtGrB,EAAYW,YAAaK,EAAME,KAAKR,EAAKW,aAAiC,IAE1G,CACD,OAAQjN,GACJ,YAAgB,CACZ,MAAMkN,GAAoChB,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,iCAC1Fe,GAAyCjB,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,uCAC/FgB,GAAoClB,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,iCAC1FiB,GAAyCnB,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,uCAC/FkB,GAAoCpB,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,iCAC1FmB,GAAyCrB,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,uCAC/FoB,GAAkCtB,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,+BACxFqB,GAAuCvB,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,qCAC7FsB,GAAkCxB,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,+BACxFuB,GAAuCzB,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,qCAC7FwB,GAAkC1B,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,+BACxFyB,GAAuC3B,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,qCAC7F0B,GAAiC5B,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,8BACvF2B,GAAsC7B,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,oCAC5F4B,GAAiC9B,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,8BACvF6B,GAAsC/B,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,oCAC5F8B,GAAiChC,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,8BACvF+B,GAAsCjC,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,oCAC5FgC,GAA+BlC,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,4BACrFiC,GAAoCnC,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,kCAC1FkC,GAA+BpC,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,4BACrFmC,GAAoCrC,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,kCAC1FoC,GAA+BtC,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,4BACrFqC,GAAoCvC,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,kCAEhG,IAaIsC,EAAkC,CAAE7B,iBAbN,SAAYK,EAA6BjB,GAAWkB,EAAiC9gB,EAAOqY,qBAAwB,KAAO,IAAO,MAC5J0I,EAA2BnB,GAAWoB,GAAiC,OACvEC,EAA2BrB,GAAWsB,GAAiC,KAWAR,eAV/C,SAAYS,EAA2BvB,GAAWwB,EAA+BphB,EAAOqY,qBAAwB,KAAO,IAAO,MACtJgJ,EAAyBzB,GAAW0B,GAA+B,OACnEC,EAAyB3B,GAAW4B,GAA+B,KAQuCb,cAPnF,SAAYc,EAA0B7B,GAAW8B,EAA8B1hB,EAAOqY,qBAAwB,KAAO,IAAO,MACnJsJ,EAAwB/B,GAAWgC,GAA8B,OACjEC,EAAwBjC,GAAWkC,GAA8B,KAK0ElB,YAJtH,SAAYmB,EAAwBnC,GAAWoC,EAA4BhiB,EAAOqY,qBAAwB,KAAO,IAAO,MAC7I4J,EAAsBrC,GAAWsC,GAA4B,OAC7DC,EAAsBvC,GAAWwC,GAA4B,MAIrE,OADA7C,EAAYE,YAAYhd,IAAImd,EAASyC,GAC9BA,CACV,CAAC,UAAc,CAEZ,MAAMC,GAAkCzC,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,+BACxFwC,GAAuC1C,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,qCAC7FyC,GAAkC3C,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,+BACxF0C,GAAuC5C,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,qCAC7F2C,GAAkC7C,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,+BACxF4C,GAAuC9C,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,qCAC7F6C,GAAgC/C,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,6BACtF8C,GAAqChD,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,mCAC3F+C,GAAgCjD,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,6BACtFgD,GAAqClD,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,mCAC3FiD,GAAgCnD,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,6BACtFkD,GAAqCpD,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,mCAC3FmD,GAA+BrD,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,4BACrFoD,GAAoCtD,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,kCAC1FqD,GAA+BvD,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,4BACrFsD,GAAoCxD,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,kCAC1FuD,GAA+BzD,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,4BACrFwD,GAAoC1D,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,kCAC1FyD,GAA6B3D,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,0BACnF0D,GAAkC5D,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,gCACxF2D,GAA6B7D,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,0BACnF4D,GAAkC9D,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,gCACxF6D,GAA6B/D,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,0BACnF8D,GAAkChE,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,gCAE9F,IAaIsC,EAAkC,CAAE7B,iBAbN,SAAY8B,EAA2B1C,GAAW2C,EAA+BviB,EAAOuY,mBAAsB,KAAO,IAAO,MACtJiK,EAAyB5C,GAAW6C,GAA+B,OACnEC,EAAyB9C,GAAW+C,GAA+B,KAWIjC,eAV/C,SAAYkC,EAAyBhD,GAAWiD,EAA6B7iB,EAAOuY,mBAAsB,KAAO,IAAO,MAChJuK,EAAuBlD,GAAWmD,GAA6B,OAC/DC,EAAuBpD,GAAWqD,GAA6B,KAQ2CtC,cAPnF,SAAYuC,EAAwBtD,GAAWuD,EAA4BnjB,EAAOuY,mBAAsB,KAAO,IAAO,MAC7I6K,EAAsBxD,GAAWyD,GAA4B,OAC7DC,EAAsB1D,GAAW2D,GAA4B,KAK8E3C,YAJtH,SAAY4C,EAAsB5D,GAAW6D,EAA0BzjB,EAAOuY,mBAAsB,KAAO,IAAO,MACvImL,EAAoB9D,GAAW+D,GAA0B,OACzDC,EAAoBhE,GAAWiE,GAA0B,MAIjE,OADAtE,EAAYE,YAAYhd,IAAImd,EAASyC,GAC9BA,CACV,CAED,QAAS,CACL,MAAMyB,GAAoCjE,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,iCAC1FgE,GAAyClE,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,uCAC/FiE,GAAoCnE,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,iCAC1FkE,GAAyCpE,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,uCAC/FmE,GAAoCrE,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,iCAC1FoE,GAAyCtE,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,uCAC/FqE,GAAkCvE,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,+BACxFsE,GAAuCxE,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,qCAC7FuE,GAAkCzE,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,+BACxFwE,GAAuC1E,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,qCAC7FyE,GAAkC3E,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,+BACxF0E,GAAuC5E,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,qCAC7F2E,GAAiC7E,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,8BACvF4E,GAAsC9E,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,oCAC5F6E,GAAiC/E,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,8BACvF8E,GAAsChF,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,oCAC5F+E,GAAiCjF,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,8BACvFgF,GAAsClF,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,oCAC5FiF,GAA+BnF,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,4BACrFkF,GAAoCpF,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,kCAC1FmF,GAA+BrF,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,4BACrFoF,GAAoCtF,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,kCAC1FqF,GAA+BvF,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,4BACrFsF,GAAoCxF,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,kCAEhG,IAaIsC,EAAkC,CAAE7B,iBAbN,SAAYsD,EAA4BlE,GAAWmE,EAAgC/jB,EAAOmY,qBAAwB,KAAO,IAAO,MAC1J6L,GAA4B,GAAMC,EAAgC1a,KAAK+b,MAAM1F,EAAU,IAAQ,OAC/FsE,GAA4B,GAAMC,EAAgC5a,KAAK+b,MAAM1F,EAAU,IAAQ,KAWxBc,eAV/C,SAAY0D,EAA0BxE,GAAWyE,EAA8BrkB,EAAOmY,qBAAwB,KAAO,IAAO,MACpJmM,GAA0B,GAAMC,EAA8Bhb,KAAK+b,MAAM1F,EAAU,IAAQ,OAC3F4E,GAA0B,GAAMC,EAA8Blb,KAAK+b,MAAM1F,EAAU,IAAQ,KAQee,cAPnF,SAAY+D,EAAyB9E,GAAW+E,EAA6B3kB,EAAOmY,qBAAwB,KAAO,IAAO,MACjJyM,GAAyB,GAAMC,EAA6Btb,KAAK+b,MAAM1F,EAAU,IAAQ,OACzFkF,GAAyB,GAAMC,EAA6Bxb,KAAK+b,MAAM1F,EAAU,IAAQ,KAKkDgB,YAJtH,SAAYoE,EAAuBpF,GAAWqF,EAA2BjlB,EAAOmY,qBAAwB,KAAO,IAAO,MAC3I+M,GAAuB,GAAMC,EAA2B5b,KAAK+b,MAAM1F,EAAU,IAAQ,OACrFwF,GAAuB,GAAMC,EAA2B9b,KAAK+b,MAAM1F,EAAU,IAAQ,MAI7F,OADAL,EAAYE,YAAYhd,IAAImd,EAASyC,GAC9BA,CACV,E,CAKF,8BAAOkD,CAAwBC,EAAY5F,GAC9C,GAA2F,SAAvFC,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,uBAAuBC,OAAmB,CAChG,IAAIC,EAAsBV,EAAYkG,gBAAgBD,EAAM5F,GAE5D,IAAIW,EAAQ,cAKZ,MAAsB,CAAEC,iBAJUjB,EAAYW,YAAaK,EAAME,KAAKR,EAAKO,kBAAsC,IAIlDE,eAH/BnB,EAAYW,YAAaK,EAAME,KAAKR,EAAKS,gBAAoC,IAGXC,cAFnEpB,EAAYW,YAAaK,EAAME,KAAKR,EAAKU,eAAmC,IAEwBC,YADtGrB,EAAYW,YAAaK,EAAME,KAAKR,EAAKW,aAAiC,IAE1G,CAEG,OAAOrB,EAAYkG,gBAAgBD,EAAM5F,E,CAI1C,sBAAO6F,CAAgBD,EAAY5F,GACtC,GAA2F,SAAvFC,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,uBAAuBC,OAE7E,OAAIJ,EAAU4F,EAAKE,kBACgC,IAApDnG,EAAYW,YAAY,yBAC7BX,EAAYe,cAAcV,EAAUL,EAAYe,cAAc/e,QAC9Dge,EAAYe,cAAcV,GAAWQ,OAAOb,EAAYW,YAAY,0BAA4BX,EAAYe,cAAc/e,SACzGqe,EAAU4F,EAAKE,kBAAoBF,EAAKG,kBACY,IAApDpG,EAAYW,YAAY,yBACzCX,EAAYY,eAAeP,EAAU4F,EAAKE,mBAAqBnG,EAAYY,cAAc5e,QACzFge,EAAYY,eAAeP,EAAU4F,EAAKE,oBAAsBtF,OAAOb,EAAYW,YAAY,0BAA4BX,EAAYY,cAAc5e,SAElF,IAAlDge,EAAYW,YAAY,uBACzCX,EAAYc,aAAaT,EAAU4F,EAAKE,kBAAoBF,EAAKG,mBAAqBpG,EAAYc,YAAY9e,QAC9Gge,EAAYc,aAAaT,EAAU4F,EAAKE,kBAAoBF,EAAKG,oBAAsBvF,OAAOb,EAAYW,YAAY,wBAA0BX,EAAYc,YAAY9e,SAKlK,GAAIge,EAAYE,YAAYmG,IAAIhG,GAC5B,OAAOL,EAAYE,YAAYoG,IAAIjG,GAInC,GAAIA,EAAU4F,EAAKE,kBAAmB,CAElC,MAAM5B,GAAoCjE,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,iCAC1FgE,GAAyClE,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,uCAC/FiE,GAAoCnE,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,iCAC1FkE,GAAyCpE,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,uCAC/FmE,GAAoCrE,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,iCAC1FoE,GAAyCtE,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,uCAC/FqE,GAAkCvE,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,+BACxFsE,GAAuCxE,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,qCAC7FuE,GAAkCzE,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,+BACxFwE,GAAuC1E,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,qCAC7FyE,GAAkC3E,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,+BACxF0E,GAAuC5E,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,qCAC7F2E,GAAiC7E,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,8BACvF4E,GAAsC9E,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,oCAC5F6E,GAAiC/E,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,8BACvF8E,GAAsChF,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,oCAC5F+E,GAAiCjF,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,8BACvFgF,GAAsClF,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,oCAC5FiF,GAA+BnF,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,4BACrFkF,GAAoCpF,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,kCAC1FmF,GAA+BrF,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,4BACrFoF,GAAoCtF,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,kCAC1FqF,GAA+BvF,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,4BACrFsF,GAAoCxF,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,kCAEhG,IAaIsC,EAAkC,CAAE7B,iBAbN,SAAYsD,EAA4BlE,GAAWmE,EAAgC/jB,EAAOmY,qBAAwB,KAAO,IAAO,MAC1J6L,GAA4B,GAAMC,EAAgC1a,KAAK+b,MAAM1F,EAAU,IAAQ,OAC/FsE,GAA4B,GAAMC,EAAgC5a,KAAK+b,MAAM1F,EAAU,IAAQ,KAWxBc,eAV/C,SAAY0D,EAA0BxE,GAAWyE,EAA8BrkB,EAAOmY,qBAAwB,KAAO,IAAO,MACpJmM,GAA0B,GAAMC,EAA8Bhb,KAAK+b,MAAM1F,EAAU,IAAQ,OAC3F4E,GAA0B,GAAMC,EAA8Blb,KAAK+b,MAAM1F,EAAU,IAAQ,KAQee,cAPnF,SAAY+D,EAAyB9E,GAAW+E,EAA6B3kB,EAAOmY,qBAAwB,KAAO,IAAO,MACjJyM,GAAyB,GAAMC,EAA6Btb,KAAK+b,MAAM1F,EAAU,IAAQ,OACzFkF,GAAyB,GAAMC,EAA6Bxb,KAAK+b,MAAM1F,EAAU,IAAQ,KAKkDgB,YAJtH,SAAYoE,EAAuBpF,GAAWqF,EAA2BjlB,EAAOmY,qBAAwB,KAAO,IAAO,MAC3I+M,GAAuB,GAAMC,EAA2B5b,KAAK+b,MAAM1F,EAAU,IAAQ,OACrFwF,GAAuB,GAAMC,EAA2B9b,KAAK+b,MAAM1F,EAAU,IAAQ,MAI7F,OADAL,EAAYE,YAAYhd,IAAImd,EAASyC,GAC9BA,CAEV,CACI,GAAIzC,EAAU4F,EAAKE,kBAAoBF,EAAKG,kBAAmB,CAEhE,MAAM9E,GAAoChB,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,iCAC1Fe,GAAyCjB,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,uCAC/FgB,GAAoClB,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,iCAC1FiB,GAAyCnB,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,uCAC/FkB,GAAoCpB,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,iCAC1FmB,GAAyCrB,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,uCAC/FoB,GAAkCtB,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,+BACxFqB,GAAuCvB,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,qCAC7FsB,GAAkCxB,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,+BACxFuB,GAAuCzB,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,qCAC7FwB,GAAkC1B,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,+BACxFyB,GAAuC3B,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,qCAC7F0B,GAAiC5B,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,8BACvF2B,GAAsC7B,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,oCAC5F4B,GAAiC9B,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,8BACvF6B,GAAsC/B,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,oCAC5F8B,GAAiChC,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,8BACvF+B,GAAsCjC,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,oCAC5FgC,GAA+BlC,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,4BACrFiC,GAAoCnC,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,kCAC1FkC,GAA+BpC,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,4BACrFmC,GAAoCrC,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,kCAC1FoC,GAA+BtC,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,4BACrFqC,GAAoCvC,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,kCAEhG,IAaIsC,EAAkC,CAAE7B,iBAbN,SAAYK,GAA8BjB,EAAU4F,EAAKE,oBAAsB5E,EAAiC9gB,EAAOqY,qBAAwB,KAAO,IAAO,MACvL0I,EAA2BnB,GAAWoB,GAAiC,OACvEC,EAA2BrB,GAAWsB,GAAiC,KAWAR,eAV/C,SAAYS,GAA4BvB,EAAU4F,EAAKE,oBAAsBtE,EAA+BphB,EAAOqY,qBAAwB,KAAO,IAAO,MACjLgJ,EAAyBzB,GAAW0B,GAA+B,OACnEC,EAAyB3B,GAAW4B,GAA+B,KAQuCb,cAPnF,SAAYc,GAA2B7B,EAAU4F,EAAKE,oBAAsBhE,EAA8B1hB,EAAOqY,qBAAwB,KAAO,IAAO,MAC9KsJ,EAAwB/B,GAAWgC,GAA8B,OACjEC,EAAwBjC,GAAWkC,GAA8B,KAK0ElB,YAJtH,SAAYmB,GAAyBnC,EAAU4F,EAAKE,oBAAsB1D,EAA4BhiB,EAAOqY,qBAAwB,KAAO,IAAO,MACxK4J,EAAsBrC,GAAWsC,GAA4B,OAC7DC,EAAsBvC,GAAWwC,GAA4B,MAIrE,OADA7C,EAAYE,YAAYhd,IAAImd,EAASyC,GAC9BA,CACV,CACI,CAED,MAAMC,GAAkCzC,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,+BACxFwC,GAAuC1C,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,qCAC7FyC,GAAkC3C,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,+BACxF0C,GAAuC5C,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,qCAC7F2C,GAAkC7C,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,+BACxF4C,GAAuC9C,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,qCAC7F6C,GAAgC/C,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,6BACtF8C,GAAqChD,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,mCAC3F+C,GAAgCjD,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,6BACtFgD,GAAqClD,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,mCAC3FiD,GAAgCnD,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,6BACtFkD,GAAqCpD,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,mCAC3FmD,GAA+BrD,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,4BACrFoD,GAAoCtD,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,kCAC1FqD,GAA+BvD,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,4BACrFsD,GAAoCxD,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,kCAC1FuD,GAA+BzD,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,4BACrFwD,GAAoC1D,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,kCAC1FyD,GAA6B3D,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,0BACnF0D,GAAkC5D,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,gCACxF2D,GAA6B7D,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,0BACnF4D,GAAkC9D,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,gCACxF6D,GAA6B/D,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,0BACnF8D,GAAkChE,iBAAiBnhB,KAAKohB,GAAeC,iBAAiB,gCAE9F,IAaIsC,EAAkC,CAAE7B,iBAbN,SAAY8B,GAA4B1C,EAAU4F,EAAKE,kBAAoBF,EAAKG,oBAAsBpD,EAA+BviB,EAAOuY,mBAAsB,KAAO,IAAO,MAC1MiK,EAAyB5C,GAAW6C,GAA+B,OACnEC,EAAyB9C,GAAW+C,GAA+B,KAWIjC,eAV/C,SAAYkC,GAA0BhD,EAAU4F,EAAKE,kBAAoBF,EAAKG,oBAAsB9C,EAA6B7iB,EAAOuY,mBAAsB,KAAO,IAAO,MACpMuK,EAAuBlD,GAAWmD,GAA6B,OAC/DC,EAAuBpD,GAAWqD,GAA6B,KAQ2CtC,cAPnF,SAAYuC,GAAyBtD,EAAU4F,EAAKE,kBAAoBF,EAAKG,oBAAsBxC,EAA4BnjB,EAAOuY,mBAAsB,KAAO,IAAO,MACjM6K,EAAsBxD,GAAWyD,GAA4B,OAC7DC,EAAsB1D,GAAW2D,GAA4B,KAK8E3C,YAJtH,SAAY4C,GAAuB5D,EAAU4F,EAAKE,kBAAoBF,EAAKG,oBAAsBlC,EAA0BzjB,EAAOuY,mBAAsB,KAAO,IAAO,MAC3LmL,EAAoB9D,GAAW+D,GAA0B,OACzDC,EAAoBhE,GAAWiE,GAA0B,MAIjE,OADAtE,EAAYE,YAAYhd,IAAImd,EAASyC,GAC9BA,CACV,C,CAON,eAAOyD,CAASljB,GACzB,IAAImjB,EAAgBrnB,KAAKsnB,OAAOpjB,GACnBqjB,MAATF,IAAoBA,EAAQrnB,KAAKsnB,OAAO,iBAC5CtnB,KAAKohB,EAAcoG,YAAcH,EAE3B,MAAMI,EAA8BlkB,SAASmkB,cAAc,4BACzC,MAAdD,GACAA,EAAW9I,aAAa,UAAWwC,iBAAiB5d,SAAS2c,iBAAiBmB,iBAAiB,2BAGnGrhB,KAAK8gB,a,CAGF,kBAAOU,CAAYtd,GACtB,OAAOid,iBAAiBnhB,KAAKohB,GAAeC,iBAAiBnd,E,EA7zOnD2c,EAAAE,YAA0C,IAAI4G,IAErC9G,EAAAyG,OAAqC,CAC1D,mBAAoB,21KAkJxB,uBAAwB,w5KAkJxB,iBAAkB,05KAkJlB,YAAa,iuLA6Jb,YAAa,mkLA2JT,aAAc,krLA6Jd,eAAgB,4/JAwHd,mBAAoB,mpKAwHpB,gBAAiB,m0KAiIjB,kBAAmB,06JAoHnBM,OAAU,u7JAoHVC,OAAU,+8JAoHVC,SAAY,y9IAoHZ,gBAAiB,s1KAiIjB,cAAe,67JAqHfC,aAAgB,ymIA0HhBC,IAAO,wiJAuHPC,UAAa,8jJAuHbC,OAAU,gkJAuHVC,MAAS,+hJAuHTC,OAAU,6hJAuHVC,MAAS,8hJAuHT,iBAAkB,+9IAmHlBC,OAAU,6gJAuHVC,OAAU,sjJAsHVpa,QAAW,miJAsHXqa,OAAU,q+IAmHV,YAAa,khJAuHbC,UAAa,q9IAqHbC,WAAc,2hJAsHdC,KAAQ,+zIAgHd,iBAAkB,4gKA0HjBC,OAAU,g8JAwHV,kBAAmB,8hKA0HnBC,SAAY,u+JAyHZC,SAAY,0pKA4HX,cAAe,osKA0Hf,cAAe,ynKA6HhBC,QAAW,qgKA0HV,uBAAwB,ysHAoHzB,iBAAkB,q2JAgHnB,kBAAmB,8lJA0HjB,eAAgB,o4EA0Db,iBAAkB,mvKA0HrB,mBAAoB,w3KA8HrB,cAAe,+qKA0HdC,OAAU,ggKAwHXC,OAAU,ggKAwHTC,SAAY,0hMAqKZC,SAAY,wuJAgHbC,aAAgB,4nJAsHfC,QAAW,qwIAsHZC,OACD,i7IAkHAC,SAAY,+vJAsHZ,YAAY,ugLAuJTC,OAAU,GAAGC,aAAaC,QAAQ,iBAAmB,0/IAgH/B7I,EAAU8I,WAAW,qBACrB9I,EAAgB+I,iBAAW,2BAC3B/I,EAAYgJ,aAAW,uBACvBhJ,EAAQiJ,SAAW,kBACnBjJ,EAAWkJ,YAAW,sBACtBlJ,EAAamJ,cAAW,wBACxBnJ,EAAYoJ,aAAW,uBACvBpJ,EAAaqJ,cAAW,wBACxBrJ,EAAgBsJ,iBAAW,4BAC3BtJ,EAAUuJ,WAAW,qBACrBvJ,EAAUwJ,WAAW,qBACrBxJ,EAAkByJ,mBAAW,8BAC7BzJ,EAAa0J,cAAW,yBACxB1J,EAAe2J,gBAAW,0BAC1B3J,EAAK4J,MAAW,eAChB5J,EAAS6J,UAAW,oBACpB7J,EAAa8J,cAAW,yBACxB9J,EAAa+J,cAAW,yBACxB/J,EAAiBgK,kBAAW,8BAC5BhK,EAAiBiK,kBAAW,8BAC/BjK,EAAiBkK,kBAAW,6BAC5BlK,EAAiBmK,kBAAW,6BAC5BnK,EAAQoK,SAAW,mBAChBpK,EAAeqK,gBAAW,2BAC1BrK,EAAwBuE,yBAAW,qCACnCvE,EAA6BwE,8BAAW,2CACxCxE,EAAwByE,yBAAW,qCACnCzE,EAA6B0E,8BAAW,2CACxC1E,EAAwB2E,yBAAW,qCACnC3E,EAA6B4E,8BAAW,2CACxC5E,EAAsB6E,uBAAW,mCACjC7E,EAA2B8E,4BAAW,yCACtC9E,EAAsB+E,uBAAW,mCACjC/E,EAA2BgF,4BAAW,yCACtChF,EAAsBiF,uBAAW,mCACjCjF,EAA2BkF,4BAAW,yCACtClF,EAAqBmF,sBAAW,kCAChCnF,EAA0BoF,2BAAW,wCACrCpF,EAAqBqF,sBAAW,kCAChCrF,EAA0BsF,2BAAW,wCACrCtF,EAAqBuF,sBAAW,kCAChCvF,EAA0BwF,2BAAW,wCACrCxF,EAAmByF,oBAAW,gCAC9BzF,EAAwB0F,yBAAW,sCACnC1F,EAAmB2F,oBAAW,gCAC9B3F,EAAwB4F,yBAAW,sCACnC5F,EAAmB6F,oBAAW,gCAC9B7F,EAAwB8F,yBAAW,sCACnC9F,EAAsB+C,uBAAW,mCACjC/C,EAA2BgD,4BAAW,yCACtChD,EAAsBiD,uBAAW,mCACjCjD,EAA2BkD,4BAAW,yCACtClD,EAAsBmD,uBAAW,mCACjCnD,EAA2BoD,4BAAW,yCACtCpD,EAAoBqD,qBAAW,iCAC/BrD,EAAyBsD,0BAAW,uCACpCtD,EAAoBuD,qBAAW,iCAC/BvD,EAAyBwD,0BAAW,uCACpCxD,EAAoByD,qBAAW,iCAC/BzD,EAAyB0D,0BAAW,uCACpC1D,EAAmB2D,oBAAW,gCAC9B3D,EAAwB4D,yBAAW,sCACnC5D,EAAmB6D,oBAAW,gCAC9B7D,EAAwB8D,yBAAW,sCACnC9D,EAAmB+D,oBAAW,gCAC9B/D,EAAwBgE,yBAAW,sCACnChE,EAAiBiE,kBAAW,8BAC5BjE,EAAsBkE,uBAAW,oCACjClE,EAAiBmE,kBAAW,8BAC5BnE,EAAsBoE,uBAAW,oCACjCpE,EAAiBqE,kBAAW,8BAC5BrE,EAAsBsE,uBAAW,oCACjCtE,EAAwBsB,yBAAW,qCACnCtB,EAA6BuB,8BAAW,2CACxCvB,EAAwBwB,yBAAW,qCACnCxB,EAA6ByB,8BAAW,2CACxCzB,EAAwB0B,yBAAW,qCACnC1B,EAA6B2B,8BAAW,2CACxC3B,EAAsB4B,uBAAW,mCACjC5B,EAA2B6B,4BAAW,yCACtC7B,EAAsB8B,uBAAW,mCACjC9B,EAA2B+B,4BAAW,yCACtC/B,EAAsBgC,uBAAW,mCACjChC,EAA2BiC,4BAAW,yCACtCjC,EAAqBkC,sBAAW,kCAChClC,EAA0BmC,2BAAW,wCACrCnC,EAAqBoC,sBAAW,kCAChCpC,EAA0BqC,2BAAW,wCACrCrC,EAAqBsC,sBAAW,kCAChCtC,EAA0BuC,2BAAW,wCACrCvC,EAAmBwC,oBAAW,gCAC9BxC,EAAwByC,yBAAW,sCACnCzC,EAAmB0C,oBAAW,gCAC9B1C,EAAwB2C,yBAAW,sCACnC3C,EAAmB4C,oBAAW,gCAC9B5C,EAAwB6C,yBAAW,sCACnC7C,EAAkBsK,mBAAW,+BAC7BtK,EAAqBuK,sBAAW,mCAChCvK,EAAkBwK,mBAAW,+BAC7BxK,EAAqByK,sBAAW,mCAChCzK,EAAgB0K,iBAAW,6BAC3B1K,EAAmB2K,oBAAW,iCAC9B3K,EAAuB4K,wBAAW,mCAClC5K,EAAoB6K,qBAAW,gCAC/B7K,EAAgB8K,iBAAW,2BAC3B9K,EAAkB+K,mBAAW,6BAC7B/K,EAAegL,gBAAW,2BAC1BhL,EAAeiL,gBAAW,2BAC1BjL,EAAgBkL,iBAAW,4BAC3BlL,EAAamL,cAAW,yBACxBnL,EAAeoL,gBAAW,2BAC1BpL,EAAqBqL,sBAAW,kCAChCrL,EAAmBsL,oBAAW,gCAC9BtL,EAAmBuL,oBAAW,+BAC9BvL,EAAqBwL,sBAAW,iCAEhCxL,EAAae,cAAmClT,EAAU,CAC7E,CACIxK,KAAM,SACN4d,iBAAkB,kCAClBE,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACd,CACChe,KAAM,SACN4d,iBAAkB,kCAClBE,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACd,CACChe,KAAM,SACN4d,iBAAkB,kCAClBE,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACd,CACChe,KAAM,SACN4d,iBAAkB,kCAClBE,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACd,CACChe,KAAM,SACN4d,iBAAkB,kCAClBE,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACd,CACChe,KAAM,SACN4d,iBAAkB,kCAClBE,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACd,CACChe,KAAM,SACN4d,iBAAkB,kCAClBE,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACd,CACChe,KAAM,SACN4d,iBAAkB,kCAClBE,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACd,CACChe,KAAM,SACN4d,iBAAkB,kCAClBE,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACd,CACChe,KAAM,UACN4d,iBAAkB,mCAClBE,eAAgB,iCAChBC,cAAe,gCACfC,YAAa,iCAGErB,EAAaY,cAAmC/S,EAAU,CAC7E,CACIxK,KAAM,SACN4d,iBAAkB,kCAClBE,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACd,CACChe,KAAM,SACN4d,iBAAkB,kCAClBE,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACd,CACChe,KAAM,SACN4d,iBAAkB,kCAClBE,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACd,CACChe,KAAM,SACN4d,iBAAkB,kCAClBE,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,8BACd,CACChe,KAAM,SACN4d,iBAAkB,kCAClBE,eAAgB,gCAChBC,cAAe,+BACfC,YAAa,gCAGErB,EAAWc,YAAmCjT,EAAU,CAC3E,CACIxK,KAAM,OACN4d,iBAAkB,gCAClBE,eAAgB,8BAChBC,cAAe,6BACfC,YAAa,4BACd,CACChe,KAAM,OACN4d,iBAAkB,gCAClBE,eAAgB,8BAChBC,cAAe,6BACfC,YAAa,4BACd,CACChe,KAAM,OACN4d,iBAAkB,gCAClBE,eAAgB,8BAChBC,cAAe,6BACfC,YAAa,4BACd,CACChe,KAAM,OACN4d,iBAAkB,gCAClBE,eAAgB,8BAChBC,cAAe,6BACfC,YAAa,8BAgWGrB,EAAAO,EAAkC7d,SAASG,KAAKC,YAAY4b,EAAKJ,MAAM,CAAElK,KAAM,cCzyO1E,4FAA4FyL,KAAK4L,UAAUC,W,MAM/HC,EA0WF,oBAAOC,CAAcC,GACxB,MAAMC,EAAwBD,GAAe,EACvCE,EAAoC,GAAdF,EAC5B,OAAOF,EAAaK,iBAAiBF,GAAeG,QAAQF,E,CAGzD,+BAAOG,CAAyBC,GACnC,IAAK,IAAIL,EAAwB,EAAGA,EAAgBH,EAAaK,iBAAiBhqB,OAAQ8pB,IAAiB,CACvG,MAAMM,EAA2BT,EAAaK,iBAAiBF,GAC/D,IAAK,IAAIC,EAAsB,EAAGA,EAAcK,EAASH,QAAQjqB,OAAQ+pB,IAAe,CACpF,MAAMM,EAAiBD,EAASH,QAAQF,GACxC,GAAIM,EAAOC,aAAeD,EAAOE,aAAeJ,EAAS,OAAQL,GAAiB,GAAKC,CAC1F,CACJ,CACD,OAAO,I,CAGJ,wBAAOS,CAAkBC,GAC5B,IAAK,IAAIX,EAAwB,EAAGA,EAAgBH,EAAaK,iBAAiBhqB,OAAQ8pB,IAAiB,CACvG,MAAMM,EAA2BT,EAAaK,iBAAiBF,GAC/D,IAAK,IAAIC,EAAsB,EAAGA,EAAcK,EAASH,QAAQjqB,OAAQ+pB,IAAe,CAEpF,GADuBK,EAASH,QAAQF,GAC7B1oB,MAAQopB,EAAY,OAAQX,GAAiB,GAAKC,CAChE,CACJ,CACD,OAAO,I,CAGJ,yBAAOW,CAAmBC,G,MAC7B,OAA6D,QAAtDC,EAAAjB,EAAaK,iBAAiB,GAAGC,QAAQpoB,kBAAa,IAAA+oB,OAAA,EAAAA,EAAA5tB,aAAW,EAAXA,EAAc2tB,G,ECnZnE,SAAAjiB,EAAsBoD,EAAoB+e,GACzD,IAAK,IAAInjB,EAAY,EAAGA,EAAIoE,EAAM9L,OAAQ0H,IACzCoE,EAAMpE,IAAMmjB,CAEd,CAMA,SAASC,EAAUC,GAClB,IALD,SAAoBA,GACnB,SAASA,GAAOA,EAAKA,EAAI,EAC1B,CAGMC,CAAWD,GAAI,MAAM,IAAIzrB,MAAM,0CACpC,OAAO0I,KAAKkB,MAAMlB,KAAKT,IAAIwjB,GAAK/iB,KAAKT,IAAI,GAC1C,CAuOgB,SAAAkB,GAA4BqD,EAAoBmf,GAC/D,MAAMC,EAAsBJ,EAAUG,GACtC,GAAIA,EAAkB,EAAG,MAAM,IAAI3rB,MAAM,wCAGzC,IAAK,IAAI6rB,EAAeD,EAAc,EAAGC,GAAQ,EAAGA,IAAQ,CAC3D,MAAMC,EAAoB,GAAKD,EACzBE,EAAuBD,GAAa,EACpCE,EAAiBF,GAAa,EAC9BG,EAAqC,EAAVvjB,KAAK8C,GAAWwgB,EAC3CE,EAAuBxjB,KAAK+C,IAAIwgB,GAChCE,EAAuBzjB,KAAKgD,IAAIugB,GAChCG,EAA+B,EAAMF,EAE3C,IAAK,IAAI9pB,EAAqB,EAAGA,EAAaupB,EAAiBvpB,GAAc4pB,EAAQ,CACpF,MAAMK,EAAsBjqB,EACtBkqB,EAAoBD,EAAcN,EAClCQ,EAAsBF,EAAcP,EACpCU,EAAoBD,EAAcR,EAClCU,EAAoBF,EAAcT,EAClCY,EAAqBlgB,EAAM6f,GAC3BM,EAAqBngB,EAAM+f,GACjC/f,EAAM6f,GAAeK,EAAaC,EAClCngB,EAAM8f,IAAc,EACpB9f,EAAM+f,GAAeG,EAAaC,EAClCngB,EAAMggB,IAAc,EACpB,IAAII,EAAYV,EACZW,GAAaV,EACbW,EAAgB,EAChBC,EAAgB,EACpB,IAAK,IAAI1qB,EAAgB,EAAGA,EAAQ0pB,EAAc1pB,IAAS,CAC1D,MAAM2qB,EAAkBX,EAAchqB,EAChC4qB,EAAkBV,EAAclqB,EAChC6qB,EAAkBX,EAAclqB,EAC/B8qB,EAAkBV,EAAcpqB,EACjC+qB,EAAgB5gB,EAAMwgB,GACtBK,EAAgB7gB,EAAMygB,GACtBK,EAAgB9gB,EAAM0gB,GACtBK,EAAgB/gB,EAAM2gB,GACtBK,EAAgBJ,EAAQC,EACxBI,EAAgBH,EAAQC,EAC9B/gB,EAAMwgB,GAAWI,EAAQC,EACzB7gB,EAAMygB,GAAWM,EAAQD,EACzB9gB,EAAM0gB,GAAWM,EAAQZ,EAAIa,EAAQZ,EACrCrgB,EAAM2gB,GAAWM,EAAQb,EAAIY,EAAQX,EACrC,MAAMa,EAAgBtB,EAAuBQ,EAAIE,EAC3Ca,EAAgBvB,EAAuBS,EAAIE,EACjDD,EAAQF,EACRG,EAAQF,EACRD,EAAIc,EACJb,EAAIc,CACJ,CACD,CACD,CAmCD,IAAK,IAAItrB,EAAgB,EAAGA,EAAQspB,EAAiBtpB,GAAS,EAAG,CAChE,MAAMurB,EAAiBvrB,EAAQ,EACzBwrB,EAAiBxrB,EAAQ,EACzByrB,EAAiBzrB,EAAQ,EACxB+qB,EAAgB5gB,EAAMnK,GACvBgrB,EAAgC,EAAhB7gB,EAAMohB,GACtBG,EAAgBvhB,EAAMqhB,GACtBG,EAAgC,EAAhBxhB,EAAMshB,GACtBN,EAAgBJ,EAAQW,EACxBN,EAAgBL,EAAQW,EAC7BvhB,EAAMnK,GAAUmrB,EAAQH,EACzB7gB,EAAMohB,GAAUJ,EAAQH,EACxB7gB,EAAMqhB,GAAUJ,EAAQO,EACxBxhB,EAAMshB,GAAUL,EAAQO,CACxB,EAxUF,SAA0BxhB,EAAoBmf,GAC7C,MAAMsC,EAAmBzC,EAAUG,GACnC,GAAIsC,EAAW,GAAI,MAAM,IAAIjuB,MAAM,mDACnC,MAAMkuB,EAAqB,GAAKD,EAChC,IAAK,IAAI7lB,EAAY,EAAGA,EAAIujB,EAAiBvjB,IAAK,CAEjD,IAAI+lB,EAKJ,GAJAA,GAAU,MAAJ/lB,IAAe,GAAW,MAAJA,IAAe,EAC3C+lB,GAAU,MAAJA,IAAe,GAAW,MAAJA,IAAe,EAC3CA,GAAU,MAAJA,IAAe,GAAW,KAAJA,IAAe,EAC1CA,GAAMA,GAAe,GAAa,IAANA,IAAe,IAAOD,EAC/CC,EAAI/lB,EAAG,CACV,IAAIgmB,EAAe5hB,EAAMpE,GACzBoE,EAAMpE,GAAKoE,EAAM2hB,GACjB3hB,EAAM2hB,GAAKC,CACX,CACD,CACF,CAyTCC,CAAiB7hB,EAAOmf,EACzB,CDhV2BtB,EAAOiE,QAAW,QAClBjE,EAAAkE,mBAA6B,YAAclE,EAAaiE,QAExDjE,EAAemE,gBAAW,qBAE1BnE,EAAAoE,QAAmB,QAAQlQ,KAAK4L,UAAUuE,WAAa,YAAYnQ,KAAK4L,UAAUC,YAAc,uBAAuB7L,KAAK4L,UAAUuE,WAAa,sBAAsBnQ,KAAK4L,UAAUC,WACxLC,EAAAsE,WAAqBtE,EAAaoE,QAAU,IAAM,QAClDpE,EAAAuE,SAAmBvE,EAAaoE,QAAU,UAAY,UAKtDpE,EAAgBK,iBAAoCne,EAAU,CACjF,CACIxK,KAAM,qBAAsB4oB,QAAkCpe,EAAU,CACpE,CAAExK,KAAMrE,EAAW,GAAuBmxB,WAAU,GACpD,CAAE9sB,KAAMrE,EAAW,GAAqBmxB,WAAU,GAClD,CAAE9sB,KAAMrE,EAAW,GAAwBmxB,WAAU,GACrD,CAAE9sB,KAAMrE,EAAW,GAA2BmxB,WAAU,GACxD,CAAE9sB,KAAMrE,EAAW,GAA0BmxB,WAAU,GACvD,CAAE9sB,KAAMrE,EAAW,GAA4BmxB,WAAU,GACzD,CAAE9sB,KAAMrE,EAAW,GAAsBmxB,WAAU,GACnD,CAAE9sB,KAAMrE,EAAW,GAA+BmxB,WAAU,GAC5D,CAAE9sB,KAAMrE,EAAW,GAAiCmxB,WAAU,GAC9D,CAAE9sB,KAAMrE,EAAW,IAAwBmxB,WAAU,IACrD,CAAE9sB,KAAMrE,EAAW,IAA2BmxB,WAAU,OAGhE,CACI9sB,KAAM,gBAAiB4oB,QAAkCpe,EAAU,CAC/D,CAAExK,KAAM,cAAekpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,OAAQic,SAAY,GAAIniB,QAAW,CAAC,YAAaoiB,WAAc,YAAaC,cAAiB,EAAG7c,cAAiB,EAAG8c,MAAS,WAAYhnB,KAAQ,SAAUinB,OAAU,OAAQpZ,UAAa,KACtP,CAAEhU,KAAM,gBAAiBkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,OAAQic,SAAY,GAAIniB,QAAW,CAAC,YAAaoiB,WAAc,YAAaC,cAAiB,EAAG7c,cAAiB,EAAG8c,MAAS,WAAYhnB,KAAQ,WAAYinB,OAAU,OAAQpZ,UAAa,KAC1P,CAAEhU,KAAM,cAAekpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,OAAQic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,IAAMC,WAAc,QAAWziB,QAAW,CAAC,YAAaoiB,WAAc,SAAUC,cAAiB,EAAG7c,cAAiB,EAAG8c,MAAS,eAAgBhnB,KAAQ,SAAUinB,OAAU,MAAOpZ,UAAa,KACvU,CAAEhU,KAAM,kBAAmBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,OAAQic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,IAAMC,WAAc,KAAQziB,QAAW,CAAC,YAAaoiB,WAAc,SAAUC,cAAiB,EAAG7c,cAAiB,EAAG8c,MAAS,eAAgBhnB,KAAQ,WAAYinB,OAAU,UAAWpZ,UAAa,KAC9U,CAAEhU,KAAM,kBAAmBkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,OAAQic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,IAAMziB,QAAW,CAAC,UAAW,YAAa0iB,QAAW,QAASN,WAAc,SAAUC,cAAiB,MAAQ7c,aAAgB,GAAI8c,MAAS,eAAgBhnB,KAAQ,WAAYinB,OAAU,MAAOpZ,UAAa,KAC5V,CAAEhU,KAAM,aAAckpB,YAAa,IAAKsE,SAAS,EAAMT,SAAU,CAAEhc,KAAQ,QAASkc,WAAc,OAAQpiB,QAAW,CAAC,YAAasiB,MAAS,WAAYM,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUxnB,KAAQ,UAC1O,CAAEnG,KAAM,WAAYkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,GAAIniB,QAAW,GAAIoiB,WAAc,SAAUC,cAAiB,EAAG7c,cAAiB,EAAG8c,MAAS,eAAgBS,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,MAC3f,CAAEN,KAAM,UAAWkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,GAAIniB,QAAW,GAAIoiB,WAAc,SAAUC,cAAiB,EAAG7c,cAAiB,EAAG8c,MAAS,kBAAmBS,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,MAAOzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,MACzoB,CAAEN,KAAM,WAAYkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,GAAIniB,QAAW,GAAIoiB,WAAc,SAAUC,cAAiB,MAAQ7c,cAAiB,EAAG8c,MAAS,eAAgBS,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,MAC/f,CAAEN,KAAM,WAAYkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,GAAIniB,QAAW,CAAC,WAAY0iB,QAAW,UAAWN,WAAc,SAAUC,cAAiB,MAAQ7c,cAAiB,EAAG8c,MAAS,kBAAmBS,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,KAAOyK,UAAa,KACne,CAAEhU,KAAM,YAAakpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,cAAelG,QAAW,CAAC,YAAaoiB,WAAc,SAAUC,cAAiB,EAAG7c,cAAiB,EAAG8c,MAAS,WAAYH,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,IAAMC,WAAc,KAAQF,OAAU,OAAQG,QAAW,OAAQvZ,UAAa,GAAIma,eAAkB,EAAE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACvmB,CAAEnuB,KAAM,gBAAiBkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,cAAelG,QAAW,CAAC,YAAaoiB,WAAc,SAAUC,cAAiB,EAAG7c,cAAiB,EAAG8c,MAAS,WAAYH,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,IAAMC,WAAc,KAAQF,OAAU,OAAQpZ,UAAa,GAAIma,eAAkB,EAAE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAC3iB,CAAEnuB,KAAM,gBAAiBkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,cAAelG,QAAW,CAAC,YAAaoiB,WAAc,SAAUC,cAAiB,EAAG7c,cAAiB,EAAG8c,MAAS,WAAYH,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,IAAMC,WAAc,KAAQF,OAAU,OAAQpZ,UAAa,GAAIma,eAAkB,EAAE,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC3iB,CAAEnuB,KAAM,eAAgBkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,cAAelG,QAAW,CAAC,YAAaoiB,WAAc,SAAUC,cAAiB,EAAG7c,cAAiB,EAAG8c,MAAS,WAAYH,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,IAAMC,WAAc,KAAQF,OAAU,OAAQpZ,UAAa,GAAIma,eAAkB,EAAE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC3lB,CAAEnuB,KAAM,aAAckpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,cAAelG,QAAW,CAAC,YAAaoiB,WAAc,YAAaC,cAAiB,EAAG7c,cAAiB,EAAG8c,MAAS,WAAYH,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,IAAMC,WAAc,KAAQF,OAAU,OAAQpZ,UAAa,GAAIma,eAAkB,EAAE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,MAC3lB,CAAEnuB,KAAM,eAAgBkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,cAAelG,QAAW,CAAC,YAAaoiB,WAAc,SAAUC,cAAiB,EAAG7c,cAAiB,EAAG8c,MAAS,WAAYH,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,IAAMC,WAAc,KAAQF,OAAU,OAAQpZ,UAAa,GAAIma,eAAkB,CAAC,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,MAC3iB,CAAEnuB,KAAM,UAAWkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,KAAMkc,WAAc,WAAYpiB,QAAW,OAAQsiB,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,SAAUL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,gBAIjkB,CACIluB,KAAM,mBAAoB4oB,QAAkCpe,EAAU,CAClE,CAAExK,KAAM,gBAAiBkpB,YAAa,EAAGD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,gBAAiBic,SAAY,CAAC,CAAEjc,KAAQ,YAAasc,SAAY,OAAQC,WAAc,OAAU,CAAEvc,KAAQ,OAAQsc,SAAY,IAAMC,WAAc,SAAWziB,QAAW,CAAC,cAAe,UAAWwjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,IAAMC,WAAc,OAAUgB,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,EAAG7c,aAAgB,GAAI8c,MAAS,eAAgBoB,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAKnB,OAAU,QAASoB,cAAiB,GAAIxa,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,gBAC9qB,CAAEluB,KAAM,eAAgBkpB,YAAa,EAAGD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,gBAAiBic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,OAAU,CAAEvc,KAAQ,YAAasc,SAAY,OAAQC,WAAc,IAAO,CAAEvc,KAAQ,OAAQsc,SAAY,QAASC,WAAc,SAAWziB,QAAW,CAAC,UAAWyjB,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,EAAG7c,aAAgB,GAAI8c,MAAS,eAAgBoB,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAKnB,OAAU,QAASoB,cAAiB,GAAIxa,UAAa,KACnmB,CAAEhU,KAAM,iBAAkBkpB,YAAa,EAAGD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,OAAQic,SAAY,GAAIniB,QAAW,CAAC,eAAgBwjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,QAASC,WAAc,KAAQL,WAAc,SAAUC,cAAiB,EAAG7c,aAAgB,GAAI8c,MAAS,eAAgBhnB,KAAQ,YAAainB,OAAU,UAAWpZ,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,cACpZ,CAAEluB,KAAM,mBAAoBkpB,YAAa,EAAGD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,gBAAiBic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,QAAWziB,QAAW,CAAC,UAAWyjB,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,EAAG7c,aAAgB,GAAI8c,MAAS,eAAgBoB,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAKnB,OAAU,aAAcoB,cAAiB,GAAIxa,UAAa,KAC9e,CAAEhU,KAAM,mBAAoBkpB,YAAa,EAAGD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAaic,SAAY,GAAIniB,QAAW,CAAC,eAAgBwjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,QAASC,WAAc,KAAQL,WAAc,SAAUC,cAAiB,EAAG7c,cAAiB,EAAG8c,MAAS,eAAgBoB,UAAa,CAAC,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAInB,OAAU,OAAQpZ,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,cACzf,CAAEluB,KAAM,mBAAoBkpB,YAAa,EAAGD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,GAAIniB,QAAW,CAAC,eAAgBwjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,SAAUC,WAAc,MAASL,WAAc,SAAUC,cAAiB,EAAG7c,aAAgB,GAAI8c,MAAS,eAAgBS,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,MAAOzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,WAAa,CAAED,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,MAChrB,CAAEN,KAAM,cAAekpB,YAAa,EAAGD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,gBAAiBic,SAAY,CAAC,CAAEjc,KAAQ,YAAasc,SAAY,IAAKC,WAAc,OAAU,CAAEvc,KAAQ,OAAQsc,SAAY,SAAUC,WAAc,SAAWziB,QAAW,CAAC,UAAWyjB,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,EAAG7c,aAAgB,GAAI8c,MAAS,eAAgBoB,UAAa,CAAC,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAKnB,OAAU,OAAQoB,cAAiB,GAAIxa,UAAa,KACjiB,CAAEhU,KAAM,WAAYkpB,YAAa,EAAGD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,GAAIniB,QAAW,CAAC,eAAgBwjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,SAAUC,WAAc,QAAWL,WAAc,SAAUC,cAAiB,EAAG7c,cAAiB,EAAG8c,MAAS,eAAgBS,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,MAAOzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,WAAa,CAAED,OAAU,oBAAqBC,SAAY,cACrpB,CAAEluB,KAAM,WAAYkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,gBAAiBic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,IAAMC,WAAc,QAAWziB,QAAW,CAAC,UAAWyjB,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,EAAG7c,aAAgB,GAAI8c,MAAS,QAASoB,UAAa,CAAC,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,IAAKnB,OAAU,QAASoB,cAAiB,GAAIxa,UAAa,KACje,CAAEhU,KAAM,gBAAiBkpB,YAAa,EAAGD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAaic,SAAY,CAAC,CAAEjc,KAAQ,YAAasc,SAAY,OAAQC,WAAc,OAAU,CAAEvc,KAAQ,OAAQsc,SAAY,IAAMC,WAAc,SAAWziB,QAAW,CAAC,cAAe,UAAWwjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,IAAMC,WAAc,OAAUgB,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,EAAG7c,aAAgB,GAAI8c,MAAS,eAAgBoB,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,IAAKnB,OAAU,QAASoB,cAAiB,GAAIxa,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,mBAI/qB,CACIluB,KAAM,oBAAqB4oB,QAAkCpe,EAAU,CACnE,CAAExK,KAAM,UAAWkpB,YAAa,EAAGD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,cAAeC,aAAgB,QAASC,kBAAqB,EAAGM,iBAAoB,SAAUL,UAAa,CAAC,CAAEC,UAAa,MAAOzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,WAAa,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,cACtlB,CAAEluB,KAAM,eAAgBkpB,YAAa,EAAGD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,WAAYC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,cAC3lB,CAAEluB,KAAM,cAAekpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,gBAAiBic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,KAAQziB,QAAW,CAAC,UAAWyjB,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,EAAG7c,aAAgB,GAAI8c,MAAS,QAASoB,UAAa,CAAC,IAAK,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAInB,OAAU,OAAQoB,cAAiB,GAAIxa,UAAa,KACpc,CAAEhU,KAAM,cAAekpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,gBAAiBic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,QAAWziB,QAAW,CAAC,UAAWyjB,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,EAAG7c,aAAgB,GAAI8c,MAAS,QAASoB,UAAa,CAAC,IAAK,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAInB,OAAU,OAAQoB,cAAiB,GAAIxa,UAAa,KAClb,CAAEhU,KAAM,aAAckpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,UAAWC,aAAgB,UAAWC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aACxlB,CAAEluB,KAAM,UAAWkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,SAAUL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,WAAa,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aACjlB,CAAEluB,KAAM,UAAWkpB,YAAa,IAAKD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,SAAUL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,WAAa,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,WAAa,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aACnlB,CAAEluB,KAAM,YAAakpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,WAAYC,kBAAqB,EAAGM,iBAAoB,SAAUL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,cACnlB,CAAEluB,KAAM,eAAgBkpB,YAAa,GAAID,aAAa,EAAMwF,uBAAwB,EAAG1B,SAAU,CAAEhc,KAAQ,gBAAiBic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,IAAMC,WAAc,IAAO,CAAEvc,KAAQ,YAAasc,SAAY,OAAQC,WAAc,QAAWziB,QAAW,CAAC,UAAWyjB,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,EAAG7c,aAAgB,GAAI8c,MAAS,QAASoB,UAAa,CAAC,GAAI,GAAI,EAAG,IAAK,EAAG,IAAK,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAKnB,OAAU,UAAWoB,cAAiB,GAAIxa,UAAa,KACnjB,CAAEhU,KAAM,aAAckpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,SAAUL,UAAa,CAAC,CAAEC,UAAa,MAAOzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,WAAa,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,WAAa,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aACnkB,CAAEluB,KAAM,YAAakpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,cAAeC,aAAgB,QAASC,kBAAqB,EAAGM,iBAAoB,SAAUL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,WAAa,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,eACxlB,CAAEluB,KAAM,UAAWkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,UAAWK,UAAa,UAAWC,aAAgB,cAAeC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,aAC7lB,CAAEluB,KAAM,cAAekpB,YAAa,IAAKD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,UAAWC,aAAgB,UAAWC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,aACplB,CAAEluB,KAAM,QAASkpB,YAAa,IAAKD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,UAAWC,aAAgB,MAAOC,kBAAqB,GAAIM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,GAAI2kB,SAAY,gBAGxlB,CACIluB,KAAM,iBAAkB4oB,QAAkCpe,EAAU,CAChE,CAAExK,KAAM,eAAgBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aACnlB,CAAEluB,KAAM,eAAgBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,gBAAiBic,SAAY,GAAIniB,QAAW,CAAC,UAAWyjB,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,EAAG7c,aAAgB,GAAI8c,MAAS,QAASoB,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAKnB,OAAU,OAAQoB,cAAiB,GAAIxa,UAAa,KAC7Z,CAAEhU,KAAM,cAAekpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWe,SAAY,QAASnB,QAAW,OAAQgB,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KACzY,CAAEvuB,KAAM,eAAgBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWe,SAAY,QAASnB,QAAW,OAAQgB,UAAa,CAAC,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC9Y,CAAEvuB,KAAM,eAAgBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,WAAa,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,WAAa,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,iBAG3lB,CACIluB,KAAM,sBAAuB4oB,QAAkCpe,EAAU,CACrE,CAAExK,KAAM,gBAAiBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWe,SAAY,QAASnB,QAAW,OAAQgB,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC/Y,CAAEvuB,KAAM,gBAAiBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWe,SAAY,QAASnB,QAAW,OAAQgB,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAC/Y,CAAEvuB,KAAM,cAAekpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,WAAa,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aACrlB,CAAEluB,KAAM,gBAAiBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWe,SAAY,QAASnB,QAAW,OAAQgB,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC3Y,CAAEvuB,KAAM,cAAekpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,UAAWe,SAAY,QAASnB,QAAW,OAAQgB,UAAa,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC1Y,CAAEvuB,KAAM,cAAekpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,SAAUL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,aAC7kB,CAAEluB,KAAM,eAAgBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,WAAa,CAAEF,UAAa,MAAOzkB,UAAa,GAAI2kB,SAAY,cACtlB,CAAEluB,KAAM,eAAgBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,QAASJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,MAAOC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aACnlB,CAAEluB,KAAM,cAAekpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,OAAQkc,WAAc,OAAQpiB,QAAW,SAAUsiB,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWxnB,KAAQ,WAAYuoB,SAAY,UAAWnB,QAAW,SACxR,CAAEvtB,KAAM,kBAAmBkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,OAAQic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,QAAWziB,QAAW,CAAC,cAAe,cAAewjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,MAAOC,WAAc,UAAYqB,iBAAoB,IAAKC,uBAA0B,EAAG3B,WAAc,QAASC,cAAiB,MAAQ7c,cAAiB,EAAG8c,MAAS,WAAYhnB,KAAQ,WAAYinB,OAAU,OAAQpZ,UAAa,CAAC,CAAEia,OAAU,iBAAkBC,SAAY,UAAW5tB,MAAS,SAG9hB,CACIN,KAAM,wBAAyB4oB,QAAkCpe,EAAU,CACvE,CAAExK,KAAM,oBAAqBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,cAAeE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,cAAeC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,GAAI2kB,SAAY,aAC1mB,CAAEluB,KAAM,OAAQkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMkc,WAAc,YAAapiB,QAAW,SAAUsiB,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aAC3kB,CAAEluB,KAAM,QAASkpB,YAAa,IAAKD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMkc,WAAc,YAAapiB,QAAW,SAAUsiB,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,SAAUL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,WAAa,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,WAAa,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,cACllB,CAAEluB,KAAM,QAASkpB,YAAa,IAAKD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,SAAUL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,WAAa,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,aACllB,CAAEluB,KAAM,UAAWkpB,YAAa,IAAK6D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,WAAa,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,aAC/jB,CAAEluB,KAAM,WAAYkpB,YAAa,IAAKD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,WAAa,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aACvlB,CAAEluB,KAAM,OAAQkpB,YAAa,IAAKD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,MAAOzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,WAAa,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,iBAG7lB,CACIluB,KAAM,qBAAsB4oB,QAAkCpe,EAAU,CACpE,CAAExK,KAAM,mBAAoBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,gBAAiBic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,OAAU,CAAEvc,KAAQ,YAAasc,SAAY,OAAQC,WAAc,GAAK,CAAEvc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,GAAK,CAAEvc,KAAQ,OAAQsc,SAAY,MAAOC,WAAc,KAAQziB,QAAW,CAAC,cAAe,cAAewjB,WAAc,CAAC,CAAEtd,KAAQ,YAAasc,SAAY,MAAOC,WAAc,GAAK,CAAEvc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,QAAWuB,WAAc,GAAI5B,WAAc,SAAUC,cAAiB,EAAG7c,aAAgB,GAAI8c,MAAS,QAASoB,UAAa,CAAC,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAKnB,OAAU,OAAQoB,cAAiB,GAAIxa,UAAa,CAAC,CAAEia,OAAU,iBAAkBC,SAAY,YAAa5tB,MAAS,MACh4B,CAAEN,KAAM,oBAAqBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,gBAAiBic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,OAAU,CAAEvc,KAAQ,YAAasc,SAAY,OAAQC,WAAc,GAAK,CAAEvc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,GAAK,CAAEvc,KAAQ,OAAQsc,SAAY,MAAOC,WAAc,OAAU,CAAEvc,KAAQ,OAAQsc,SAAY,IAAMC,WAAc,MAASziB,QAAW,CAAC,cAAe,aAAc,UAAWwjB,WAAc,CAAC,CAAEtd,KAAQ,YAAasc,SAAY,OAAQC,WAAc,GAAK,CAAEvc,KAAQ,WAAYsc,SAAY,IAAMC,WAAc,IAAMuB,WAAc,GAAIP,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,EAAG7c,aAAgB,GAAI8c,MAAS,QAASoB,UAAa,CAAC,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAKnB,OAAU,OAAQoB,cAAiB,GAAIxa,UAAa,CAAC,CAAEia,OAAU,iBAAkBC,SAAY,YAAa5tB,MAAS,MAC/8B,CAAEN,KAAM,iBAAkBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,SAAUC,WAAc,IAAMziB,QAAW,GAAIoiB,WAAc,SAAUC,cAAiB,EAAG7c,cAAiB,EAAG8c,MAAS,QAASS,UAAa,YAAaC,aAAgB,UAAWC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,MAAOzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,oBAAqBC,SAAY,cAC3jB,CAAEluB,KAAM,mBAAoBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,IAAMC,WAAc,IAAMziB,QAAW,CAAC,UAAWyjB,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,EAAG7c,cAAiB,EAAG8c,MAAS,QAASS,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,MAAOzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,MAAOzkB,UAAa,KAAOyK,UAAa,CAAC,CAAEia,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,QAAS5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,MAC1uB,CAAEN,KAAM,gBAAiBkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,MAAOic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,SAAWziB,QAAW,GAAIoiB,WAAc,SAAUC,cAAiB,EAAG7c,cAAiB,EAAG8c,MAAS,QAASlmB,WAAc,SAAU+M,UAAa,CAAC,CAAEia,OAAU,aAAcC,SAAY,YACnU,CAAEluB,KAAM,iBAAkBkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,MAAOic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,IAAMziB,QAAW,CAAC,WAAY0iB,QAAW,UAAWN,WAAc,SAAUC,cAAiB,EAAG7c,cAAiB,EAAG8c,MAAS,QAASlmB,WAAc,GAAI+M,UAAa,CAAC,CAAEia,OAAU,aAAcC,SAAY,cACxV,CAAEluB,KAAM,eAAgBkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,IAAMziB,QAAW,CAAC,UAAWyjB,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,EAAG7c,cAAiB,EAAG8c,MAAS,QAASS,UAAa,YAAaC,aAAgB,MAAOC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,MAAOzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,MAAOzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,KAAOyK,UAAa,CAAC,CAAEia,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,YACtsB,CAAEluB,KAAM,gBAAiBkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,IAAMC,WAAc,IAAMziB,QAAW,CAAC,UAAWyjB,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,EAAG7c,cAAiB,EAAG8c,MAAS,QAASS,UAAa,YAAaC,aAAgB,MAAOC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,MAAOzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,MAAOzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,SAGzpB,CACIN,KAAM,kBAAmB4oB,QAAkCpe,EAAU,CACjE,CAAExK,KAAM,kBAAmBkpB,YAAa,GAAID,aAAa,EAAMwF,uBAAwB,EAAG1B,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUe,SAAY,QAASnB,QAAW,OAAQgB,UAAa,CAAC,GAAI,GAAI,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KACjZ,CAAEvuB,KAAM,kBAAmBkpB,YAAa,GAAIuF,uBAAwB,EAAG1B,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUe,SAAY,QAASnB,QAAW,OAAQgB,UAAa,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,IAAK,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,KACrY,CAAEvuB,KAAM,mBAAoBkpB,YAAa,GAAID,aAAa,EAAMwF,uBAAwB,EAAG1B,SAAU,CAAEhc,KAAQ,KAAMkc,WAAc,OAAQpiB,QAAW,SAAUsiB,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,QAASJ,QAAW,QAASK,UAAa,UAAWC,aAAgB,UAAWC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aAClnB,CAAEluB,KAAM,aAAckpB,YAAa,GAAID,aAAa,EAAMwF,uBAAwB,EAAG1B,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,kBAAmBoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,QAASJ,QAAW,UAAWK,UAAa,YAAaC,aAAgB,WAAYC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aAC1nB,CAAEluB,KAAM,aAAckpB,YAAa,GAAID,aAAa,EAAMwF,uBAAwB,EAAG1B,SAAU,CAAEhc,KAAQ,KAAMkc,WAAc,aAAcpiB,QAAW,SAAUsiB,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQK,UAAa,UAAWC,aAAgB,cAAeC,kBAAqB,EAAGM,iBAAoB,SAAUL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aACrnB,CAAEluB,KAAM,aAAckpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUe,SAAY,QAASnB,QAAW,OAAQgB,UAAa,CAAC,GAAI,GAAI,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACzY,CAAEvuB,KAAM,YAAakpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,OAAQlG,QAAW,SAAUoiB,WAAc,aAAcE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,UAAWxnB,KAAQ,aAAcuoB,SAAY,aAAcnB,QAAW,SAChS,CAAEvtB,KAAM,YAAakpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWe,SAAY,MAAOnB,QAAW,OAAQgB,UAAa,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACrY,CAAEvuB,KAAM,UAAWkpB,YAAa,IAAKD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,aAAcE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,QAASe,SAAY,MAAOnB,QAAW,OAAQgB,UAAa,CAAC,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,SAGnZ,CACIvuB,KAAM,iBAAkB4oB,QAAkCpe,EAAU,CAChE,CAAExK,KAAM,WAAYkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,IAAMC,WAAc,QAAU,CAAEvc,KAAQ,YAAasc,SAAY,OAAQC,WAAc,QAAWziB,QAAW,CAAC,UAAW,UAAW0iB,QAAW,UAAWe,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,MAAQ7c,aAAgB,EAAG8c,MAAS,eAAgBS,UAAa,cAAeC,aAAgB,MAAOC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,cAC7vB,CAAEluB,KAAM,QAASkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,aAAcE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,UAAWK,UAAa,YAAaC,aAAgB,WAAYC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aAC1lB,CAAEluB,KAAM,QAASkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,IAAMC,WAAc,OAAU,CAAEvc,KAAQ,YAAasc,SAAY,MAAOC,WAAc,OAAU,CAAEvc,KAAQ,OAAQsc,SAAY,QAASC,WAAc,SAAWziB,QAAW,CAAC,cAAe,UAAWwjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,KAAOC,WAAc,QAAWgB,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,MAAQ7c,aAAgB,GAAI8c,MAAS,eAAgBS,UAAa,YAAaC,aAAgB,QAASC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,MAAOzkB,UAAa,GAAK,CAAEykB,UAAa,MAAOzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,WAAa,CAAED,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,MACp4B,CAAEN,KAAM,aAAckpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,aAAcE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,UAAWK,UAAa,YAAaC,aAAgB,QAASC,kBAAqB,EAAGM,iBAAoB,SAAUL,UAAa,CAAC,CAAEC,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,cAC5lB,CAAEluB,KAAM,SAAUkpB,YAAa,IAAKD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,UAAWK,UAAa,cAAeC,aAAgB,QAASC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,aACrlB,CAAEluB,KAAM,kBAAmBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,kBAAmBoiB,WAAc,cAAeE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,WAAYJ,QAAW,OAAQK,UAAa,UAAWC,aAAgB,UAAWC,kBAAqB,GAAIM,iBAAoB,SAAUL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aACxmB,CAAEluB,KAAM,UAAWkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,kBAAmBoiB,WAAc,aAAcE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQK,UAAa,cAAeC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,cAC5lB,CAAEluB,KAAM,eAAgBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,kBAAmBoiB,WAAc,YAAaE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,cAAeC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,cAClmB,CAAEluB,KAAM,kBAAmBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,OAAQkc,WAAc,YAAapiB,QAAW,kBAAmBsiB,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUxnB,KAAQ,WAAYuoB,SAAY,MAAOnB,QAAW,YACrS,CAAEvtB,KAAM,kBAAmBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,kBAAmBoiB,WAAc,YAAaE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQK,UAAa,UAAWC,aAAgB,cAAeC,kBAAqB,GAAIM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aACzmB,CAAEluB,KAAM,kBAAmBkpB,YAAa,GAAID,aAAa,EAAMwF,uBAAwB,EAAG1B,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,kBAAmBoiB,WAAc,YAAaE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQK,UAAa,UAAWC,aAAgB,cAAeC,kBAAqB,GAAIM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,WAAa,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,WAAa,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,WAAa,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,cAC3oB,CAAEluB,KAAM,WAAYkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,KAAMC,WAAc,QAAU,CAAEvc,KAAQ,YAAasc,SAAY,OAAQC,WAAc,QAAWziB,QAAW,CAAC,UAAW,UAAW0iB,QAAW,QAASe,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,MAAQ7c,aAAgB,EAAG8c,MAAS,eAAgBS,UAAa,cAAeC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,cACruB,CAAEluB,KAAM,kBAAmBkpB,YAAa,GAAIuF,uBAAwB,EAAG1B,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,kBAAmBoiB,WAAc,cAAeE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,UAAWJ,QAAW,UAAWK,UAAa,UAAWC,aAAgB,cAAeC,kBAAqB,GAAIM,iBAAoB,SAAUL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,gBAGjoB,CACIluB,KAAM,gBAAiB4oB,QAAkCpe,EAAU,CAC/D,CAAExK,KAAM,gBAAiBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAaic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,GAAK,CAAEvc,KAAQ,OAAQsc,SAAY,QAASC,WAAc,QAAU,CAAEvc,KAAQ,YAAasc,SAAY,OAAQC,WAAc,QAAU,CAAEvc,KAAQ,OAAQsc,SAAY,IAAMC,WAAc,OAAU,CAAEvc,KAAQ,OAAQsc,SAAY,MAAOC,WAAc,KAAQ,CAAEvc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,UAAYziB,QAAW,CAAC,UAAW,SAAU,UAAW0iB,QAAW,QAASuB,OAAU,IAAKR,OAAU,GAAIpB,cAAiB,MAAQ7c,aAAgB,GAAIke,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GAAInB,OAAU,OAAQpZ,UAAa,KAC7wB,CAAEhU,KAAM,cAAekpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAaic,SAAY,CAAC,CAAEjc,KAAQ,OAAQsc,SAAY,IAAMC,WAAc,SAAW,CAAEvc,KAAQ,OAAQsc,SAAY,OAAQC,WAAc,QAAU,CAAEvc,KAAQ,OAAQsc,SAAY,MAAOC,WAAc,OAAU,CAAEvc,KAAQ,OAAQsc,SAAY,QAASC,WAAc,OAAU,CAAEvc,KAAQ,YAAasc,SAAY,MAAOC,WAAc,OAAU,CAAEvc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,UAAYziB,QAAW,CAAC,UAAW,SAAU,UAAW0iB,QAAW,QAASuB,OAAU,IAAKR,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,MAAQ7c,aAAgB,GAAI8c,MAAS,eAAgBoB,UAAa,CAAC,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAKnB,OAAU,OAAQpZ,UAAa,KACl0B,CAAEhU,KAAM,aAAckpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,YAAaic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,SAAW,CAAEvc,KAAQ,OAAQsc,SAAY,MAAOC,WAAc,QAAU,CAAEvc,KAAQ,OAAQsc,SAAY,QAASC,WAAc,OAAU,CAAEvc,KAAQ,OAAQsc,SAAY,OAAQC,WAAc,OAAU,CAAEvc,KAAQ,OAAQsc,SAAY,MAAOC,WAAc,UAAYziB,QAAW,CAAC,UAAW,SAAU,UAAW0iB,QAAW,QAASuB,OAAU,IAAKR,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,MAAQ7c,aAAgB,GAAI8c,MAAS,eAAgBoB,UAAa,CAAC,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAKnB,OAAU,OAAQpZ,UAAa,KAC7uB,CAAEhU,KAAM,eAAgBkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,YAAaic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,GAAK,CAAEvc,KAAQ,OAAQsc,SAAY,QAASC,WAAc,QAAU,CAAEvc,KAAQ,YAAasc,SAAY,OAAQC,WAAc,QAAU,CAAEvc,KAAQ,OAAQsc,SAAY,IAAMC,WAAc,OAAU,CAAEvc,KAAQ,OAAQsc,SAAY,MAAOC,WAAc,MAASziB,QAAW,CAAC,UAAW,UAAW0iB,QAAW,QAASe,OAAU,GAAIpB,cAAiB,MAAQ7c,aAAgB,GAAIke,UAAa,CAAC,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GAAInB,OAAU,OAAQpZ,UAAa,KAC3pB,CAAEhU,KAAM,aAAckpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,YAAaic,SAAY,CAAC,CAAEjc,KAAQ,OAAQsc,SAAY,IAAMC,WAAc,SAAW,CAAEvc,KAAQ,OAAQsc,SAAY,OAAQC,WAAc,QAAU,CAAEvc,KAAQ,OAAQsc,SAAY,MAAOC,WAAc,OAAU,CAAEvc,KAAQ,OAAQsc,SAAY,QAASC,WAAc,OAAU,CAAEvc,KAAQ,YAAasc,SAAY,MAAOC,WAAc,OAAU,CAAEvc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,UAAYziB,QAAW,CAAC,UAAW,UAAW0iB,QAAW,QAASe,OAAU,GAAIpB,cAAiB,MAAQ7c,aAAgB,GAAIke,UAAa,CAAC,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAKnB,OAAU,OAAQpZ,UAAa,KACpuB,CAAEhU,KAAM,YAAakpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,YAAaic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,QAAU,CAAEvc,KAAQ,OAAQsc,SAAY,MAAOC,WAAc,GAAK,CAAEvc,KAAQ,OAAQsc,SAAY,QAASC,WAAc,OAAU,CAAEvc,KAAQ,OAAQsc,SAAY,OAAQC,WAAc,OAAU,CAAEvc,KAAQ,OAAQsc,SAAY,MAAOC,WAAc,GAAK,CAAEvc,KAAQ,YAAasc,SAAY,OAAQC,WAAc,SAAWziB,QAAW,CAAC,UAAW,UAAW0iB,QAAW,QAASe,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,MAAQ7c,aAAgB,GAAI8c,MAAS,eAAgBoB,UAAa,CAAC,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAKnB,OAAU,OAAQpZ,UAAa,KAC1wB,CAAEhU,KAAM,YAAakpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUe,SAAY,QAASnB,QAAW,QAASgB,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAC3X,CAAEvuB,KAAM,cAAekpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,OAAQkc,WAAc,cAAepiB,QAAW,kBAAmBsiB,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUxnB,KAAQ,UAAWuoB,SAAY,QAASnB,QAAW,UACpS,CAAEvtB,KAAM,iBAAkBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,kBAAmBoiB,WAAc,aAAcE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,QAASK,UAAa,YAAaC,aAAgB,UAAWC,kBAAqB,EAAGM,iBAAoB,QAASL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,aACxmB,CAAEluB,KAAM,aAAckpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,GAAIniB,QAAW,CAAC,UAAW,UAAW0iB,QAAW,UAAWe,OAAU,GAAIrB,WAAc,QAASC,cAAiB,MAAQ7c,cAAiB,EAAG8c,MAAS,eAAgBS,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,MAAOzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,oBAAqBC,SAAY,QAAS5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,cACxmB,CAAEluB,KAAM,QAASkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,aAAcE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,WAAYJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,GAAIM,iBAAoB,WAAYL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aAClkB,CAAEluB,KAAM,QAASkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,GAAIniB,QAAW,CAAC,UAAW,UAAW0iB,QAAW,QAASe,OAAU,GAAIrB,WAAc,mBAAoBC,cAAiB,MAAQ7c,cAAiB,EAAG8c,MAAS,eAAgBS,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,aAAcC,SAAY,aAAe,CAAED,OAAU,oBAAqBC,SAAY,cAC9lB,CAAEluB,KAAM,UAAWkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,WAAYC,kBAAqB,EAAGM,iBAAoB,SAAUL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,SAAW,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,SAAW,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,SAAW,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,cAC7jB,CAAEluB,KAAM,YAAakpB,YAAa,IAAKD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,kBAAmBoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,QAASJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,SAAUL,UAAa,CAAC,CAAEC,UAAa,MAAOzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,cAC1lB,CAAEluB,KAAM,aAAckpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,WAAYlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWoB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,QAG7V,CACI/uB,KAAM,gBAAiB4oB,QAAkCpe,EAAU,CAC/D,CAAExK,KAAM,UAAWkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,WAAa,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aAC7kB,CAAEluB,KAAM,WAAYkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aAC7kB,CAAEluB,KAAM,OAAQkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aACzkB,CAAEluB,KAAM,gBAAiBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,IAAMC,WAAc,QAAU,CAAEvc,KAAQ,OAAQsc,SAAY,IAAMC,WAAc,SAAWziB,QAAW,CAAC,cAAe,UAAWwjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,QAASC,WAAc,IAAMgB,OAAU,GAAIpB,cAAiB,MAAQ7c,cAAiB,EAAGud,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,MAAOzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,WAAa,CAAED,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,cACj0B,CAAEluB,KAAM,cAAekpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,IAAMC,WAAc,GAAK,CAAEvc,KAAQ,OAAQsc,SAAY,QAASC,WAAc,SAAWziB,QAAW,CAAC,UAAWyjB,OAAU,GAAIpB,cAAiB,MAAQ7c,cAAiB,EAAGud,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,MAAOzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,cAC9uB,CAAEluB,KAAM,gBAAiBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,QAASJ,QAAW,OAAQK,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,WAAa,CAAEF,UAAa,MAAOzkB,UAAa,GAAI2kB,SAAY,cACvlB,CAAEluB,KAAM,gBAAiBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQK,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,GAAIM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,WAAa,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,cACxlB,CAAEluB,KAAM,gBAAiBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMkc,WAAc,OAAQpiB,QAAW,SAAUsiB,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,WAAa,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,cACxlB,CAAEluB,KAAM,cAAekpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,MAAOlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAW1mB,WAAc,GAAI+nB,cAAiB,UAAWzB,QAAW,YAG/Q,CACIvtB,KAAM,eAAgB4oB,QAAkCpe,EAAU,CAC9D,CAAExK,KAAM,cAAekpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQK,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,WAAa,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,YAC/kB,CAAEluB,KAAM,WAAYkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,QAASL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,WAAa,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,aAC7kB,CAAEluB,KAAM,YAAakpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQK,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aAC5kB,CAAEluB,KAAM,eAAgBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,SAAUJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,YAChlB,CAAEluB,KAAM,YAAakpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUJ,QAAW,QAASK,UAAa,YAAaC,aAAgB,QAASC,kBAAqB,EAAGM,iBAAoB,SAAUL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aAC9jB,CAAEluB,KAAM,UAAWkpB,YAAa,IAAKD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUJ,QAAW,QAASK,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,SAAUL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aAC5kB,CAAEluB,KAAM,OAAQkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,aAAcE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,WAAYL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aACjlB,CAAEluB,KAAM,eAAgBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,aAAcE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,SAAUL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,SAAW,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aACtlB,CAAEluB,KAAM,UAAWkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAKC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,SAAUL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,WAAa,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aAC3kB,CAAEluB,KAAM,WAAYkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUe,SAAY,QAASnB,QAAW,OAAQgB,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KACtY,CAAEvuB,KAAM,YAAakpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,WAAYL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,WAAa,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,gBAG3lB,CACIluB,KAAM,gBAAiB4oB,QAAkCpe,EAAU,CAC/D,CAAExK,KAAM,UAAWkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,YAC7kB,CAAEluB,KAAM,WAAYkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWe,SAAY,QAASnB,QAAW,OAAQgB,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KACvY,CAAEvuB,KAAM,UAAWkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,kBAAmBoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUe,SAAY,QAASnB,QAAW,UAAWgB,UAAa,CAAC,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KACvX,CAAEvuB,KAAM,UAAWkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUe,SAAY,QAASnB,QAAW,OAAQgB,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAClX,CAAEvuB,KAAM,UAAWkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQK,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,GAAIM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,SAAW,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,YAC7kB,CAAEluB,KAAM,aAAckpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,kBAAmBoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,UAAWK,UAAa,YAAaC,aAAgB,MAAOC,kBAAqB,GAAIM,iBAAoB,SAAUL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,SAAW,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,WAAa,CAAEF,UAAa,MAAOzkB,UAAa,GAAI2kB,SAAY,aAC/lB,CAAEluB,KAAM,YAAakpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,WAAYic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,SAAWziB,QAAW,CAAC,cAAe,UAAWwjB,WAAc,CAAC,CAAEtd,KAAQ,YAAasc,SAAY,QAASC,WAAc,QAAWgB,OAAU,GAAIpB,cAAiB,MAAQ7c,cAAiB,EAAG0e,SAAY,CAAC,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK/a,UAAa,CAAC,CAAEia,OAAU,iBAAkBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,aAAcC,SAAY,YAChlB,CAAEluB,KAAM,eAAgBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,kBAAmBoiB,WAAc,aAAcE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQK,UAAa,UAAWC,aAAgB,cAAeC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,aACxmB,CAAEluB,KAAM,WAAYkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,WAAYkc,WAAc,aAAcpiB,QAAW,SAAUsiB,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUoB,SAAY,CAAC,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC7V,CAAE/uB,KAAM,UAAWkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,WAAYlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,QAASoB,SAAY,CAAC,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACpV,CAAE/uB,KAAM,eAAgBkpB,YAAa,IAAKD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,WAAYic,SAAY,GAAIniB,QAAW,CAAC,aAAc,cAAe,UAAWsiB,MAAS,QAASkB,WAAc,CAAC,CAAEtd,KAAQ,YAAasc,SAAY,MAAOC,WAAc,OAAU,CAAEvc,KAAQ,WAAYsc,SAAY,KAAOC,WAAc,QAAWgB,OAAU,GAAIpB,cAAiB,MAAQ7c,aAAgB,GAAI0e,SAAY,CAAC,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,EAAG,GAAI,EAAG,GAAI/a,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,cACvjB,CAAEluB,KAAM,UAAWkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,WAAYE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUe,SAAY,QAASnB,QAAW,UAAWgB,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,QAGpZ,CACIvuB,KAAM,cAAe4oB,QAAkCpe,EAAU,CAC7D,CAAExK,KAAM,cAAekpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,GAAIniB,QAAW,CAAC,UAAWikB,OAAU,IAAK7B,WAAc,SAAUC,cAAiB,EAAG7c,aAAgB,GAAI8c,MAAS,eAAgBS,UAAa,YAAaC,aAAgB,QAASC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,MAAOzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,MAAOzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,cACpqB,CAAEluB,KAAM,WAAYkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,GAAIniB,QAAW,CAAC,cAAe,UAAWwjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,QAASC,WAAc,IAAMwB,OAAU,IAAK7B,WAAc,SAAUC,cAAiB,MAAQ7c,aAAgB,GAAI8c,MAAS,eAAgBS,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,WAAa,CAAED,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,MACjsB,CAAEN,KAAM,gBAAiBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,OAAQic,SAAY,GAAIniB,QAAW,CAAC,UAAW,cAAe,UAAW0iB,QAAW,UAAWc,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,QAASC,WAAc,IAAMwB,OAAU,IAAK7B,WAAc,SAAUC,cAAiB,EAAG7c,aAAgB,GAAI8c,MAAS,eAAgBhnB,KAAQ,WAAYinB,OAAU,aAAcpZ,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,cAC9c,CAAEluB,KAAM,kBAAmBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,QAAU,CAAEvc,KAAQ,OAAQsc,SAAY,QAASC,WAAc,QAAU,CAAEvc,KAAQ,OAAQsc,SAAY,QAASC,WAAc,QAAWziB,QAAW,CAAC,UAAWikB,OAAU,IAAK7B,WAAc,SAAUC,cAAiB,MAAQ7c,aAAgB,GAAI8c,MAAS,eAAgBS,UAAa,YAAaC,aAAgB,cAAeC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,MAAOzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,oBAAqBC,SAAY,QAAS5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,cACzyB,CAAEluB,KAAM,kBAAmBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,GAAIniB,QAAW,CAAC,eAAgBwjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,QAASC,WAAc,KAAQL,WAAc,SAAUC,cAAiB,MAAQ7c,aAAgB,GAAI8c,MAAS,eAAgBS,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,WAAa,CAAED,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,MACzvB,CAAEN,KAAM,eAAgBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,GAAIniB,QAAW,CAAC,eAAgBwjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,QAASC,WAAc,KAAQL,WAAc,SAAUC,cAAiB,MAAQ7c,aAAgB,GAAI8c,MAAS,eAAgBS,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,GAAIC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,MAAOzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,MAAOzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,WAAa,CAAED,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,cACpuB,CAAEluB,KAAM,YAAakpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,OAAQic,SAAY,GAAIniB,QAAW,CAAC,cAAe,UAAWwjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,IAAMC,WAAc,IAAMwB,OAAU,IAAK7B,WAAc,SAAUC,cAAiB,MAAQ7c,aAAgB,GAAI8c,MAAS,eAAgBhnB,KAAQ,WAAYinB,OAAU,MAAOpZ,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,cACpa,CAAEluB,KAAM,aAAckpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,IAAMziB,QAAW,CAAC,SAAU,UAAWikB,OAAU,IAAKR,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,EAAG7c,aAAgB,GAAI8c,MAAS,QAASS,UAAa,YAAaC,aAAgB,QAASC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,MAAOzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,MACpwB,CAAEN,KAAM,aAAckpB,YAAa,IAAKD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,gBAAiBic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,IAAMziB,QAAW,CAAC,UAAWikB,OAAU,IAAK7B,WAAc,SAAUC,cAAiB,MAAQ7c,aAAgB,GAAI8c,MAAS,eAAgBoB,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAKnB,OAAU,SAAUoB,cAAiB,GAAIxa,UAAa,KACte,CAAEhU,KAAM,UAAWkpB,YAAa,IAAKD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,CAAC,CAAEjc,KAAQ,OAAQsc,SAAY,QAASC,WAAc,UAAYziB,QAAW,CAAC,cAAe,UAAWwjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,QAASC,WAAc,KAAQwB,OAAU,IAAK7B,WAAc,SAAUC,cAAiB,MAAQ7c,aAAgB,GAAI8c,MAAS,eAAgBS,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,GAAIC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,WAAa,CAAED,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,WAAY5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,cAC13B,CAAEluB,KAAM,SAAUkpB,YAAa,IAAKD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,CAAC,CAAEjc,KAAQ,OAAQsc,SAAY,QAASC,WAAc,SAAWziB,QAAW,CAAC,cAAe,UAAWwjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,QAASC,WAAc,KAAQwB,OAAU,IAAK7B,WAAc,SAAUC,cAAiB,MAAQ7c,aAAgB,GAAI8c,MAAS,eAAgBS,UAAa,YAAaC,aAAgB,cAAeC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,MAAOzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,MAAOzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,WAAa,CAAED,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,WAAY5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,cACp4B,CAAEluB,KAAM,cAAekpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,GAAIniB,QAAW,CAAC,UAAW,cAAe,UAAW0iB,QAAW,UAAWc,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,IAAMC,WAAc,IAAMwB,OAAU,IAAK7B,WAAc,SAAUC,cAAiB,EAAG7c,aAAgB,GAAI8c,MAAS,eAAgBS,UAAa,cAAeC,aAAgB,WAAYC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,MAAOzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,WAAa,CAAED,OAAU,oBAAqBC,SAAY,WAAY5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,QAAS5tB,MAAS,MACxxB,CAAEN,KAAM,eAAgBkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,CAAC,CAAEjc,KAAQ,OAAQsc,SAAY,QAASC,WAAc,IAAMziB,QAAW,GAAIoiB,WAAc,SAAUC,cAAiB,MAAQ7c,aAAgB,GAAI8c,MAAS,kBAAmBS,UAAa,UAAWC,aAAgB,cAAeC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,MAAOzkB,UAAa,KAAOyK,UAAa,CAAC,CAAEia,OAAU,oBAAqBC,SAAY,iBAG7jB,CACIluB,KAAM,eAAgB4oB,QAAkCpe,EAAU,CAC9D,CAAExK,KAAM,mBAAoBkpB,YAAa,IAAKsE,SAAS,EAAMT,SAAU,CAAEhc,KAAQ,UAAWlG,QAAW,SAAUokB,MAAS,CAAC,CAAEtB,eAAkB,UAAWoB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEpB,eAAkB,UAAWoB,SAAY,CAAC,EAAG,EAAG,EAAG,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEpB,eAAkB,UAAWoB,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEpB,eAAkB,UAAWoB,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEpB,eAAkB,UAAWoB,SAAY,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEpB,eAAkB,UAAWoB,SAAY,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEpB,eAAkB,UAAWoB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEpB,eAAkB,UAAWoB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEpB,eAAkB,UAAWoB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEpB,eAAkB,UAAWoB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEpB,eAAkB,UAAWoB,SAAY,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAM,CAAEpB,eAAkB,UAAWoB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,OAChkE,CAAE/uB,KAAM,YAAakpB,YAAa,IAAKD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,CAAC,CAAEjc,KAAQ,YAAasc,SAAY,KAAMC,WAAc,QAAWziB,QAAW,CAAC,cAAe,SAAU,UAAWwjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,SAAUC,WAAc,MAASwB,OAAU,GAAIR,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,EAAG7c,aAAgB,GAAI8c,MAAS,eAAgBS,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,MAAOzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,WAAa,CAAED,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,MACr6B,CAAEN,KAAM,kBAAmBkpB,YAAa,IAAK6D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,GAAIniB,QAAW,CAAC,eAAgBwjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,SAAUC,WAAc,MAASL,WAAc,SAAUC,cAAiB,EAAG7c,cAAiB,EAAG8c,MAAS,eAAgBS,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,MAAOzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,MAAOzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,WAAa,CAAED,OAAU,oBAAqBC,SAAY,YAAa5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,YAAa5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,cACt6B,CAAEluB,KAAM,UAAWkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,WAAYic,SAAY,CAAC,CAAEjc,KAAQ,OAAQsc,SAAY,QAASC,WAAc,SAAWziB,QAAW,CAAC,cAAe,cAAe,UAAWqkB,oBAAuB,GAAIb,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,SAAUC,WAAc,KAAQgB,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,EAAG7c,aAAgB,GAAI8c,MAAS,eAAgB4B,SAAY,CAAC,IAAK,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK/a,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,WAAa,CAAED,OAAU,aAAcC,SAAY,cAC3pB,CAAEluB,KAAM,cAAekpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,WAAYic,SAAY,GAAIniB,QAAW,CAAC,cAAe,UAAWwjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,QAASC,WAAc,QAAWgB,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,EAAG7c,aAAgB,GAAI8c,MAAS,eAAgB4B,SAAY,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI/a,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,cAClf,CAAEluB,KAAM,YAAakpB,YAAa,IAAKD,aAAa,EAAMuE,SAAS,EAAMiB,wBAAyB,IAAK1B,SAAU,CAAEhc,KAAQ,WAAYlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWoB,SAAY,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACrZ,CAAE/uB,KAAM,aAAckpB,YAAa,IAAKD,aAAa,EAAMuE,SAAS,EAAMiB,wBAAyB,GAAK1B,SAAU,CAAEhc,KAAQ,WAAYlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWoB,SAAY,CAAC,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACzZ,CAAE/uB,KAAM,eAAgBkpB,YAAa,IAAKD,aAAa,EAAMuE,SAAS,EAAMiB,wBAAyB,IAAK1B,SAAU,CAAEhc,KAAQ,WAAYlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWoB,SAAY,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC1Z,CAAE/uB,KAAM,aAAckpB,YAAa,IAAKD,aAAa,EAAMuE,SAAS,EAAMiB,wBAAyB,EAAG1B,SAAU,CAAEhc,KAAQ,WAAYlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWoB,SAAY,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACxZ,CAAE/uB,KAAM,UAAWkpB,YAAa,IAAKsE,SAAS,EAAMiB,wBAAyB,EAAG1B,SAAU,CAAEhc,KAAQ,WAAYlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWoB,SAAY,CAAC,IAAK,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC9X,CAAE/uB,KAAM,aAAckpB,YAAa,IAAKsE,SAAS,EAAMiB,wBAAyB,IAAK1B,SAAU,CAAEhc,KAAQ,WAAYlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWoB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,EAAG,KAC9X,CAAE/uB,KAAM,aAAckpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,GAAIniB,QAAW,GAAIoiB,WAAc,SAAUC,cAAiB,EAAG7c,cAAiB,EAAG8c,MAAS,eAAgBS,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,aAAcC,SAAY,iBAG/iB,CACIluB,KAAM,kBAAmB4oB,QAAkCpe,EAAU,CACjE,CAAExK,KAAM,oBAAqBkpB,YAAa,IAAKD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,WAAYic,SAAY,CAAC,CAAEjc,KAAQ,YAAasc,SAAY,IAAMC,WAAc,QAAWziB,QAAW,CAAC,eAAgBwjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,QAASC,WAAc,SAAWL,WAAc,SAAUC,cAAiB,MAAQ7c,cAAiB,EAAG8c,MAAS,eAAgB4B,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,GAAI,GAAI/a,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,WAAa,CAAED,OAAU,aAAcC,SAAY,cAC7lB,CAAEluB,KAAM,iBAAkBkpB,YAAa,GAAID,aAAa,EAAMwF,uBAAwB,EAAG1B,SAAU,CAAEhc,KAAQ,OAAQic,SAAY,GAAIniB,QAAW,CAAC,cAAe,UAAWwjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,QAASC,WAAc,SAAWwB,OAAU,GAAI7B,WAAc,SAAUC,cAAiB,EAAG7c,aAAgB,GAAI8c,MAAS,eAAgBhnB,KAAQ,WAAYinB,OAAU,QAASpZ,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,cACxc,CAAEluB,KAAM,cAAekpB,YAAa,GAAIuF,uBAAwB,EAAG1B,SAAU,CAAEhc,KAAQ,OAAQic,SAAY,GAAIniB,QAAW,CAAC,cAAe,UAAWwjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,IAAMC,WAAc,IAAMwB,OAAU,IAAK7B,WAAc,SAAUC,cAAiB,MAAQ7c,aAAgB,GAAI8c,MAAS,eAAgBhnB,KAAQ,WAAYinB,OAAU,QAASpZ,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,cAChb,CAAEluB,KAAM,aAAckpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,OAAQic,SAAY,GAAIniB,QAAW,CAAC,cAAe,UAAWwjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,QAASC,WAAc,KAAQwB,OAAU,GAAI7B,WAAc,SAAUC,cAAiB,MAAQ7c,aAAgB,GAAI8c,MAAS,eAAgBhnB,KAAQ,WAAYinB,OAAU,QAASpZ,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,cAC3a,CAAEluB,KAAM,iBAAkBkpB,YAAa,IAAKD,aAAa,EAAMuE,SAAS,EAAMiB,wBAAyB,EAAG1B,SAAU,CAAEhc,KAAQ,WAAYlG,QAAW,OAAQoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWoB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,MACrZ,CAAE/uB,KAAM,WAAYkpB,YAAa,IAAKD,aAAa,EAAMuE,SAAS,EAAMiB,wBAAyB,EAAG1B,SAAU,CAAEhc,KAAQ,WAAYkc,WAAc,YAAapiB,QAAW,SAAUsiB,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,UAAWoB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACpZ,CAAE/uB,KAAM,aAAckpB,YAAa,IAAKD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAaic,SAAY,GAAIniB,QAAW,CAAC,aAAc,UAAW,UAAWsiB,MAAS,QAASI,QAAW,QAASe,OAAU,GAAIpB,cAAiB,MAAQ7c,cAAiB,EAAGke,UAAa,CAAC,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAInB,OAAU,MAAOpZ,UAAa,CAAC,CAAEia,OAAU,aAAcC,SAAY,cACva,CAAEluB,KAAM,iBAAkBkpB,YAAa,IAAKD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,GAAIniB,QAAW,CAAC,eAAgBwjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,QAASC,WAAc,IAAML,WAAc,SAAUC,cAAiB,MAAQ7c,cAAiB,EAAG8c,MAAS,WAAYS,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,MAAOzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,IAAMyK,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,YAAc,CAAED,OAAU,oBAAqBC,SAAY,WAAY5tB,MAAS,MAC9qB,CAAEN,KAAM,aAAckpB,YAAa,IAAKD,aAAa,EAAMuE,SAAS,EAAMiB,wBAAyB,GAAK1B,SAAU,CAAEhc,KAAQ,WAAYlG,QAAW,SAAUoiB,WAAc,WAAYE,MAAS,WAAYM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,WAAYoB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC1Z,CAAE/uB,KAAM,WAAYkpB,YAAa,IAAKD,aAAa,EAAMuE,SAAS,EAAMiB,wBAAyB,EAAG1B,SAAU,CAAEhc,KAAQ,WAAYlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWoB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACrZ,CAAE/uB,KAAM,UAAWkpB,YAAa,IAAKD,aAAa,EAAMuE,SAAS,EAAMiB,wBAAyB,EAAG1B,SAAU,CAAEhc,KAAQ,WAAYlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWoB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAClZ,CAAE/uB,KAAM,QAASkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,OAAQic,SAAY,GAAIniB,QAAW,CAAC,eAAgBwjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,OAAQC,WAAc,IAAML,WAAc,SAAUC,cAAiB,MAAQ7c,cAAiB,EAAG8c,MAAS,eAAgBhnB,KAAQ,aAAcinB,OAAU,UAAWpZ,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,cAC5X,CAAEluB,KAAM,WAAYkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,KAAMic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,KAAQziB,QAAW,GAAIoiB,WAAc,SAAUC,cAAiB,MAAQ7c,cAAiB,EAAG8c,MAAS,kBAAmBS,UAAa,UAAWC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,MAAOzkB,UAAa,GAAK,CAAEykB,UAAa,MAAOzkB,UAAa,KAAOyK,UAAa,KAChgB,CAAEhU,KAAM,WAAYkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,MAAOic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,IAAMziB,QAAW,CAAC,WAAY0iB,QAAW,QAASN,WAAc,SAAUC,cAAiB,MAAQ7c,cAAiB,EAAG8c,MAAS,eAAgBlmB,WAAc,QAAS+M,UAAa,CAAC,CAAEia,OAAU,aAAcC,SAAY,eACjW,CAAEluB,KAAM,YAAakpB,YAAa,IAAKsE,SAAS,EAAMiB,wBAAyB,EAAG1B,SAAU,CAAEhc,KAAQ,WAAYlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWoB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACpY,CAAE/uB,KAAM,eAAgBkpB,YAAa,IAAKsE,SAAS,EAAMiB,wBAAyB,EAAG1B,SAAU,CAAEhc,KAAQ,QAASlG,QAAW,SAAUoiB,WAAc,QAASE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUxnB,KAAQ,SACrQ,CAAEnG,KAAM,WAAYkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,YAAaic,SAAY,CAAC,CAAEjc,KAAQ,WAAYsc,SAAY,IAAMC,WAAc,QAAWziB,QAAW,CAAC,UAAW,UAAW0iB,QAAW,QAASe,OAAU,GAAIrB,WAAc,mBAAoBC,cAAiB,MAAQ7c,cAAiB,EAAG8c,MAAS,eAAgBoB,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAInB,OAAU,OAAQpZ,UAAa,KAChd,CAAEhU,KAAM,aAAckpB,YAAa,IAAK6D,SAAU,CAAEhc,KAAQ,WAAYic,SAAY,GAAIniB,QAAW,CAAC,cAAe,UAAWwjB,WAAc,CAAC,CAAEtd,KAAQ,WAAYsc,SAAY,QAASC,WAAc,KAAQgB,OAAU,GAAIrB,WAAc,SAAUC,cAAiB,MAAQ7c,aAAgB,GAAI8c,MAAS,eAAgB4B,SAAY,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI/a,UAAa,CAAC,CAAEia,OAAU,qBAAsBC,SAAY,iBAG/e,CAAEluB,KAAM,iBAAkB4oB,QAAkCpe,EAAU,CAC5E,CAAExK,KAAM,oBAAqB+sB,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,OAAQoiB,WAAc,OAAQE,MAAS,WAAYM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,OAAQK,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,GAAIM,iBAAoB,SAAUL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,gBAEjjB,CAAEluB,KAAM,kBAAmB4oB,QAASpe,EAAU,CACpC,CAAExK,KAAM,wBAAyBipB,aAAa,EAAOuE,SAAS,EAAMiB,wBAAyB,EAAG1B,SAAU,CAAEhc,KAAQ,WAAYlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,WAAYM,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUoB,SAAY,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACtZ,CAAE/uB,KAAM,sBAAuBipB,aAAa,EAAOwF,uBAAwB,EAAG1B,SAAU,CAAEhc,KAAQ,OAAQlG,QAAW,OAAQoiB,WAAc,WAAYE,MAAS,WAAYM,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUxnB,KAAQ,QAASuoB,SAAY,QAASnB,QAAW,SACvS,CAAEvtB,KAAM,sBAAuBipB,aAAa,EAAOwF,uBAAwB,EAAG1B,SAAU,CAAEhc,KAAQ,OAAQlG,QAAW,SAAUoiB,WAAc,WAAYE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUxnB,KAAQ,SAAUuoB,SAAY,UAAWnB,QAAW,SAC5S,CAAEvtB,KAAM,wBAAyBipB,aAAa,EAAOwF,uBAAwB,EAAG1B,SAAU,CAAEhc,KAAQ,OAAQlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,QAASxnB,KAAQ,eAAgBuoB,SAAY,QAASnB,QAAW,SAC7S,CAAEvtB,KAAM,oBAAqBipB,aAAa,EAAOwF,wBAAyB,EAAG1B,SAAU,CAAEhc,KAAQ,WAAYlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,WAAYoB,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KAC9V,CAAE/uB,KAAM,oBAAqBipB,aAAa,EAAOuE,SAAS,EAAMiB,uBAAwB,EAAG1B,SAAU,CAAEhc,KAAQ,QAASlG,QAAW,SAAUoiB,WAAc,cAAeE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUxnB,KAAQ,WACjR,CAAEnG,KAAM,sBAAuBipB,aAAa,EAAO8D,SAAU,CAAEhc,KAAQ,cAAekc,WAAc,OAAQpiB,QAAW,OAAQsiB,MAAS,WAAYM,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUe,SAAY,QAASnB,QAAW,OAAQY,eAAkB,EAAE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KACzhB,CAAEnuB,KAAM,qBAAsBipB,aAAa,EAAO8D,SAAU,CAAEhc,KAAQ,KAAMkc,WAAc,OAAQpiB,QAAW,kBAAmBsiB,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,UAAWC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aACrlB,CAAEluB,KAAM,mBAAoBipB,aAAa,EAAO8D,SAAU,CAAEhc,KAAQ,KAAMkc,WAAc,YAAapiB,QAAW,SAAUsiB,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,QAASC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,WAAa,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,cAClkB,CAAEluB,KAAM,0BAA2BipB,aAAa,EAAO8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,WAAYE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,SAAUe,SAAY,QAASnB,QAAW,OAAQgB,UAAa,CAAC,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,MACxY,CAAEvuB,KAAM,2BAA4BipB,aAAa,EAAO8D,SAAU,CAAEhc,KAAQ,cAAekc,WAAc,YAAapiB,QAAW,kBAAmBsiB,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUe,SAAY,QAASnB,QAAW,OAAQY,eAAkB,CAAC,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,IAAK,IAAK,MAC5jB,CAAEnuB,KAAM,2BAA4BipB,aAAa,EAAO8D,SAAU,CAAEhc,KAAQ,cAAekc,WAAc,YAAapiB,QAAW,kBAAmBsiB,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,QAASe,SAAY,UAAWnB,QAAW,QAASY,eAAkB,CAAC,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,IAAK,MACljB,CAAEnuB,KAAM,4BAA6BipB,aAAa,EAAO8D,SAAU,CAAEhc,KAAQ,cAAekc,WAAc,aAAcpiB,QAAW,SAAUsiB,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUe,SAAY,QAASnB,QAAW,QAASY,eAAkB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAC/iB,CAAEnuB,KAAM,oBAAqBipB,aAAa,EAAO8D,SAAU,CAAEhc,KAAQ,cAAe,YAAa,WAAYlG,QAAW,SAAUsiB,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWe,SAAY,QAASnB,QAAW,OAAQY,eAAkB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,KACxiB,CAAEnuB,KAAM,sBAAuBipB,aAAa,EAAO8D,SAAU,CAAEhc,KAAQ,KAAMkc,WAAc,WAAYpiB,QAAW,SAAUsiB,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,QAASJ,QAAW,OAAQK,UAAa,UAAWC,aAAgB,cAAeC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,YAAc,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,YAAc,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,YAAc,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,kBAGtlB,CAAEluB,KAAM,mBAAoB4oB,QAAkCpe,EAAU,CAC7D,CAAExK,KAAM,oBAAqBkpB,YAAa,EAAGD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWe,SAAY,UAAWnB,QAAW,QAASgB,UAAa,CAAC,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,MACha,CAAEvuB,KAAM,qBAAsBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,UAAWC,aAAgB,QAASC,kBAAqB,EAAGM,iBAAoB,SAAUL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,iBAGtlB,CAAEluB,KAAM,iBAAkB4oB,QAAkCpe,EAAU,CACnE,CAAExK,KAAM,mBAAoBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,OAAQlG,QAAW,SAAUoiB,WAAc,aAAcE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,EAAGC,eAAkB,UAAWxnB,KAAQ,mBAAoBuoB,SAAY,aAAcnB,QAAW,SAClT,CAAEvtB,KAAM,cAAeipB,aAAa,EAAO8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,WAAYE,MAAS,UAAWM,eAAkB,IAAKC,gBAAmB,KAAMC,eAAkB,SAAUJ,QAAW,OAAQK,UAAa,UAAWC,aAAgB,UAAWC,kBAAqB,GAAIM,iBAAoB,SAAUL,UAAa,CAAC,CAAEC,UAAa,MAAOzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,MAAOzkB,UAAa,EAAG2kB,SAAY,iBAE5kB,CAAEluB,KAAM,sBAAuB4oB,QAAkCpe,EAAU,CAC/D,CAAExK,KAAM,kBAAmBkpB,YAAa,EAAGD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWe,SAAY,QAASnB,QAAW,OAAQgB,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC9Z,CAAEvuB,KAAM,mBAAoBkpB,YAAa,EAAGD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWe,SAAY,QAASnB,QAAW,OAAQgB,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACzY,CAAEvuB,KAAM,uBAAwBkpB,YAAa,EAAGD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWe,SAAY,aAAcnB,QAAW,OAAQgB,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAG3Z,CAAEvuB,KAAM,kBAAmBkpB,YAAa,EAAGD,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,EAAGC,eAAkB,UAAWJ,QAAW,OAAQK,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aACxlB,CAAEluB,KAAM,eAAgBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWe,SAAY,QAASnB,QAAW,OAAQgB,UAAa,CAAC,IAAK,IAAK,IAAK,GAAI,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,MACrZ,CAAEvuB,KAAM,kBAAmBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWe,SAAY,QAASnB,QAAW,OAAQgB,UAAa,CAAC,IAAK,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,KAChY,CAAEvuB,KAAM,kBAAmBkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWe,SAAY,QAASnB,QAAW,OAAQgB,UAAa,CAAC,IAAK,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACjY,CAAEvuB,KAAM,mBAAoBkpB,YAAa,GAAID,aAAa,EAAMwF,uBAAwB,EAAG1B,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWe,SAAY,MAAOnB,QAAW,OAAQgB,UAAa,CAAC,GAAI,GAAI,EAAG,IAAK,EAAG,IAAK,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MACta,CAAEvuB,KAAM,mBAAoBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,QAASM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,UAAWe,SAAY,QAASnB,QAAW,OAAQgB,UAAa,CAAC,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC/Y,CAAEvuB,KAAM,YAAakpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,KAAMlG,QAAW,SAAUoiB,WAAc,aAAcE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUJ,QAAW,UAAWK,UAAa,YAAaC,aAAgB,WAAYC,kBAAqB,EAAGM,iBAAoB,UAAWL,UAAa,CAAC,CAAEC,UAAa,KAAMzkB,UAAa,GAAI2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,UAAY,CAAEF,UAAa,KAAMzkB,UAAa,EAAG2kB,SAAY,aACllB,CAAEluB,KAAM,oBAAqBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,kBAAmBoiB,WAAc,YAAaE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUe,SAAY,QAASnB,QAAW,QAASgB,UAAa,CAAC,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,KAC9Z,CAAEvuB,KAAM,kBAAmBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,kBAAmBoiB,WAAc,YAAaE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUe,SAAY,QAASnB,QAAW,QAASgB,UAAa,CAAC,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KACpZ,CAAEvuB,KAAM,iBAAkBkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,kBAAmBoiB,WAAc,YAAaE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUe,SAAY,QAASnB,QAAW,QAASgB,UAAa,CAAC,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,KACxY,CAAEvuB,KAAM,mBAAoBkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,aAAcE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUe,SAAY,QAASnB,QAAW,QAASgB,UAAa,CAAC,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,KAC/X,CAAEvuB,KAAM,iBAAkBkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,aAAcE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUe,SAAY,QAASnB,QAAW,QAASgB,UAAa,CAAC,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,KACxX,CAAEvuB,KAAM,gBAAiBkpB,YAAa,GAAI6D,SAAU,CAAEhc,KAAQ,YAAalG,QAAW,SAAUoiB,WAAc,aAAcE,MAAS,UAAWM,eAAkB,KAAMC,gBAAmB,GAAIC,eAAkB,SAAUe,SAAY,QAASnB,QAAW,QAASgB,UAAa,CAAC,GAAI,GAAI,GAAI,IAAK,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,KAC3Y,CAAEvuB,KAAM,gBAAiBkpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,WAAYlG,QAAW,SAAUoiB,WAAc,OAAQE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,SAAUoB,SAAY,CAAC,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAC3V,CAAE/uB,KAAM,cAAekpB,YAAa,GAAID,aAAa,EAAM8D,SAAU,CAAEhc,KAAQ,WAAYlG,QAAW,SAAUoiB,WAAc,YAAaE,MAAS,UAAWM,eAAkB,IAAMC,gBAAmB,GAAIC,eAAkB,UAAWoB,SAAY,CAAC,IAAK,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,SAKxW,CAAE/uB,KAAM,mBAAoB4oB,QAAkCpe,EAAU,CAC1D,CAAExK,KAAM,gBAAiBipB,aAAa,EAAO8D,SAAU,CAAEhc,KAAQ,cAAeoe,OAAU,EAAGnC,SAAY,CAAE,CAAEjc,KAAQ,YAAasc,SAAY,KAAMC,WAAc,KAAS8B,cAAgB,EAAOC,YAAe,GAAIC,aAAgB,EAAGC,cAAiB,CAAE,CAAExe,KAAQ,YAAasc,SAAY,KAAMC,WAAc,KAASziB,QAAW,CAAE,UAAW,kBAAmB,aAAc,SAAU,WAAaoiB,WAAc,SAAUuC,qBAAuB,EAAMrC,MAAS,WAAYsC,gBAAkB,EAAMC,cAAiB,GAAIC,YAAe,EAAGpC,QAAW,OAAQqC,aAAgB,EAAGC,aAAgB,EAAGC,aAAgB,GAAIC,YAAe,EAAGC,IAAO,EAAGC,SAAY,GAAI/C,cAAiB,EAAG7c,cAAiB,EAAGlK,KAAQ,SAAUinB,OAAU,OAAQe,eAAkulc,UAAa,KACx8D,CAAEhU,KAAM,YAAakpB,YAAa,IAAKD,aAAa,EAAMuE,SAAS,EAAMT,SAAU,CAAEhc,KAAQ,QAASoe,OAAU,EAAGnC,SAAY,GAAIoC,cAAgB,EAAOC,YAAe,EAAGC,aAAgB,EAAGa,cAAiB,GAAItlB,QAAW,CAAE,WAAamlB,IAAO,EAAGC,SAAY,GAAI/C,cAAiB,EAAG7c,aAAgB,EAAGlK,KAAQ,cAAe6N,UAAa,KAC7V,CAAEhU,KAAM,WAAYkpB,YAAa,IAAKD,aAAa,EAAMuE,SAAS,EAAMT,SAAU,CAAEhc,KAAQ,QAASoe,OAAU,EAAGnC,SAAY,GAAIoC,cAAgB,EAAOC,YAAe,EAAGC,aAAgB,EAAGa,cAAiB,GAAItlB,QAAW,CAAE,WAAamlB,IAAO,EAAGC,SAAY,GAAI/C,cAAiB,EAAG7c,aAAgB,EAAGlK,KAAQ,iBAAkB6N,UAAa,KACtV,CAAEhU,KAAM,wBAAyBipB,aAAa,EAAO8D,SAAU,CAAEhc,KAAQ,OAAQoe,OAAU,EAAGnC,SAAY,CAAE,CAAEjc,KAAQ,WAAYsc,SAAY,SAAUC,WAAc,QAAY8B,cAAgB,EAAOC,YAAe,GAAIC,aAAgB,EAAGC,cAAiB,CAAE,CAAExe,KAAQ,WAAYsc,SAAY,SAAUC,WAAc,QAAYziB,QAAW,CAAE,UAAW,kBAAmB,cAAe,UAAW,cAAe,aAAc,OAAQ,UAAYoiB,WAAc,SAAUuC,qBAAuB,EAAON,oBAAuB,EAAG3B,QAAW,UAAWqC,aAAgB,GAAKC,aAAgB,KAAMC,aAAgB,GAAIC,YAAe,EAAGK,gBAAkB,EAAOC,cAAiB,GAAIC,eAAkB,EAAGjC,WAAc,CAAE,CAAEtd,KAAQ,YAAasc,SAAY,MAAOC,WAAc,SAAW,CAAEvc,KAAQ,WAAYsc,SAAY,MAAOC,WAAc,GAAK,CAAEvc,KAAQ,OAAQsc,SAAY,IAAKC,WAAc,SAAW,CAAEvc,KAAQ,YAAasc,SAAY,KAAMC,WAAc,QAAU,CAAEvc,KAAQ,OAAQsc,SAAY,OAAQC,WAAc,SAAW,CAAEvc,KAAQ,YAAasc,SAAY,IAAKC,WAAc,UAAaiD,gBAAmB,CAAE,CAAExf,KAAQ,YAAasc,SAAY,MAAOC,WAAc,SAAW,CAAEvc,KAAQ,WAAYsc,SAAY,MAAOC,WAAc,GAAK,CAAEvc,KAAQ,OAAQsc,SAAY,IAAKC,WAAc,SAAW,CAAEvc,KAAQ,YAAasc,SAAY,KAAMC,WAAc,QAAU,CAAEvc,KAAQ,OAAQsc,SAAY,OAAQC,WAAc,SAAW,CAAEvc,KAAQ,YAAasc,SAAY,IAAKC,WAAc,UAAaqB,iBAAoB,IAAKC,uBAA0B,GAAIoB,IAAO,EAAGC,SAAY,GAAIO,YAAe,GAAIC,eAAkB,KAAOnC,OAAU,EAAGpB,cAAiB,EAAG7c,cAAiB,EAAGlK,KAAQ,YAAainB,OAAU,OAAQpZ,UAAa,KACrrD,CAAEhU,KAAM,eAAgBipB,aAAa,EAAO8D,SAAU,CAAEhc,KAAQ,KAAMoe,OAAU,EAAGnC,SAAY,CAAE,CAAEjc,KAAQ,WAAYsc,SAAY,SAAUC,WAAc,QAAY8B,cAAgB,EAAMC,YAAe,GAAIC,aAAgB,EAAGa,cAAiB,GAAItlB,QAAW,CAAE,UAAW,kBAAmB,cAAgBoiB,WAAc,YAAauC,qBAAuB,EAAOrC,MAAS,kBAAmBsC,gBAAkB,EAAOC,cAAiB,GAAIM,IAAO,EAAGC,SAAY,GAAI/C,cAAiB,EAAG7c,cAAiB,EAAGud,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,GAAIC,UAAa,CAAE,CAAEC,UAAa,KAAMzkB,UAAa,GAAImnB,SAAY,OAAQzpB,WAAc,GAAK,CAAE+mB,UAAa,KAAMzkB,UAAa,GAAImnB,SAAY,OAAQzpB,WAAc,GAAK,CAAE+mB,UAAa,KAAMzkB,UAAa,GAAImnB,SAAY,OAAQzpB,WAAc,GAAK,CAAE+mB,UAAa,KAAMzkB,UAAa,GAAImnB,SAAY,OAAQzpB,WAAc,IAAO+M,UAAa,CAAE,CAAEia,OAAU,aAAcC,SAAY,aAAe,CAAED,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,QAAS5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,YAAa5tB,MAAS,MACpqC,CAAEN,KAAM,eAAgBipB,aAAa,EAAO8D,SAAU,CAAEhc,KAAQ,KAAMoe,OAAU,EAAGnC,SAAY,CAAE,CAAEjc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,GAAK,CAAEvc,KAAQ,YAAasc,SAAY,MAAOC,WAAc,GAAK,CAAEvc,KAAQ,OAAQsc,SAAY,IAAMC,WAAc,QAAY8B,cAAgB,EAAOC,YAAe,GAAIC,aAAgB,EAAGC,cAAiB,CAAE,CAAExe,KAAQ,WAAYsc,SAAY,QAASC,WAAc,GAAK,CAAEvc,KAAQ,YAAasc,SAAY,MAAOC,WAAc,GAAK,CAAEvc,KAAQ,OAAQsc,SAAY,IAAMC,WAAc,QAAYziB,QAAW,CAAE,UAAW,kBAAmB,cAAe,UAAYoiB,WAAc,YAAauC,qBAAuB,EAAOY,gBAAkB,EAAMC,cAAiB,EAAGC,eAAkB,EAAGjC,WAAc,CAAE,CAAEtd,KAAQ,WAAYsc,SAAY,QAASC,WAAc,IAAOqD,gBAAmB,CAAE,CAAE5f,KAAQ,WAAYsc,SAAY,QAASC,WAAc,IAAO0C,IAAO,EAAGC,SAAY,GAAI3B,OAAU,EAAGpB,cAAiB,EAAG7c,cAAiB,EAAGud,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAE,CAAEC,UAAa,KAAMzkB,UAAa,GAAImnB,SAAY,OAAQzpB,WAAc,GAAK,CAAE+mB,UAAa,KAAMzkB,UAAa,EAAGmnB,SAAY,OAAQzpB,WAAc,GAAK,CAAE+mB,UAAa,KAAMzkB,UAAa,EAAGmnB,SAAY,OAAQzpB,WAAc,GAAK,CAAE+mB,UAAa,MAAOzkB,UAAa,GAAImnB,SAAY,OAAQzpB,WAAc,IAAO+M,UAAa,CAAE,CAAEia,OAAU,qBAAsBC,SAAY,SAAW,CAAED,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,MACzmD,CAAEN,KAAM,gBAAiBipB,aAAa,EAAO8D,SAAU,CAAEhc,KAAQ,KAAMoe,OAAU,EAAGnC,SAAY,CAAE,CAAEjc,KAAQ,WAAYsc,SAAY,QAASC,WAAc,QAAY8B,cAAgB,EAAMC,YAAe,EAAGC,aAAgB,EAAGa,cAAiB,GAAItlB,QAAW,CAAE,UAAW,kBAAmB,UAAYoiB,WAAc,SAAUuC,qBAAuB,EAAOQ,IAAO,EAAGC,SAAY,GAAI3B,OAAU,EAAGpB,cAAiB,EAAG7c,cAAiB,EAAGud,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAE,CAAEC,UAAa,KAAMzkB,UAAa,GAAImnB,SAAY,OAAQzpB,WAAc,GAAK,CAAE+mB,UAAa,MAAOzkB,UAAa,EAAGmnB,SAAY,OAAQzpB,WAAc,GAAK,CAAE+mB,UAAa,KAAMzkB,UAAa,EAAGmnB,SAAY,OAAQzpB,WAAc,GAAK,CAAE+mB,UAAa,KAAMzkB,UAAa,EAAGmnB,SAAY,OAAQzpB,WAAc,IAAO+M,UAAa,CAAE,CAAEia,OAAU,aAAcC,SAAY,SAAW,CAAED,OAAU,aAAcC,SAAY,gBACp6B,CAAEluB,KAAM,OAAQipB,aAAa,EAAO8D,SAAU,CAAEhc,KAAQ,KAAMoe,OAAU,EAAGnC,SAAY,GAAIoC,cAAgB,EAAOC,YAAe,GAAIC,aAAgB,EAAGC,cAAiB,GAAI1kB,QAAW,CAAE,UAAW,aAAc,UAAYsiB,MAAS,kBAAmBsC,gBAAkB,EAAOC,cAAiB,GAAIM,IAAO,EAAGC,SAAY,GAAI3B,OAAU,GAAIpB,cAAiB,MAAQ7c,cAAiB,EAAGud,UAAa,UAAWC,aAAgB,cAAeC,kBAAqB,EAAGC,UAAa,CAAE,CAAEC,UAAa,KAAMzkB,UAAa,GAAImnB,SAAY,OAAQzpB,WAAc,GAAK,CAAE+mB,UAAa,MAAOzkB,UAAa,GAAImnB,SAAY,OAAQzpB,WAAc,GAAK,CAAE+mB,UAAa,MAAOzkB,UAAa,EAAGmnB,SAAY,OAAQzpB,WAAc,GAAK,CAAE+mB,UAAa,MAAOzkB,UAAa,EAAGmnB,SAAY,OAAQzpB,WAAc,IAAO+M,UAAa,CAAE,CAAEia,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,YAAa5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,YAAa5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,UAAW5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,cAC3mC,CAAEluB,KAAM,eAAgBipB,aAAa,EAAO8D,SAAU,CAAEhc,KAAQ,KAAMoe,OAAU,EAAGnC,SAAY,GAAIniB,QAAW,CAAE,cAAgBsiB,MAAS,kBAAmBD,cAAiB,EAAG7c,cAAiB,EAAGud,UAAa,YAAaC,aAAgB,KAAMC,kBAAqB,GAAIC,UAAa,CAAE,CAAEC,UAAa,KAAMzkB,UAAa,IAAM,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,GAAK,CAAEykB,UAAa,KAAMzkB,UAAa,KAAQyK,UAAa,CAAE,CAAEia,OAAU,oBAAqBC,SAAY,YAAa5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,YAAa5tB,MAAS,GAAK,CAAE2tB,OAAU,oBAAqBC,SAAY,gBACxoB,CAAEluB,KAAM,gBAAiBipB,aAAa,EAAO8D,SAAU,CAAEhc,KAAQ,gBAAiBoe,OAAU,EAAGnC,SAAY,CAAE,CAAEjc,KAAQ,YAAasc,SAAY,OAAQC,WAAc,GAAK,CAAEvc,KAAQ,OAAQsc,SAAY,IAAMC,WAAc,KAASziB,QAAW,CAAE,cAAe,QAAUwjB,WAAc,CAAE,CAAEtd,KAAQ,WAAYsc,SAAY,QAASC,WAAc,SAAYkD,YAAe,GAAIC,eAAkB,GAAKvD,cAAiB,EAAG7c,cAAiB,EAAGke,UAAa,CAAE,GAAI,IAAK,GAAI,GAAI,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,GAAI,GAAI,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,GAAI,EAAG,EAAG,IAAMnB,OAAU,QAASoB,cAAiB,EAAGxa,UAAa,CAAE,CAAEia,OAAU,qBAAsBC,SAAY,YACxpB,CAAEluB,KAAM,oBAAqBipB,aAAa,EAAO8D,SAAU,CAAEhc,KAAQ,cAAeoe,OAAU,EAAGnC,SAAY,CAAE,CAAEjc,KAAQ,WAAYsc,SAAY,IAAMC,WAAc,KAAS8B,cAAgB,EAAMC,YAAe,EAAGC,aAAgB,EAAGa,cAAiB,GAAItlB,QAAW,CAAE,UAAW,SAAU,UAAYmlB,IAAO,EAAGC,SAAY,GAAInB,OAAU,GAAIR,OAAU,GAAIpB,cAAiB,MAAQ7c,cAAiB,EAAGlK,KAAQ,SAAUinB,OAAU,aAAce,eAAkulc,UAAa,KACptD,CAAEhU,KAAM,uBAAwBipB,aAAa,EAAO8D,SAAU,CAAEhc,KAAQ,cAAeoe,OAAU,EAAGnC,SAAY,CAAE,CAAEjc,KAAQ,WAAYsc,SAAY,SAAUC,WAAc,QAAY8B,cAAgB,EAAMC,YAAe,GAAIC,aAAgB,EAAGa,cAAiB,GAAItlB,QAAW,CAAE,UAAW,kBAAmB,UAAW,SAAU,UAAYoiB,WAAc,YAAauC,qBAAuB,EAAOjC,QAAW,UAAWqC,aAAgB,GAAKC,aAAgB,KAAMC,aAAgB,GAAIC,YAAe,EAAGC,IAAO,EAAGC,SAAY,GAAInB,OAAU,GAAIR,OAAU,GAAIpB,cAAiB,EAAG7c,cAAiB,EAAGlK,KAAQ,SAAUinB,OAAU,YAAae,eAAkB,CAAE,EAAK,GAAI,EAAK,GAAI,EAAK,GAAI,EAAK,EAAG,EAAK,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,GAAI,GAAM,GAAI,GAAM,GAAI,IAAO,GAAI,IAAO,GAAI,IAAO,GAAI,IAAO,GAAI,IAAO,GAAI,IAAO,GAAI,IAAO,GAAI,IAAO,GAAI,IAAO,GAAI,IAAO,GAAI,IAAO,GAAI,IAAO,GAAI,IAAO,GAAI,IAAO,GAAI,IAAO,GAAI,IAAO,GAAI,IAAO,GAAI,IAAO,GAAI,IAAO,GAAI,IAAO,GAAI,IAAO,GAAI,GAAM,GAAI,GAAM,GAAI,GAAM,GAAI,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,IAAO,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,GAAI,GAAM,GAAI,GAAM,GAAI,GAAM,GAAI,GAAM,GAAI,GAAM,GAAI,GAAM,GAAI,GAAM,IAAM+B,uBAA0B,CAAE,EAAK,EAAG,EAAK,EAAG,EAAK,EAAG,EAAK,EAAG,EAAK,EAAG,EAAK,EAAG,EAAK,EAAG,EAAK,EAAG,EAAK,EAAG,EAAK,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,EAAG,GAAM,GAAKlc,UAAa,KAC93D,CAAEhU,KAAM,cAAeipB,aAAa,EAAO8D,SAAU,CAAEhc,KAAQ,QAASoe,OAAU,EAAGnC,SAAY,CAAE,CAAEjc,KAAQ,WAAYsc,SAAY,SAAUC,WAAc,QAAU,CAAEvc,KAAQ,YAAasc,SAAY,OAAQC,WAAc,QAAY8B,cAAgB,EAAOC,YAAe,GAAIC,aAAgB,EAAGC,cAAiB,CAAE,CAAExe,KAAQ,WAAYsc,SAAY,SAAUC,WAAc,QAAU,CAAEvc,KAAQ,YAAasc,SAAY,OAAQC,WAAc,QAAYziB,QAAW,CAAE,UAAW,kBAAmB,cAAe,cAAe,SAAU,UAAYoiB,WAAc,WAAYuC,qBAAuB,EAAON,oBAAuB,EAAGkB,gBAAkB,EAAOC,cAAiB,GAAIC,eAAkB,EAAGjC,WAAc,GAAIkC,gBAAmB,GAAII,gBAAmB,CAAE,CAAE5f,KAAQ,WAAYsc,SAAY,QAASC,WAAc,IAAO0C,IAAO,EAAGC,SAAY,GAAInB,OAAU,GAAIR,OAAU,EAAGpB,cAAiB,EAAG7c,cAAiB,EAAGud,UAAa,cAAeC,aAAgB,KAAMC,kBAAqB,EAAGC,UAAa,CAAE,CAAEC,UAAa,KAAMzkB,UAAa,GAAImnB,SAAY,WAAYzpB,WAAc,GAAK,CAAE+mB,UAAa,MAAOzkB,UAAa,GAAImnB,SAAY,WAAYzpB,WAAc,GAAK,CAAE+mB,UAAa,KAAMzkB,UAAa,GAAImnB,SAAY,WAAYzpB,WAAc,GAAK,CAAE+mB,UAAa,KAAMzkB,UAAa,EAAGmnB,SAAY,WAAYzpB,WAAc,GAAK,CAAE+mB,UAAa,KAAMzkB,UAAa,EAAGmnB,SAAY,WAAYzpB,WAAc,GAAK,CAAE+mB,UAAa,KAAMzkB,UAAa,EAAGmnB,SAAY,WAAYzpB,WAAc,IAAO+M,UAAa,KAE3+C,CAAEhU,KAAM,YAAaipB,aAAa,EAAO8D,SAAS,CAAEhc,KAAQ,YAAaoe,OAAU,EAAGnC,SAAY,GAAIniB,QAAW,CAAE,cAAe,UAAW,UAAYwjB,WAAc,CAAE,CAAEtd,KAAQ,WAAYsc,SAAY,MAAOC,WAAc,UAAa0C,IAAO,EAAG1B,OAAU,EAAGpB,cAAiB,MAAQ7c,cAAiB,EAAGke,UAAa,CAAE,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,GAAKnB,OAAU,SAAUpZ,UAAa,CAAE,CAAEia,OAAU,qBAAsBC,SAAY,mBAMxf,CAAIluB,KAAM,yBAA0B4oB,QAAkCpe,EAAU,CAC7E,CAAExK,KAAM,eAAgBipB,aAAa,EAAO8D,SAAW,CAAChc,KAAO,gBAAgBic,SAAW,CAAC,CAACjc,KAAO,WAAWsc,SAAW,QAAQC,WAAa,OAAQ,CAACvc,KAAO,YAAYsc,SAAW,OAAOC,WAAa,OAAQ,CAACvc,KAAO,OAAOsc,SAAW,QAAQC,WAAa,QAAS8B,cAAe,EAAMC,YAAc,GAAGC,aAAe,EAAEC,cAAgB,CAAC,CAACxe,KAAO,WAAWsc,SAAW,QAAQC,WAAa,OAAQ,CAACvc,KAAO,YAAYsc,SAAW,OAAOC,WAAa,OAAQ,CAACvc,KAAO,OAAOsc,SAAW,QAAQC,WAAa,QAASziB,QAAU,CAAC,SAAS,aAAa,aAAa,OAAO,UAAU8kB,aAAe,GAAGd,WAAa,GAAG+B,SAAU,EAAMjC,iBAAmB,IAAIC,uBAAyB,GAAGqB,SAAW,GAAGO,YAAc,GAAGC,eAAiB,EAAEnC,OAAS,GAAGpB,cAAgB,EAAE7c,aAAe,GAAGke,UAAY,CAAC,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAInB,OAAS,UAAUoB,cAAgB,GAAGxa,UAAY,KAC35B,CAAEhU,KAAM,kBAAmBipB,aAAa,EAAO8D,SAAU,CAAChc,KAAO,OAAOic,SAAW,CAAC,CAACjc,KAAO,WAAWsc,SAAW,QAAQC,WAAa,SAAS,CAACvc,KAAO,YAAYsc,SAAW,OAAOC,WAAa,IAAI8B,cAAe,EAAMC,YAAc,GAAGC,aAAe,EAAEC,cAAgB,CAAC,CAACxe,KAAO,WAAWsc,SAAW,QAAQC,WAAa,SAAS,CAACvc,KAAO,YAAYsc,SAAW,OAAOC,WAAa,IAAIziB,QAAU,CAAC,kBAAkB,UAAU,aAAa,aAAa,SAAS,OAAO,UAAUoiB,WAAa,SAASuC,qBAAsB,EAAMjC,QAAU,QAAQqC,aAAe,GAAIC,aAAe,EAAEC,aAAe,GAAGC,YAAc,EAAElB,WAAa,GAAG+B,SAAU,EAAMjC,iBAAmB,IAAIC,uBAAyB,GAAGqB,SAAW,GAAGnB,OAAS,GAAG0B,YAAc,GAAGC,eAAiB,EAAEnC,OAAS,GAAGpB,cAAgB,EAAE7c,aAAe,GAAGlK,KAAO,WAAWinB,OAAS,QAAQyD,6BAA8B,EAAMC,kBAAoB,EAAEC,gBAAkB,GAAGC,iBAAmB,EAAEC,uBAAwB,EAAMC,oBAAsB,EAAEld,UAAY,U,ME1Xn/Bmd,GAAb,WAAAt1B,GACSC,KAASs1B,EAAW,EACpBt1B,KAAAu1B,EAAgC,MAAChO,GACjCvnB,KAAKw1B,EAAW,EAChBx1B,KAAOy1B,EAAW,EAClBz1B,KAAM01B,EAAW,C,CAElB,SAAAC,CAAUlY,GACZzd,KAAK01B,GAAU11B,KAAKs1B,GAAWt1B,KAAK41B,IACxC51B,KAAKy1B,EAAWz1B,KAAKy1B,EAAU,EAAKz1B,KAAKw1B,EACzCx1B,KAAKu1B,EAAQv1B,KAAKy1B,GAAWhY,EAC7Bzd,KAAK01B,G,CAEC,QAAAG,CAASpY,GACXzd,KAAK01B,GAAU11B,KAAKs1B,GAAWt1B,KAAK41B,IACxC51B,KAAKu1B,EAASv1B,KAAKy1B,EAAUz1B,KAAK01B,EAAU11B,KAAKw1B,GAAS/X,EAC1Dzd,KAAK01B,G,CAEC,QAAAI,GACN,GAAI91B,KAAK01B,GAAU,EAAG,MAAM,IAAIvzB,MAAM,4BACtC,MAAMsb,EAAgBzd,KAAKu1B,EAAQv1B,KAAKy1B,GAIxC,OAHAz1B,KAAKu1B,EAAQv1B,KAAKy1B,QAAWlO,EAC7BvnB,KAAKy1B,EAAWz1B,KAAKy1B,EAAU,EAAKz1B,KAAKw1B,EACzCx1B,KAAK01B,IACEjY,C,CAED,OAAAsY,GACN,GAAI/1B,KAAK01B,GAAU,EAAG,MAAM,IAAIvzB,MAAM,4BACtCnC,KAAK01B,IACL,MAAMlxB,EAAiBxE,KAAKy1B,EAAUz1B,KAAK01B,EAAU11B,KAAKw1B,EACpD/X,EAAgBzd,KAAKu1B,EAAQ/wB,GAEnC,OADAxE,KAAKu1B,EAAQ/wB,QAAS+iB,EACf9J,C,CAED,SAAAuY,GACN,GAAIh2B,KAAK01B,GAAU,EAAG,MAAM,IAAIvzB,MAAM,4BACtC,OAAUnC,KAAKu1B,EAAQv1B,KAAKy1B,E,CAEtB,QAAAQ,GACN,GAAIj2B,KAAK01B,GAAU,EAAG,MAAM,IAAIvzB,MAAM,4BACtC,OAAUnC,KAAKu1B,EAASv1B,KAAKy1B,EAAUz1B,KAAK01B,EAAS,EAAK11B,KAAKw1B,E,CAEzD,KAAAU,GACN,OAAOl2B,KAAK01B,C,CAEN,GAAA3xB,CAAIS,EAAeiZ,GACzB,GAAIjZ,EAAQ,GAAKA,GAASxE,KAAK01B,EAAQ,MAAM,IAAIvzB,MAAM,iBACvDnC,KAAKu1B,EAASv1B,KAAKy1B,EAAUjxB,EAASxE,KAAKw1B,GAAS/X,C,CAE9C,GAAA0J,CAAI3iB,GACV,GAAIA,EAAQ,GAAKA,GAASxE,KAAK01B,EAAQ,MAAM,IAAIvzB,MAAM,iBACvD,OAAUnC,KAAKu1B,EAASv1B,KAAKy1B,EAAUjxB,EAASxE,KAAKw1B,E,CAE/C,MAAAW,CAAO3xB,GACb,GAAIA,EAAQ,GAAKA,GAASxE,KAAK01B,EAAQ,MAAM,IAAIvzB,MAAM,iBACvD,GAAIqC,GAAUxE,KAAK01B,GAAU,EAAI,CAChC,KAAOlxB,EAAQ,GACdxE,KAAK+D,IAAIS,EAAOxE,KAAKmnB,IAAI3iB,EAAQ,IACjCA,IAEDxE,KAAK81B,UACL,KAAM,CAEN,IADAtxB,IACOA,EAAQxE,KAAK01B,GACnB11B,KAAK+D,IAAIS,EAAQ,EAAGxE,KAAKmnB,IAAI3iB,IAC7BA,IAEDxE,KAAK+1B,SACL,C,CAEM,CAAAH,GACP,GAAI51B,KAAKs1B,GAAa,WAAY,MAAM,IAAInzB,MAAM,qBAClDnC,KAAKs1B,EAAYt1B,KAAKs1B,GAAa,EACnC,MAAMc,EAAkCp2B,KAAKu1B,EACvC5pB,EAAkC,IAAInJ,MAAMxC,KAAKs1B,GACjDe,EAA6B,EAAdr2B,KAAK01B,EACpBhgB,EAAgC,EAAf1V,KAAKy1B,EAC5B,IAAK,IAAIlrB,EAAI,EAAGA,EAAI8rB,EAAM9rB,IACzBoB,EAAUpB,GAAK6rB,EAAW1gB,EAASnL,EAAKvK,KAAKw1B,GAE9C,IAAK,IAAIjrB,EAAI8rB,EAAM9rB,EAAIvK,KAAKs1B,EAAW/qB,IACtCoB,EAAUpB,QAAKgd,EAEhBvnB,KAAKy1B,EAAU,EACfz1B,KAAKu1B,EAAU5pB,EACf3L,KAAKw1B,EAAQx1B,KAAKs1B,EAAY,C,ECzCzB,MAAMgB,GAAsB,IA7CnC,MAII,WAAAv2B,GAHQC,KAAYu2B,aAAY,GACxBv2B,KAASw2B,UAAO,GAGpBx2B,KAAKu2B,aAAe,GACpBv2B,KAAKw2B,UAAY,E,CAId,KAAAC,CAAMC,EAAmBC,EAAgBC,GAC5C,GAAiCrP,MAA7BvnB,KAAKw2B,UAAUE,GAAnB,CAGA12B,KAAKu2B,aAAa9rB,KAAKisB,GACvB,IAAK,IAAInsB,EAAY,EAAGA,EAAIvK,KAAKw2B,UAAUE,GAAW7zB,OAAQ0H,IAC1DvK,KAAKw2B,UAAUE,GAAWnsB,GAAGosB,EAAUC,GAE3C52B,KAAKu2B,aAAaM,KALjB,C,CAQE,MAAAC,CAAOJ,EAAiBK,GACMxP,MAA7BvnB,KAAKw2B,UAAUE,KACf12B,KAAKw2B,UAAUE,GAAa,IAEhC12B,KAAKw2B,UAAUE,GAAWjsB,KAAKssB,E,CAG5B,QAAAC,CAASN,EAAmBK,GAC/B,GAAiCxP,MAA7BvnB,KAAKw2B,UAAUE,GACf,OAEJ,MAAMO,EAAQj3B,KAAKw2B,UAAUE,GAAWQ,QAAQH,IAClC,GAAVE,GACAj3B,KAAKw2B,UAAUE,GAAWS,OAAOF,EAAO,E,CAGzC,WAAAG,CAAYV,GACkBnP,MAA7BvnB,KAAKw2B,UAAUE,KAGnB12B,KAAKw2B,UAAUE,GAAW,G,SCmJrBW,GAAb,WAAAt3B,GACiBC,KAAAs3B,EAAc,CAAC,GACft3B,KAAAu3B,EAAc,CAAC,GACxBv3B,KAAKw3B,MAAW,C,CAEhB,kBAAAC,CAAmBjG,GAEzBxxB,KAAKu3B,EAAE,GAAK/F,EACZxxB,KAAKw3B,MAAQ,C,CAGP,0BAAAE,CAA2BC,GAKjC,MAAMC,EAAY,EAAM/sB,KAAKgtB,IAA6B,GAAzBF,GAC3BG,EAAa,EAAMF,EACzB53B,KAAKs3B,EAAE,IAAM,EAAMM,GAAKE,EACxB93B,KAAKu3B,EAAE,GAAKv3B,KAAKu3B,EAAE,GAAK,EAAIO,EAC5B93B,KAAKw3B,MAAQ,C,CAGP,yBAAAO,CAA0BJ,GAahC,MAAMC,EAAY,EAAM/sB,KAAKgD,IAA6B,GAAzB8pB,GACjC33B,KAAKs3B,EAAE,GAAKM,EAAI,EAChB53B,KAAKu3B,EAAE,GAAKK,EACZ53B,KAAKu3B,EAAE,GAAK,EASZv3B,KAAKw3B,MAAQ,C,CAGP,2BAAAQ,CAA4BL,GAGlC,MAAMC,EAAY,EAAM/sB,KAAKgtB,IAA6B,GAAzBF,GAC3BG,EAAa,EAAMF,EACzB53B,KAAKs3B,EAAE,IAAM,EAAMM,GAAKE,EACxB93B,KAAKu3B,EAAE,GAAKK,EAAIE,EAChB93B,KAAKu3B,EAAE,IAAMK,EAAIE,EACjB93B,KAAKw3B,MAAQ,C,CAcP,iBAAAS,CAAkBN,EAAgCO,GAQxD,MAAML,EAAchtB,KAAKgtB,IAA6B,GAAzBF,GACvBQ,EAAmBttB,KAAKiB,KAAKosB,GAC7BN,GAAaC,EAAMM,EAAW,IAAMN,EAAMM,EAAW,GAE3Dn4B,KAAKs3B,EAAE,GAAKM,EADO,EAEnB53B,KAAKu3B,EAAE,IAAM,EAAMK,EAAIM,GAAmB,EAAMN,IAAE,EAClD53B,KAAKu3B,EAAE,IAAM,EAAMK,EAAIM,GAAmB,EAAMN,IAAE,EAClD53B,KAAKw3B,MAAQ,C,CAGP,+BAAAY,CAAgCT,GACtC,MAAMC,GAAa/sB,KAAKgD,IAAI8pB,GAA0B,GAAO9sB,KAAK+C,IAAI+pB,GACtE33B,KAAKs3B,EAAE,GAAKM,EACZ53B,KAAKu3B,EAAE,GAAKK,EACZ53B,KAAKu3B,EAAE,GAAK,EACZv3B,KAAKw3B,MAAQ,C,CAeP,8BAAAa,CAA+BC,GAIrC,MAAMV,GAAa,EAAMU,IAAU,EAAMA,GACzCt4B,KAAKs3B,EAAE,GAAKM,EACZ53B,KAAKu3B,EAAE,GAAKK,EACZ53B,KAAKu3B,EAAE,GAAK,EACZv3B,KAAKw3B,MAAQ,C,CAGP,0BAAAe,CAA2BZ,EAAgCa,GAMjE,MAAMC,EAAgB5tB,KAAKgD,IAAI8pB,IAA2B,EAAMa,GAC1D5qB,EAAc/C,KAAK+C,IAAI+pB,GACvBG,EAAa,EAAMW,EACzBz4B,KAAKs3B,EAAE,IAAM,EAAI1pB,EAAMkqB,EACvB93B,KAAKs3B,EAAE,IAAM,EAAImB,GAASX,EAC1B93B,KAAKu3B,EAAE,GAAKv3B,KAAKu3B,EAAE,IAAM,EAAI3pB,IAAQ,EAAIkqB,GACzC93B,KAAKu3B,EAAE,IAAM,EAAI3pB,GAAOkqB,EACxB93B,KAAKw3B,MAAQ,C,CAGP,yBAAAkB,CAA0Bf,EAAgCa,GAOhE,MAAMZ,EAAY,EAAM/sB,KAAKgD,IAAI8pB,EAAyB,GACpD/F,EAA0B,EAAM,GAAO,EAAM4G,GAC7CG,EAAmB/G,EAAkBA,GAAmB,EAAMgG,GACpE53B,KAAKs3B,EAAE,GAAK,EAAIM,GAAKA,EAAI,GAAOA,EAAEe,EAAW,EAC7C34B,KAAKs3B,EAAE,IAAMM,EAAI,IAAQA,EAAIA,EAAEe,EAAW,GAC1C34B,KAAKu3B,EAAE,GAAKK,EAAEA,EACd53B,KAAKu3B,EAAE,GAAK,EACZv3B,KAAKu3B,EAAE,GAAK,EACZv3B,KAAKw3B,MAAQ,C,CAGP,2BAAAoB,CAA4BjB,EAAgCa,GAClE,MAAMC,EAAgB5tB,KAAKgD,IAAI8pB,IAA2B,EAAIa,GACxD5qB,EAAc/C,KAAK+C,IAAI+pB,GACvBG,EAAa,EAAMW,EACzBz4B,KAAKs3B,EAAE,IAAM,EAAI1pB,EAAMkqB,EACvB93B,KAAKs3B,EAAE,IAAM,EAAMmB,GAASX,EAC5B93B,KAAKu3B,EAAE,GAAKv3B,KAAKu3B,EAAE,IAAM,EAAM3pB,IAAQ,EAAIkqB,GAC3C93B,KAAKu3B,EAAE,KAAO,EAAM3pB,GAAOkqB,EAC3B93B,KAAKw3B,MAAQ,C,CAeP,YAAAqB,CAAalB,EAAgCa,EAAwBM,GAC3E,MAAMX,EAAmBttB,KAAKiB,KAAK0sB,GAC7BO,EAAoBD,EAAiBnB,GAA0BQ,GAAY,EAAIA,EAAW,EAAEA,GAE5FM,EAAgB5tB,KAAKgtB,IAAgB,GAAZkB,GACzBjB,EAAa,EAAMW,EAAQN,EACjCn4B,KAAKu3B,EAAE,IAAM,EAAMkB,EAAQN,GAAYL,EACvC93B,KAAKu3B,EAAE,GAAKv3B,KAAKs3B,EAAE,IAAM,EAAMzsB,KAAK+C,IAAI+pB,GAA0BG,EAClE93B,KAAKu3B,EAAE,IAAM,EAAMkB,EAAQN,GAAYL,EACvC93B,KAAKs3B,EAAE,IAAM,EAAMmB,EAAQN,GAAYL,EACvC93B,KAAKw3B,MAAQ,C,QAsCFwB,GAAb,WAAAj5B,GACQC,KAAIi5B,KAAW,EACfj5B,KAAIk5B,KAAW,EACfl5B,KAAKm5B,MAAW,C,CAEhB,OAAAC,CAAQC,EAA4BC,GAC1Ct5B,KAAKu5B,eAAeF,EAAQxuB,KAAK+C,IAAI0rB,GAAmBzuB,KAAKgD,IAAIyrB,G,CAG3D,cAAAC,CAAeF,EAA4BJ,EAAcC,GAC/D,MAAM5B,EAAc+B,EAAO/B,EACrBC,EAAc8B,EAAO9B,EACrBiC,EAAiBP,EACjBQ,GAAkBP,EACxB,IAAIQ,EAAkBnC,EAAE,GAAKA,EAAE,GAAKiC,EAChCG,EAAkBpC,EAAE,GAAKkC,EACzBG,EAAoB,EAAMtC,EAAE,GAAKkC,EACjCK,EAAoBvC,EAAE,GAAKmC,EAC3BK,EAAgBN,EAChBO,EAAgBN,EACpB,IAAK,IAAIlvB,EAAY,EAAGA,GAAK8uB,EAAO7B,MAAOjtB,IAAK,CAC/C,MACMyvB,EAAmBF,EAAQL,EAASM,EAAQP,EAClDM,EAFyBA,EAAQN,EAASO,EAAQN,EAGlDM,EAAQC,EACRN,GAAWnC,EAAEhtB,GAAKuvB,EAClBH,GAAWpC,EAAEhtB,GAAKwvB,EAClBH,GAAatC,EAAE/sB,GAAKuvB,EACpBD,GAAavC,EAAE/sB,GAAKwvB,CACpB,CACD/5B,KAAKm5B,MAAQS,EAAYA,EAAYC,EAAYA,EACjD75B,KAAKi5B,KAAOS,EAAUE,EAAYD,EAAUE,EAC5C75B,KAAKk5B,KAAOS,EAAUC,EAAYF,EAAUG,C,CAGtC,SAAAI,GACN,OAAOpvB,KAAKiB,KAAK9L,KAAKi5B,KAAOj5B,KAAKi5B,KAAOj5B,KAAKk5B,KAAOl5B,KAAKk5B,MAAQl5B,KAAKm5B,K,CAGjE,KAAAe,GACN,OAAOrvB,KAAKsvB,MAAMn6B,KAAKk5B,KAAMl5B,KAAKi5B,K,QAIvBmB,GAAb,WAAAr6B,GACQC,KAAEq6B,GAAW,EACbr6B,KAAEs6B,GAAW,EACbt6B,KAAEuM,GAAW,EACbvM,KAAEwM,GAAW,EACbxM,KAAEyM,GAAW,EACbzM,KAAOu6B,QAAW,EAClBv6B,KAAOw6B,QAAW,EAClBx6B,KAAOy6B,QAAW,EAClBz6B,KAAO06B,QAAW,EAClB16B,KAAO26B,QAAW,EAClB36B,KAAO46B,QAAW,EAClB56B,KAAO66B,QAAW,EAKlB76B,KAAkC86B,oCAAY,C,CAE9C,WAAAC,GACN/6B,KAAK46B,QAAU,EACf56B,KAAK66B,QAAU,C,CAGT,4BAAAG,CAA6BC,EAA2BC,EAAyBC,EAAmBL,GAC1G,GAAmB,GAAfG,EAAMzD,OAA2B,GAAb0D,EAAI1D,MAAY,MAAM,IAAIr1B,MAClDnC,KAAKq6B,GAAKY,EAAM3D,EAAE,GAClBt3B,KAAKs6B,GAAKW,EAAM3D,EAAE,GAClBt3B,KAAKuM,GAAK0uB,EAAM1D,EAAE,GAClBv3B,KAAKwM,GAAKyuB,EAAM1D,EAAE,GAClBv3B,KAAKyM,GAAKwuB,EAAM1D,EAAE,GAClBv3B,KAAKu6B,SAAWW,EAAI5D,EAAE,GAAK2D,EAAM3D,EAAE,IAAM6D,EACzCn7B,KAAKw6B,SAAWU,EAAI5D,EAAE,GAAK2D,EAAM3D,EAAE,IAAM6D,EACrCL,GACH96B,KAAKy6B,QAAU5vB,KAAKoB,IAAIivB,EAAI3D,EAAE,GAAK0D,EAAM1D,EAAE,GAAI4D,GAC/Cn7B,KAAK06B,QAAU7vB,KAAKoB,IAAIivB,EAAI3D,EAAE,GAAK0D,EAAM1D,EAAE,GAAI4D,GAC/Cn7B,KAAK26B,QAAU9vB,KAAKoB,IAAIivB,EAAI3D,EAAE,GAAK0D,EAAM1D,EAAE,GAAI4D,KAE/Cn7B,KAAKy6B,SAAWS,EAAI3D,EAAE,GAAK0D,EAAM1D,EAAE,IAAM4D,EACzCn7B,KAAK06B,SAAWQ,EAAI3D,EAAE,GAAK0D,EAAM1D,EAAE,IAAM4D,EACzCn7B,KAAK26B,SAAWO,EAAI3D,EAAE,GAAK0D,EAAM1D,EAAE,IAAM4D,GAE1Cn7B,KAAK86B,mCAAqCA,C,ECte5C,MAAMM,GAAO,M,SAMGC,GAAMjuB,EAAa0J,EAAawkB,GAE5C,OAAIA,IADJxkB,GAAY,GAEJwkB,GAAOluB,EAAYkuB,EACXluB,EAEL0J,CAEf,CAEA,SAASykB,GAAcnuB,EAAa0J,EAAawkB,GAC7C,GAAIluB,GAAOkuB,GAAOA,GAAOxkB,EAAK,OAAOwkB,EACrC,MAAM,IAAIn5B,MAAM,SAASm5B,mBAAqBluB,MAAQ0J,KAC1D,CAEgB,SAAA0kB,GAAyBxM,EAAWyM,GAChD,IAAI5sB,EAAqB6sB,WAAW1M,GAEpC,OADItN,OAAOia,MAAM9sB,KAASA,EAAS4sB,GAC5B5sB,CACX,CAEgB,SAAA+sB,GAAuB5M,EAAWyM,GAC9C,IAAI5sB,EAAqBgtB,SAAS7M,GAElC,OADItN,OAAOia,MAAM9sB,KAASA,EAAS4sB,GAC5B5sB,CACX,CAEA,SAASitB,GAAkBC,EAAkBnlB,GAEzCmlB,EAAOtxB,KAAKuxB,GAAqBplB,IAAC,GAAgB,IAElDmlB,EAAOtxB,KAAKuxB,GAAqBplB,IAAC,GAAgB,KAElDmlB,EAAOtxB,KAAKuxB,GAAqBplB,IAAC,GAAgB,KAElDmlB,EAAOtxB,KAAKuxB,GAAqBplB,IAAC,GAAgB,KAElDmlB,EAAOtxB,KAAKuxB,GAAqBplB,IAAC,EAAgB,KAElDmlB,EAAOtxB,KAAKuxB,GAAqBplB,IAAC,EAAgB,IACtD,CAIA,SAASqlB,GAAkBC,EAAoBC,GAC3C,IAAIvlB,EAAY,EAahB,OAXAA,GAAKwlB,GAAoBF,EAAWG,WAAWF,OAAa,GAE5DvlB,GAAKwlB,GAAoBF,EAAWG,WAAWF,OAAa,GAE5DvlB,GAAKwlB,GAAoBF,EAAWG,WAAWF,OAAa,GAE5DvlB,GAAKwlB,GAAoBF,EAAWG,WAAWF,OAAa,GAE5DvlB,GAAKwlB,GAAoBF,EAAWG,WAAWF,OAAa,EAE5DvlB,GAAKwlB,GAAoBF,EAAWG,WAAWF,OAAa,EACrDvlB,CACX,CAEA,SAAS0lB,GAAqBP,EAAkBQ,EAAWvN,EAAWwN,EAAWC,EAAWlyB,GACxFwxB,EAAOtxB,KAAKuxB,GAAoBO,IAGhCR,EAAOtxB,KAAKuxB,GAAoBta,OAAQsN,EAAI,KAC5C,IAAI0N,EAAS7xB,KAAKkB,MAAoB,IAAdlB,KAAKC,IAAIkkB,IAC7B2N,EAAgB9xB,KAAK+b,MAAM8V,EAAS,IACxCX,EAAOtxB,KAAKuxB,GAAoBU,EAAS,IAAKV,GAAoBW,EAAgB,IAAKX,GAAoBnxB,KAAK+b,MAAM+V,EAAgB,MAEtIZ,EAAOtxB,KAAKuxB,GAAoBta,OAAQ8a,EAAI,KAC5C,IAAII,EAAS/xB,KAAKkB,MAAoB,IAAdlB,KAAKC,IAAI0xB,IAC7BK,EAAgBhyB,KAAK+b,MAAMgW,EAAS,IACxCb,EAAOtxB,KAAKuxB,GAAoBY,EAAS,IAAKZ,GAAoBa,EAAgB,IAAKb,GAAoBnxB,KAAK+b,MAAMiW,EAAgB,MAEtId,EAAOtxB,KAAKuxB,GAAoBta,OAAQ+a,EAAI,KAC5C,IAAIK,EAASjyB,KAAKkB,MAAoB,IAAdlB,KAAKC,IAAI2xB,IACjCV,EAAOtxB,KAAKuxB,GAAoBc,EAAS,IAAKd,GAAoBnxB,KAAK+b,MAAMkW,EAAS,MAEtFf,EAAOtxB,KAAKuxB,GAAoBta,OAAQnX,EAAI,KAC5C,IAAIwyB,EAASlyB,KAAKkB,MAAoB,IAAdlB,KAAKC,IAAIP,IACjCwxB,EAAOtxB,KAAKuxB,GAAoBe,EAAS,IAAKf,GAAoBnxB,KAAK+b,MAAMmW,EAAS,KAC1F,CAEA,SAASC,GAA+BC,GACpC,IAAI9pB,EAAckoB,GAAM,EAAG/5B,EAAO6O,KAAKtN,OAAQo6B,GAC3CC,EAAiB,EAoBrB,OAjBoB,KAAhBD,GAEA9pB,EAAM,EACN+pB,EAAS,GACc,KAAhBD,GAEP9pB,EAAM,EACN+pB,GAAU,GACa,KAAhBD,GAEP9pB,EAAM,EACN+pB,GAAU,GACa,KAAhBD,IAEP9pB,EAAM,EACN+pB,GAAU,GAEP,CAAC/pB,EAAK+pB,EACjB,CAsIA,MAAMlB,GAA6C,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACjxe,MAAMe,GAIF,WAAAp9B,CAAYq9B,EAAgB74B,EAAoBqqB,GAHxC5uB,KAAKq9B,EAAa,GAClBr9B,KAAUs9B,EAAW,EAGzB,IAAK,IAAI/yB,EAAYhG,EAAYgG,EAAIqkB,EAAWrkB,IAAK,CACjD,MAAMqE,EAAgBwtB,GAAoBgB,EAAOf,WAAW9xB,IAC5DvK,KAAKq9B,EAAM5yB,KAAMmE,GAAS,EAAK,GAC/B5O,KAAKq9B,EAAM5yB,KAAMmE,GAAS,EAAK,GAC/B5O,KAAKq9B,EAAM5yB,KAAMmE,GAAS,EAAK,GAC/B5O,KAAKq9B,EAAM5yB,KAAMmE,GAAS,EAAK,GAC/B5O,KAAKq9B,EAAM5yB,KAAMmE,GAAS,EAAK,GAC/B5O,KAAKq9B,EAAM5yB,KAAa,EAARmE,EACnB,C,CAGE,IAAA2uB,CAAKnN,GACR,IAAIvhB,EAAiB,EACrB,KAAOuhB,EAAW,GACdvhB,IAAmB,EACnBA,GAAU7O,KAAKq9B,EAAMr9B,KAAKs9B,KAC1BlN,IAEJ,OAAOvhB,C,CAGJ,YAAA2uB,CAAaC,EAAkBC,GAClC,IAAI7uB,EAAiB4uB,EACjBE,EAAkBD,EACtB,KAAO19B,KAAKq9B,EAAMr9B,KAAKs9B,MACnBzuB,GAAU,GAAK8uB,EACfA,IAEJ,KAAOA,EAAU,GACbA,IACI39B,KAAKq9B,EAAMr9B,KAAKs9B,OAChBzuB,GAAU,GAAK8uB,GAGvB,OAAO9uB,C,CAGJ,gBAAA+uB,GACH,OAAO59B,KAAKw9B,aAAa,EAAG,E,CAGzB,sBAAAK,GACH,OAAO79B,KAAKw9B,aAAa,EAAG,E,CAGzB,YAAAM,GACH,OAAO99B,KAAKw9B,aAAa,EAAG,E,CAGzB,iBAAAO,GACH,OAAI/9B,KAAKu9B,KAAK,IACFv9B,KAAKw9B,aAAa,EAAG,GAEtBx9B,KAAKw9B,aAAa,EAAG,E,EAKxC,MAAMQ,GAAN,WAAAj+B,GACYC,KAAMi+B,EAAW,EACjBj+B,KAAKq9B,EAAa,E,CAEnB,KAAArc,GACHhhB,KAAKi+B,EAAS,C,CAGX,KAAAC,CAAM9N,EAAkBxhB,GAE3B,IADAwhB,IACOA,GAAY,GACfpwB,KAAKq9B,EAAMr9B,KAAKi+B,KAAarvB,IAAUwhB,EAAY,EACnDA,G,CAID,aAAA+N,CAAcV,EAAkBC,EAAiB9uB,GACpD,GAAIA,EAAQ6uB,EAAU,MAAM,IAAIt7B,MAAM,uBACtCyM,GAAS6uB,EACT,IAAIE,EAAkBD,EACtB,KAAO9uB,GAAU,GAAK+uB,GAClB39B,KAAKq9B,EAAMr9B,KAAKi+B,KAAY,EAC5BrvB,GAAS,GAAK+uB,EACdA,IAGJ,IADA39B,KAAKq9B,EAAMr9B,KAAKi+B,KAAY,EACrBN,EAAU,GACbA,IACA39B,KAAKq9B,EAAMr9B,KAAKi+B,KAAarvB,IAAU+uB,EAAW,C,CAInD,iBAAAS,CAAkBxvB,GACrB5O,KAAKm+B,cAAc,EAAG,EAAGvvB,E,CAGtB,aAAAyvB,CAAczvB,GACjB5O,KAAKm+B,cAAc,EAAG,EAAGvvB,E,CAGtB,kBAAA0vB,CAAmB1vB,GAClBA,EAAQ,GACR5O,KAAKk+B,MAAM,EAAG,GACdl+B,KAAKm+B,cAAc,EAAG,GAAIvvB,KAE1B5O,KAAKk+B,MAAM,EAAG,GACdl+B,KAAKm+B,cAAc,EAAG,EAAGvvB,G,CAI1B,MAAA8H,CAAO6nB,GACV,IAAK,IAAIh0B,EAAY,EAAGA,EAAIg0B,EAAMN,EAAQ1zB,IACtCvK,KAAKq9B,EAAMr9B,KAAKi+B,KAAYM,EAAMlB,EAAM9yB,E,CAIzC,YAAAi0B,CAAazC,GAEhB,IAAK,IAAIxxB,EAAY,EAAGA,EAAIvK,KAAKi+B,EAAQ1zB,GAAK,EAAG,CAC7C,MAAMqE,EAAiB5O,KAAKq9B,EAAM9yB,IAAM,EAAMvK,KAAKq9B,EAAM9yB,EAAI,IAAM,EAAMvK,KAAKq9B,EAAM9yB,EAAI,IAAM,EAAMvK,KAAKq9B,EAAM9yB,EAAI,IAAM,EAAMvK,KAAKq9B,EAAM9yB,EAAI,IAAM,EAAKvK,KAAKq9B,EAAM9yB,EAAI,GACxKwxB,EAAOtxB,KAAKuxB,GAAoBptB,GACnC,CACD,OAAOmtB,C,CAGJ,YAAA0C,GACH,OAAO5zB,KAAKyS,KAAKtd,KAAKi+B,EAAS,E,WAUvBS,GAAY9L,EAAkB+L,EAActI,GACxD,MAAO,CAAEzD,SAAUA,EAAU+L,KAAMA,EAAMtI,KAAMA,EACnD,C,MAEauI,GAOT,WAAA7+B,CAAmB8+B,EAAe5D,EAAeC,EAAa7E,EAAcyI,GAAmB,GAC3F9+B,KAAK++B,QAAU,CAACF,GAChB7+B,KAAKg/B,KAAO,CAACN,GAAY,EAAG,EAAGrI,GAAOqI,GAAY,EAAGxD,EAAMD,EAAO6D,EAAU,EAAIzI,IAChFr2B,KAAKi7B,MAAQA,EACbj7B,KAAKk7B,IAAMA,EACXl7B,KAAKi/B,sBAAuB,C,CAGzB,gBAAAC,GACH,IAAIC,EAAsC,EACtCC,EAAuB,EAC3B,IAAK,IAAIC,EAAmB,EAAGA,EAAWr/B,KAAKg/B,KAAKn8B,OAAQw8B,IAAY,CACpE,MAAMC,EAAgBt/B,KAAKg/B,KAAKK,EAAW,GACrCE,EAAgBv/B,KAAKg/B,KAAKK,GAChC,GAAIC,EAAK1M,UAAY2M,EAAK3M,SAAU,CAChC,MAAM4M,EAAmBD,EAAKZ,KAAOW,EAAKX,KACtCQ,EAA8BK,IAC9BL,EAA8BK,EAC9BJ,EAAeE,EAAK1M,SAE3B,CACJ,CACD,GAAmC,GAA/BuM,EAAkC,CAClC,IAAIM,EAAsB,EAC1B,IAAK,IAAIJ,EAAmB,EAAGA,EAAWr/B,KAAKg/B,KAAKn8B,OAAQw8B,IAAY,CACpE,MAAMK,EAAe1/B,KAAKg/B,KAAKK,GAC3BI,EAAcC,EAAIrJ,OAClBoJ,EAAcC,EAAIrJ,KAClB+I,EAAeM,EAAI9M,SAE1B,CACJ,CACD,OAAOwM,C,CAGJ,KAAAO,GACH,MAAMC,EAAgB,IAAIhB,IAAM,EAAG5+B,KAAKi7B,MAAOj7B,KAAKk7B,IAAK,GACzD0E,EAAQb,QAAU/+B,KAAK++B,QAAQroB,SAC/BkpB,EAAQZ,KAAO,GACf,IAAK,MAAMU,KAAO1/B,KAAKg/B,KACnBY,EAAQZ,KAAKv0B,KAAKi0B,GAAYgB,EAAI9M,SAAU8M,EAAIf,KAAMe,EAAIrJ,OAG9D,OADAuJ,EAAQX,qBAAuBj/B,KAAKi/B,qBAC7BW,C,CAGJ,cAAAC,CAAeC,GAClB,IAAIC,EACJ,IAAKA,EAAc,EAAGA,EAAc//B,KAAKg/B,KAAKn8B,OAAS,KAC/C7C,KAAKg/B,KAAKe,GAAapB,KAAO3+B,KAAKi7B,MAAQ6E,GADOC,KAG1D,OAAOA,C,QAIFC,GAAb,WAAAjgC,GACWC,KAAKigC,MAAW,GACPjgC,KAAAkgC,YAAwB,CAAC,E,CAElC,UAAAC,GACH,MAAMtxB,EAAiB,GACvB,IAAK,MAAMuxB,KAAQpgC,KAAKigC,MACpBpxB,EAAOpE,KAAK21B,EAAKT,SAErB,OAAO9wB,C,CAGJ,KAAAwxB,GACHrgC,KAAKigC,MAAMp9B,OAAS,EACpB7C,KAAKkgC,YAAY,GAAK,EACtBlgC,KAAKkgC,YAAYr9B,OAAS,C,CAGvB,YAAAy9B,CAAaxZ,EAAY5F,EAAkBqf,GAC9C,MAAMC,EAAsB,GAC5B,IAAK,MAAMJ,KAAQpgC,KAAKigC,MAAO,CAE3B,IAAIzS,EAAyBtM,EAAQgf,YAAYlgC,KAAKkgC,YAAY,IAC9DO,EAAc51B,KAAKiM,IAAI,EAAGxV,EAAO4Y,SAAWkmB,EAAKrB,QAAQ,GAAK,GAC9D2B,EAAoB5Z,EAAK6Z,uBAAuBJ,EAAc/S,EAAW3Q,WAAW4jB,GAAMjT,EAAWoT,eAAeH,IACxH,MAAMI,EAAuB,GAC7B,IAAK,MAAMnB,KAAOU,EAAKpB,KAAM,CACzB,IAAI8B,EAAiBP,EAAe11B,KAAKkB,MAAM2zB,EAAIrJ,MAAQxrB,KAAKkB,MAAiB,IAAX2zB,EAAIrJ,KAAaqK,GACvFG,EAAWp2B,KAAK,CACZs2B,MAASrB,EAAIf,KAAOyB,EAAKnF,OAAS35B,EAAOyQ,QAAQ+U,EAAKka,QAAQhvB,aAAe1Q,EAAOsQ,aACpFqvB,UAAavB,EAAI9M,SACjBS,OAAUyN,EACVI,OAAUX,GAEjB,CAED,MAAMY,EAAkB,CACpBpC,QAAWqB,EAAKrB,QAChBqC,OAAUP,GAEI,GAAdT,EAAKnF,QACLkG,EAAiC,qBAAIf,EAAKnB,sBAE9CuB,EAAU/1B,KAAK02B,EAClB,CAED,MAAME,EAAqB,CAAEpB,MAASO,GAItC,OAHI1Z,EAAKwa,qBACLD,EAA2B,YAAIrhC,KAAKkgC,YAAY5lB,KAAI/P,GAAKA,EAAI,KAE1D82B,C,CAGJ,cAAAE,CAAeF,EAAoBva,EAAY5F,EAAkBsgB,EAA8BC,EAAyBlB,GAC3H,GAAIzZ,EAAKwa,mBACL,GAAI9+B,MAAM2b,QAAQkjB,EAA2B,aAAI,CAC7C,MAAMnB,EAAqBmB,EAA2B,YAChDK,EAA0BrG,GAAM/5B,EAAOmQ,mBAAoBqV,EAAK6a,sCAAsCzgB,GAAW,EAAGgf,EAAYr9B,QACtI,IAAK,IAAIytB,EAAY,EAAGA,EAAIoR,EAAiBpR,IACzCtwB,KAAKkgC,YAAY5P,GAAK+K,GAAM,EAAGna,EAAQgf,YAAYr9B,QAA0B,EAAjBq9B,EAAY5P,IAAU,GAEtFtwB,KAAKkgC,YAAYr9B,OAAS6+B,CAC7B,MACG1hC,KAAKkgC,YAAY,GAAK7E,GAAM,EAAGna,EAAQgf,YAAYr9B,QAAuC,EAA9Bw+B,EAA0B,YAAS,GAC/FrhC,KAAKkgC,YAAYr9B,OAAS,EAIlC,GAAIw+B,EAAqB,OAAKA,EAAqB,MAAEx+B,OAAS,EAAG,CAC7D,MAAM++B,EAAuB/2B,KAAKuC,IAAI0Z,EAAK+a,YAAcvgC,EAAOsQ,cAAgB2uB,EAAej/B,EAAO4Y,SAAW,GAAImnB,EAAqB,MAAEx+B,SAAW,GAIvJ,IAAK,IAAIytB,EAAY,EAAGA,EAAI+Q,EAAqB,MAAEx+B,UAC3CytB,GAAKsR,GAD8CtR,IAAK,CAG5D,MAAM6Q,EAAaE,EAAqB,MAAE/Q,GAC1C,KAAK6Q,GAAeA,EAAoB,SAAOA,EAAoB,QAAEt+B,QAAU,GAAOs+B,EAAmB,QAAOA,EAAmB,OAAEt+B,QAAU,GAC3I,SAGJ,MAAMu9B,EAAa,IAAIxB,GAAK,EAAG,EAAG,EAAG,GACrCwB,EAAKrB,QAAU,GACfqB,EAAKpB,KAAO,GAEZ,IAAK,IAAI8C,EAAY,EAAGA,EAAIX,EAAoB,QAAEt+B,OAAQi/B,IAAK,CAC3D,MAAMjD,EAA2C,EAA3BsC,EAAoB,QAAEW,GAC5C,IAAoC,GAAhC1B,EAAKrB,QAAQ7H,QAAQ2H,KACzBuB,EAAKrB,QAAQt0B,KAAKo0B,GACduB,EAAKrB,QAAQl8B,QAAUvB,EAAO8V,cAAc,KACnD,CACD,GAAIgpB,EAAKrB,QAAQl8B,OAAS,EAAG,SAG7B,IAAIk/B,EAAwB,EAC5B,IAAK,IAAID,EAAY,EAAGA,EAAIX,EAAmB,OAAEt+B,OAAQi/B,IAAK,CAC1D,MAAME,EAAmBb,EAAmB,OAAEW,GAC9C,GAAmBva,MAAfya,GAAmDza,MAAvBya,EAAkB,KAAgB,SAClE,MAAMpP,EAAgDrL,MAA5Bya,EAAuB,UAAkB,EAAgC,EAA3BA,EAAuB,UAEzFrD,EAAe9zB,KAAKkB,OAAQi2B,EAAkB,KAAK1gC,EAAOsQ,aAAe4vB,GAE/E,IAQInL,EARA7I,EAAyBtM,EAAQgf,YAAYlgC,KAAKkgC,YAAY,IAC9DO,EAAc51B,KAAKiM,IAAI,EAAGxV,EAAO4Y,SAAWkmB,EAAKrB,QAAQ,GAAK,GAG9D2B,EAAoB5Z,EAAK6Z,uBAAuBJ,EAAc/S,EAAW3Q,WAAW4jB,GAAMjT,EAAWoT,eAAeH,IAMpHpK,EADyB9O,MAAzBya,EAAoB,OACbtB,EACyBnZ,MAAzBya,EAAoB,OACpBn3B,KAAKiM,IAAI,EAAGjM,KAAKuC,IAAIszB,EAAW71B,KAAKkB,OAA+B,EAAxBi2B,EAAoB,QAAStB,EAAY,QAG3D,EAAxBsB,EAAoB,QAAS,EAAKn3B,KAAKkB,MAA8B,EAAxBi2B,EAAoB,QAASn3B,KAAKiM,IAAI,EAAGjM,KAAKuC,IAAIszB,EAAW71B,KAAKkB,OAA+B,EAAxBi2B,EAAoB,QAAStB,EAAY,OAGxK/B,EAAO7X,EAAK+a,YAAcvgC,EAAOsQ,eACb,GAApBwuB,EAAKpB,KAAKn8B,SAEVu9B,EAAKnF,MAAQ0D,EACboD,EAAgBnP,GAMpBwN,EAAKpB,KAAKv0B,KAAKi0B,GAAY9L,EAAWmP,EAAepD,EAAOyB,EAAKnF,MAAO5E,IAC3E,CACD,GAAI+J,EAAKpB,KAAKn8B,OAAS,EAAG,SAE1Bu9B,EAAKlF,IAAMkF,EAAKpB,KAAKoB,EAAKpB,KAAKn8B,OAAS,GAAG87B,KAAOyB,EAAKnF,MAEvD,MAAM9gB,EAAmBsnB,EAAiBngC,EAAO0Y,UAAY,EAAI1Y,EAAO6Y,SACxE,IAAI8nB,EAAsB9nB,EACtB+nB,EAAuB,EAC3B,IAAK,IAAIJ,EAAY,EAAGA,EAAI1B,EAAKrB,QAAQl8B,OAAQi/B,IAC7C1B,EAAKrB,QAAQ+C,IAAMC,GACf3B,EAAKrB,QAAQ+C,GAAK,GAAK1B,EAAKrB,QAAQ+C,GAAK3nB,KACzCimB,EAAKrB,QAAQ5H,OAAO2K,EAAG,GACvBA,KAEA1B,EAAKrB,QAAQ+C,GAAKG,IAAaA,EAAc7B,EAAKrB,QAAQ+C,IAC1D1B,EAAKrB,QAAQ+C,GAAKI,IAAcA,EAAe9B,EAAKrB,QAAQ+C,IAEpE,KAAI1B,EAAKrB,QAAQl8B,OAAS,GAA1B,CAEA,IAAK,IAAIi/B,EAAY,EAAGA,EAAI1B,EAAKpB,KAAKn8B,OAAQi/B,IAAK,CAC/C,MAAMpC,EAAeU,EAAKpB,KAAK8C,GAC3BpC,EAAI9M,SAAWqP,EAAc,IAAGvC,EAAI9M,UAAYqP,GAChDvC,EAAI9M,SAAWsP,EAAe/nB,IAAUulB,EAAI9M,SAAWzY,EAAW+nB,GAClEJ,GAAK,GACDpC,EAAI9M,UAAYwN,EAAKpB,KAAK8C,EAAI,GAAGlP,UACjC8M,EAAI9M,UAAYwN,EAAKpB,KAAK8C,EAAI,GAAGlP,UACjC8M,EAAIrJ,MAAQ+J,EAAKpB,KAAK8C,EAAI,GAAGzL,MAC7BqJ,EAAIrJ,MAAQ+J,EAAKpB,KAAK8C,EAAI,GAAGzL,OAC7B+J,EAAKpB,KAAK7H,OAAO2K,EAAI,EAAG,GACxBA,IAGX,CAEiB,GAAd1B,EAAKnF,MACLmF,EAAKnB,sBAA+D,IAAvCkC,EAAiC,qBAE9Df,EAAKnB,sBAAuB,EAGhCj/B,KAAKigC,MAAMx1B,KAAK21B,EAvBa,CAwBhC,CACJ,C,QAII+B,GAMT,WAAApiC,CAAYyE,GALLxE,KAASkyB,UAAW,EACpBlyB,KAASyN,UAAW,EACpBzN,KAAQ40B,SAAW,EACnB50B,KAAUmL,WAAW,GAGxBnL,KAAKqgC,MAAM77B,E,CAGR,KAAA67B,CAAM77B,GACTxE,KAAKkyB,UAAY,EACjBlyB,KAAKyN,UAAajJ,GAAS,EAAKlD,EAAOuW,qBAAuB,EAC9D7X,KAAK40B,SAAW,EAChB50B,KAAKmL,WAAa,C,CAGf,IAAAi3B,CAAK7D,GACRv+B,KAAKkyB,UAAYqM,EAAMrM,UACvBlyB,KAAKyN,UAAY8wB,EAAM9wB,UACvBzN,KAAK40B,SAAW2J,EAAM3J,SACtB50B,KAAKmL,WAAaozB,EAAMpzB,U,QAInBk3B,GAMT,WAAAtiC,GALOC,KAAIkE,KAAW,GACflE,KAAYwX,aAAW,EACvBxX,KAAA0X,YAA0B,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAC/C1X,KAAiByX,kBAAa,GAGjCzX,KAAKsiC,WAAW,E,CAGb,GAAAv+B,CAAIw+B,EAAkBC,GACzBxiC,KAAKqgC,QACLrgC,KAAKwX,aAAe+qB,EACpB,IAAK,IAAIh4B,EAAI,EAAGA,EAAIvK,KAAK0X,YAAY7U,OAAQ0H,IAAK,CAC9CvK,KAAK0X,YAAYnN,GAAKi4B,EAAWj4B,GAC7BA,EAAIg4B,IACJviC,KAAKyX,kBAAkBlN,GAAKA,EAAE,GAElCvK,KAAKkE,MAASqG,EAAE,EAChB,IAAK,IAAI+lB,EAAI,EAAGA,EAAIkS,EAAWj4B,GAAG1H,OAAOytB,IACrCtwB,KAAKkE,MAAQs+B,EAAWj4B,GAAG+lB,GACvBkS,EAAWj4B,GAAG+lB,GAAKiS,EAAS,IAC5BviC,KAAKyX,kBAAkB+qB,EAAWj4B,GAAG+lB,GAAK,GAAK/lB,EAAI,GAEvDvK,KAAKkE,MAAQ,IAGblE,KAAKkE,MADLqG,EAAIg4B,EACS,IAEA,GAEpB,C,CAGE,KAAAlC,GACHrgC,KAAKkE,KAAO,GACZlE,KAAKwX,aAAe,EACpBxX,KAAK0X,YAAc,CAAC,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,IACrD1X,KAAKyX,kBAAoB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,E,CAGtC,IAAA2qB,CAAK7D,GACRv+B,KAAKkE,KAAOq6B,EAAMr6B,KAClBlE,KAAKwX,aAAe+mB,EAAM/mB,aAC1BxX,KAAK0X,YAAc6mB,EAAM7mB,YACzB1X,KAAKyX,kBAAoB8mB,EAAM9mB,iB,CAG5B,UAAA6qB,CAAW/D,GACdv+B,KAAKqgC,QACL,IAAInT,EAAS5rB,EAAOqW,cAAc4mB,GAClCv+B,KAAKkE,KAAOgpB,EAAOhpB,KACnBlE,KAAKwX,aAAe0V,EAAO1V,aAC3B,IAAK,IAAIjN,EAAI,EAAGA,EAAI2iB,EAAOxV,YAAY7U,OAAQ0H,IAC3CvK,KAAK0X,YAAYnN,GAAK/H,MAAMC,KAAKyqB,EAAOxV,YAAYnN,IACpDvK,KAAKyX,kBAAkBlN,GAAK2iB,EAAOzV,kBAAkBlN,E,QAKpDk4B,GAIT,WAAA1iC,GAHOC,KAAIkE,KAAW,GACflE,KAAAqY,QAAsB,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,IAG9CrY,KAAKsiC,WAAW,E,CAGb,GAAAv+B,CAAI2+B,GACP1iC,KAAKqgC,QACL,IAAK,IAAI91B,EAAI,EAAGA,EAAIvK,KAAKqY,QAAQxV,OAAQ0H,IAAK,CAC1CvK,KAAKqY,QAAQ9N,GAAKm4B,EAAUn4B,GAC5B,IAAK,IAAI+lB,EAAI,EAAGA,EAAIoS,EAAUn4B,GAAG1H,OAAQytB,IACrCtwB,KAAKkE,MAAQw+B,EAAUn4B,GAAG+lB,GAC1BtwB,KAAKkE,MAAQ,IAEjBlE,KAAKkE,MAAQ,GAChB,C,CAGE,KAAAm8B,GACHrgC,KAAKqgC,MACLrgC,KAAKkE,KAAO,GACZlE,KAAKqY,QAAU,CAAC,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,G,CAGlC,IAAA+pB,CAAK7D,GACRv+B,KAAKkE,KAAOq6B,EAAMr6B,KAClBlE,KAAKqY,QAAUkmB,EAAMlmB,O,CAGlB,UAAAiqB,CAAW/D,GACdv+B,KAAKqgC,QACL,IAAInT,EAAS5rB,EAAOgX,aAAaimB,GACjC,IAAK,IAAIh0B,EAAI,EAAGA,EAAI2iB,EAAO7U,QAAQxV,OAAQ0H,IAAK,CAC5CvK,KAAKqY,QAAQ9N,GAAK/H,MAAMC,KAAKyqB,EAAO7U,QAAQ9N,IAC5C,IAAK,IAAI+lB,EAAI,EAAGA,EAAIpD,EAAO7U,QAAQ9N,GAAG1H,OAAQytB,IAC1CtwB,KAAKkE,MAAQgpB,EAAO7U,QAAQ9N,GAAG+lB,GAC/BtwB,KAAKkE,MAAQ,IAEjBlE,KAAKkE,MAAQ,GAChB,C,QAIIy+B,GAIT,WAAA5iC,CAAY0hC,GAHLzhC,KAAQizB,SAAa,GACrBjzB,KAAI4iC,MAAY,EAGnB5iC,KAAKqgC,MAAMoB,E,CAGR,KAAApB,CAAMoB,GACT,IAAK,IAAIl3B,EAAY,EAAGA,EAAIjJ,EAAOmX,sBAAuBlO,IACtD,GAAIk3B,EACAzhC,KAAKizB,SAAS1oB,GAAKM,KAAKkB,MAAMzK,EAAOsX,aAAe,EAAI/N,KAAKiB,KAAK,EAAIvB,EAAI,SACvE,CACH,MAAMs4B,EAA2B,GAALt4B,GAAe,GAALA,GAAe,IAALA,GAAgB,IAALA,GAAgB,IAALA,GAAgB,IAALA,GAAgB,IAALA,GAAgB,IAALA,GAAWA,GAAK,GACvHvK,KAAKizB,SAAS1oB,GAAKs4B,EAAah4B,KAAKiM,IAAI,EAAGjM,KAAKkB,MAAMzK,EAAOsX,aAAe,EAAIrO,EAAI,MAAQ,CAChG,CAELvK,KAAK8iC,qB,CAGF,mBAAAA,GACH,MAAMC,EAAmBC,GAAMC,kBAAkB3hC,EAAOsX,YAAc,GAAK,EAC3E,IAAIgqB,EAAe,EACnB,IAAK,MAAMM,KAASljC,KAAKizB,SAAU2P,EAASA,EAAOG,EAAYG,IAAW,EAC1EljC,KAAK4iC,KAAOA,C,EAIpB,MAAMO,GAAN,WAAApjC,GACWC,KAAIqK,KAAwB,KAC3BrK,KAAKojC,GAAY,C,CAElB,aAAAC,CAAcpS,EAAwBqS,GACzC,GAAItjC,KAAKojC,GAASnS,EAAS2R,KAAM,OAAO5iC,KAAKqK,KAC7CrK,KAAKojC,EAAQnS,EAAS2R,KAEtB,MAAMh2B,EAAqBtL,EAAOiX,oBACjB,MAAbvY,KAAKqK,MAAgBrK,KAAKqK,KAAKxH,QAAU+J,EAAa,IACtD5M,KAAKqK,KAAO,IAAIK,aAAakC,EAAa,IAE9C,MAAMvC,EAAqBrK,KAAKqK,KAEhC,IAAK,IAAIE,EAAY,EAAGA,EAAIqC,EAAYrC,IACpCF,EAAKE,GAAK,EAGd,MAGMg5B,EAAuB,CAAC,EAAG,EAAI,EAAG14B,KAAK2C,KAAK,EAAI,GAAI,EAAI,EAAG3C,KAAK2C,KAAK,KAAQ,EAAI,EAAG,EAAI,GAC9F,SAASg2B,EAAqBN,GAC1B,OAAOI,EAAez4B,KAAK+b,MAAMsc,EAAQ5hC,EAAOoX,gCAAkC6qB,GAAYL,EAAQ5hC,EAAOoX,gCAAkCpX,EAAOoX,+B,CAG1J,IAAIpL,EAA4B,EAChC,IAAK,IAAI/C,EAAY,EAAGA,EAAIjJ,EAAOmX,sBAAwB,EAAGlO,IAAK,CAC/D,MAAMk5B,EAAkBl5B,GAAK,EAAK,EAAI0mB,EAASgC,SAAS1oB,EAAI,GACtDm5B,EAAkBn5B,GAAKjJ,EAAOmX,sBAAyBwY,EAASgC,SAAS3xB,EAAOmX,sBAAwB,GAAKwY,EAASgC,SAAS1oB,GAC/Ho5B,EAAkBH,EAAqBj5B,EAAI,GACjD,IAAIq5B,EAAkBJ,EAAqBj5B,GACvCA,GAAKjJ,EAAOmX,wBAAuBmrB,EAdb,GACD,KAayCA,EAdxC,KAeZ,GAAVH,GAAyB,GAAVC,IAEnBp2B,GAAqB,IAAOzB,EAAkBxB,EAAMuC,EAAY+2B,EAASC,EAASH,EAASniC,EAAOsX,YAAa8qB,EAASpiC,EAAOsX,aAAc,IAChJ,CAWD,OAVIqY,EAASgC,SAAS3xB,EAAOmX,sBAAwB,GAAK,IACtDnL,GAAqB,IAAOzB,EAAkBxB,EAAMuC,EApB1B,GACD,KAmBwD42B,EAAqBliC,EAAOmX,uBApBnF,OAoB0JwY,EAASgC,SAAS3xB,EAAOmX,sBAAwB,GAAKnX,EAAOsX,YAAa,GAAI,KAGtQtN,GAA4BjB,EAAMuC,GAClCrB,EAAsBlB,EAAM,GAAOQ,KAAKiB,KAAKc,GAAc/B,KAAKoB,IAAIqB,EAAmB,OAGvFjD,EAAKuC,GAAcvC,EAAK,GAEjBA,C,QAIFw5B,GAIT,WAAA9jC,GAHOC,KAASyyB,UAAa,GACtBzyB,KAAI4iC,MAAY,EAGnB5iC,KAAKqgC,O,CAGF,KAAAA,GACH,IAAK,IAAI91B,EAAY,EAAGA,EAAIjJ,EAAOuX,uBAAwBtO,IACvDvK,KAAKyyB,UAAUloB,GAAK,EAExBvK,KAAKyyB,UAAU,GAAKnxB,EAAO2X,aAC3BjZ,KAAKyyB,UAAU,GAAKnxB,EAAO2X,aAC3BjZ,KAAKyyB,UAAU,GAAKnxB,EAAO2X,aAC3BjZ,KAAK8iC,qB,CAGF,mBAAAA,GACH,MAAMC,EAAmBC,GAAMC,kBAAkB3hC,EAAO2X,aAAe,GAAK,EAC5E,IAAI2pB,EAAe,EACnB,IAAK,MAAMM,KAASljC,KAAKyyB,UAAWmQ,EAASA,EAAOG,EAAYG,IAAW,EAC3EljC,KAAK4iC,KAAOA,C,EAIpB,MAAMkB,GAAN,WAAA/jC,GACWC,KAAIqK,KAAwB,KAC3BrK,KAAKojC,GAAY,C,CAGlB,aAAAC,CAAcpS,EAAyB8S,GAC1C,GAAI/jC,KAAKojC,GAASnS,EAAS2R,MAAQ5iC,KAAKgkC,GAAqBD,EAAgB,OAAO/jC,KAAKqK,KACzFrK,KAAKojC,EAAQnS,EAAS2R,KACtB5iC,KAAKgkC,EAAoBD,EAEzB,MAAMjrB,EAA0E,GAA7CirB,EAAiDziC,EAAOyX,iCAAmCzX,EAAOwX,kBAE/HlM,EAAqBtL,EAAO4X,oBAC5B7L,EAA0BhC,EAAY,EAAG,KAAM,MAEpC,MAAbrL,KAAKqK,MAAgBrK,KAAKqK,KAAKxH,QAAU+J,EAAa,IACtD5M,KAAKqK,KAAO,IAAIK,aAAakC,EAAa,IAE9C,MAAMvC,EAAqBrK,KAAKqK,KAEhC,IAAK,IAAIE,EAAY,EAAGA,EAAIqC,EAAYrC,IACpCF,EAAKE,GAAK,EAId,IAAI05B,EAAwC,EAE5C,IAAK,IAAIC,EAAwB,EAAGA,EAAgBprB,EAAmBorB,IAAiB,CACpF,MAAMC,EAAuBD,EAAgB,EAC7C,IAAIE,EAAuBF,EAAgB5iC,EAAOuX,uBAAyBoY,EAASwB,UAAUyR,GAAiBjT,EAASwB,UAAUnxB,EAAOuX,uBAAyB,GAC9JqrB,GAAiB5iC,EAAOuX,yBACxBurB,GAAgB,GAAKF,EAAgB5iC,EAAOuX,yBAA2BC,EAAoBxX,EAAOuX,yBAEtG,MAAMwrB,EAA0BD,EAAe9iC,EAAO2X,aACtD,IAAIxL,EAAoB5C,KAAKoB,IAAI,EAAGm4B,EAAe9iC,EAAO2X,aAAe,GAAKpO,KAAKiB,KAAKu4B,GACpFH,EAAgB5iC,EAAOuX,yBACvBorB,GAAiCx2B,GAErCA,GAAa5C,KAAKoB,IAAIk4B,GAdG,KAkBzB12B,GAAaJ,EAAU62B,EAAgB,KAEvC75B,EAAKuC,EAAau3B,GAAgB12B,CACrC,CAEDnC,GAA4BjB,EAAMuC,GAGlC,MAAMmL,EAAe,EAAIlN,KAAKoB,IAAIg4B,EAA+B,IACjE,IAAK,IAAI15B,EAAY,EAAGA,EAAIF,EAAKxH,OAAQ0H,IAAKF,EAAKE,IAAMwN,EAOzD,OTouBF,SAA6B1N,GAElC,IAAIW,EAAqB,EACzB,IAAK,IAAIT,EAAY,EAAGA,EAAIF,EAAKxH,OAAQ0H,IAAK,CAC7C,MAAMgmB,EAAOlmB,EAAKE,GAClBF,EAAKE,GAAKS,EACVA,GAAculB,CACd,CACF,CSjvBQ+T,CAAmBj6B,GAGnBA,EAAKuC,GAAcvC,EAAK,GAEjBA,C,QAIFk6B,GAAb,WAAAxkC,GACWC,KAAIwkC,KAAW,EACfxkC,KAAAykC,KAAenjC,EAAOyS,iBACtB/T,KAAAiV,KAAmC,C,CAEnC,GAAAlR,CAAI2gC,EAAqBC,GAC5B3kC,KAAKwkC,KAAOE,EACZ1kC,KAAKykC,KAAOE,C,CAGT,KAAAC,GACH,OAAOL,GAAmBM,sBAAsB7kC,KAAKwkC,K,CAGlD,4BAAOK,CAAsBj2B,GAChC,OAAOtN,EAAOqS,sBAAwB9I,KAAKoB,IAAI,GAAM2C,EAAQtN,EAAOoS,4BAA8BpS,EAAOkS,e,CAEtG,4BAAOsxB,CAAsBC,GAChC,OAAOl6B,KAAK2C,KAAKu3B,EAAKzjC,EAAOqS,uBAAyBrS,EAAOkS,eAAiBlS,EAAOoS,0B,CAElF,mCAAOsxB,CAA6BD,GACvC,OAAOl6B,KAAKiM,IAAI,EAAGjM,KAAKuC,IAAI9L,EAAOmS,gBAAkB,EAAG5I,KAAKkB,MAAMw4B,GAAmBO,sBAAsBC,K,CAGzG,aAAAE,CAAcC,EAAmB,GACpC,MAAMC,GAAiBnlC,KAAKykC,KAAOnjC,EAAOyS,kBAAoBzS,EAAO0S,eAC/DoxB,EAA+C,GAA5BplC,KAAKiV,KAA2B,GAAO,GAC1DowB,EAA4BD,GAAWD,EAAQC,GAAWF,EAChE,OAAOr6B,KAAKoB,IAAI,EAAKo5B,E,CAElB,2CAAOC,CAAqC9T,GAC/C,OAAO3mB,KAAKiM,IAAI,EAAGjM,KAAKuC,IAAI9L,EAAOwS,gBAAkB,EAAGjJ,KAAKkB,MAAMlB,KAAK2C,KAAKgkB,GAAclwB,EAAO0S,eAAiB1S,EAAOyS,mB,CAGvH,cAAAwxB,CAAelM,EAA4Bl4B,EAAoBqkC,EAAmB,EAAKN,EAAmB,GAC7G,MAAMvN,EAAiC,EAAM9sB,KAAK8C,GAAK9C,KAAKiM,IAAIxV,EAAOuS,gBAAiBhJ,KAAKuC,IAAI9L,EAAOsS,gBAAiB4xB,EAAWxlC,KAAK4kC,UAAYzjC,EAC/IqwB,EAAqBxxB,KAAKilC,cAAcC,GAC9C,OAAQllC,KAAKiV,MACT,OACIokB,EAAOd,2BAA2BZ,EAAwBnG,GAC1D,MACJ,OACI6H,EAAOT,4BAA4BjB,EAAwBnG,GAC3D,MACJ,OACI6H,EAAOR,aAAalB,EAAwBnG,EAAY,GACxD,MACJ,QACI,MAAM,IAAIrvB,M,CAIf,yBAAAsjC,GACH,MAAMvI,GAAkBl9B,KAAKwkC,KAAOljC,EAAOoS,4BAA8BpS,EAAOkS,eAC1EkyB,GAAmB1lC,KAAKykC,KAAOnjC,EAAOyS,kBAAoBzS,EAAO0S,eACvE,OAAQhU,KAAKiV,MACT,OACI,MAAM0wB,EAA6B96B,KAAKoB,IAAI,EAAKixB,GAAU57B,EAAOqS,sBAAwB,IAEpFiyB,GAAsB/6B,KAAKiB,KAAK,EAAM,EAAM65B,GAAsB,GAAO,EACzEE,EAAuBh7B,KAAK2C,KAAKo4B,GACvC,OAAO/6B,KAAKoB,IAAI,GAAK,GAAMpB,KAAKiM,IAAI,EAAK4uB,EAAU,GAAO76B,KAAKuC,IAAI,EAAKvC,KAAKiM,KAAK,EAAK,KAAQ+uB,EAAe,IAAOh7B,KAAKuC,IAAI,EAAKs4B,EAAU,MACjJ,OACI,OAAO76B,KAAKoB,IAAI,GAAK,KAAQpB,KAAKiM,IAAI,EAAK4uB,EAAU,GAAO76B,KAAKuC,IAAI,EAAK,KAAQ8vB,EAASryB,KAAK2C,KAAKlM,EAAOqS,sBAAwB,MAAU,GAAM9I,KAAKuC,IAAI,EAAKs4B,EAAU,KAChL,OACI,MAAMI,EAA6B5I,EAASryB,KAAK2C,KAAKlM,EAAOqS,sBAAwB,KAC/EoyB,EAAuBl7B,KAAKoB,IAAI,GAAO,EAAMpB,KAAKoB,IAAI65B,EAAqB,EAAK,IAAO,GAC7F,OAAOj7B,KAAKoB,IAAI,GAAK,KAAQpB,KAAKiM,IAAI,EAAK4uB,GAAW,GAAMK,EAAel7B,KAAKuC,IAAI,EAAKs4B,IAC7F,QACI,MAAM,IAAIvjC,M,QAKb6jC,GAIT,WAAAjmC,GAHgBC,KAAaimC,cAAyB,GAC/CjmC,KAAiBkmC,kBAAW,EAG/BlmC,KAAKqgC,O,CAGT,KAAAA,GACIrgC,KAAKkmC,kBAAoB,C,CAG7B,QAAAC,CAASlxB,EAAkByvB,EAAqBC,GAC5C,IAAIyB,EACApmC,KAAKimC,cAAcpjC,QAAU7C,KAAKkmC,mBAClCE,EAAe,IAAI7B,GACnBvkC,KAAKimC,cAAcjmC,KAAKkmC,mBAAqBE,GAE7CA,EAAepmC,KAAKimC,cAAcjmC,KAAKkmC,mBAE3ClmC,KAAKkmC,oBACLE,EAAanxB,KAAOA,EACpBmxB,EAAariC,IAAI2gC,EAAaC,E,CAG3B,YAAArE,GACH,MAAM+F,EAAqB,GAC3B,IAAK,IAAI97B,EAAY,EAAGA,EAAIvK,KAAKkmC,kBAAmB37B,IAAK,CACrD,MAAM24B,EAA4BljC,KAAKimC,cAAc17B,GACrD87B,EAAY57B,KAAK,CACbwK,KAAQ3T,EAAO4S,gBAAgBgvB,EAAMjuB,MACrCsc,SAAY1mB,KAAKkB,MAAsB,IAAhBm3B,EAAM0B,SAAiB,IAC9CpT,WAAc3mB,KAAKkB,MAA8B,IAAxBm3B,EAAM+B,iBAA2B,KAEjE,CACD,OAAOoB,C,CAGJ,cAAA9E,CAAe+E,GAElB,GADAtmC,KAAKimC,cAAcpjC,OAAS,EACxByjC,EACA,IAAK,MAAMtE,KAAesE,EAAc,CACpC,MAAMpD,EAA4B,IAAIqB,GACtCrB,EAAMjuB,KAAO3T,EAAO4S,gBAAgBgjB,QAAQ8K,EAAkB,OACtC,GAAfkB,EAAMjuB,OAAYiuB,EAAMjuB,KAAI,GACNsS,MAA3Bya,EAAsB,SACtBkB,EAAMsB,KAAOD,GAAmBS,6BAA6BhD,EAAsB,UAEnFkB,EAAMsB,KAAO,EAEgBjd,MAA7Bya,EAAwB,WACxBkB,EAAMuB,KAAOF,GAAmBe,qCAAqCtD,EAAwB,YAE7FkB,EAAMuB,KAAOnjC,EAAOyS,iBAExB/T,KAAKimC,cAAcx7B,KAAKy4B,EAC3B,CAELljC,KAAKkmC,kBAAoBlmC,KAAKimC,cAAcpjC,M,CAIzC,sBAAO0jC,CAAgBC,EAAyBC,GACnD,GAAID,EAAQN,mBAAqBO,EAAQP,kBACrC,OAAO,EACX,IAAK,IAAI37B,EAAY,EAAGA,EAAIi8B,EAAQN,kBAAmB37B,IACnD,GAAIi8B,EAAQP,cAAc17B,GAAG0K,MAAQwxB,EAAQR,cAAc17B,GAAG0K,KAC1D,OAAO,EAEf,OAAO,C,CAIJ,kBAAOyxB,CAAYF,EAAyBC,EAAyBE,GAExE,IAAIC,EAA+B,IAAIZ,GAGvC,GAAe,MAAXQ,EACA,OAAOA,EAEX,GAAe,MAAXC,EACA,OAAOA,EAMX,GAHAE,EAAM97B,KAAKiM,IAAI,EAAGjM,KAAKuC,IAAI,EAAGu5B,IAG1B3mC,KAAKumC,gBAAgBC,EAASC,GAAU,CACxC,IAAK,IAAIl8B,EAAY,EAAGA,EAAIi8B,EAAQN,kBAAmB37B,IACnDq8B,EAAaX,cAAc17B,GAAK,IAAIg6B,GACpCqC,EAAaX,cAAc17B,GAAG0K,KAAOuxB,EAAQP,cAAc17B,GAAG0K,KAC9D2xB,EAAaX,cAAc17B,GAAGi6B,KAAOgC,EAAQP,cAAc17B,GAAGi6B,MAAQiC,EAAQR,cAAc17B,GAAGi6B,KAAOgC,EAAQP,cAAc17B,GAAGi6B,MAAQmC,EACvIC,EAAaX,cAAc17B,GAAGk6B,KAAO+B,EAAQP,cAAc17B,GAAGk6B,MAAQgC,EAAQR,cAAc17B,GAAGk6B,KAAO+B,EAAQP,cAAc17B,GAAGk6B,MAAQkC,EAK3I,OAFAC,EAAaV,kBAAoBM,EAAQN,kBAElCU,CACV,CAGG,OAAQD,GAAO,EAAKF,EAAUD,C,CA+C/B,qBAAAK,CAAsBC,EAA6BC,EAAgCC,GACtFhnC,KAAKqgC,QAEL,MAEM4G,EAAoE,EAAnCp8B,KAAKyR,KAAK4qB,MAK3CC,EAAqBJ,EAAyB,EAC9CK,EAAiD,GAA1BL,EACvBM,EAA+CC,IAAvBR,EACxBS,EAAoC,GAAdP,EAAU/xB,MAA4C,GAAd+xB,EAAU/xB,MAAkE,GAApC+xB,EAAU/xB,MAAqE,GAAvC+xB,EAAU/xB,KAExJuyB,EAA6B,KAC7BC,EAbkC,IAaW58B,KAAKoB,IAAI,EAA6D,IAAvD66B,EAAmB,KAC/EY,EAAwB78B,KAAKuC,IAAI65B,EAAwB,EAAIp8B,KAAK8C,GAAK85B,EAAWD,GAExF,GAAkB,GAAdR,EAAU/xB,OAA8BkyB,GAAYE,QAEjD,GAAID,EAAY,CAMnB,MAAMO,EAAuB,IACvBC,EAAwBF,EAAgB78B,KAAKoB,IAAI,EAAK07B,GAEtDE,EAAmBL,GADKI,GAAiB,EAAMA,EAAgB/8B,KAAK8C,MACX,EAAM9C,KAAK8C,IACpE+2B,EAAsBH,GAAmBS,6BAA6B6C,GACtEC,EAAkBvD,GAAmBM,sBAAsBH,GAC3DqD,EAAuB,EAAMl9B,KAAK8C,GAAKm6B,EAAUN,EAEjDQ,EAAmC,IAAI3Q,GAC7C2Q,EAAajQ,0BAA0B2P,GACvC,MAAM5lC,EAA8B,IAAIk3B,GACxCl3B,EAASs3B,QAAQ4O,EAAcD,GAC/B,MAAME,EAAuCnmC,EAASm4B,YAEtD,IAAIiO,EAAkBr9B,KAAK2C,KAAKy6B,GAEhCC,EAAqD,KAA1BA,EAAUP,GAA1BA,EAEPJ,IAAWW,EAAUr9B,KAAKuC,IAAI86B,GAAU,IAC5C,MAAMC,EAAwBt9B,KAAKoB,IAAI,EAAKi8B,GACtCvD,EAAsBJ,GAAmBe,qCAAqC6C,GAEpFnoC,KAAKmmC,SAAQ,EAAqBzB,EAAaC,EAClD,KAAM,CACH,MAAMyD,EAAuB,IAAO,EA7CC,IA6CgCv9B,KAAKiB,KAAKjB,KAAKiM,IAAI,EAAKiwB,EAAyB,GAAI,IACpHsB,EAAuB,GAAMD,EAI7BE,EAAwBZ,GADAA,GADJA,GADC,EAAM78B,KAAK8C,GAlDF,IAkDiC65B,GAEV38B,KAAKoB,IAAIo8B,EAAc,IAAO,GAC1BX,GAAiBW,EAChF,IAAIR,EAEAA,EADAN,EACWC,EAAqB38B,KAAKuC,IAAIk7B,EAAeZ,EAAgB78B,KAAKoB,IAAI,EAAG,OAAU,EAAMpB,KAAK8C,IAE9F65B,EAAqBc,GAAiB,EAAMz9B,KAAK8C,IAEhE,MAAM+2B,EAAsBH,GAAmBS,6BAA6B6C,GAE5E,IAAIU,EACJ,GAAIhB,EACAgB,EAAmBH,MAChB,CACH,MAAMJ,EAAmC,IAAI3Q,GAC7C2Q,EAAatP,0BAA0BgP,EAAeU,GACtD,MAAMtmC,EAA8B,IAAIk3B,GACxCl3B,EAASs3B,QAAQ4O,EAAcM,GAC/BC,EAAmBzmC,EAASm4B,WAC/B,CACIkN,IAAUoB,EAAmB19B,KAAKuC,IAAIm7B,EAAkB19B,KAAKiB,KAAK,MACvE,MAAM64B,EAAsBJ,GAAmBe,qCAAqCiD,GAEpFvoC,KAAKmmC,SAAQ,EAAqBzB,EAAaC,EAClD,CAGD3kC,KAAKimC,cAAcpjC,OAAS7C,KAAKkmC,iB,CAI9B,6BAAAsC,CAA8B1B,EAA6BC,EAAgC0B,GAA2B,GACzHzoC,KAAKqgC,QAEL,MAEM4G,EAAoE,EAAnCp8B,KAAKyR,KAAK4qB,MAK3CE,EAAiD,GAA1BL,GAA+B0B,EACtDjB,EAA6B,KAC7BC,EATkC,IASW58B,KAAKoB,IAAI,EAA6D,IAAvD66B,EAAmB,KAC/EY,EAAwB78B,KAAKuC,IAAI65B,EAAwB,EAAIp8B,KAAK8C,GAAK85B,EAAWD,GAExF,GAAIJ,EAAY,CAMZ,MAAMO,EAAuB,IACvBC,EAAwBF,EAAgB78B,KAAKoB,IAAI,EAAK07B,GAEtDE,EAAmBL,GADKI,GAAiB,EAAMA,EAAgB/8B,KAAK8C,MACX,EAAM9C,KAAK8C,IACpE+2B,EAAsBH,GAAmBS,6BAA6B6C,GACtEC,EAAkBvD,GAAmBM,sBAAsBH,GAC3DqD,EAAuB,EAAMl9B,KAAK8C,GAAKm6B,EAAUN,EAEjDQ,EAAmC,IAAI3Q,GAC7C2Q,EAAajQ,0BAA0B2P,GACvC,MAAM5lC,EAA8B,IAAIk3B,GACxCl3B,EAASs3B,QAAQ4O,EAAcD,GAC/B,MAAME,EAAuCnmC,EAASm4B,YAEtD,IAAIiO,EAAkBr9B,KAAK2C,KAAKy6B,GAEhCC,EAAqD,KAA1BA,EAAUP,GAA1BA,EACX,MAAMQ,EAAwBt9B,KAAKoB,IAAI,EAAKi8B,GACtCvD,EAAsBJ,GAAmBe,qCAAqC6C,GAEpFnoC,KAAKmmC,SAAQ,EAAqBzB,EAAaC,EAClD,KAAM,CACH,MAAMyD,EAAuB,IAAO,EArCC,IAqCgCv9B,KAAKiB,KAAKjB,KAAKiM,IAAI,EAAKiwB,EAAyB,GAAI,IACpHsB,EAAuB,GAAMD,EAI7BE,EAAwBZ,GADAA,GADJA,GADC,EAAM78B,KAAK8C,GA1CF,IA0CiC65B,GAEV38B,KAAKoB,IAAIo8B,EAAc,IAAO,GAC1BX,GAAiBW,EAChF,IAAIR,EAEJA,EAAWL,EAAqBc,GAAiB,EAAMz9B,KAAK8C,IAC5D,MAAM+2B,EAAsBH,GAAmBO,sBAAsB+C,GAErE,IAAIU,EAEJ,MAAMP,EAAmC,IAAI3Q,GAC7C2Q,EAAatP,0BAA0BgP,EAAeU,GACtD,MAAMtmC,EAA8B,IAAIk3B,GACxCl3B,EAASs3B,QAAQ4O,EAAcM,GAC/BC,EAAmBzmC,EAASm4B,YAC5B,MAAM0K,EAAsBJ,GAAmBe,qCAAqCiD,GAEpFvoC,KAAKmmC,SAAQ,EAAqBzB,EAAaC,EAClD,C,QAKI+D,GAKT,WAAA3oC,GAJOC,KAAMmyB,OAAW,EACjBnyB,KAAKwE,MAAW,EAChBxE,KAAQoyB,SAAW,EAGtBpyB,KAAKqgC,O,CAGT,KAAAA,GACIrgC,KAAKmyB,OAAS,EACdnyB,KAAKwE,MAAQ,EACbxE,KAAKoyB,SAAW,C,CAGb,YAAAkO,GACH,MAAMqI,EAAsB,CACxBxW,OAAU7wB,EAAOua,4BAA4B7b,KAAKmyB,QAAQjuB,KAC1DkuB,SAAY9wB,EAAO4W,UAAUlY,KAAKoyB,UAAUluB,MAKhD,OAHI5C,EAAOua,4BAA4B7b,KAAKmyB,QAAQjW,SAAW,IAC3DysB,EAAsB,MAAI3oC,KAAKwE,OAE5BmkC,C,CAGJ,cAAApH,CAAeoH,GAClB3oC,KAAKqgC,QAEL,IAAIlO,EAA2B7wB,EAAOua,4BAA4BnX,WAAWikC,EAAuB,QACtF,MAAVxW,IAAgBA,EAAS7wB,EAAOua,4BAA4BnX,WAAuB,YACvF1E,KAAKmyB,OAASA,EAAO3tB,MAErB,IAAI4tB,EAAqB9wB,EAAO4W,UAAUxT,WAAWikC,EAAyB,UAC9D,MAAZvW,IAAkBA,EAAW9wB,EAAO4W,UAAUxT,WAAiB,MACnE1E,KAAKoyB,SAAWA,EAAS5tB,MAEM+iB,MAA3BohB,EAAsB,MACtB3oC,KAAKwE,MAAQ62B,GAAM,EAAG/5B,EAAOua,4BAA4B7b,KAAKmyB,QAAQjW,SAAoC,EAA1BysB,EAAsB,OAEtG3oC,KAAKwE,MAAQ,C,QAiBZokC,GA2FT,WAAA7oC,CAAY0hC,EAAyBlB,GAEjC,GA5FGvgC,KAAAiV,KAA2C,EAC3CjV,KAAMktB,OAAW,EACjBltB,KAAQqB,SAAW,EAEtBrB,KAA2B+0B,6BAAY,EACvC/0B,KAAiBg1B,kBAAW,EAC5Bh1B,KAAAi1B,gBAAkB3zB,EAAOK,gBAAgB3B,KAAKqB,UAAUiB,QAAQO,OAAS,EACzE7C,KAAgBk1B,iBAAW,EAC3Bl1B,KAAqBm1B,uBAAY,EAC1Bn1B,KAAmBo1B,oBAAW,EAElCp1B,KAAS6oC,UAAW,EACpB7oC,KAAAkxB,SAA2B,IAAI8U,GAC/BhmC,KAAYszB,cAAY,EACxBtzB,KAAA8oC,kBAA4BxnC,EAAO8S,qBAAuB,EAC1DpU,KAAkB+oC,mBAAW,EAC7B/oC,KAAAuyB,WAA6B,IAAIyT,GACjChmC,KAAcs0B,gBAAY,EAC1Bt0B,KAAAgpC,oBAA8B1nC,EAAO8S,qBAAuB,EAC5DpU,KAAoBipC,qBAAW,EAC/BjpC,KAAYkpC,aAA8B,GAC1ClpC,KAAcmpC,eAA8B,GAK5CnpC,KAASkY,UAAuB,GAChClY,KAAMopC,OAAW,EACjBppC,KAAAqpC,QAAkB/nC,EAAOkT,eACzBxU,KAAaspC,cAAW,EACxBtpC,KAAUmxB,WAAW7vB,EAAOoT,YAAYhQ,WAAmB,OAAEF,MAC7DxE,KAAUupC,WAAW,EACrBvpC,KAAMwpC,OAAW,EACjBxpC,KAAOyxB,QAAW,EAClBzxB,KAAQ4yB,SAAW,EACnB5yB,KAAY8zB,aAAW,EACvB9zB,KAAYg0B,aAAW,GACvBh0B,KAAY+zB,aAAW,EACvB/zB,KAAWi0B,YAAW,EACtBj0B,KAAMsxB,OAAW,EACjBtxB,KAAYypC,aAAW,EACvBzpC,KAAY0pC,aAAW,EACvB1pC,KAAY2pC,aAAW,EACvB3pC,KAAgB4pC,iBAAW,IAC3B5pC,KAAU6pC,WAAW,EACrB7pC,KAAO+O,QAAW,EAClB/O,KAAKqxB,MAAW,EAChBrxB,KAAMqzB,OAAW,EACjBrzB,KAAAk0B,IAAc5yB,EAAO2U,UACrBjW,KAAQm0B,SAAW,GACnBn0B,KAAa4zB,cAAW,GACxB5zB,KAAc2zB,gBAAY,EAC1B3zB,KAAa8pC,eAAY,EACzB9pC,KAAmB0zB,qBAAY,EAC/B1zB,KAAO80B,SAAY,EACnB90B,KAAAmL,WAAqB7J,EAAO8J,gBAC5BpL,KAAA+pC,iBAA2BzoC,EAAO+X,oBACrCrZ,KAAcgqC,eAAWn/B,KAAKyS,KAAKhc,EAAOgY,kBAAoB,GAC9DtZ,KAAaiqC,cAAW,EACrBjqC,KAAakqC,cAAW,EACxBlqC,KAAa0yB,cAAW,GACxB1yB,KAAU+yB,WAAW,EACrB/yB,KAAcmqC,eAAW,EACzBnqC,KAAsB8yB,uBAAW,EACjC9yB,KAAMgzB,OAAW,EACjBhzB,KAAMwyB,OAAW,EACjBxyB,KAAW00B,YAAW,EACtB10B,KAASoqC,UAAW,EACpBpqC,KAAS8xB,UAAW,EACpB9xB,KAAY+xB,aAAW,EACvB/xB,KAAYqqC,aAAW,EACvBrqC,KAAesqC,gBAAW,EAC1BtqC,KAAAuqC,gBAAmC,IAAIlI,GACvCriC,KAAAwqC,mBAAqC,IAAI/H,GACzCziC,KAAiBgyB,kBAAW,EAC5BhyB,KAAOyqC,QAAW,EAClBzqC,KAAW0qC,YAAW,EACtB1qC,KAAO2qC,QAAW,EAClB3qC,KAAAqyB,eAA+B,IAAI3nB,aAAa,IAChD1K,KAAAo0B,uBAAuC,IAAI1pB,aAAa,IAC/C1K,KAASiyB,UAAe,GAExBjyB,KAAA4qC,cAA+B,IAAI/G,GACnC7jC,KAAgB6qC,iBAAa,GAC7B7qC,KAAoB8qC,qBAAmB,GAChD9qC,KAAW2hB,YAAa,GACxB3hB,KAAc+qC,eAAa,GAC3B/qC,KAAU6c,WAAa,GACvB7c,KAAc4gC,eAAa,GAC3B5gC,KAAiBgrC,kBAAc,GAG9BzK,EACA,IAAK,IAAIE,EAAc,EAAGA,EAAMn/B,EAAO4Y,SAAUumB,IAC7CzgC,KAAK2hB,YAAYlX,KAAK,GACtBzK,KAAK+qC,eAAetgC,KAAK,GACzBzK,KAAK6c,WAAWpS,KAAKnJ,EAAOub,WAAWnY,WAAiB,KAAEF,OAIlExE,KAAKirC,aAAe,IAAItI,GAAalB,GACrC,IAAK,IAAIl3B,EAAY,EAAGA,EAAIjJ,EAAO+V,cAAc,EAAG9M,IAChDvK,KAAKiyB,UAAU1nB,GAAK,IAAI43B,GAAS53B,GAErC,IAAK,IAAIA,EAAY,EAAGA,EAAIjJ,EAAO0Y,UAAWzP,IAC1CvK,KAAK6qC,iBAAiBtgC,GAAKjJ,EAAO4W,UAAUxT,WAAW,WAAWF,MAClExE,KAAK8qC,qBAAqBvgC,GAAK,IAAIo4B,IAAa,GAGpD,IAAK,IAAIp4B,EAAI,EAAGA,EAAI,GAAIA,IACpBvK,KAAKqyB,eAAe9nB,GAAK,GAAKM,KAAK+b,MAAO,IAADrc,GAG7C,IAAID,EAAc,EAClB,IAAK,IAAIC,EAAY,EAAGA,EAAIvK,KAAKqyB,eAAexvB,OAAQ0H,IACpDD,GAAOtK,KAAKqyB,eAAe9nB,GAE/B,MAAMC,EAAkBF,EAAMtK,KAAKqyB,eAAexvB,OAGlD,IAAImI,EAAqB,EACrBkgC,EAAmB,EACvB,IAAK,IAAI3gC,EAAY,EAAGA,EAAIvK,KAAKqyB,eAAexvB,OAAQ0H,IACpDS,GAAckgC,EACdA,EAAWlrC,KAAKqyB,eAAe9nB,GAAKC,EACpCxK,KAAKo0B,uBAAuB7pB,GAAKS,EAIrChL,KAAKo0B,uBAAuB,IAAM,C,CAI/B,eAAA+W,CAAgBl2B,EAAsBwsB,EAAyBlB,GAE9DA,IAActrB,EAAI,GACtBjV,KAAKiV,KAAOA,EACZjV,KAAKktB,OAASjY,EACdjV,KAAKqzB,OAAS,EACdrzB,KAAK+O,QAAO,EACZ/O,KAAKgzB,OAAS1xB,EAAO8U,YAAc,EACnCpW,KAAKwyB,OAAS,EACdxyB,KAAK00B,YAAc7pB,KAAK+b,MAAsC,IAA/BtlB,EAAOuP,iBAAmB,IACzD7Q,KAAKoqC,UAAYv/B,KAAK+b,MAAoC,IAA7BtlB,EAAOqP,eAAiB,IACrD3Q,KAAKkxB,SAASmP,QACdrgC,KAAKszB,cAAe,EACpBtzB,KAAK8oC,kBAAoBxnC,EAAO8S,qBAAuB,EACvDpU,KAAK+oC,mBAAqB,EAC1B,IAAK,IAAIx+B,EAAY,EAAGA,EAAIjJ,EAAO6S,iBAAkB5J,IACjDvK,KAAKkpC,aAAa3+B,GAAK,KACvBvK,KAAKmpC,eAAe5+B,GAAK,KAwB7B,OAtBAvK,KAAKuyB,WAAW8N,QAChBrgC,KAAKs0B,gBAAiB,EACtBt0B,KAAKgpC,oBAAsB1nC,EAAO8S,qBAAuB,EACzDpU,KAAKipC,qBAAuB,EAC5BjpC,KAAK+yB,WAAaloB,KAAK+b,MAAqC,KAA9BtlB,EAAO+Z,gBAAkB,IACvDrb,KAAKmqC,eAAiBt/B,KAAK+b,MAAyC,IAAlCtlB,EAAOka,oBAAsB,IAC/Dxb,KAAK8yB,uBAAyBjoB,KAAK+b,MAAiD,IAA1CtlB,EAAOoa,4BAA8B,IAC/E1b,KAAKk0B,IAAM5yB,EAAO2U,UAClBjW,KAAKm0B,SAAW,GAChBn0B,KAAKupC,WAAajoC,EAAOkZ,iBACzBxa,KAAKwpC,OAASloC,EAAOmZ,aACrBza,KAAKyxB,QAAU,EACfzxB,KAAKsxB,OAAS,EACdtxB,KAAK0yB,cAAgB,GACrB1yB,KAAK0zB,qBAAsB,EAC3B1zB,KAAK4zB,cAAgB,GACrB5zB,KAAK8pC,eAAgB,EACrB9pC,KAAK80B,SAAU,EACf90B,KAAKopC,OAAS,EACdppC,KAAKqpC,QAAU/nC,EAAOkT,eACtBxU,KAAKmxB,WAAa7vB,EAAOoT,YAAYhQ,WAAmB,OAAEF,MAC1DxE,KAAKspC,cAAgB,EACbr0B,GACJ,OACIjV,KAAKqB,SAAW,EAEhBrB,KAAKqxB,MAAQ/vB,EAAOyV,OAAOrS,WAAqB,SAAEF,MAE9CxE,KAAK+0B,6BAA8B,EACnC/0B,KAAKg1B,kBAAoB,EACzBh1B,KAAKi1B,gBAAkB3zB,EAAOK,gBAAgB3B,KAAKqB,UAAUiB,QAAQO,OAAS,EAC9E7C,KAAKk1B,iBAAmB,EACxBl1B,KAAKm1B,uBAAwB,EAC7Bn1B,KAAKo1B,oBAAsB,EAE/B,MACJ,OACIp1B,KAAKqB,SAAW,EAChBrB,KAAKqxB,MAAQ/vB,EAAOyV,OAAOrS,WAAqB,SAAEF,MAClD,IAAK,IAAI+F,EAAY,EAAGA,EAAI,GAAIA,IAC5BvK,KAAKqyB,eAAe9nB,GAAK,GAAMM,KAAK+b,MAAO,IAADrc,GAG9C,IAAID,EAAc,EAClB,IAAK,IAAIC,EAAY,EAAGA,EAAIvK,KAAKqyB,eAAexvB,OAAQ0H,IACpDD,GAAOtK,KAAKqyB,eAAe9nB,GAE/B,MAAMC,EAAkBF,EAAMtK,KAAKqyB,eAAexvB,OAGlD,IAAImI,EAAqB,EACrBkgC,EAAmB,EACvB,IAAK,IAAI3gC,EAAY,EAAGA,EAAIvK,KAAKqyB,eAAexvB,OAAQ0H,IACpDS,GAAckgC,EACdA,EAAWlrC,KAAKqyB,eAAe9nB,GAAKC,EACpCxK,KAAKo0B,uBAAuB7pB,GAAKS,EAGrChL,KAAKo0B,uBAAuB,IAAM,EAClC,MACJ,OACIp0B,KAAKqxB,MAAQ/vB,EAAOyV,OAAOrS,WAAW,mBAAmBF,MACzDxE,KAAK8xB,UAAY,EACjB9xB,KAAK+xB,aAAe,EACpB/xB,KAAKgyB,kBAAoB,EACzB,IAAK,IAAIznB,EAAY,EAAGA,EAAIvK,KAAKiyB,UAAUpvB,OAAQ0H,IAC/CvK,KAAKiyB,UAAU1nB,GAAG81B,MAAM91B,GAE5B,MACJ,QACIvK,KAAKmxB,WAAa,EAClBnxB,KAAKyxB,QAAU,EACfzxB,KAAK+O,QAAU,EACf/O,KAAKqxB,MAAQ,EACbrxB,KAAK8xB,UAAY,EACjB9xB,KAAK+xB,aAAe,EACpB/xB,KAAKqqC,aAAe,EACpBrqC,KAAKsqC,gBAAkB,EACvBtqC,KAAKuqC,gBAAgBjI,WAAW,GAChCtiC,KAAKgyB,kBAAoB,EACzB,IAAK,IAAIznB,EAAY,EAAGA,EAAIvK,KAAKiyB,UAAUpvB,OAAQ0H,IAC/CvK,KAAKiyB,UAAU1nB,GAAG81B,MAAM91B,GAE5B,MACJ,OACIvK,KAAK6oC,UAAY,EACjB7oC,KAAKqxB,MAAQ/vB,EAAOyV,OAAOrS,WAAqB,SAAEF,MAClD,MACJ,OACIxE,KAAKqxB,MAAQ/vB,EAAOyV,OAAOrS,WAAyB,aAAEF,MACtDxE,KAAKirC,aAAa5K,MAAMoB,GACxB,MACJ,OACIzhC,KAAKqxB,MAAQ/vB,EAAOyV,OAAOrS,WAAyB,aAAEF,MACtD,IAAK,IAAI+F,EAAY,EAAGA,EAAIjJ,EAAO0Y,UAAWzP,IAC1CvK,KAAK6qC,iBAAiBtgC,GAAKjJ,EAAO4W,UAAUxT,WAAW,WAAWF,MAC9B+iB,MAAhCvnB,KAAK8qC,qBAAqBvgC,KAC1BvK,KAAK8qC,qBAAqBvgC,GAAK,IAAIo4B,IAAa,IAEpD3iC,KAAK8qC,qBAAqBvgC,GAAG81B,MAAMoB,GAEvC,MACJ,OACIzhC,KAAKqxB,MAAQ/vB,EAAOyV,OAAOrS,WAAyB,aAAEF,MACtDxE,KAAK4qC,cAAcvK,QACnB,MACJ,OACIrgC,KAAKqxB,MAAQ/vB,EAAOyV,OAAOrS,WAAqB,SAAEF,MAClDxE,KAAKmL,WAAa7J,EAAO8J,gBACzB,MACJ,OACIpL,KAAKqxB,MAAQ/vB,EAAOyV,OAAOrS,WAAkB,MAAEF,MAC/CxE,KAAK4qC,cAAcvK,QACnB,MACJ,OACIrgC,KAAKmxB,WAAa,EAClBnxB,KAAKyxB,QAAU,EACfzxB,KAAK4yB,SAAW,EAChB5yB,KAAK+O,QAAU,EACf/O,KAAKqxB,MAAQ,EACbrxB,KAAK2hB,YAAc,GACnB3hB,KAAK+qC,eAAiB,GACtB/qC,KAAK6c,WAAa,GAClB,IAAK,IAAI4jB,EAAc,EAAGA,EAAMn/B,EAAO4Y,SAAUumB,IAC7CzgC,KAAK2hB,YAAYlX,MAAM,GACvBzK,KAAK+qC,eAAetgC,KAAK,GACzBzK,KAAK6c,WAAWpS,KAAKnJ,EAAOub,WAAWnY,WAAiB,KAAEF,OAC1DxE,KAAKgrC,kBAAkBvK,IAAO,EAC9BzgC,KAAK4gC,eAAeH,GAAO,EAE/B,MACA,QACIzgC,KAAKqxB,MAAQ/vB,EAAOyV,OAAOrS,WAAqB,SAAEF,MAClDxE,KAAK+pC,iBAAmBzoC,EAAO+X,oBAC/BrZ,KAAKgqC,eAAiBn/B,KAAKyS,KAAKhc,EAAOgY,kBAAoB,GAC3DtZ,KAAKiqC,cAAgB,EACrBjqC,KAAKmL,WAAa7J,EAAO8J,gBAAkB,EAC3C,MACR,QACI,MAAM,IAAIjJ,MAAM,iCAAmC8S,GAKvDjV,KAAKqxB,OAAS/vB,EAAOyV,OAAOrS,WAAyB,aAAEF,QAEvDxE,KAAK+O,QAAuB,KAAZ/O,KAAK+O,Q,CAKtB,qBAAA83B,CAAsBuE,EAAgCC,GACzD,IAAIvE,EAA0CsE,EAAeE,aACzDvE,EAA6CqE,EAAexZ,gBAC5D2Z,EAAwCH,EAAevZ,eACvD2Z,EAAuCJ,EAAelY,cACtDuY,EAAkDL,EAAeM,kBACjEC,EAA0CP,EAAe9Y,iBAGlC/K,MAAvBuf,IAAkCA,EAAuD,GAAhC9mC,KAAKiV,KAA+B,EAAI,IACvEsS,MAA1Bwf,IAAqCA,EAAyB,GAC3Cxf,MAAnBgkB,IAA8BA,EAAkBjqC,EAAO4W,UAAUxT,WAAiB,MAChE6iB,MAAlBikB,IAA6BA,EAAiBlqC,EAAO4W,UAAUxT,WAAqB,GAAT1E,KAAKiV,KAA8B,UAAY,SAC/FsS,MAA3BkkB,IAAsCA,EAA0B,CAACnqC,EAAO4W,UAAUxT,WAA0C,GAA9B1E,KAAKiV,KAA6B,YAAc,QAAS3T,EAAO4W,UAAUxT,WAAiB,KAAGpD,EAAO4W,UAAUxT,WAAiB,KAAGpD,EAAO4W,UAAUxT,WAAiB,OAC9O6iB,MAArBokB,IAAgCA,EAAoBrqC,EAAO4W,UAAUxT,WAAiB,MAIrC4iC,IAAvBR,GAC+B,GAA1CyE,EAAgBt2B,OAA4Bs2B,EAAkBjqC,EAAO4W,UAAUxT,WAAiB,MAEnH,MAAM8S,EAAuBlW,EAAOiW,WAAWvX,KAAK8xB,WAAWta,aAC/D,IAAIo0B,GAA0C,EAC1CC,GAA2C,EAC3CC,EAA8D,GAApBP,EAAgBt2B,MAAsD,GAAnBu2B,EAAev2B,KAChH,GAAa,GAATjV,KAAKiV,KAA2B,CAChC62B,EAAgCA,GAAiF,GAA/CH,EAAkB12B,KACpF,IAAK,IAAI1K,EAAY,EAAGA,EAAIkhC,EAAwB5oC,OAAQ0H,IACpDA,EAAIiN,EAC+B,GAA/Bi0B,EAAwBlhC,GAAG0K,KAC3B42B,GAAkC,EAElCD,GAAiC,EAGrCE,EAAgCA,GAA0F,GAAxDL,EAAwBlhC,GAAG0K,IAGxG,CAEDjV,KAAKspC,cAAgB,EAER,GAATtpC,KAAKiV,OACD42B,GAAmCC,EACnC9rC,KAAK+rC,YAAYzqC,EAAOua,4BAA4BnX,WAAuB,WAAEF,MAAO,EAAGlD,EAAO4W,UAAUxT,WAAW,aAAaF,OACzHonC,IAAmCE,GAC1C9rC,KAAK+rC,YAAYzqC,EAAOua,4BAA4BnX,WAAiB,KAAEF,MAAO,EAAGlD,EAAO4W,UAAUxT,WAAW,aAAaF,QAI1G,GAApB+mC,EAAgBt2B,MAChBjV,KAAKuyB,WAAW8N,QAChBrgC,KAAKs0B,gBAAiB,EACtBt0B,KAAKkxB,SAAS2V,sBAAsBC,EAAqBC,EAAwBwE,GACjFvrC,KAAK+O,UAAW,IACZs8B,GAAqBrrC,KAAKszB,gBAC1BtzB,KAAKszB,cAAe,EACpBtzB,KAAK8oC,kBAAoBhC,EACzB9mC,KAAK+oC,mBAAqBhC,KAG9B/mC,KAAKkxB,SAASmP,QAEdrgC,KAAKszB,cAAe,EACpBtzB,KAAKs0B,gBAAiB,EACtBt0B,KAAKuyB,WAAWsU,sBAAsBC,EAAqBC,EAAwBwE,GACnFvrC,KAAK+O,SAAW,GAChB/O,KAAK+rC,YAAYzqC,EAAOua,4BAA4BnX,WAA+B,mBAAEF,MAAO,EAAG+mC,EAAgB/mC,QAC3G6mC,GAAqBrrC,KAAKs0B,kBAC1Bt0B,KAAKs0B,gBAAiB,EACtBt0B,KAAKgpC,oBAAsBlC,EAC3B9mC,KAAKipC,qBAAuBlC,IAIb,GAAnByE,EAAev2B,MACfjV,KAAK+rC,YAAYzqC,EAAOua,4BAA4BnX,WAAuB,WAAEF,MAAO,EAAGgnC,EAAehnC,OAG1G,IAAK,IAAI+F,EAAY,EAAGA,EAAIkhC,EAAwB5oC,OAAQ0H,IACpDA,EAAIiN,GAAgBq0B,GACW,GAA/BJ,EAAwBlhC,GAAG0K,MAC3BjV,KAAK+rC,YAAYzqC,EAAOua,4BAA4BnX,WAA8B,kBAAEF,MAAO+F,EAAGkhC,EAAwBlhC,GAAG/F,OAIvG,GAAtBmnC,EAAkB12B,MAClBjV,KAAK+rC,YAAYzqC,EAAOua,4BAA4BnX,WAA8B,kBAAEF,MAAO,EAAGmnC,EAAkBnnC,M,CAIjH,YAAA87B,GACH,MAAM0L,EAAwB,CAC1B/2B,KAAQ3T,EAAO4Q,oBAAoBlS,KAAKiV,MACxCoe,OAAUrzB,KAAKqzB,OACfnC,SAAYlxB,KAAKkxB,SAASoP,eAC1BhN,aAAgBtzB,KAAKszB,aACrBC,YAAevzB,KAAK8oC,kBACpBtV,aAAgBxzB,KAAK+oC,oBAGrB/oC,KAAKktB,QAAUltB,KAAKiV,OACpB+2B,EAAyB,OAAIhsC,KAAKktB,QAGtC,IAAK,IAAI3iB,EAAY,EAAGA,EAAIjJ,EAAO6S,iBAAkB5J,IACrB,MAAxBvK,KAAKkpC,aAAa3+B,KAClByhC,EAAiB,eAAiBzhC,GAAKvK,KAAKkpC,aAAa3+B,GAAI+1B,gBAGrE,MAAMvxB,EAAoB,GAC1B,IAAK,MAAMoN,KAAU7a,EAAOuU,YACpB7V,KAAK+O,QAAW,GAAKoN,GACrBpN,EAAQtE,KAAKnJ,EAAOsU,YAAYuG,IAmCxC,GAhCA6vB,EAA0B,QAAIj9B,EAG1BD,EAAyB9O,KAAK+O,WAC9Bi9B,EAA6B,WAAI1qC,EAAOoT,YAAY1U,KAAKmxB,YAAYjtB,KACrE8nC,EAAsC,oBAAIhsC,KAAK0zB,qBAE/C1kB,EAAoBhP,KAAK+O,WACzBi9B,EAAwB,MAAIhsC,KAAKisC,WAAW/nC,KAC5C8nC,EAAiC,eAAIhsC,KAAK2zB,eAC1CqY,EAAgC,cAAIhsC,KAAK4zB,eAEzC3kB,EAAyBjP,KAAK+O,WAC9Bi9B,EAAsC,oBAAIhsC,KAAKupC,YAE/Cr6B,EAAqBlP,KAAK+O,WAC1Bi9B,EAA8B,YAAIhJ,GAAMkJ,cAAclsC,KAAKwpC,SAE3Dr6B,EAAsBnP,KAAK+O,YACN,GAAjB/O,KAAKyxB,UACLzxB,KAAKyxB,QAAU,GAEC,GAAhBzxB,KAAKyxB,QACLua,EAA0B,QAAI1qC,EAAO0T,SAAShV,KAAKyxB,SAASvtB,KAE5D8nC,EAA0B,QAAI,SAElCA,EAA+B,aAAIhsC,KAAK8zB,aACxCkY,EAA+B,aAAIhsC,KAAK+zB,aACxCiY,EAA+B,aAAIhsC,KAAKg0B,aACxCgY,EAA8B,YAAIhsC,KAAKi0B,aAEvC7kB,EAAyBpP,KAAK+O,SAAU,CACxCi9B,EAAiC,eAAIhsC,KAAKs0B,eAC1C0X,EAAgC,cAAIhsC,KAAKgpC,oBACzCgD,EAAiC,eAAIhsC,KAAKipC,qBAC1C+C,EAA6B,WAAIhsC,KAAKuyB,WAAW+N,eAEjD,IAAK,IAAI/1B,EAAY,EAAGA,EAAIjJ,EAAO6S,iBAAkB5J,IACnB,MAA1BvK,KAAKmpC,eAAe5+B,KACpByhC,EAAiB,iBAAmBzhC,GAAKvK,KAAKmpC,eAAe5+B,GAAI+1B,eAE5E,CA6BD,GA5BIjxB,EAAyBrP,KAAK+O,WAC9Bi9B,EAA6B,WAAInhC,KAAKkB,MAAM,IAAM/L,KAAK+yB,YAAczxB,EAAO+Z,gBAAkB,IAC9F2wB,EAA0B,QAAIhsC,KAAK80B,SAEnCxlB,EAAyBtP,KAAK+O,WAC9Bi9B,EAAmC,kBAAK1qC,EAAOka,oBAAsB,EAAIxb,KAAKmqC,gBAAkB7oC,EAAOma,qBACvGuwB,EAAyC,uBAAInhC,KAAKkB,MAAM,IAAM/L,KAAK8yB,wBAA0BxxB,EAAOoa,4BAA8B,KAElInM,EAAsBvP,KAAK+O,WAC3Bi9B,EAAsB,IAAInhC,KAAKkB,MAAM,KAAO/L,KAAKk0B,IAAM5yB,EAAO2U,WAAa3U,EAAO2U,WAClF+1B,EAA2B,SAAIhsC,KAAKm0B,UAEpC3kB,EAAqBxP,KAAK+O,WAC1Bi9B,EAAyB,OAAInhC,KAAKkB,MAAM,IAAM/L,KAAKgzB,QAAU1xB,EAAO8U,YAAc,KAElF3G,EAAmBzP,KAAK+O,WACxBi9B,EAA8B,YAAInhC,KAAKkB,MAAM,IAAM/L,KAAK00B,aAAepzB,EAAOuP,iBAAmB,IACjGm7B,EAAiC,eAAInhC,KAAKkB,MAAM,KAAQ/L,KAAKoqC,UAAY,GAAK9oC,EAAOsP,oBAAsBtP,EAAOuQ,aAAevQ,EAAOsQ,eAAiB,KAEzJlC,EAAqB1P,KAAK+O,WAC1Bi9B,EAAyB,OAAInhC,KAAKkB,MAAM,IAAM/L,KAAKwyB,QAAUlxB,EAAO4P,YAAc,KAGzE,GAATlR,KAAKiV,OACL+2B,EAAgC,cAAInhC,KAAKkB,MAAM,IAAQi3B,GAAMmJ,uBAAuBnsC,KAAKopC,SAAW,IACpG4C,EAA+B,aAAIhJ,GAAMoJ,sBAAsBpsC,KAAKqpC,UAG3D,GAATrpC,KAAKiV,MAA6C,GAATjV,KAAKiV,KAAqC,CACnF+2B,EAA4B,UAAI,GAChC,IAAK,IAAIzhC,EAAY,EAAGA,EAAIjJ,EAAOuX,uBAAwBtO,IACvDyhC,EAA4B,UAAEzhC,GAAKM,KAAKkB,MAAM,IAAM/L,KAAK4qC,cAAcnY,UAAUloB,GAAKjJ,EAAO2X,aAEpG,CAED,GAAa,GAATjZ,KAAKiV,KACL+2B,EAAuB,KAAI1qC,EAAOkK,WAAWxL,KAAK6oC,WAAW3kC,UAC1D,GAAa,GAATlE,KAAKiV,KAAiC,CAC7C+2B,EAA2B,SAAI,GAC/B,IAAK,IAAIzhC,EAAY,EAAGA,EAAIjJ,EAAOmX,sBAAuBlO,IACtDyhC,EAA2B,SAAEzhC,GAAKM,KAAKkB,MAAM,IAAM/L,KAAKirC,aAAahY,SAAS1oB,GAAKjJ,EAAOsX,YAEjG,MAAM,GAAa,GAAT5Y,KAAKiV,KAAgC,CAC5C+2B,EAAwB,MAAI,GAC5B,IAAK,IAAI1b,EAAY,EAAGA,EAAIhvB,EAAO0Y,UAAWsW,IAAK,CAC/C,MAAM2C,EAAqB,GAC3B,IAAK,IAAI1oB,EAAY,EAAGA,EAAIjJ,EAAOmX,sBAAuBlO,IACtD0oB,EAAS1oB,GAAKM,KAAKkB,MAAM,IAAM/L,KAAK8qC,qBAAqBxa,GAAG2C,SAAS1oB,GAAKjJ,EAAOsX,aAErFozB,EAAwB,MAAE1b,GAAK,CAC3BuB,eAAkB7xB,KAAKqsC,mBAAmB/b,GAAGpsB,KAC7C+uB,SAAYA,EAEnB,CACJ,MAAM,GAAa,GAATjzB,KAAKiV,KACZ+2B,EAAuB,KAAI1qC,EAAOC,UAAUvB,KAAKqB,UAAU6C,KAE3D8nC,EAAyB,OAAIhsC,KAAKsxB,QAAUhwB,EAAOiU,QAAQ1S,OAAS,SAAWvB,EAAOiU,QAAQvV,KAAKsxB,QAAQptB,KAEvGlE,KAAKsxB,QAAUhwB,EAAOiU,QAAQ1S,SAC9BmpC,EAA+B,aAAIhsC,KAAKypC,aACxCuC,EAA+B,aAAIhsC,KAAK0pC,aACxCsC,EAA+B,aAAIhsC,KAAK2pC,aACxCqC,EAAmC,iBAAIhsC,KAAK4pC,iBAC5CoC,EAA6B,WAAIhsC,KAAK6pC,YAItCmC,EAA8C,4BAAIhsC,KAAK+0B,4BACvDiX,EAAoC,kBAAIhsC,KAAKg1B,kBAC7CgX,EAAkC,gBAAIhsC,KAAKi1B,gBAC3C+W,EAAmC,iBAAIhsC,KAAKk1B,iBAC5C8W,EAAwC,sBAAIhsC,KAAKm1B,sBACjD6W,EAAsC,oBAAIhsC,KAAKo1B,yBAEhD,GAAa,GAATp1B,KAAKiV,KACZ+2B,EAA6B,WAAIhsC,KAAKmL,WACtC6gC,EAAgC,cAAIhsC,KAAKkqC,mBACtC,GAAa,IAATlqC,KAAKiV,KACrB+2B,EAA6B,WAAInhC,KAAKkB,MAA4C,IAAtCb,EAAmBlL,KAAKmL,YAAoB,KAAU,IAClG6gC,EAA2B,SAAInhC,KAAKkB,MAAM,IAAM/L,KAAK+pC,iBAAmBzoC,EAAO+X,qBAC/E2yB,EAAyB,OAAInhC,KAAKkB,MAAM,IAAM/L,KAAKgqC,eAAiB1oC,EAAOgY,mBAC3E0yB,EAAwB,MAAInhC,KAAKkB,MAAM,IAAM/L,KAAKiqC,cAAgB3oC,EAAOiY,uBAC9D,GAAa,GAATvZ,KAAKiV,KACX+2B,EAAyB,OAAIhsC,KAAKsxB,QAAUhwB,EAAOiU,QAAQ1S,OAAS,SAAWvB,EAAOiU,QAAQvV,KAAKsxB,QAAQptB,KACvGlE,KAAKsxB,QAAUhwB,EAAOiU,QAAQ1S,SAC9BmpC,EAA+B,aAAIhsC,KAAKypC,aACxCuC,EAA+B,aAAIhsC,KAAK0pC,aACxCsC,EAA+B,aAAIhsC,KAAK2pC,aACxCqC,EAAmC,iBAAIhsC,KAAK4pC,iBAC5CoC,EAA6B,WAAIhsC,KAAK6pC,YAE1CmC,EAAgC,cAAInhC,KAAKkB,MAAM,IAAM/L,KAAK0yB,eAAiBpxB,EAAOga,mBAAqB,SACpG,GAAa,GAATtb,KAAKiV,KACZ+2B,EAAyB,OAAIhsC,KAAKsxB,QAAUhwB,EAAOiU,QAAQ1S,OAAS,SAAWvB,EAAOiU,QAAQvV,KAAKsxB,QAAQptB,KACvGlE,KAAKsxB,QAAUhwB,EAAOiU,QAAQ1S,SAC9BmpC,EAA+B,aAAIhsC,KAAKypC,aACxCuC,EAA+B,aAAIhsC,KAAK0pC,aACxCsC,EAA+B,aAAIhsC,KAAK2pC,aACxCqC,EAAmC,iBAAIhsC,KAAK4pC,iBAC5CoC,EAA6B,WAAIhsC,KAAK6pC,iBAEvC,GAAa,GAAT7pC,KAAKiV,MAAsC,IAATjV,KAAKiV,KAA8B,CAC5E,MAAMq3B,EAA0B,GAChC,IAAK,MAAMC,KAAYvsC,KAAKiyB,UACxBqa,EAAc7hC,KAAK,CACfynB,UAAa5wB,EAAOwW,oBAAoBy0B,EAASra,WAAWhuB,KAC5DuJ,UAAa8+B,EAAS9+B,UACtBmnB,SAAYtzB,EAAO+a,cAAckwB,EAAS3X,UAAU1wB,KACpDiH,WAAcohC,EAASphC,aAG/B,GAAY,GAATnL,KAAKiV,KACJ+2B,EAA4B,UAAI1qC,EAAOiW,WAAWvX,KAAK8xB,WAAW5tB,KAClE8nC,EAA+B,aAAI1qC,EAAO8W,UAAUpY,KAAK+xB,cAAc7tB,KACvE8nC,EAAoC,kBAAIhsC,KAAKgyB,kBAC7Cga,EAA4B,UAAIM,MAC7B,CAIH,GAHAN,EAA4B,UAAI1qC,EAAOqW,cAAc3X,KAAKqqC,cAAcnmC,KACxE8nC,EAA+B,aAAI1qC,EAAOgX,aAAatY,KAAKsqC,iBAAiBpmC,KAC7E8nC,EAAoC,kBAAIhsC,KAAKgyB,kBACrB,GAArBhyB,KAAKqqC,aAAkB,CACtB,MAAME,EAAuB,GAC7BA,EAAsB,KAAIvqC,KAAKuqC,gBAAgB7yB,YAC/C6yB,EAA8B,aAAIvqC,KAAKuqC,gBAAgB/yB,aACvDw0B,EAAkC,gBAAIzB,CACzC,CACD,GAA2B,GAAxBvqC,KAAKsqC,gBAAqB,CACzB,MAAMkC,EAAsB,GAC5BA,EAAqB,KAAIxsC,KAAKwqC,mBAAmBnyB,QACjD2zB,EAAiC,eAAIQ,CACxC,CAEDR,EAA4B,UAAIM,CACnC,CACJ,MAAM,GAAa,GAATtsC,KAAKiV,KAAuC,CACnD+2B,EAAuB,KAAI1qC,EAAOC,UAAUvB,KAAKqB,UAAU6C,KAC3D8nC,EAAyB,OAAIhsC,KAAKsxB,QAAUhwB,EAAOiU,QAAQ1S,OAAS,SAAWvB,EAAOiU,QAAQvV,KAAKsxB,QAAQptB,KACvGlE,KAAKsxB,QAAUhwB,EAAOiU,QAAQ1S,SAC9BmpC,EAA+B,aAAIhsC,KAAKypC,aACxCuC,EAA+B,aAAIhsC,KAAK0pC,aACxCsC,EAA+B,aAAIhsC,KAAK2pC,aACxCqC,EAAmC,iBAAIhsC,KAAK4pC,iBAC5CoC,EAA6B,WAAIhsC,KAAK6pC,YAE1CmC,EAAiC,eAAI,IAAIS,aAAa,IACtDT,EAAyC,uBAAI,IAAIS,aAAa,IAC9D,IAAK,IAAIliC,EAAY,EAAGA,EAAIvK,KAAKqyB,eAAexvB,OAAQ0H,IACpDyhC,EAAiC,eAAEzhC,GAAKvK,KAAKqyB,eAAe9nB,EAInE,KAAM,IAAa,GAATvK,KAAKiV,KAWZ,MAAM,IAAI9S,MAAM,gCAVhB6pC,EAA8B,YAAI,GAClCA,EAAiC,eAAI,GACrCA,EAA8B,YAAI,GAClCA,EAA8B,YAAI,GAClC,IAAK,IAAIvL,EAAc,EAAGA,EAAMn/B,EAAO4Y,SAAUumB,IAC7CuL,EAA8B,YAAEvL,GAAOzgC,KAAK2hB,YAAY8e,GACxDuL,EAAiC,eAAEvL,GAAOzgC,KAAK+qC,eAAetK,GAC9DuL,EAA8B,YAAEvL,GAAOzgC,KAAK6c,WAAW4jB,EAI9D,CAED,MAAMvoB,EAAmB,GACzB,IAAK,IAAI3N,EAAI,EAAGA,EAAIvK,KAAKspC,cAAe/+B,IACpC2N,EAAUzN,KAAKzK,KAAKkY,UAAU3N,GAAG+1B,gBAIrC,OAFA0L,EAA4B,UAAI9zB,EAEzB8zB,C,CAIJ,cAAAzK,CAAeyK,EAAuBvK,EAAyBlB,EAAuBmM,EAA0Bp+B,EAA4Bq+B,EAA6B,GACpJplB,MAApBykB,IAA+BA,EAAmB,IAEtD,IAAI/2B,EAAuB3T,EAAO4Q,oBAAoBglB,QAAQ8U,EAAuB,MAcrF,IAbkB,GAAT/2B,IAAYA,EAAOsrB,EAAY,EAAyBkB,EAAgB,EAAuB,GACxGzhC,KAAKmrC,gBAAgBl2B,EAAMwsB,EAAgBlB,GAEThZ,MAA9BykB,EAAyB,SACzBhsC,KAAKktB,OAAS8e,EAAyB,SAAM,GAGfzkB,MAA9BykB,EAAyB,OACzBhsC,KAAKqzB,OAASgI,IAAO/5B,EAAOyU,YAAc,EAAIzU,EAAOyU,YAAc,EAAK,EAAgC,EAA7Bi2B,EAAyB,QAEpGhsC,KAAKqzB,OAAS,EAGd7wB,MAAM2b,QAAQ6tB,EAA0B,SAAI,CAC5C,IAAIj9B,EAAkB,EACtB,IAAK,IAAIxE,EAAY,EAAGA,EAAIyhC,EAA0B,QAAEnpC,OAAQ0H,IAC5DwE,GAAqB,GAAKzN,EAAOsU,YAAYshB,QAAQ8U,EAA0B,QAAEzhC,IAErFvK,KAAK+O,QAAkB,KAAPA,CACnB,KAAM,CAEH,MAAM69B,EAA+B,CAAC,OAAQ,SAAU,SAAU,mBAClE5sC,KAAK+O,QAAU69B,EAAmB1V,QAAQ8U,EAA0B,UAC/C,GAAjBhsC,KAAK+O,UAAe/O,KAAK+O,QAAoB,GAAT/O,KAAKiV,KAAgC,EAAI,EACpF,CAEDjV,KAAKmxB,WAAa7vB,EAAOoT,YAAYhQ,WAAmB,OAAEF,MAC1D,MAAMqoC,EAA0Bb,EAA6B,YAAKA,EAA2B,SAC7F,GAA0BzkB,MAAtBslB,EAAiC,CACjC,IAAI1b,EAAqC7vB,EAAOoT,YAAYhQ,WAAWmoC,GACvE,GAAyCtlB,MAArCykB,EAAgC,eAAsDzkB,MAApCykB,EAA+B,aAAgB,CACjG,MAAMZ,EAAuB,CACzB0B,OAAU,CAAE3b,WAAY,YAAaC,cAAe,EAAK7c,cAAe,GACxEw4B,SAAY,CAAE5b,WAAY,YAAaC,cAAe,EAAK7c,cAAe,GAC1Ey4B,OAAU,CAAE7b,WAAY,SAAUC,cAAe,EAAK7c,cAAe,GACrE04B,KAAQ,CAAE9b,WAAY,SAAUC,cAAe,EAAK7c,cAAe,GACnE24B,OAAU,CAAE/b,WAAY,SAAUC,cAAe,KAAO7c,cAAe,GACvE44B,KAAQ,CAAEhc,WAAY,SAAUC,cAAe,KAAO7c,cAAe,GAIrE64B,MAAS,CAAEjc,WAAY,mBAAoBC,cAAe,KAAO7c,cAAe,GAChF,aAAc,CAAE4c,WAAY,SAAUC,cAAe,IAAM7c,aAAc,GACzE,YAAa,CAAE4c,WAAY,SAAUC,cAAe,EAAK7c,aAAc,IACvE,cAAe,CAAE4c,WAAY,SAAUC,cAAe,MAAQ7c,aAAc,IAC5E,YAAa,CAAE4c,WAAY,SAAUC,cAAe,IAAM7c,aAAc,KACzEs4B,GACmBtlB,MAAlB6jB,IACAja,EAAa7vB,EAAOoT,YAAYhQ,WAAW0mC,EAAeja,YAE1DnxB,KAAKopC,OAASpG,GAAMqK,uBAAuBjC,EAAeha,eAC1DpxB,KAAKqpC,QAAUrG,GAAMsK,sBAAsBlC,EAAe72B,cAEjE,CACiBgT,MAAd4J,IAAyBnxB,KAAKmxB,WAAaA,EAAW3sB,OAEtDxE,KAAKmxB,YAAc7vB,EAAOoT,YAAYhQ,WAAmB,OAAEF,QAE3DxE,KAAK+O,QAAuB,KAAZ/O,KAAK+O,QAE5B,CAGwCwY,MAArCykB,EAAgC,gBAChChsC,KAAKopC,OAASpG,GAAMqK,wBAAwBrB,EAAgC,gBAExCzkB,MAApCykB,EAA+B,eAC/BhsC,KAAKqpC,QAAUrG,GAAMsK,uBAAuBtB,EAA+B,eAG/E,CAEI,MAAMuB,EAAqBvB,EAAwB,MAC7CwB,EAAuC,CAAEC,QAAW,gBACpDpc,EAA2B/vB,EAAOyV,OAAOrS,WAAW8oC,EAAiBD,KAAmBjsC,EAAOyV,OAAOrS,WAAW6oC,GAC1GhmB,MAAT8J,EACArxB,KAAKqxB,MAAQA,EAAM7sB,MAGN,GAATxE,KAAKiV,KACLjV,KAAKqxB,MAAQ/vB,EAAOyV,OAAOrS,WAAqB,SAAEF,MAClC,GAATxE,KAAKiV,KACZjV,KAAKqxB,MAAQ/vB,EAAOyV,OAAOrS,WAAkB,MAAEF,MAC/B,GAATxE,KAAKiV,KACZjV,KAAKqxB,MAAQ/vB,EAAOyV,OAAOrS,WAAqB,SAAEF,MAClC,GAATxE,KAAKiV,MAAoC,IAATjV,KAAKiV,KAC5CjV,KAAKqxB,MAAQ/vB,EAAOyV,OAAOrS,WAAW,mBAAmBF,MAEzDxE,KAAKqxB,MAAQ/vB,EAAOyV,OAAOrS,WAAyB,aAAEF,KAGjE,CAEDxE,KAAKsxB,OAAShwB,EAAOiU,QAAQ7Q,WAAiB,KAAEF,MAChD,MAAMkpC,EAAsB1B,EAAyB,QAAKA,EAA2B,UAAKA,EAAyB,OACnH,GAAsBzkB,MAAlBmmB,EAA6B,CAC7B,MAAMC,EAAwC,CAAEC,MAAS,OAAQC,OAAU,QAASC,QAAW,UACzFxc,EAA6BhwB,EAAOiU,QAAQ7Q,WAAWipC,EAAkBD,KAAoBpsC,EAAOiU,QAAQ7Q,WAAWgpC,GAC/GnmB,MAAV+J,IAAqBtxB,KAAKsxB,OAASA,EAAO9sB,OACxB,UAAlBkpC,IAA4B1tC,KAAKsxB,OAAShwB,EAAOiU,QAAQ1S,OAChE,CAED7C,KAAKypC,aAAoDliB,MAApCykB,EAA+B,aAAkB1qC,EAAOiU,QAAQvV,KAAKsxB,QAAQ9b,OAASw2B,EAA+B,aAC1IhsC,KAAK0pC,aAAoDniB,MAApCykB,EAA+B,aAAkB1qC,EAAOiU,QAAQvV,KAAKsxB,QAAQ7b,OAASu2B,EAA+B,aAC1IhsC,KAAK2pC,aAAoDpiB,MAApCykB,EAA+B,aAAkB1qC,EAAOiU,QAAQvV,KAAKsxB,QAAQ5b,OAASs2B,EAA+B,aAC1IhsC,KAAK4pC,iBAA4DriB,MAAxCykB,EAAmC,iBAAkB1qC,EAAOiU,QAAQvV,KAAKsxB,QAAQntB,WAAa6nC,EAAmC,iBAC1JhsC,KAAK6pC,WAAgDtiB,MAAlCykB,EAA6B,WAAkB1qC,EAAOiU,QAAQvV,KAAKsxB,QAAQ3b,KAAOq2B,EAA6B,WAEhG,kBAA9BA,EAAyB,SAEzBhsC,KAAKsxB,OAAShwB,EAAOiU,QAAQ7Q,WAAgB,IAAEF,MAC/CxE,KAAKqxB,MAAQ/vB,EAAOyV,OAAOrS,WAAW,mBAAmBF,OAEzDxE,KAAKqxB,OAAS/vB,EAAOyV,OAAOrS,WAAyB,aAAEF,OAAUhC,MAAM2b,QAAQ6tB,EAA0B,WAEzGhsC,KAAK+O,QAAuB,KAAZ/O,KAAK+O,SAGsBwY,MAA3CykB,EAAsC,sBACtChsC,KAAKupC,WAAalO,GAAM,EAAG/5B,EAAOiZ,gBAAiB1P,KAAKkB,OAAOigC,EAAsC,uBAElEzkB,MAAnCykB,EAA8B,cAC9BhsC,KAAKwpC,OAASnO,GAAM/5B,EAAOqZ,UAAWrZ,EAAOoZ,UAAY,EAAG7P,KAAKkB,MAAMi3B,GAAM+K,eAAe/B,EAA8B,gBAG9HhsC,KAAKyxB,QAAUnwB,EAAO0T,SAAStQ,WAAiB,KAAEF,MAClD,MAAMwpC,EAAuBhC,EAA0B,SAAKA,EAAyB,OACrF,GAAuBzkB,MAAnBymB,EAA8B,CAE9B,MAAMC,EAAyC,CAAE,gBAAiB,QAAS,kBAAmB,UAAW,gBAAiB,SACpHxc,EAA+BnwB,EAAO0T,SAAStQ,WAAWupC,EAAmBP,KAAoBpsC,EAAO0T,SAAStQ,WAAWspC,GACnHzmB,MAAXkK,EACAzxB,KAAKyxB,QAAUA,EAAQjtB,MACC,UAAnBwpC,IACLhuC,KAAKyxB,QAAUnwB,EAAO0T,SAASnS,QAE/B7C,KAAKyxB,SAAWnwB,EAAO0T,SAASnS,QAChC7C,KAAK8zB,aAAekY,EAA+B,aACnDhsC,KAAKg0B,aAAegY,EAA+B,aACnDhsC,KAAK+zB,aAAeiY,EAA+B,aACnDhsC,KAAKi0B,YAAc+X,EAA8B,cAGjDhsC,KAAK8zB,aAAexyB,EAAO0T,SAAShV,KAAKyxB,SAAShkB,UAClDzN,KAAK+zB,aAAezyB,EAAO0T,SAAShV,KAAKyxB,SAASvc,WAAa,EAC/DlV,KAAKg0B,aAAe,GACpBh0B,KAAKi0B,YAAc3yB,EAAO0T,SAAShV,KAAKyxB,SAASxc,MAIjDwc,GAAWnwB,EAAO0T,SAAStQ,WAAiB,OAC5C1E,KAAK+O,QAAuB,IAAZ/O,KAAK+O,QAE5B,CAoFD,GAlF+BwY,MAA3BykB,EAAsB,KACtBhsC,KAAKk0B,IAAMmH,GAAM,EAAG/5B,EAAO4U,OAAS,EAAGrL,KAAKkB,MAAMzK,EAAO2U,WAAuC,EAA1B+1B,EAAsB,KAAS1qC,EAAO2U,UAAY,MAGpHjW,KAAKk0B,KAAO5yB,EAAO2U,YACnBjW,KAAK+O,QAAuB,EAAZ/O,KAAK+O,WAGzB/O,KAAKk0B,IAAM5yB,EAAO2U,UAElBjW,KAAK+O,QAAuB,EAAZ/O,KAAK+O,SAGWwY,MAAhCykB,EAA2B,SAC3BhsC,KAAKm0B,SAA2C,EAA/B6X,EAA2B,SAE5ChsC,KAAKm0B,SAAW,GAGc5M,MAA9BykB,EAAyB,OACzBhsC,KAAKwpC,OAASnO,GAAM/5B,EAAOqZ,UAAWrZ,EAAOoZ,UAAY,EAAiC,EAA7BsxB,EAAyB,QAE9CzkB,MAAnCykB,EAA8B,cACnChsC,KAAKwpC,OAASloC,EAAOmZ,cAGa8M,MAAlCykB,EAA6B,aAC7BhsC,KAAK+yB,WAAasI,GAAM,EAAG/5B,EAAO+Z,gBAAiBxQ,KAAKkB,OAAOzK,EAAO+Z,gBAAkB,IAAuC,EAAjC2wB,EAA6B,YAAS,OAG5FzkB,MAAxCykB,EAAmC,mBACnChsC,KAAKmqC,eAAiB7oC,EAAOka,oBAAsB,GAAMwwB,EAAmC,iBAAK1qC,EAAOma,sBAE1D8L,MAA9CykB,EAAyC,yBACzChsC,KAAK8yB,uBAAyBuI,GAAM,EAAG/5B,EAAOoa,4BAA6B7Q,KAAKkB,OAAOzK,EAAOoa,4BAA8B,IAAmD,EAA7CswB,EAAyC,wBAAS,OAGjJzkB,MAAnCykB,EAA8B,cAC9BhsC,KAAK00B,YAAc2G,GAAM,EAAG/5B,EAAOuP,iBAAkBhG,KAAKkB,OAAOzK,EAAOuP,iBAAmB,IAAwC,EAAlCm7B,EAA8B,aAAS,OAElGzkB,MAAtCykB,EAAiC,iBACjChsC,KAAKoqC,UAAY/O,GAAM,EAAG/5B,EAAOqP,eAAgB9F,KAAKkB,OAAQigC,EAAiC,gBAAM1qC,EAAOuQ,aAAevQ,EAAOsQ,cAAgBtQ,EAAOsP,mBAAqB,KAG7K+qB,MAAMqQ,EAAyB,UAChChsC,KAAKgzB,OAASqI,GAAM,EAAG/5B,EAAO8U,YAAavL,KAAKkB,OAAOzK,EAAO8U,YAAc,IAAmC,EAA7B41B,EAAyB,QAAS,OAGtFzkB,MAA9BykB,EAAyB,OACzBhsC,KAAKwyB,OAAS6I,GAAM,EAAG/5B,EAAO4P,YAAarG,KAAKkB,OAAOzK,EAAO4P,YAAc,IAAmC,EAA7B86B,EAAyB,QAAS,MAEpHhsC,KAAKwyB,OAASma,EAGoBplB,MAAlCykB,EAA6B,WAC7BhsC,KAAKmL,WAAakwB,GAAM,EAAG/5B,EAAO8J,gBAAkB,EAAGP,KAAKkB,MAAMigC,EAA6B,aAE/FhsC,KAAKmL,WAAa7J,EAAO8J,gBAGOmc,MAAhCykB,EAA2B,SACpChsC,KAAK+pC,iBAAmB1O,GAAM,EAAG/5B,EAAO+X,oBAAsB,EAAGxO,KAAKkB,MAAMzK,EAAO+X,qBAAsD,EAA/B2yB,EAA2B,UAAS,MAE9IhsC,KAAK+pC,iBAAmBzoC,EAAO+X,oBAEEkO,MAA9BykB,EAAyB,OAC5BhsC,KAAKgqC,eAAiB3O,GAAM,EAAG/5B,EAAOgY,kBAAoB,EAAGzO,KAAKkB,MAAMzK,EAAOgY,mBAAkD,EAA7B0yB,EAAyB,QAAS,MAEtIhsC,KAAKgqC,eAAiBn/B,KAAKyS,KAAKhc,EAAOgY,kBAAoB,GAE3BiO,MAA7BykB,EAAwB,MAC3BhsC,KAAKiqC,cAAgB5O,GAAM,EAAG/5B,EAAOiY,iBAAmB,EAAG1O,KAAKkB,MAAMzK,EAAOiY,kBAAgD,EAA5ByyB,EAAwB,OAAS,MAElIhsC,KAAKiqC,cAAgB,EAGyB1iB,MAArCykB,EAAgC,cAChChsC,KAAKkqC,cAAgB7O,GAAM,EAAG,IAAQxwB,KAAKkB,MAAMigC,EAAgC,gBAEjFhsC,KAAKkqC,cAAgB,EAGY3iB,MAAjCykB,EAA4B,UAAgB,CAC5C,IAAK,IAAIzhC,EAAY,EAAGA,EAAIjJ,EAAOuX,uBAAwBtO,IACvDvK,KAAK4qC,cAAcnY,UAAUloB,GAAKM,KAAKiM,IAAI,EAAGjM,KAAKuC,IAAI9L,EAAO2X,aAAcpO,KAAKkB,MAAMzK,EAAO2X,cAAiB+yB,EAA4B,UAAEzhC,GAAM,OAEvJvK,KAAK4qC,cAAc9H,qBACtB,MACG9iC,KAAK4qC,cAAcvK,QAGvB,GAAoC9Y,MAAhCykB,EAA2B,SAC3B,IAAK,IAAIzhC,EAAY,EAAGA,EAAIjJ,EAAOmX,sBAAuBlO,IACtDvK,KAAKirC,aAAahY,SAAS1oB,GAAKM,KAAKiM,IAAI,EAAGjM,KAAKuC,IAAI9L,EAAOsX,YAAa/N,KAAKkB,MAAMzK,EAAOsX,aAAgBozB,EAA2B,SAAEzhC,GAAM,YAGlJvK,KAAKirC,aAAa5K,MAAMoB,GAGala,MAArCykB,EAAgC,cAChChsC,KAAK0yB,cAAgB2I,GAAM,EAAG/5B,EAAOga,mBAAoBzQ,KAAKkB,OAAOzK,EAAOga,mBAAqB,IAA0C,EAApC0wB,EAAgC,eAAS,MAEhJhsC,KAAK0yB,cAAgB,GAGZ,GAAT1yB,KAAKiV,OACLjV,KAAK6oC,UAAYvnC,EAAOkK,WAAW0iC,WAAU7jC,GAAQA,EAAKnG,MAAQ8nC,EAAuB,OACzD,cAA5BA,EAAuB,OAAmBhsC,KAAK6oC,UAAYvnC,EAAOkK,WAAW0iC,WAAU7jC,GAAqB,QAAbA,EAAKnG,QACxE,kBAA5B8nC,EAAuB,OAAuBhsC,KAAK6oC,UAAYvnC,EAAOkK,WAAW0iC,WAAU7jC,GAAqB,YAAbA,EAAKnG,SACrF,GAAnBlE,KAAK6oC,YAAiB7oC,KAAK6oC,UAAY,IAG/C,MAAMsF,EAA0C,CAAE3kB,OAAU,YAAa4kB,OAAU,OAAQ,UAAW,UAAW,UAAW,UAAW,UAAW,WAC5IC,EAAenqC,GAAkEqjB,MAA7B4mB,EAAoBjqC,GAAsB5C,EAAO4W,UAAUxT,WAAWypC,EAAoBjqC,IAAS5C,EAAO4W,UAAUxT,WAAWR,GAEzL,GAAa,GAATlE,KAAKiV,MAC4BsS,MAA7BykB,EAAwB,MACxB,IAAK,IAAI1b,EAAY,EAAGA,EAAIhvB,EAAO0Y,UAAWsW,IAAK,CAC/C,MAAMge,EAAYtC,EAAwB,MAAE1b,GAC5C,GAAY/I,MAAR+mB,EAAJ,CAGA,GADAtuC,KAAK6qC,iBAAiBva,GAAKhvB,EAAO4W,UAAUxT,WAAW,WAAWF,MACpC+iB,MAA1B+mB,EAAqB,eAAgB,CACrC,MAAMlc,EAAiCic,EAAYC,EAAqB,gBACxD/mB,MAAZ6K,IAAuBpyB,KAAK6qC,iBAAiBva,GAAK8B,EAAS5tB,MAClE,CACD,GAAwB+iB,MAApB+mB,EAAe,SACf,IAAK,IAAI/jC,EAAY,EAAGA,EAAIjJ,EAAOmX,sBAAuBlO,IACtDvK,KAAK8qC,qBAAqBxa,GAAG2C,SAAS1oB,GAAKM,KAAKiM,IAAI,EAAGjM,KAAKuC,IAAI9L,EAAOsX,YAAa/N,KAAKkB,MAAMzK,EAAOsX,aAAgB01B,EAAe,SAAE/jC,GAAM,MAT9H,CAY1B,CAIT,GAAa,GAATvK,KAAKiV,KAA6B,CAClC,MAAMs5B,EAAsC,CAAEC,SAAY,EAAGC,OAAU,EAAG,aAAc,EAAG,eAAgB,EAAGC,SAAY,EAAG,aAAc,EAAG,eAAgB,EAAGC,MAAS,EAAGC,QAAW,GAC9KC,EAAsC,CAAE,YAAa,GAAI,eAAgB,GAAI,aAAc,GAAIC,IAAO,GAAIC,OAAU,GAAI,aAAc,GAAI,cAAe,GAAI,WAAY,GAAI,kBAAmB,GAAIC,MAAS,GAAIC,MAAS,GAAI,gBAAiB,GAAIC,KAAQ,GAAI,aAAc,GAAIC,QAAW,GAAIC,YAAe,GAAIC,SAAY,GAAI,iBAAkB,GAAI,mBAAoB,IAC9WC,EAAuC,CAAE,cAAe,GAAI,cAAe,GAAI,YAAa,GAAI,WAAY,GAAIC,UAAa,GAAI,eAAgB,GAAI,aAAc,GAAIC,SAAY,GAAI,aAAc,GAAI,cAAe,GAAI,aAAc,GAAI,cAAe,GAAIC,WAAc,GAAI,cAAe,IAC7SC,EAAsC,CAAC,cAAe,GAAI,cAAe,GAAIC,UAAa,GAAI,WAAY,GAAI,cAAe,GAAI,gBAAiB,GAAIC,OAAU,GAAIC,MAAS,GAAI,eAAgB,GAAI,aAAc,GAAG,aAAc,IACpOC,EAAoC,CAACC,MAAS,GAAI,kBAAmB,GAAI,mBAAoB,GAAI,iBAAkB,GAAI,YAAa,GAAI,YAAa,GAAI,gBAAiB,GAAIC,QAAW,GAAI,YAAa,GAAI,eAAgB,GAAI,aAAc,GAAI,cAAe,GAAI,SAAU,GAAI,SAAU,GAAI,aAAc,GAAI,uBAAwB,IAC7UC,EAA4C,CAACC,KAAQ,GAAIC,MAAS,GAAIC,OAAU,GAAIC,IAAO,GAAIC,UAAa,GAAIC,QAAW,GAAIC,UAAa,GAAIC,aAAgB,GAAI,kBAAmB,GAAIC,MAAS,GAAIC,YAAe,GAAI,UAAW,GAAIC,MAAS,GAAIC,gBAAmB,IAAKC,MAAS,IAAK,gBAAiB,IAAK,iBAAkB,IAAK,aAAc,IAAK,mBAAoB,IAAK,kBAAmB,IAAKC,KAAQ,IAAKC,cAAiB,IAAKC,aAAgB,IAAKC,cAAiB,IAAKC,YAAe,IAAKC,UAAa,IAAKC,UAAa,IAAKC,YAAe,IAAKC,QAAW,IAAK,YAAa,IAAKC,QAAW,IAAKC,UAAa,IAAKC,YAAe,KAGznB1xC,KAAKqB,UAAY,EACjB,MAAMswC,EAAkB3F,EAAuB,KAC/C,IAAK,MAAM4F,IAAS,CAChBrD,EACAM,EACAS,EACAI,EACAI,EACAG,GAEA,IAAsB,GAAlBjwC,KAAKqB,UAAoCkmB,MAAlBqqB,EAAMD,IAA6DpqB,MAApCjmB,EAAOC,UAAUqwC,EAAMD,IAAwB,CACrG3xC,KAAKqB,SAAWuwC,EAAMD,GACtB,KACH,CAEL,IAAsB,GAAlB3xC,KAAKqB,SAAgB,CACrB,MAAMwwC,EAAiCvwC,EAAOC,UAAU2sC,WAAU7jC,GAAQA,EAAKnG,MAAQytC,KACxD,GAA3BE,IAA8B7xC,KAAKqB,SAAWwwC,EACrD,EAEW,GAAlB7xC,KAAKqB,WAAgBrB,KAAKqB,SAAW,EAClC,CAED,GAAa,GAATrB,KAAKiV,MAAsC,IAATjV,KAAKiV,KAA8B,CACzD,GAATjV,KAAKiV,MACJjV,KAAK8xB,UAAYxwB,EAAOiW,WAAW22B,WAAUpc,GAAaA,EAAU5tB,MAAQ8nC,EAA4B,aACjF,GAAnBhsC,KAAK8xB,YAAiB9xB,KAAK8xB,UAAY,GAC3C9xB,KAAK+xB,aAAezwB,EAAO8W,UAAU81B,WAAUvV,GAAYA,EAASz0B,MAAQ8nC,EAA+B,gBACjF,GAAtBhsC,KAAK+xB,eAAoB/xB,KAAK+xB,aAAe,KAEjD/xB,KAAKqqC,aAAe/oC,EAAOqW,cAAcu2B,WAAU7D,GAAgBA,EAAanmC,MAAQ8nC,EAA4B,aAC1F,GAAtBhsC,KAAKqqC,eAAoBrqC,KAAKqqC,aAAe,GACzB,GAArBrqC,KAAKqqC,aACJrqC,KAAKuqC,gBAAgBxmC,IAAIioC,EAAkC,gBAAgB,aAAGA,EAAkC,gBAAQ,MAExHhsC,KAAKuqC,gBAAgBjI,WAAWtiC,KAAKqqC,cAEzCrqC,KAAKsqC,gBAAkBhpC,EAAOgX,aAAa41B,WAAU4D,GAAeA,EAAY5tC,MAAQ8nC,EAA+B,gBAC1F,GAAzBhsC,KAAKsqC,kBAAuBtqC,KAAKsqC,gBAAkB,GAC5B,GAAxBtqC,KAAKsqC,gBACJtqC,KAAKwqC,mBAAmBzmC,IAAIioC,EAAiC,eAAQ,MAErEhsC,KAAKwqC,mBAAmBlI,WAAWtiC,KAAKsqC,kBAGH/iB,MAAzCykB,EAAoC,kBACpChsC,KAAKgyB,kBAAoBqJ,GAAM,EAAG/5B,EAAOuW,qBAAuB,EAA2C,EAAxCm0B,EAAoC,mBAEvGhsC,KAAKgyB,kBAAoB,EAG7B,IAAK,IAAI1B,EAAY,EAAGA,EAAIhvB,EAAO+V,eAA0B,IAATrX,KAAKiV,KAA6B,EAAE,GAAIqb,IAAK,CAC7F,MAAMic,EAAqBvsC,KAAKiyB,UAAU3B,GAC1C,IAAIyhB,EACiCxqB,MAAjCykB,EAA4B,YAAgB+F,EAAiB/F,EAA4B,UAAE1b,IACzE/I,MAAlBwqB,IAA6BA,EAAiB,IAElDxF,EAASra,UAAY5wB,EAAOwW,oBAAoBo2B,WAAU1J,GAAQA,EAAKtgC,MAAQ6tC,EAA0B,aAC9E,GAAvBxF,EAASra,YAAiBqa,EAASra,UAAY,GAChB3K,MAA/BwqB,EAA0B,UAC1BxF,EAAS9+B,UAAY4tB,GAAM,EAAG/5B,EAAOuW,qBAAuB,EAAiC,EAA9Bk6B,EAA0B,WAEzFxF,EAAS9+B,UAAY,EAES8Z,MAA9BwqB,EAAyB,UACzBxF,EAAS3X,SAAWtzB,EAAO+a,cAAc6xB,WAAU7jC,GAAQA,EAAKnG,MAAQ6tC,EAAyB,YACvE,GAAtBxF,EAAS3X,WAEyB,UAA9Bmd,EAAyB,UACzBxF,EAAS3X,SAAWtzB,EAAO+a,cAAc3X,WAAW,eAAeF,MACnE+nC,EAASphC,WAAa,GAEtBohC,EAAS3X,SAAW,IAK5B2X,EAAS3X,SAAW,EAEYrN,MAAhCwqB,EAA2B,WAC3BxF,EAASphC,WAA4C,EAA/B4mC,EAA2B,WAEjDxF,EAASphC,WAAa,CAE7B,CACJ,MACI,GAAa,GAATnL,KAAKiV,MACV,GAAI+2B,EAAiC,eAAG,CAEpC,IAAK,IAAIzhC,EAAY,EAAGA,EAAI,GAAIA,IAC5BvK,KAAKqyB,eAAe9nB,GAAKyhC,EAAiC,eAAEzhC,GAIhE,IAAID,EAAc,EAClB,IAAK,IAAIC,EAAY,EAAGA,EAAIvK,KAAKqyB,eAAexvB,OAAQ0H,IACpDD,GAAOtK,KAAKqyB,eAAe9nB,GAE/B,MAAMC,EAAkBF,EAAMtK,KAAKqyB,eAAexvB,OAGlD,IAAImI,EAAqB,EACrBkgC,EAAmB,EACvB,IAAK,IAAI3gC,EAAY,EAAGA,EAAIvK,KAAKqyB,eAAexvB,OAAQ0H,IACpDS,GAAckgC,EACdA,EAAWlrC,KAAKqyB,eAAe9nB,GAAKC,EACpCxK,KAAKo0B,uBAAuB7pB,GAAKS,EAIrChL,KAAKo0B,uBAAuB,IAAM,CACrC,OACE,GAAa,GAATp0B,KAAKiV,MAC2BsS,MAAnCykB,EAA8B,YAC9B,IAAK,IAAIvL,EAAc,EAAGA,EAAMn/B,EAAO4Y,SAAUumB,IAC7CzgC,KAAK2hB,YAAY8e,GAAOuL,EAA8B,YAAEvL,GACxDzgC,KAAK+qC,eAAetK,GAAOuL,EAAiC,eAAEvL,GAC9DzgC,KAAK6c,WAAW4jB,GAAOuL,EAA8B,YAAEvL,GAKnE,GAAa,GAATzgC,KAAKiV,KAA4B,CAE7BjV,KAAKqxB,OAAS/vB,EAAOyV,OAAOrS,WAAqB,SAAEF,OAA8C+iB,MAArCykB,EAAgC,cAC5FhsC,KAAK4zB,cAAgBoY,EAAgC,cAGrDhsC,KAAK4zB,cAAgB,EAAoB,EAAI,GAGPrM,MAAtCykB,EAAiC,eACjChsC,KAAK2zB,eAAiBqY,EAAiC,eAGvDhsC,KAAK2zB,eAAiBrlB,EAGqBiZ,MAA3CykB,EAAsC,oBACtChsC,KAAK0zB,oBAAsBsY,EAAsC,oBAGjEhsC,KAAK0zB,qBAAsB,EAGInM,MAA/BykB,EAA0B,QAC1BhsC,KAAK80B,QAAUkX,EAA0B,QAGzChsC,KAAK80B,SAAU,EAGuBvN,MAAtCykB,EAAiC,iBACjChsC,KAAKs0B,eAAiB0X,EAAiC,gBAElBzkB,MAArCykB,EAAgC,gBAChChsC,KAAKgpC,oBAAsBgD,EAAgC,eAErBzkB,MAAtCykB,EAAiC,iBACjChsC,KAAKipC,qBAAuB+C,EAAiC,gBAE3BzkB,MAAlCykB,EAA6B,WAC7BhsC,KAAKuyB,WAAWgP,eAAeyK,EAA6B,YAE5DhsC,KAAKuyB,WAAW8N,QAEpB,IAAK,IAAI91B,EAAY,EAAGA,EAAIjJ,EAAO6S,iBAAkB5J,IAC7C/H,MAAM2b,QAAQ6tB,EAAiB,iBAAmBzhC,MAClDvK,KAAKmpC,eAAe5+B,GAAK,IAAIy7B,GAC7BhmC,KAAKmpC,eAAe5+B,GAAIg3B,eAAeyK,EAAiB,iBAAmBzhC,KAYnF,GATwCgd,MAApCykB,EAA+B,eAC/BhsC,KAAKszB,aAAe0Y,EAA+B,cAEhBzkB,MAAnCykB,EAA8B,cAC9BhsC,KAAK8oC,kBAAoBkD,EAA8B,aAEnBzkB,MAApCykB,EAA+B,eAC/BhsC,KAAK+oC,mBAAqBiD,EAA+B,cAEzDxpC,MAAM2b,QAAQ6tB,EAA2B,UACzChsC,KAAKkxB,SAASqQ,eAAeyK,EAA2B,cACrD,CACHhsC,KAAKkxB,SAASmP,QAEd,MAAM+K,EAAiC,GAGjC4G,EAA4B,IAC5BC,EAA4B,GAC5BC,EAA+B,EAerC,GAd0C3qB,MAAtCykB,EAAiC,eACjCZ,EAAeE,aAAejQ,GAAM,EAAG4W,EAAmBpnC,KAAKkB,MAAOkmC,EAAoB,EAAK,EAAMpnC,KAAKT,KAA0C,EAArC4hC,EAAiC,gBAASgG,GAAqBnnC,KAAKsnC,MAEnL/G,EAAeE,aAAyB,GAATtrC,KAAKiV,KAA+B,EAAI,GAEhCsS,MAAvCykB,EAAkC,gBAClCZ,EAAexZ,gBAAkByJ,GAAM,EAAG6W,EAAsBrnC,KAAKkB,OAAOmmC,EAAuB,IAA4C,EAAtClG,EAAkC,iBAAS,MAEpJZ,EAAexZ,gBAAkB,EAGrCwZ,EAAevZ,eAAiBwc,EAAYrC,EAAiC,gBAC7EZ,EAAelY,cAAgBmb,EAAYrC,EAAgC,eAC3EZ,EAAe9Y,iBAAmB+b,EAAYrC,EAAmC,kBAC7ExpC,MAAM2b,QAAQ6tB,EAA4B,WAAI,CAC9CZ,EAAeM,kBAAoB,GACnC,IAAK,IAAIpb,EAAY,EAAGA,EAAIhvB,EAAO+V,cAAeiZ,IAAK,CACnD,IAAI8B,EACoC7K,MAApCykB,EAA4B,UAAE1b,KAC9B8B,EAAWic,EAAYrC,EAA4B,UAAE1b,GAAa,WAEtE8a,EAAeM,kBAAkBpb,GAAkB/I,MAAZ6K,EAAyBA,EAAW9wB,EAAO4W,UAAUxT,WAAiB,IAChH,CACJ,CAGD,GAAkC6iB,MAA9BykB,EAAyB,OAAgB,CACzC,MAAMoG,EAA2B,CAAC,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAC/CC,EAA6B,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,UAAW,UAAW,WACpFC,EAAwB,CAAC,OAAQ,SAAU,SAAU,OAAQ,eAAgB,eAAgB,cAC7FC,EAAqC,CAAE,gBAAiB,EAAG,iBAAkB,EAAG,eAAgB,EAAG,cAAe,GACxH,IAAIvK,EAAqEzgB,MAA9CgrB,EAAevG,EAAyB,QAAkBuG,EAAevG,EAAyB,QAAKsG,EAAYpb,QAAQ8U,EAAyB,SAC1J,GAAjBhE,IAAoBA,EAAe,GACvCoD,EAAeE,aAAe8G,EAAepK,GAC7CoD,EAAevZ,eAAiBwc,EAAYgE,EAAiBrK,IAC7DoD,EAAexZ,gBAAkB,CACpC,CAED5xB,KAAK6mC,sBAAsBuE,GAAgB,EAC9C,CAED,IAAK,IAAI7gC,EAAY,EAAGA,EAAIjJ,EAAO6S,iBAAkB5J,IAC7C/H,MAAM2b,QAAQ6tB,EAAiB,eAAiBzhC,MAChDvK,KAAKkpC,aAAa3+B,GAAK,IAAIy7B,GAC3BhmC,KAAKkpC,aAAa3+B,GAAIg3B,eAAeyK,EAAiB,eAAiBzhC,KAI/E,GAAI/H,MAAM2b,QAAQ6tB,EAA4B,WAAI,CAC9C,MAAMwG,EAAuBxG,EAA4B,UACzD,IAAK,IAAIzhC,EAAI,EAAGA,EAAIioC,EAAc3vC,UAC1B7C,KAAKspC,eAAiBhoC,EAAOqa,kBADKpR,IAAK,CAE3C,MAAMkoC,EAAiC,IAAI/J,GAC3C+J,EAAalR,eAAeiR,EAAcjoC,IAC1CvK,KAAK+rC,YAAY0G,EAAatgB,OAAQsgB,EAAajuC,MAAOiuC,EAAargB,SAC1E,CACJ,CACJ,CAEgB,IAATnd,IACuDsS,MAAnDykB,EAA8C,6BAC9ChsC,KAAK+0B,4BAA8BiX,EAA8C,4BACjFhsC,KAAKg1B,kBAAoBgX,EAAoC,kBAC7DhsC,KAAKi1B,gBAAkB+W,EAAkC,gBACzDhsC,KAAKk1B,iBAAmB8W,EAAmC,iBAC3DhsC,KAAKm1B,sBAAwB6W,EAAwC,sBACrEhsC,KAAKo1B,oBAAsB4W,EAAsC,sBAEjEhsC,KAAK+0B,6BAA8B,EACnC/0B,KAAKg1B,kBAAoB,EACzBh1B,KAAKi1B,gBAAkB3zB,EAAOK,gBAAgB3B,KAAKqB,UAAUiB,QAAQO,OAAS,EAC9E7C,KAAKk1B,iBAAmB,EACxBl1B,KAAKm1B,uBAAwB,EAC7Bn1B,KAAKo1B,oBAAsB,G,CAMpC,yBAAOsd,CAAmB7T,GAC7B,OAAO,IAAQh0B,KAAKoB,IAAI,GAAM4yB,EAAQ,IAAQ,G,CAG3C,WAAAkN,CAAY5Z,EAAgB3tB,EAAe4tB,GAC9C,IAAIugB,GAAqB,EAEzB,GADK3yC,KAAK4yC,uBAAuBzgB,EAAQ3tB,KAAQmuC,GAAY,GACzD3yC,KAAKspC,eAAiBhoC,EAAOqa,iBAAkB,MAAM,IAAIxZ,MAC7D,KAAOnC,KAAKkY,UAAUrV,QAAU7C,KAAKspC,eAAetpC,KAAKkY,UAAUlY,KAAKkY,UAAUrV,QAAU,IAAI6lC,GAChG,MAAMmK,EAAqC7yC,KAAKkY,UAAUlY,KAAKspC,eAC/DuJ,EAAiB1gB,OAASwgB,EAAYrxC,EAAOua,4BAA4BnX,WAAiB,KAAEF,MAAQ2tB,EACpG0gB,EAAiBruC,MAAQmuC,EAAY,EAAInuC,EACzCquC,EAAiBzgB,SAAWA,EAC5BpyB,KAAKspC,e,CAGF,sBAAAsJ,CAAuBzgB,EAAgB3tB,GAC1C,MAAMsuC,EAAqCxxC,EAAOua,4BAA4BsW,GAC9E,GAAI3tB,GAASsuC,EAAiB52B,SAC1B,OAAO,EAEX,GAA8C,MAA1C42B,EAAiB12B,wBAA+F,GAA9D02B,EAAiB12B,sBAAsB8a,QAAQl3B,KAAKiV,MACtG,OAAO,EAEX,GAA+B,MAA3B69B,EAAiB32B,QAAqE,IAAlDnc,KAAK+O,QAAW,GAAK+jC,EAAiB32B,QAC1E,OAAO,EAEX,GAAI22B,EAAiB72B,SAAU,CAE3B,IAAI82B,EAA+B/yC,KAAKuyB,WAAW2T,kBAGnD,GAFIlmC,KAAKs0B,iBACLye,EAAuB,GACvBvuC,GAASuuC,EAAsB,OAAO,CAI7C,CACD,OAAO,C,CAGJ,2BAAAC,GACH,IAAK,IAAIC,EAAwB,EAAGA,EAAgBjzC,KAAKspC,cAAe2J,IAAiB,CACrF,MAAM9gB,EAAiBnyB,KAAKkY,UAAU+6B,GAAe9gB,OAC/C3tB,EAAgBxE,KAAKkY,UAAU+6B,GAAezuC,MAC/CxE,KAAK4yC,uBAAuBzgB,EAAQ3tB,KACrCxE,KAAKkY,UAAU+6B,GAAe9gB,OAAS7wB,EAAOua,4BAA4BnX,WAAiB,KAAEF,MAC7FxE,KAAKkY,UAAU+6B,GAAezuC,MAAQ,EAE7C,C,CAGE,aAAA0uC,GACH,OAAOpkC,EAAyB9O,KAAK+O,SAAWzN,EAAOoT,YAAY1U,KAAKmxB,YACpC,GAA/BnxB,KAAKiV,KAA6B3T,EAAOoT,YAAYhQ,WAAsB,UAAIpD,EAAOoT,YAAYhQ,WAAmB,M,CAGvH,gBAAAyuC,GACH,OAAiB,GAATnzC,KAAKiV,KAAkC,EAAM+tB,GAAMmJ,uBAAuBnsC,KAAKopC,O,CAGpF,eAAAgK,GACH,OAAiB,GAATpzC,KAAKiV,KAAkC3T,EAAOmT,oBAAsBuuB,GAAMoJ,sBAAsBpsC,KAAKqpC,Q,CAG1G,QAAA4C,GACH,OAAOj9B,EAAoBhP,KAAK+O,SAAWzN,EAAOyV,OAAO/W,KAAKqxB,OAAS/vB,EAAOyV,OAAOrS,WAAyB,Y,CAG3G,kBAAA2nC,CAAmBxN,GACtB,GAAuC,GAAnC7+B,KAAKiV,KAAgC,MAAM,IAAI9S,MAAM,+CACzD,OAAOb,EAAO4W,UAAUlY,KAAK6qC,iBAAiBhM,G,QAIzCwU,GAAb,WAAAtzC,GACWC,KAAMk9B,OAAW,EACRl9B,KAAWkgC,YAAiB,GAC5BlgC,KAAQszC,SAAc,GACtBtzC,KAAIuzC,KAAa,GAC1BvzC,KAAKwzC,OAAY,EACjBxzC,KAAIkE,KAAW,E,QAGbuvC,GA2CT,WAAA1zC,CAAY2zC,GA3BL1zC,KAAW2zC,YAAc,GAgBhB3zC,KAAQ4zC,SAAc,GAC/B5zC,KAAU6zC,WAAW,EACrB7zC,KAAS8zC,UAAW,IACpB9zC,KAAoB+zC,qBAAW,EAC/B/zC,KAAcg0C,eAAW,EACzBh0C,KAAgBi0C,iBAAW,EAC3Bj0C,KAAUk0C,WAAW,EACrBl0C,KAAUm0C,WAAW,EACrBn0C,KAAWo0C,YAAW,EACtBp0C,KAAYq0C,aAAW,EAWvBr0C,KAAgBs0C,iBAAG,CAACC,EAAgBC,EAAqBC,EAAwBv6B,KACpF,GAAKq6B,GAAuBhtB,MAAditB,GAA4CjtB,MAAjBktB,GAA0CltB,MAAZrN,EAElE,CAEDA,EAAW5Y,EAAO4Y,SAAWA,EAAW,EAExC,IAAIw6B,EAA0BpzC,EAAOub,WAAW7c,KAAK4zC,SAASY,GAAYtU,YAAYuU,GAAe53B,WAAW3C,IAAW8C,WAGvH23B,EAAqBrzC,EAAOub,WAAWnY,WAAkB,MAAEF,MAK/D,OAJIxE,KAAK4zC,SAASY,GAAYtU,YAAYuU,GAAe53B,WAAW3C,IAAay6B,IAC7ED,EAAM10C,KAAK40C,MAAQtzC,EAAOub,WAAW83B,GAAYz3B,mBAG1CqK,MAAPmtB,EACOA,EAEA,CACd,CAjBG,OAAO,CAiBV,EAIE10C,KAAY60C,aAAG,CAACN,EAAgBC,EAAqBC,EAAwBv6B,KAChF,GAAKq6B,GAAuBhtB,MAAditB,GAA4CjtB,MAAjBktB,GAA0CltB,MAAZrN,EAElE,CAEDA,EAAW5Y,EAAO4Y,SAAWA,EAAW,EAExC,IAAIsT,EAAyBxtB,KAAK4zC,SAASY,GAAYtU,YAAYuU,GAC/DK,EAAYxzC,EAAOub,WAAW2Q,EAAW3Q,WAAW3C,IACpD66B,EAA0BD,EAAU/3B,UAExC,OAAWwK,MAAPwtB,GAEsB,aAAlBD,EAAU5wC,MAAyC,eAAlB4wC,EAAU5wC,OAI3C6wC,EAAMzzC,EAAO6S,iBAAmB,EAC5BqZ,EAAWoT,eAAe1mB,GAAY,GAAKsT,EAAWoT,eAAe1mB,GAAY,EACjF66B,EAAMzzC,EAAOmS,gBACN+Z,EAAWoT,eAAe1mB,GAAY,IAC7C66B,EAAMzzC,EAAOwS,kBAGdihC,GAGA,CACd,CA1BG,OAAO,CA0BV,EAGE/0C,KAAsB2gC,uBAAG,CAAC4T,EAAgBS,EAAoBC,KACjE,GAAKV,EAEA,CACD,IAAIQ,EAA0BzzC,EAAOub,WAAWm4B,GAAYj4B,UAC5D,OAAWwK,MAAPwtB,GAGkBxtB,MAAd0tB,GAAkE,aAAtC3zC,EAAOub,WAAWm4B,GAAY9wC,MAA6D,eAAtC5C,EAAOub,WAAWm4B,GAAY9wC,OAI/G6wC,EAAMzzC,EAAO6S,iBAAmB,EAC5B8gC,EAAa,GAAKA,EAAa,EAC/BF,EAAMzzC,EAAOmS,gBACNwhC,EAAa,IACpBF,EAAMzzC,EAAOwS,kBAIdihC,GAGAzzC,EAAOwU,WACrB,CAtBG,OAAOxU,EAAOwU,WAsBjB,EAtFayR,MAAVmsB,EACA1zC,KAAKk1C,iBAAiBxB,GAEtB1zC,KAAKm1C,eAAc,E,CAsFpB,eAAAC,GACH,OAAOp1C,KAAKgnB,kBAAoBhnB,KAAKinB,kBAAoBjnB,KAAKq1C,e,CAG3D,2BAAAC,GACH,OAAOzqC,KAAKiM,IACR9W,KAAKu1C,mBAAqBj0C,EAAOoQ,0BAA4BpQ,EAAOmQ,mBACpEzR,KAAKshC,mBAAqBhgC,EAAOqQ,0BAA4BrQ,EAAOmQ,mB,CAGrE,2BAAA+jC,CAA4BC,GAC/B,OAAOz1C,KAAK2hC,sCAAsC3hC,KAAK4zC,SAAS6B,G,CAG7D,qCAAA9T,CAAsCzgB,GACzC,OAAOlhB,KAAKu1C,mBACN1qC,KAAKuC,IAAI9L,EAAOoQ,0BAA2BwP,EAAQgf,YAAYr9B,QAC/D,C,CAGH,iBAAA6yC,CAAkBD,GACrB,OAAQA,GAAgBz1C,KAAKgnB,mBAAqByuB,EAAez1C,KAAKgnB,kBAAoBhnB,KAAKinB,iB,CAG5F,eAAA0uB,CAAgBF,GACnB,OAAQA,GAAgBz1C,KAAKgnB,kBAAoBhnB,KAAKinB,iB,CAGnD,aAAAkuB,CAAcS,GAA4B,GAoB7C,GAnBA51C,KAAK61C,MAAQ,EAEpB71C,KAAK2zC,YAAc,EAAC,GAAM,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GACzF3zC,KAAKmT,IAAM,EACXnT,KAAKk9B,OAAS,EACdl9B,KAAK81C,UAAY,EACjB91C,KAAK+1C,WAAa,EAClB/1C,KAAK40C,MAAQ,IACb50C,KAAKwyB,OAAS,EACdxyB,KAAK6hC,YAAc,EACnB7hC,KAAKg2C,SAAW,GAChBh2C,KAAKi2C,mBAAqB,EAC1Bj2C,KAAKghC,OAAS,EACdhhC,KAAKu1C,oBAAqB,EAC1Bv1C,KAAKshC,oBAAqB,EAE1BthC,KAAKk2C,MAAQ,WACb3yC,SAAS2yC,MAAQ1pB,EAAakE,mBAE1BklB,EAAkB,CAClB51C,KAAKgnB,kBAAoB,EACzBhnB,KAAKinB,kBAAoB,EACzBjnB,KAAKq1C,gBAAkB,EACvB,IAAK,IAAII,EAAuB,EAAGA,EAAez1C,KAAKo1C,kBAAmBK,IAAgB,CACtF,MAAMhU,EAA0BgU,GAAgBz1C,KAAKgnB,mBAAqByuB,EAAez1C,KAAKgnB,kBAAoBhnB,KAAKinB,kBACjHsZ,EAAwBkV,GAAgBz1C,KAAKgnB,kBAAoBhnB,KAAKinB,kBACxEjnB,KAAK4zC,SAAS/wC,QAAU4yC,IACxBz1C,KAAK4zC,SAAS6B,GAAgB,IAAIpC,IAEtC,MAAMnyB,EAAmBlhB,KAAK4zC,SAAS6B,GACvCv0B,EAAQgc,OAASryB,KAAKiM,IAAI,EAAI2+B,EAAc,GAE5C,IAAK,IAAIU,EAAkB,EAAGA,EAAUn2C,KAAKi2C,mBAAoBE,IACzDj1B,EAAQoyB,SAASzwC,QAAUszC,EAC3Bj1B,EAAQoyB,SAAS6C,GAAW,IAAInW,GAEhC9e,EAAQoyB,SAAS6C,GAAS9V,QAGlCnf,EAAQoyB,SAASzwC,OAAS7C,KAAKi2C,mBAE/B,IAAK,IAAIzoB,EAAqB,EAAGA,EAAalsB,EAAOmQ,mBAAoB+b,IACjEtM,EAAQgf,YAAYr9B,QAAU2qB,IAC9BtM,EAAQgf,YAAY1S,GAAc,IAAIob,GAAWnH,EAAgBlB,IAErErf,EAAQgf,YAAY1S,GAAY2d,gBAAgB5K,EAAkC,EAAGkB,EAAgB,EAAuB,EAAuBA,EAAgBlB,GAEvKrf,EAAQgf,YAAYr9B,OAASvB,EAAOmQ,mBAEpC,IAAK,IAAI2kC,EAAc,EAAGA,EAAMp2C,KAAKg2C,SAAUI,IAC3Cl1B,EAAQqyB,KAAK6C,GAAOA,EAAM,EAAI,EAAI,EAEtCl1B,EAAQqyB,KAAK1wC,OAAS7C,KAAKg2C,QAC9B,CACDh2C,KAAK4zC,SAAS/wC,OAAS7C,KAAKo1C,iBAC/B,C,CAGE,cAAAiB,GACH,IAAIC,EACAva,EAAmB,GAEvBA,EAAOtxB,KAAKgpC,GAAK8C,GAEtBxa,EAAOtxB,KAAKuxB,GAAoByX,GAAK+C,IAGhCza,EAAOtxB,KAAI,IACX,IAAIgsC,EAA2BC,mBAAmB12C,KAAKk2C,OACvDna,EAAOtxB,KAAKuxB,GAAoBya,EAAiB5zC,QAAU,GAAIm5B,GAA8C,GAA1Bya,EAAiB5zC,SAGpG,IAAK,IAAI0H,EAAY,EAAGA,EAAIksC,EAAiB5zC,OAAQ0H,IACjDwxB,EAAOtxB,KAAKgsC,EAAiBpa,WAAW9xB,IAK5C,GAFAwxB,EAAOtxB,KAAI,IAA2BuxB,GAAoBh8B,KAAKgnB,mBAAoBgV,GAAoBh8B,KAAKinB,mBAAoB+U,GAAoBh8B,KAAKq1C,kBACzJtZ,EAAOtxB,KAAI,IAAoBuxB,GAAoBh8B,KAAK61C,QACpD71C,KAAK61C,OAASv0C,EAAO0O,OAAmB,WAAU,OAAExL,MACpD,IAAK,IAAI+F,EAAI,EAAGA,EAAIjJ,EAAOyY,iBAAkBxP,IACzCwxB,EAAOtxB,KAAKuxB,GAAoBh8B,KAAK2zC,YAAYppC,GAAG,EAAE,IAG9DwxB,EAAOtxB,KAAsB,IAAAuxB,GAAoBh8B,KAAKmT,KAAM6oB,GAAoBh8B,KAAKk9B,OAAS57B,EAAOmP,YACrGsrB,EAAOtxB,KAA4B,IAAAuxB,GAAoBh8B,KAAK81C,WAAa,GAAI9Z,GAAqC,GAAjBh8B,KAAK81C,YACtG/Z,EAAOtxB,KAA0B,IAAAuxB,GAAqBh8B,KAAK+1C,WAAa,GAAM,GAAI/Z,GAAqBh8B,KAAK+1C,WAAa,EAAK,KAC9Hha,EAAOtxB,KAAwB,IAAAuxB,GAAoBh8B,KAAK40C,OAAS,GAAI5Y,GAAiC,GAAbh8B,KAAK40C,QAC9F7Y,EAAOtxB,KAA4B,GAAAuxB,GAAoBh8B,KAAK6hC,YAAc,IAC1E9F,EAAOtxB,KAA2B,IAAAuxB,GAAqBh8B,KAAKg2C,SAAW,GAAM,GAAIha,GAAqBh8B,KAAKg2C,SAAW,EAAK,KAC3Hja,EAAOtxB,KAA+B,IAAAuxB,GAAqBh8B,KAAKi2C,mBAAqB,GAAM,GAAIja,GAAqBh8B,KAAKi2C,mBAAqB,EAAK,KACnJla,EAAOtxB,KAAI,IAAqBuxB,GAAoBh8B,KAAKghC,SAGzDjF,EAAOtxB,KAAI,IACkB,GAAzBzK,KAAKi0C,kBAA8C,GAAnBj0C,KAAKk0C,YAAuC,KAAlBl0C,KAAK8zC,WAA0C,GAAnB9zC,KAAK6zC,YAA4C,GAAvB7zC,KAAKg0C,gBAAsD,GAA7Bh0C,KAAK+zC,sBAAkD,GAAnB/zC,KAAKm0C,YACvLpY,EAAOtxB,KAAKuxB,GAAoBnxB,KAAKkB,MAAM/L,KAAKi0C,iBAAmB,EAA4B,GAAxBj0C,KAAKi0C,iBAAwB,GAAmC,IAA7Bj0C,KAAKi0C,iBAAmB,MAClIlY,EAAOtxB,KAAKuxB,GAAoBnxB,KAAKkB,MAAM/L,KAAKk0C,WAAa,EAAsB,GAAlBl0C,KAAKk0C,WAAkB,EAAIl0C,KAAKk0C,cACjGnY,EAAOtxB,KAAKuxB,GAAoBh8B,KAAK6zC,aACrC9X,EAAOtxB,KAAKuxB,GAAoBnxB,KAAKkB,OAAO/L,KAAK8zC,UAAY,KAAU,OACvE/X,EAAOtxB,KAAKuxB,GAAoBnxB,KAAKkB,MAAkC,GAA5B/L,KAAK+zC,wBAChDhY,EAAOtxB,KAAKuxB,GAAoBnxB,KAAKkB,MAA4B,GAAtB/L,KAAKg0C,kBAChDjY,EAAOtxB,KAAKuxB,GAAoBnxB,KAAKkB,MAAwB,GAAlB/L,KAAKm0C,aAAoB,GAAInY,GAAuD,GAAnCnxB,KAAKkB,MAAwB,GAAlB/L,KAAKm0C,eAG5GpY,EAAOtxB,KAAKuxB,GAAoB,KAGpCD,EAAOtxB,KAAI,IACX,IAAK,IAAIyW,EAAkB,EAAGA,EAAUlhB,KAAKo1C,kBAAmBl0B,IAAW,CAEvE,IAAIy1B,EAA6BD,mBAAmB12C,KAAK4zC,SAAS1yB,GAAShd,MAC3E63B,EAAOtxB,KAAKuxB,GAAoB2a,EAAmB9zC,QAAU,GAAIm5B,GAAgD,GAA5B2a,EAAmB9zC,SAGxG,IAAK,IAAI0H,EAAY,EAAGA,EAAIosC,EAAmB9zC,OAAQ0H,IACnDwxB,EAAOtxB,KAAKksC,EAAmBta,WAAW9xB,GAEjD,CAGD,GADAwxB,EAAOtxB,KAAI,IAA8BuxB,GAA0Bh8B,KAAKu1C,oBAAsB,EAAUv1C,KAAKshC,qBACzGthC,KAAKu1C,oBAAsBv1C,KAAKshC,mBAChC,IAAK,IAAImU,EAAuB,EAAGA,EAAez1C,KAAKo1C,kBAAmBK,IACtE1Z,EAAOtxB,KAAKuxB,GAAoBh8B,KAAK4zC,SAAS6B,GAAcvV,YAAYr9B,OAASvB,EAAOmQ,qBAIhGsqB,EAAOtxB,KAAI,KACX,IAAK,IAAIgrC,EAAuB,EAAGA,EAAez1C,KAAKgnB,kBAAmByuB,IACtE1Z,EAAOtxB,KAAKuxB,GAAoBh8B,KAAK4zC,SAAS6B,GAAcvY,SAGhE,IAAK,IAAIuY,EAAuB,EAAGA,EAAez1C,KAAKo1C,kBAAmBK,IACtE,IAAK,IAAIlrC,EAAY,EAAGA,EAAIvK,KAAK4zC,SAAS6B,GAAcvV,YAAYr9B,OAAQ0H,IAAK,CAC7E,MAAMijB,EAAyBxtB,KAAK4zC,SAAS6B,GAAcvV,YAAY31B,GAOvE,GANAwxB,EAAOtxB,KAAI,GAA8BuxB,GAAoBxO,EAAWvY,OACxE8mB,EAAOtxB,KAAI,IAAqBuxB,GAAqBxO,EAAW6F,OAAS/xB,EAAOyU,YAAc,GAAM,GAAIimB,GAAqBxO,EAAW6F,OAAS/xB,EAAOyU,YAAc,EAAK,KAC3KgmB,EAAOtxB,KAAyB,IAAAuxB,GAAoBxO,EAAWN,QAAU,GAAI8O,GAAwC,GAApBxO,EAAWN,SAE5G6O,EAAOtxB,KAAI,KACXsxB,EAAOtxB,KAAKuxB,IAAqBxO,EAAW8F,eACxC9F,EAAW8F,aACXyI,EAAOtxB,KAAKuxB,GAAoBxO,EAAWsb,oBAC3C/M,EAAOtxB,KAAKuxB,GAAoBxO,EAAWub,yBAE1C,CACD,GAA2B,MAAvBvb,EAAW0D,SAEX6K,EAAOtxB,KAAKuxB,GAAoB,IAChC7xB,QAAQC,IAAI,uEAAyEqrC,EAAe,qBAAuBlrC,OACxH,CACHwxB,EAAOtxB,KAAKuxB,GAAoBxO,EAAW0D,SAASgV,oBACpD,IAAK,IAAI5V,EAAY,EAAGA,EAAI9C,EAAW0D,SAASgV,kBAAmB5V,IAAK,CACpE,MAAM4S,EAA4B1V,EAAW0D,SAAS+U,cAAc3V,GACpEyL,EAAOtxB,KAAKuxB,GAAoBkH,EAAMjuB,MAAO+mB,GAAoBnxB,KAAKkB,MAAMm3B,EAAMsB,OAAQxI,GAAoBnxB,KAAKkB,MAAMm3B,EAAMuB,OAClI,CACJ,CAGD,IAAImS,EAAiC,EACrC,IAAK,IAAItmB,EAAY,EAAGA,EAAIhvB,EAAO6S,iBAAmB,EAAGmc,IACrDsmB,KAA+D,MAAlCppB,EAAW0b,aAAa5Y,EAAI,KAAeA,EAG5EyL,EAAOtxB,KAAKuxB,GAAoB4a,GAA0B,GAAI5a,GAA6C,GAAzB4a,IAElF,IAAK,IAAItmB,EAAY,EAAGA,EAAIhvB,EAAO6S,iBAAmB,EAAGmc,IACrD,GAAIsmB,EAA0B,GAAKtmB,EAAI,CACnCyL,EAAOtxB,KAAKuxB,GAAoBxO,EAAW0b,aAAa5Y,EAAI,GAAI4V,oBAChE,IAAK,IAAIpE,EAAY,EAAGA,EAAItU,EAAW0b,aAAa5Y,EAAI,GAAI4V,kBAAmBpE,IAAK,CAChF,MAAMoB,EAA4B1V,EAAW0b,aAAa5Y,EAAI,GAAI2V,cAAcnE,GAChF/F,EAAOtxB,KAAKuxB,GAAoBkH,EAAMjuB,MAAO+mB,GAAoBnxB,KAAKkB,MAAMm3B,EAAMsB,OAAQxI,GAAoBnxB,KAAKkB,MAAMm3B,EAAMuB,OAClI,CACJ,CAER,CAID,GADA1I,EAAOtxB,KAA0B,IAAAuxB,GAAoBxO,EAAWze,SAAW,GAAIitB,GAAyC,GAArBxO,EAAWze,UAC1GK,EAAyBoe,EAAWze,SAEpC,GADAgtB,EAAOtxB,KAAKuxB,IAAqBxO,EAAW8G,iBACxC9G,EAAW8G,eACXyH,EAAOtxB,KAAKuxB,GAAoBxO,EAAWwb,sBAC3CjN,EAAOtxB,KAAKuxB,GAAoBxO,EAAWyb,2BAE1C,CACD,GAA6B,MAAzBzb,EAAW+E,WAEXwJ,EAAOtxB,KAAKuxB,GAAoB,IAChC7xB,QAAQC,IAAI,yEAA2EqrC,EAAe,qBAAuBlrC,OAE5H,CACDwxB,EAAOtxB,KAAKuxB,GAAoBxO,EAAW+E,WAAW2T,oBACtD,IAAK,IAAI5V,EAAY,EAAGA,EAAI9C,EAAW+E,WAAW2T,kBAAmB5V,IAAK,CACtE,MAAM4S,EAA4B1V,EAAW+E,WAAW0T,cAAc3V,GACtEyL,EAAOtxB,KAAKuxB,GAAoBkH,EAAMjuB,MAAO+mB,GAAoBnxB,KAAKkB,MAAMm3B,EAAMsB,OAAQxI,GAAoBnxB,KAAKkB,MAAMm3B,EAAMuB,OAClI,CACJ,CAGD,IAAImS,EAAiC,EACrC,IAAK,IAAItmB,EAAY,EAAGA,EAAIhvB,EAAO6S,iBAAmB,EAAGmc,IACrDsmB,KAAiE,MAApCppB,EAAW2b,eAAe7Y,EAAI,KAAeA,EAG9EyL,EAAOtxB,KAAKuxB,GAAoB4a,GAA0B,GAAI5a,GAA6C,GAAzB4a,IAElF,IAAK,IAAItmB,EAAY,EAAGA,EAAIhvB,EAAO6S,iBAAmB,EAAGmc,IACrD,GAAIsmB,EAA0B,GAAKtmB,EAAI,CACnCyL,EAAOtxB,KAAKuxB,GAAoBxO,EAAW2b,eAAe7Y,EAAI,GAAI4V,oBAClE,IAAK,IAAIpE,EAAY,EAAGA,EAAItU,EAAW2b,eAAe7Y,EAAI,GAAI4V,kBAAmBpE,IAAK,CAClF,MAAMoB,EAA4B1V,EAAW2b,eAAe7Y,EAAI,GAAI2V,cAAcnE,GAClF/F,EAAOtxB,KAAKuxB,GAAoBkH,EAAMjuB,MAAO+mB,GAAoBnxB,KAAKkB,MAAMm3B,EAAMsB,OAAQxI,GAAoBnxB,KAAKkB,MAAMm3B,EAAMuB,OAClI,CACJ,CAER,CAyDL,GAvDI31B,EAAyB0e,EAAWze,UACpCgtB,EAAOtxB,KAAKuxB,GAAoBxO,EAAW2D,aAE3CniB,EAAoBwe,EAAWze,WAC/BgtB,EAAOtxB,KAAKuxB,GAAoBxO,EAAW6D,QAEvC7D,EAAW6D,OAAS/vB,EAAOyV,OAAOrS,WAAqB,SAAEF,QACzDu3B,EAAOtxB,KAAKuxB,GAAoBxO,EAAWoG,gBAC3CmI,EAAOtxB,KAAKuxB,IAAqBxO,EAAWmG,mBAGhD1kB,EAAyBue,EAAWze,UACpCgtB,EAAOtxB,KAAKuxB,GAAoBxO,EAAW+b,aAE3Cr6B,EAAqBse,EAAWze,UAChCgtB,EAAOtxB,KAAKuxB,GAAqBxO,EAAWgc,OAASloC,EAAOqZ,WAAc,GAAIqhB,GAAqBxO,EAAWgc,OAASloC,EAAOqZ,UAAa,KAE3IxL,EAAsBqe,EAAWze,WACjCgtB,EAAOtxB,KAAKuxB,GAAoBxO,EAAWiE,UAEvCjE,EAAWiE,SAAWnwB,EAAO0T,SAASnS,SACtCk5B,EAAOtxB,KAAKuxB,GAAoBnxB,KAAKkB,MAAgC,GAA1ByhB,EAAWsG,gBACtDiI,EAAOtxB,KAAKuxB,GAAoBxO,EAAWwG,eAC3C+H,EAAOtxB,KAAKuxB,GAAoBnxB,KAAKkB,MAAMyhB,EAAWuG,gBACtDgI,EAAOtxB,KAAKuxB,GAAoBxO,EAAWyG,gBAG/C5kB,EAAyBme,EAAWze,WACpCgtB,EAAOtxB,KAAKuxB,GAAoBxO,EAAWuF,aAE3CgJ,EAAOtxB,KAAKuxB,IAAqBxO,EAAWsH,WAE5CxlB,EAAyBke,EAAWze,UACpCgtB,EAAOtxB,KAAKuxB,GAAoBxO,EAAW2c,gBAAiBnO,GAAoBxO,EAAWsF,yBAE3FvjB,EAAsBie,EAAWze,WACjCgtB,EAAOtxB,KAAKuxB,GAAoBxO,EAAW0G,KAAO,GAAI8H,GAAqC,GAAjBxO,EAAW0G,MACrF6H,EAAOtxB,KAAKuxB,GAAoBxO,EAAW2G,YAE3C3kB,EAAqBge,EAAWze,UAChCgtB,EAAOtxB,KAAKuxB,GAAoBxO,EAAWwF,SAE3CvjB,EAAmB+d,EAAWze,UAC9BgtB,EAAOtxB,KAAKuxB,GAAoBxO,EAAWkH,aAAcsH,GAAoBxO,EAAW4c,YAExF16B,EAAqB8d,EAAWze,UAChCgtB,EAAOtxB,KAAKuxB,GAAoBxO,EAAWgF,SAG5B,GAAfhF,EAAWvY,OACX8mB,EAAOtxB,KAAI,IAAwBuxB,GAAoBxO,EAAW4b,QAASpN,GAAoBxO,EAAW6b,UAE1GtN,EAAOtxB,KAAKuxB,IAAqBxO,EAAWkG,uBAG7B,GAAflG,EAAWvY,MAAmD,GAAfuY,EAAWvY,KAAqC,CAC/F8mB,EAAOtxB,KAAI,IACX,MAAMosC,EAAgC,IAAI7Y,GAC1C,IAAK,IAAIzzB,EAAY,EAAGA,EAAIjJ,EAAOuX,uBAAwBtO,IACvDssC,EAAc3Y,MAAM58B,EAAO0X,0BAA2BwU,EAAWod,cAAcnY,UAAUloB,IAE7FssC,EAAcrY,aAAazC,EAC9B,CAED,GAAmB,GAAfvO,EAAWvY,KAA6B,CAC/BuY,EAAWnsB,SAAW,KAC5C06B,EAAOtxB,KAAK,IAAKuxB,GAAoBxO,EAAWnsB,SAAW,MAC3D06B,EAAOtxB,KAAKuxB,GAAoB,KAExBxO,EAAWnsB,SAAW,KAC9B06B,EAAOtxB,KAAK,IAAKuxB,GAAoBxO,EAAWnsB,SAAW,MAC3D06B,EAAOtxB,KAAKuxB,GAAoB,KAExBxO,EAAWnsB,SAAW,IAC9B06B,EAAOtxB,KAAK,IAAKuxB,GAAoBxO,EAAWnsB,SAAW,KAC3D06B,EAAOtxB,KAAKuxB,GAAoB,MAGhCD,EAAOtxB,KAAK,IAAKuxB,GAAoBxO,EAAWnsB,WAChD06B,EAAOtxB,KAAKuxB,GAAoB,KAEjCD,EAAOtxB,KAAK,IAAKuxB,GAAoBxO,EAAW8D,SAC1B9D,EAAW8D,QAAUhwB,EAAOiU,QAAQ1S,QAAQy5B,GAAqBP,EAAQvO,EAAWic,aAAcjc,EAAWkc,aAAclc,EAAWmc,aAAcnc,EAAWoc,iBAAkBpc,EAAWqc,YAGlN9N,EAAOtxB,KAAI,KAOX,MAAMqsC,EACJzb,GAAM,EAAG,GAAQ7N,EAAW0H,mBAAqB,GAC/C1H,EAAWuH,4BAA8B,EAAI,GAEjDgH,EAAOtxB,KAAKuxB,GAAoB8a,IAGhC,MAAMC,EACJ1b,GAAM,EAAG,GAAQ,IAAM,GACrB7N,EAAW2H,sBAAwB,EAAI,GAE3C4G,EAAOtxB,KAAKuxB,GAAoB+a,IAChCjb,GAAkBC,EAAQvO,EAAWwH,mBACrC8G,GAAkBC,EAAQvO,EAAWyH,iBACrC6G,GAAkBC,EAAQvO,EAAW4H,oBAE1B,MAAM,GAAmB,GAAf5H,EAAWvY,MAA4C,IAAfuY,EAAWvY,KAA8B,CACxF,GAAmB,GAAfuY,EAAWvY,KACX8mB,EAAOtxB,KAAI,GAAwBuxB,GAAoBxO,EAAWsE,YAClEiK,EAAOtxB,KAAI,GAA2BuxB,GAAoBxO,EAAWuE,mBAClE,CAEH,GADAgK,EAAOtxB,KAAI,GAAwBuxB,GAAoBxO,EAAW6c,eACnC,GAA3B7c,EAAW6c,aAAmB,CAC9BtO,EAAOtxB,KAAwB,GAAAuxB,GAAoBxO,EAAW+c,gBAAgB/yB,eAC9EukB,EAAOtxB,KAAI,KACX,IAAK,IAAI+xB,EAAY,EAAGA,EAAIhP,EAAW+c,gBAAgB7yB,YAAY7U,OAAQ25B,IAAK,CAC5E,IAAK,IAAIlM,EAAY,EAAGA,EAAI9C,EAAW+c,gBAAgB7yB,YAAY8kB,GAAG35B,OAAQytB,IAC1EyL,EAAOtxB,KAAKuxB,GAAoBxO,EAAW+c,gBAAgB7yB,YAAY8kB,GAAGlM,KAE9EyL,EAAOtxB,KAAI,GACd,CACDsxB,EAAOtxB,KAAI,IACd,CAED,GADAsxB,EAAOtxB,KAAI,GAA2BuxB,GAAoBxO,EAAW8c,kBACnC,GAA9B9c,EAAW8c,gBAAsB,CACjCvO,EAAOtxB,KAAI,KACX,IAAK,IAAI+xB,EAAY,EAAGA,EAAIhP,EAAWgd,mBAAmBnyB,QAAQxV,OAAQ25B,IAAK,CAC3E,IAAK,IAAIlM,EAAY,EAAGA,EAAI9C,EAAWgd,mBAAmBnyB,QAAQmkB,GAAG35B,OAAQytB,IACzEyL,EAAOtxB,KAAKuxB,GAAoBxO,EAAWgd,mBAAmBnyB,QAAQmkB,GAAGlM,KAE7EyL,EAAOtxB,KAAI,GACd,CACDsxB,EAAOtxB,KAAI,IACd,CACJ,CACDsxB,EAAOtxB,KAAI,GAAgCuxB,GAAoBxO,EAAWwE,oBAE1E+J,EAAOtxB,KAAI,IACX,IAAK,IAAI+xB,EAAY,EAAGA,GAA4C,IAAvChP,EAAWvY,KAA6B,EAAE3T,EAAO+V,eAAgBmlB,IAC1FT,EAAOtxB,KAAKuxB,GAAoBxO,EAAWyE,UAAUuK,GAAGtK,YAE5D6J,EAAOtxB,KAAI,IACX,IAAK,IAAI+xB,EAAY,EAAGA,GAA4C,IAAvChP,EAAWvY,KAA+B,EAAI3T,EAAO+V,eAAgBmlB,IAC9FT,EAAOtxB,KAAKuxB,GAAoBxO,EAAWyE,UAAUuK,GAAG/uB,YAE5DsuB,EAAOtxB,KAAI,IACX,IAAK,IAAI+xB,EAAY,EAAGA,GAA4C,IAAvChP,EAAWvY,KAA+B,EAAI3T,EAAO+V,eAAgBmlB,IAC9FT,EAAOtxB,KAAKuxB,GAAoBxO,EAAWyE,UAAUuK,GAAG5H,WAEhB,GAApCpH,EAAWyE,UAAUuK,GAAG5H,UACxBmH,EAAOtxB,KAAKuxB,GAAoBxO,EAAWyE,UAAUuK,GAAGrxB,YAGnE,MAAM,GAAmB,GAAfqiB,EAAWvY,KAAuC,CACrDuY,EAAWnsB,SAAW,KACvC06B,EAAOtxB,KAAK,IAAKuxB,GAAoBxO,EAAWnsB,SAAW,MAC3D06B,EAAOtxB,KAAKuxB,GAAoB,KAExBxO,EAAWnsB,SAAW,KAC9B06B,EAAOtxB,KAAK,IAAKuxB,GAAoBxO,EAAWnsB,SAAW,MAC3D06B,EAAOtxB,KAAKuxB,GAAoB,KAExBxO,EAAWnsB,SAAW,IAC9B06B,EAAOtxB,KAAK,IAAKuxB,GAAoBxO,EAAWnsB,SAAW,KAC3D06B,EAAOtxB,KAAKuxB,GAAoB,MAGhCD,EAAOtxB,KAAK,IAAKuxB,GAAoBxO,EAAWnsB,WAChD06B,EAAOtxB,KAAKuxB,GAAoB,KAEjCD,EAAOtxB,KAAK,IAAKuxB,GAAoBxO,EAAW8D,SAC1B9D,EAAW8D,QAAUhwB,EAAOiU,QAAQ1S,QAAQy5B,GAAqBP,EAAQvO,EAAWic,aAAcjc,EAAWkc,aAAclc,EAAWmc,aAAcnc,EAAWoc,iBAAkBpc,EAAWqc,YACpM9N,EAAOtxB,KAAI,IAEX,IAAK,IAAI6lB,EAAY,EAAGA,EAAI,GAAIA,IAC5ByL,EAAOtxB,KAAKuxB,GAAqBxO,EAAW6E,eAAe/B,GAAK,IAEvE,MAAM,GAAmB,GAAf9C,EAAWvY,KAClB8mB,EAAOtxB,KAAI,IAAmBuxB,GAAoBxO,EAAWqb,iBAC1D,GAAmB,GAAfrb,EAAWvY,KAAiC,CACnD8mB,EAAOtxB,KAAI,IACX,MAAMusC,EAA+B,IAAIhZ,GACzC,IAAK,IAAIzzB,EAAY,EAAGA,EAAIjJ,EAAOmX,sBAAuBlO,IACtDysC,EAAa9Y,MAAM58B,EAAOqX,yBAA0B6U,EAAWyd,aAAahY,SAAS1oB,IAEzFysC,EAAaxY,aAAazC,EAC7B,MAAM,GAAmB,GAAfvO,EAAWvY,KAAgC,CAClD8mB,EAAOtxB,KAAI,KACX,IAAK,IAAI6lB,EAAY,EAAGA,EAAIhvB,EAAO0Y,UAAWsW,IAC1CyL,EAAOtxB,KAAKuxB,GAAoBxO,EAAWqd,iBAAiBva,KAGhEyL,EAAOtxB,KAAI,IACX,MAAMusC,EAA+B,IAAIhZ,GACzC,IAAK,IAAI1N,EAAY,EAAGA,EAAIhvB,EAAO0Y,UAAWsW,IAC1C,IAAK,IAAI/lB,EAAY,EAAGA,EAAIjJ,EAAOmX,sBAAuBlO,IACtDysC,EAAa9Y,MAAM58B,EAAOqX,yBAA0B6U,EAAWsd,qBAAqBxa,GAAG2C,SAAS1oB,IAGxGysC,EAAaxY,aAAazC,EAC7B,MAAM,GAAmB,GAAfvO,EAAWvY,KAClB8mB,EAAOtxB,KAAI,IAAqBuxB,GAAoBxO,EAAW8D,SAC3D9D,EAAW8D,QAAUhwB,EAAOiU,QAAQ1S,QAAQy5B,GAAqBP,EAAQvO,EAAWic,aAAcjc,EAAWkc,aAAclc,EAAWmc,aAAcnc,EAAWoc,iBAAkBpc,EAAWqc,iBAC7L,GAAmB,GAAfrc,EAAWvY,KAClB8mB,EAAOtxB,KAAI,GAAyBuxB,GAAoBxO,EAAWriB,aACnE4wB,EAAOtxB,KAAKuxB,GAAoBxO,EAAW0c,eAAiB,GAAIlO,GAA+C,GAA3BxO,EAAW0c,qBAC5F,GAAmB,IAAf1c,EAAWvY,KACjC8mB,EAAOtxB,KAAI,IAAuBuxB,GAAoBxO,EAAWuc,kBAAmB/N,GAAoBxO,EAAWwc,gBAAiBhO,GAAoBxO,EAAWyc,gBACnKlO,EAAOtxB,KAAI,GAAyBuxB,GAAoBxO,EAAWriB,aACnE4wB,EAAOtxB,KAAKuxB,GAAoBxO,EAAW0c,eAAiB,GAAIlO,GAA+C,GAA3BxO,EAAW0c,qBAC7E,GAAmB,GAAf1c,EAAWvY,KAClB8mB,EAAOtxB,KAAI,IAAqBuxB,GAAoBxO,EAAW8D,SAC3D9D,EAAW8D,QAAUhwB,EAAOiU,QAAQ1S,QAAQy5B,GAAqBP,EAAQvO,EAAWic,aAAcjc,EAAWkc,aAAclc,EAAWmc,aAAcnc,EAAWoc,iBAAkBpc,EAAWqc,YAChM9N,EAAOtxB,KAAI,GAA4BuxB,GAAoBxO,EAAWkF,qBACnE,GAAmB,GAAflF,EAAWvY,KAGlB,MAAM,IAAI9S,MAAM,4BAGpB45B,EAAOtxB,KAAI,GAAwBuxB,GAAoBxO,EAAW8b,gBAClE,IAAK,IAAI2J,EAAwB,EAAGA,EAAgBzlB,EAAW8b,cAAe2J,IAC1ElX,EAAOtxB,KAAKuxB,GAAoBxO,EAAWtV,UAAU+6B,GAAe9gB,SAChE7wB,EAAOua,4BAA4B2R,EAAWtV,UAAU+6B,GAAe9gB,QAAQjW,SAAW,GAC1F6f,EAAOtxB,KAAKuxB,GAAoBxO,EAAWtV,UAAU+6B,GAAezuC,QAExEu3B,EAAOtxB,KAAKuxB,GAAoBxO,EAAWtV,UAAU+6B,GAAe7gB,UAE3E,CAGL2J,EAAOtxB,KAAI,IACX6rC,EAAO,IAAItY,GACX,IAAIiZ,EAAqB,EACzB,KAAQ,GAAKA,EAAcj3C,KAAKi2C,mBAAqB,GAAGgB,IACxD,IAAK,IAAIxB,EAAuB,EAAGA,EAAez1C,KAAKo1C,kBAAmBK,IAAgB,IAAK,IAAIlrC,EAAY,EAAGA,EAAIvK,KAAKg2C,SAAUzrC,IACjI+rC,EAAKpY,MAAM+Y,EAAYj3C,KAAK4zC,SAAS6B,GAAclC,KAAKhpC,IAE5D+rC,EAAK9X,aAAazC,GAElBA,EAAOtxB,KAAI,KACX6rC,EAAO,IAAItY,GACX,MAAMkZ,EAA4B,IAAIlZ,GAChCmZ,EAA0B1D,GAAK2D,cAAc91C,EAAOwU,aAC1D,IAAK,IAAI2/B,EAAuB,EAAGA,EAAez1C,KAAKo1C,kBAAmBK,IAAgB,CACtF,MAAMv0B,EAAmBlhB,KAAK4zC,SAAS6B,GACjC4B,EAAmCr3C,KAAKw1C,4BAA4BC,GACpEhU,EAA0BzhC,KAAK01C,kBAAkBD,GACjDlV,EAAwBvgC,KAAK21C,gBAAgBF,GAC7C6B,EAAoC7D,GAAK2D,cAAcC,EAA2B/1C,EAAOmQ,oBACzF8lC,EAAoC9D,GAAK2D,cAAcl2B,EAAQgf,YAAYr9B,OAAS,GAG1F,GAAI09B,EAAc,CACd,MAAMiX,EAAuC/D,GAAK2D,cAAcp3C,KAAKs1C,8BAAgC,GACrG,IAAK,IAAImC,EAA0B,EAAGA,EAAkBv2B,EAAQgf,YAAYr9B,OAAQ40C,IAAmB,CAEnG,IAAIjqB,EAAyBxtB,KAAK4zC,SAAS6B,GAAcvV,YAAYuX,GAErE,IAAK,IAAIhX,EAAc,EAAGA,EAAMn/B,EAAO4Y,SAAUumB,IAAO,CACpD,MAAM+T,EAAqBhnB,EAAW7L,YAAY8e,GAC5CgU,EAAwBjnB,EAAWud,eAAetK,GAClDuU,EAAqBxnB,EAAW3Q,WAAW4jB,GAC3CiX,EAAoBlqB,EAAWoT,eAAeH,GAQpD,IAAIkX,EAAiBr2C,EAAOub,WAAWm4B,GAAY/3B,QAAU,EAAI,EAC7D+3B,GAAc1zC,EAAOub,WAAWnY,WAAiB,KAAEF,QACnDmzC,EAAS,GAEbrB,EAAKpY,MAAM,EAAGyZ,GAGA,GAAVA,GAAyB,GAAVA,IACfrB,EAAKpY,MAAM,EAAGsW,GACd8B,EAAKpY,MAAMsZ,EAA8B/C,IAI/B,GAAVkD,GACArB,EAAKpY,MAAM,EAAG8W,GAIwC,aAAtD1zC,EAAOub,WAAW2Q,EAAW3Q,WAAW4jB,IAAMv8B,MAA6E,eAAtD5C,EAAOub,WAAW2Q,EAAW3Q,WAAW4jB,IAAMv8B,MACnHoyC,EAAKpY,MAAM,EAAGwZ,EAErB,CACJ,CACJ,CACD,MAAME,EAAwBnW,GAAkBlB,EAAgB,EAAIrf,EAAQgc,OAAS57B,EAAOyY,iBAC5F,IAAI89B,EAAqBpW,EAAiB,EAAImW,EAC9C,MAAME,EAA0BvX,EAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAMkB,EAAiB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAM,CAAC,EAAG,EAAG,GAAI,GAAI,IAAK,GAAI,IACpIsW,EAAyB,GAC/B,IAAK,IAAIxtC,EAAY,EAAGA,EAAIutC,EAAcj1C,OAAQ0H,IAC9CutC,EAAcvtC,IAAMqtC,EAExB,IAAK,MAAMzB,KAAWj1B,EAAQoyB,SAAU,CACpC,GAAItzC,KAAKshC,mBAAoB,CACzB,MAAMI,EAA0BnG,GAAcj6B,EAAOmQ,mBAAoB4lC,EAA0BlB,EAAQjW,YAAYr9B,QACvHyzC,EAAKpY,MAAMoZ,EAA2B5V,EAAkBpgC,EAAOmQ,oBAC/D,IAAK,IAAIlH,EAAY,EAAGA,EAAIm3B,EAAiBn3B,IACzC+rC,EAAKpY,MAAMqZ,EAA2BpB,EAAQjW,YAAY31B,GAEjE,CAED,GAAI4rC,EAAQlW,MAAMp9B,OAAS,EAAG,CAC1ByzC,EAAKpY,MAAM,EAAG,GAEd,IAAI8Z,EAAkB,EACtB,IAAK,MAAM5X,KAAQ+V,EAAQlW,MAAO,CAG1BG,EAAKnF,MAAQ+c,GAAWzX,IACxB+V,EAAKpY,MAAM,EAAG,GACdoY,EAAKpY,MAAM,EAAG,GACdoY,EAAKlY,kBAAkB4Z,EAAU5X,EAAKnF,QAGtCmF,EAAKnF,MAAQ+c,IACb1B,EAAKpY,MAAM,EAAG,GACVqC,GAAc+V,EAAKpY,MAAM,EAAG,GAChCoY,EAAKlY,kBAAkBgC,EAAKnF,MAAQ+c,IAGxCd,EAAUl2B,QAOiB,GAAvBof,EAAKrB,QAAQl8B,OACbq0C,EAAUhZ,MAAM,EAAG,IAEnBgZ,EAAUhZ,MAAM,EAAG,GACnBgZ,EAAUhZ,MAAM,EAAGkC,EAAKrB,QAAQl8B,OAAS,IAG7Cq0C,EAAU7Y,cAAc+B,EAAKpB,KAAKn8B,OAAS,GAEtC09B,EAID2W,EAAUhZ,MAAM,EAAGkC,EAAKpB,KAAK,GAAG3I,MAHhC6gB,EAAUhZ,MAAMiZ,EAAiB/W,EAAKpB,KAAK,GAAG3I,MAMlD,IAAI4hB,EAAoB,EACpBC,EAAqB9X,EAAKrB,QAAQ,GAClCoZ,EAAuBD,EAC3B,MAAME,EAAuB,GAC7B,IAAK,IAAI7tC,EAAY,EAAGA,EAAI61B,EAAKpB,KAAKn8B,OAAQ0H,IAAK,CAC/C,MAAMm1B,EAAeU,EAAKpB,KAAKz0B,GACzB8tC,EAAoBH,EAAaxY,EAAI9M,SACvCulB,GAAgBE,GAChBnB,EAAUhZ,MAAM,EAAG,GACnBka,EAAW3tC,KAAK4tC,GAChBF,EAAeE,GAEfnB,EAAUhZ,MAAM,EAAG,GAEvBgZ,EAAU9Y,kBAAkBsB,EAAIf,KAAOsZ,GACvCA,EAAYvY,EAAIf,KACX4B,EAGD2W,EAAUhZ,MAAM,EAAGwB,EAAIrJ,MAFvB6gB,EAAUhZ,MAAMiZ,EAAiBzX,EAAIrJ,KAI5C,CAED,MAAMiiB,EAAsBC,OAAOC,aAAaC,MAAM,KAAMvB,EAAU1Y,aAAa,KAC7Eka,EAAqBX,EAAa7gB,QAAQohB,IAC7B,GAAfI,GACApC,EAAKpY,MAAM,EAAG,GACdoY,EAAK5/B,OAAOwgC,KAEZZ,EAAKpY,MAAM,EAAG,GACdoY,EAAKnY,cAAc,EAAG,EAAGua,GACzBX,EAAa5gB,OAAOuhB,EAAY,IAEpCX,EAAaY,QAAQL,GACjBP,EAAal1C,OAAS,IAAIk1C,EAAalhB,MAE3C,MAAM+hB,EAAuBxY,EAAKrB,QAAQroB,OAAO0hC,GACjD,IAAK,IAAI7tC,EAAY,EAAGA,EAAIquC,EAAW/1C,OAAQ0H,IAAK,CAChD,MAAMs0B,EAAgB+Z,EAAWruC,GAC3BsuC,EAAqBf,EAAc5gB,QAAQ2H,GACjD,IAAmB,GAAfga,EAAkB,CAClB,IAAIjmB,EAAmB,EACnBkmB,EAAoBjB,EACxB,GAAIiB,EAAYja,EACZ,KAAOia,GAAaja,GAChBia,KACyC,GAArChB,EAAc5gB,QAAQ4hB,IAAkBlmB,SAGhD,KAAOkmB,GAAaja,GAChBia,KACyC,GAArChB,EAAc5gB,QAAQ4hB,IAAkBlmB,IAGpD0jB,EAAKpY,MAAM,EAAG,GACdoY,EAAKhY,mBAAmB1L,EAC3B,MACG0jB,EAAKpY,MAAM,EAAG,GACdoY,EAAKpY,MAAM,EAAG2a,GACdf,EAAc3gB,OAAO0hB,EAAY,GAErCf,EAAca,QAAQ9Z,GAClBiZ,EAAcj1C,OAAS,IAAIi1C,EAAcjhB,MAGzCghB,EADAttC,GAAK61B,EAAKrB,QAAQl8B,OAAS,EACfu9B,EAAKrB,QAAQ,GAEbF,CAEnB,CAEiB,GAAduB,EAAKnF,OACLqb,EAAKpY,MAAM,EAAGkC,EAAKnB,qBAAuB,EAAI,GAGlD+Y,EAAU5X,EAAKlF,GAClB,CAEG8c,EAAUh4C,KAAK6hC,YAAcvgC,EAAOsQ,eAAiB2uB,IACrD+V,EAAKpY,MAAM,EAAG,GACVqC,GAAc+V,EAAKpY,MAAM,EAAG,GAChCoY,EAAKlY,kBAAkBp+B,KAAK6hC,YAAcvgC,EAAOsQ,eAAiB2uB,EAAgByX,GAEzF,MACG1B,EAAKpY,MAAM,EAAG,EAErB,CACJ,CACD,IAAI6a,EAAuBzC,EAAK7X,eAC5Bua,EAAmB,GACvB,KAAOD,EAAe,GAClBC,EAAOL,QAAQ3c,GAAmC,GAAf+c,IACnCA,IAA+B,EAEnChd,EAAOtxB,KAAKuxB,GAAoBgd,EAAOn2C,SACvCL,MAAMy2C,UAAUxuC,KAAKguC,MAAM1c,EAAQid,GACnC1C,EAAK9X,aAAazC,GAElB,MAAMmd,EAAuB,KACjB,IAAIC,EAAmB,GAMnC,GALqC5xB,MAA9BiF,EAAa4sB,eAA8B5sB,EAAa4sB,cAAcv2C,OAAS,IAChFs2C,EAAmB,IAAM3sB,EAAa4sB,cAAcx6B,KAAK,MAI3Dmd,EAAOl5B,OAASq2C,EAEA,OAAOX,OAAOC,aAAaC,MAAM,KAAM1c,GAAUod,EAE9D,CACH,IAAItqC,EAAiB,GACrB,IAAK,IAAItE,EAAY,EAAGA,EAAIwxB,EAAOl5B,OAAQ0H,GAAK2uC,EAC5CrqC,GAAU0pC,OAAOC,aAAaC,MAAM,KAAM1c,EAAOsd,MAAM9uC,EAAGA,EAAI2uC,IAEpD,OAAOrqC,EAASsqC,CAEjC,C,CAGG,QAAOG,CAAyBC,GAGpC,OADmB,GAAfA,EAAkBA,EAAc,EAA2B,GAAfA,IAAkBA,EAAc,GACzEj4C,EAAO4W,UAAUmjB,GAAM,EAAG/5B,EAAO4W,UAAUrV,OAAQ02C,G,CAGvD,gBAAArE,CAAiBhZ,GACpB,GAAkB,MAAdA,GAAoC,IAAdA,EAItB,OAHAuX,GAAK+F,SAELx5C,KAAKm1C,eAAc,GAGvB,IAAIhZ,EAAoB,EAExB,KAAOD,EAAWG,WAAWF,IAA4B,IAAEA,IAI3D,GAFqD,IAAjDD,EAAWG,WAAWF,IAA6BA,IAEnB,KAAhCD,EAAWG,WAAWF,GAEtB,YADAn8B,KAAKuhC,eAAekY,KAAKC,MAAmB,GAAbvd,EAAiBD,EAAaA,EAAWyd,UAAUxd,KAItF,MAAMyd,EAAsB1d,EAAWG,WAAWF,GAClD,IAAI0d,EACAC,EACAC,EACPC,EAGsB,KAAfJ,GACAC,GAAc,EACdC,GAAc,EACdC,GAAc,EACjBC,GAAe,EACZ7d,KACsB,KAAfyd,GACPC,GAAc,EACdC,GAAc,EACdC,GAAc,EACjBC,GAAe,EACZ7d,KACsB,KAAfyd,GACHC,GAAc,EACdC,GAAc,EACdC,GAAc,EACpBC,GAAe,EACT7d,MAEJ0d,GAAc,EACdC,GAAc,EACdC,GAAc,EACjBC,GAAe,GAGhB,MAAMvpB,EAAkB2L,GAAoBF,EAAWG,WAAWF,MAClE,GAAI0d,KAA4B,GAAZppB,GAAiBA,EAAUgjB,GAAKwG,GAAyBxpB,EAAUgjB,GAAKyG,GAAwB,OACpH,GAAIJ,KAA4B,GAAZrpB,GAAiBA,EAAUgjB,GAAK0G,GAAyB1pB,EAAUgjB,GAAK2G,GAAwB,OACpH,GAAIL,KAA4B,GAAZtpB,GAAiBA,EAAUgjB,GAAK4G,GAAyB5pB,EAAUgjB,GAAK6G,GAAwB,OACvH,GAAIN,KAA6B,GAAZvpB,GAAiBA,EAAUgjB,GAAK+C,GAA0B/lB,EAAUgjB,GAAK8G,GAAyB,OACpH,MAAMC,EAAqB/pB,EAAU,EAC/BgqB,EAAuBhqB,EAAU,EACjCiqB,EAAsBjqB,EAAU,EAChCkqB,EAAsBlqB,EAAU,EAChCmqB,EAAqBnqB,EAAU,EAC/BoqB,EAAuBpqB,EAAU,EACjCqqB,EAAuBrqB,EAAU,EACjCsqB,EAAsBtqB,EAAU,EACtCzwB,KAAKm1C,cAAe0E,GAAekB,GAAiBjB,GAAea,GAAgBD,GAAcX,GACjG,MAAM1O,EAA8BwO,GAAekB,GAAcjB,GAAea,EAEhF,IAAIK,GAA4C,EAEhD,GAAIhB,GAAgBD,EAAa,CAEzB,IAAIkB,GADR/e,EAAaA,EAAWgf,WAAW,MAAO,MACJ36B,MAAM,KAExC,GADA2b,EAAa+e,EAAiBE,QACG,MAA9B3uB,EAAa4sB,eAAyB5sB,EAAa4sB,cAAcx6B,KAAK,OAASq8B,EAAiBr8B,KAAK,MAAO,CAE3G60B,GAAK2H,IAEL,IAAIC,GAAwB,EACxBC,GAA4B,EAC5BC,GAA+B,EACnC,MAAMC,EAAmB,GACnBC,EAAgC,GACtC37C,EAAmBG,YAAc,GACjCH,EAAmBI,SAAW,GAC9BJ,EAAmBK,aAAe,EAClCL,EAAmBM,cAAgB,EACnCM,EAAiBoC,cAAc,IAAIzC,EAC/BP,EAAmBK,aACnBL,EAAmBM,gBAEvB,IAAK,MAAMQ,KAAOq6C,EACd,GAA0B,kBAAtBr6C,EAAI86C,cACCL,IACDA,GAAwB,EACxBG,EAAiB/wC,KAAK7J,GACtBkD,EAAmB,SAGtB,GAA0B,sBAAtBlD,EAAI86C,cACJJ,IACDA,GAA4B,EAC5BE,EAAiB/wC,KAAK7J,GACtBkD,EAAmB,SAGtB,GAA0B,yBAAtBlD,EAAI86C,cACJH,IACDA,GAA+B,EAC/BC,EAAiB/wC,KAAK7J,GACtBkD,EAAmB,QAItB,CAGD,MAAM63C,EAA0BlB,EAEhC,IADoBhH,GAAKmI,EAA+Bh7C,EAAK46C,EAAkBC,EAAqB37C,EAAoB67C,GAEpH,QAEP,CAKL,GAHIH,EAAiB34C,OAAS,IAC1B2pB,EAAa4sB,cAAgBoC,GAE7BC,EAAoB54C,OAAS,EAAG,CAChC,MAAMg5C,EAAkDntC,EAAU+sC,GAClEjvB,EAAaK,iBAAiBL,EAAaK,iBAAiBhqB,QAAU,CAClEqB,KAAM,wBACN4oB,QAAS+uB,EACTr3C,MAAOgoB,EAAaK,iBAAiBhqB,OAO5C,CAGJ,CAER,CAED,GAAI43C,GAAeZ,EAAa,CAE5B,IAAK,MAAM34B,KAAWlhB,KAAK4zC,SACvB1yB,EAAQgf,YAAY,GAAG/O,WAAa7vB,EAAOoT,YAAYhQ,WAAsB,UAAEF,MAC/E0c,EAAQgf,YAAY,GAAGnxB,SAAW,KAEtC/O,KAAK4zC,SAAS,GAAG1T,YAAY,GAAG2I,UAAY,CAC/C,CAED,IAAIiT,EAAiD,KACrD,GAAKjC,GAAekB,GAAiBjB,GAAea,GAAgBD,GAAcX,EAAe,CAO7F+B,EAAsB,GACtB,IAAK,IAAIvxC,EAAYuxC,EAAoBj5C,OAAQ0H,EAAIvK,KAAKo1C,kBAAmB7qC,IAAK,CAC9EuxC,EAAoBvxC,GAAK,GACzB,IAAK,IAAI+lB,EAAY,EAAGA,EAAIhvB,EAAOmQ,mBAAoB6e,IAAKwrB,EAAoBvxC,GAAG+lB,GAAK,EAC3F,CACJ,CAED,IAIIyrB,EAJApP,EAA6B,EAE7BqP,EAAoC,EACpCC,GAAmC,EAEnCC,GAA6B,EAC7B5tC,GAA6B,EACjC,KAAO6tB,EAAYD,EAAWr5B,eAAgBk5C,EAAU7f,EAAWG,WAAWF,MAC1E,QAEI,IAAIggB,GAAkB/f,GAAoBF,EAAWG,WAAWF,OAAiB,GAAKC,GAAoBF,EAAWG,WAAWF,MAChIn8B,KAAKk2C,MAAQkG,mBAAmBlgB,EAAWyd,UAAUxd,EAAWA,EAAYggB,IAC5E54C,SAAS2yC,MAAQl2C,KAAKk2C,MAAQ,MAAQ1pB,EAAakE,mBAEnDyL,GAAaggB,EACf,MACF,SACIn8C,KAAKgnB,kBAAoBoV,GAAoBF,EAAWG,WAAWF,MACnEn8B,KAAKinB,kBAAoBmV,GAAoBF,EAAWG,WAAWF,MAG/Dn8B,KAAKq1C,gBAFLwE,GAAeW,EAEQ,EAEApe,GAAoBF,EAAWG,WAAWF,MAErEn8B,KAAKgnB,kBAAoBuU,GAAcj6B,EAAOkY,qBAAsBlY,EAAOmY,qBAAsBzZ,KAAKgnB,mBACtGhnB,KAAKinB,kBAAoBsU,GAAcj6B,EAAOoY,qBAAsBpY,EAAOqY,qBAAsB3Z,KAAKinB,mBACtGjnB,KAAKq1C,gBAAkB9Z,GAAcj6B,EAAOsY,mBAAoBtY,EAAOuY,mBAAoB7Z,KAAKq1C,iBAEhG,IAAK,IAAII,EAAez1C,KAAK4zC,SAAS/wC,OAAQ4yC,EAAez1C,KAAKo1C,kBAAmBK,IACjFz1C,KAAK4zC,SAAS6B,GAAgB,IAAIpC,GAGtC,GADArzC,KAAK4zC,SAAS/wC,OAAS7C,KAAKo1C,kBACvByE,GAAekB,GAAiBjB,GAAea,GAAgBD,GAAcX,EAC9E,IAAK,IAAIxvC,EAAYuxC,EAAqBj5C,OAAQ0H,EAAIvK,KAAKo1C,kBAAmB7qC,IAAK,CAC/EuxC,EAAqBvxC,GAAK,GAC1B,IAAK,IAAI+lB,EAAY,EAAGA,EAAIhvB,EAAOmQ,mBAAoB6e,IAAKwrB,EAAqBvxC,GAAG+lB,GAAK,EAC5F,CAEP,MACF,SAGI,GAFAtwB,KAAK61C,MAAQzZ,GAAoBF,EAAWG,WAAWF,MAEnDn8B,KAAK61C,OAASv0C,EAAO0O,OAAmB,WAAU,OAAExL,MACpD,IAAK,IAAI+F,EAAI,EAAGA,EAAIjJ,EAAOyY,iBAAkBxP,IACzCvK,KAAK2zC,YAAYppC,GAAgE,GAA3D6xB,GAAoBF,EAAWG,WAAWF,MAGpE0d,IAAa75C,KAAK61C,MAAQ,GAChC,MACF,SACI,GAAIgF,GAAehB,EACf75C,KAAKmT,IAAMkoB,GAAM,EAAG/5B,EAAO6O,KAAKtN,OAAQ,GAAKu5B,GAAoBF,EAAWG,WAAWF,OACvFn8B,KAAKk9B,OAAS,OACX,GAAI2c,GAAeC,EACtB95C,KAAKmT,IAAMkoB,GAAM,EAAG/5B,EAAO6O,KAAKtN,OAAQu5B,GAAoBF,EAAWG,WAAWF,OAClFn8B,KAAKk9B,OAAS,OACX,GAAI6c,GAAgBU,GAAeT,EAAe,CAMrD,MAAM/c,EAAsBb,GAAoBF,EAAWG,WAAWF,OAC/DhpB,EAAK+pB,GAA4BF,GAA+BC,GACvEj9B,KAAKmT,IAAMA,EACXnT,KAAKk9B,OAASA,CACjB,MACGl9B,KAAKmT,IAAMkoB,GAAM,EAAG/5B,EAAO6O,KAAKtN,OAAQu5B,GAAoBF,EAAWG,WAAWF,OAClFn8B,KAAKk9B,OAAS7B,GAAM/5B,EAAOmP,UAAWnP,EAAOoP,UAAY,EAAG0rB,GAAoBF,EAAWG,WAAWF,MAAgB76B,EAAOmP,WAEnI,MACF,SAEQzQ,KAAK81C,UADL6E,GAAcd,EACGzd,GAAoBF,EAAWG,WAAWF,OAEzCC,GAAoBF,EAAWG,WAAWF,OAAiB,GAAKC,GAAoBF,EAAWG,WAAWF,MAElI,MACF,SAEQn8B,KAAK+1C,WADL4E,GAAcd,EACIzd,GAAoBF,EAAWG,WAAWF,OAEzCC,GAAoBF,EAAWG,WAAWF,OAAiB,GAAKC,GAAoBF,EAAWG,WAAWF,MAAgB,EAEnJ,MACF,SAEQn8B,KAAK40C,MADL8F,GAAcb,EACD,CAAC,GAAI,IAAK,IAAK,KAAKzd,GAAoBF,EAAWG,WAAWF,OACpE0e,GAAehB,EACT,CAAC,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAAKzd,GAAoBF,EAAWG,WAAWF,OAEnHC,GAAoBF,EAAWG,WAAWF,OAAiB,EAAMC,GAAoBF,EAAWG,WAAWF,MAE7Hn8B,KAAK40C,MAAQvZ,GAAM/5B,EAAOiP,SAAUjP,EAAOkP,SAAW,EAAGxQ,KAAK40C,OAChE,MACF,SACQmG,GAAclB,GACdlN,EAA+E,GAA1DvQ,GAAoBF,EAAWG,WAAWF,MAC/DwQ,EAAqBtR,GAAM,EAAG/5B,EAAO4P,YAAay7B,KAC1CmN,GAAea,GAAgBD,GAAcX,KACrDpN,EAAqBvQ,GAAoBF,EAAWG,WAAWF,MAC/DwQ,EAAqBtR,GAAM,EAAG/5B,EAAO4P,YAAay7B,IAIxD,MACF,QAEQ3sC,KAAK6hC,YADL4Y,GAAeZ,EACI,CAAC,EAAG,EAAG,EAAG,EAAG,IAAIzd,GAAoBF,EAAWG,WAAWF,OAE3DC,GAAoBF,EAAWG,WAAWF,MAAgB,EAEjFn8B,KAAK6hC,YAAch3B,KAAKiM,IAAIxV,EAAO+P,eAAgBxG,KAAKuC,IAAI9L,EAAOgQ,eAAgBtR,KAAK6hC,cAC1F,MACF,SAA2B,CACvB,MAAMmU,GAAoB5Z,GAAoBF,EAAWG,WAAWF,OAAiB,GAAKC,GAAoBF,EAAWG,WAAWF,MAAgB,EACpJn8B,KAAKg2C,SAAWza,GAAcj6B,EAAOiQ,YAAajQ,EAAOkQ,YAAawkC,GACtE,IAAK,IAAIP,EAAuB,EAAGA,EAAez1C,KAAKo1C,kBAAmBK,IAAgB,CACtF,IAAK,IAAIW,EAAMp2C,KAAK4zC,SAAS6B,GAAclC,KAAK1wC,OAAQuzC,EAAMp2C,KAAKg2C,SAAUI,IACzEp2C,KAAK4zC,SAAS6B,GAAclC,KAAK6C,GAAQA,EAAM,EAAK,EAAI,EAE5Dp2C,KAAK4zC,SAAS6B,GAAclC,KAAK1wC,OAAS7C,KAAKg2C,QAClD,CACJ,CAAC,MACF,SAA+B,CAC3B,IAAIC,EAEAA,EADA6E,GAAejB,EACMzd,GAAoBF,EAAWG,WAAWF,MAAgB,GAEzDC,GAAoBF,EAAWG,WAAWF,OAAiB,GAAKC,GAAoBF,EAAWG,WAAWF,MAAgB,EAEpJn8B,KAAKi2C,mBAAqB1a,GAAc,EAAGj6B,EAAOkQ,YAAaykC,GAC/D,MAAMoG,EAAuBr8C,KAAKo1C,kBAClC,IAAK,IAAIK,EAAuB,EAAGA,EAAe4G,EAAc5G,IAAgB,CAC5E,MAAMnC,EAAsBtzC,KAAK4zC,SAAS6B,GAAcnC,SACxD,IAAK,IAAI6C,EAAU7C,EAASzwC,OAAQszC,EAAUn2C,KAAKi2C,mBAAoBE,IACnE7C,EAAS6C,GAAW,IAAInW,GAE5BsT,EAASzwC,OAAS7C,KAAKi2C,kBAC1B,CACJ,CAAC,MACF,SACI,GAAK8E,GAAclB,GAAkBC,GAAea,GAAgBD,GAAcX,EAAe,CAC7F,MAAMuC,EAAgC/gB,GAAcj6B,EAAOmQ,mBAAoBnQ,EAAOqQ,0BAA2ByqB,GAAoBF,EAAWG,WAAWF,MAAgB76B,EAAOmQ,oBAClLzR,KAAKu1C,oBAAqB,EAC1Bv1C,KAAKshC,mBAAsBgb,EAAwB,EAEnD,IAAK,IAAI7G,EAAuB,EAAGA,EAAez1C,KAAKo1C,kBAAmBK,IAAgB,CACtF,MAAMhU,EAA0BgU,GAAgBz1C,KAAKgnB,mBAAqByuB,EAAez1C,KAAKgnB,kBAAoBhnB,KAAKinB,kBACjHsZ,EAAwBkV,GAAgBz1C,KAAKgnB,kBAAoBhnB,KAAKinB,kBAE5E,IAAK,IAAIwwB,EAA0Bz3C,KAAK4zC,SAAS6B,GAAcvV,YAAYr9B,OAAQ40C,EAAkB6E,EAAuB7E,IACxHz3C,KAAK4zC,SAAS6B,GAAcvV,YAAYuX,GAAmB,IAAI7O,GAAWnH,EAAgBlB,GAG9F,GADAvgC,KAAK4zC,SAAS6B,GAAcvV,YAAYr9B,OAASy5C,EAC7C1B,GAAaf,EACb,IAAK,IAAIpC,EAA0B,EAAGA,EAAkB6E,EAAuB7E,IAC3Ez3C,KAAK4zC,SAAS6B,GAAcvV,YAAYuX,GAAiBtM,gBAAgB1J,EAAgB,EAAuB,EAAsBA,EAAgBlB,GAI9J,IAAK,IAAIjQ,EAAYwrB,EAAqBrG,GAAc5yC,OAAQytB,EAAIgsB,EAAuBhsB,IACvFwrB,EAAqBrG,GAAcnlB,GAAK,EAE/C,CACJ,KAAM,CACH,MAAMisB,EAA8BngB,GAAoBF,EAAWG,WAAWF,MAC9En8B,KAAKu1C,mBAAyD,IAAhB,EAAnBgH,GAC3Bv8C,KAAKshC,mBAAyD,IAAhB,EAAnBib,GAC3B,IAAK,IAAI9G,EAAuB,EAAGA,EAAez1C,KAAKo1C,kBAAmBK,IAAgB,CACtF,IAAI/T,EAA0B,GAC1B1hC,KAAKu1C,oBAAsBv1C,KAAKshC,sBAChCI,EAAkBnG,GAAcj6B,EAAOmQ,mBAAoBzR,KAAKs1C,8BAA+BlZ,GAAoBF,EAAWG,WAAWF,MAAgB76B,EAAOmQ,qBAEpK,MAAMyP,EAAmBlhB,KAAK4zC,SAAS6B,GACjChU,EAA0BzhC,KAAK01C,kBAAkBD,GACjDlV,EAAwBvgC,KAAK21C,gBAAgBF,GACnD,IAAK,IAAIlrC,EAAY2W,EAAQgf,YAAYr9B,OAAQ0H,EAAIm3B,EAAiBn3B,IAClE2W,EAAQgf,YAAY31B,GAAK,IAAIq+B,GAAWnH,EAAgBlB,GAE5Drf,EAAQgf,YAAYr9B,OAAS6+B,CAChC,CACJ,CACH,MACF,SACI,GAAKsY,EAalBh6C,KAAKghC,OAAS5E,GAAoBF,EAAWG,WAAWF,UAbxB,CAChC,IAAIqgB,EAAYpgB,GAAoBF,EAAWG,WAAWF,MAC1Dn8B,KAAKghC,OAAS3F,GAAM,EAAG/5B,EAAOyQ,QAAQlP,OAAQ25C,EAAY,IACtD1C,GAAeW,GAAeZ,KACd,GAAf75C,KAAKghC,QAA8B,GAAfhhC,KAAKghC,SAC5Bkb,GAAoB,GAEjBl8C,KAAKghC,QAAU,IAClB1yB,GAAoB,GAItB,CAIW,MACF,SACI,GAAImsC,GAAeZ,EAAa,CAC5B,MAAMpE,EAAuBrZ,GAAoBF,EAAWG,WAAWF,MACvEn8B,KAAK4zC,SAAS6B,GAAcvY,OAAS7B,GAAM,EAAG/5B,EAAO2Y,aAAcmiB,GAAoBF,EAAWG,WAAWF,MAAgB,GACzHsZ,GAAgBz1C,KAAKgnB,oBAAmBhnB,KAAK4zC,SAAS6B,GAAcvY,OAAS,EACpF,MAAM,GAAK6d,GAAclB,GAAkBC,GAAea,GAAgBD,GAAcX,EACrF,IAAK,IAAItE,EAAuB,EAAGA,EAAez1C,KAAKo1C,kBAAmBK,IACtEz1C,KAAK4zC,SAAS6B,GAAcvY,OAAS7B,GAAM,EAAG/5B,EAAO2Y,aAAcmiB,GAAoBF,EAAWG,WAAWF,MAAgB,GACzHsZ,GAAgBz1C,KAAKgnB,oBAAmBhnB,KAAK4zC,SAAS6B,GAAcvY,OAAS,OAElF,CACH,IAAK,IAAIuY,EAAuB,EAAGA,EAAez1C,KAAKgnB,kBAAmByuB,IACtEz1C,KAAK4zC,SAAS6B,GAAcvY,OAAS7B,GAAM,EAAG/5B,EAAO2Y,aAAcmiB,GAAoBF,EAAWG,WAAWF,OAEjH,IAAK,IAAIsZ,EAAuBz1C,KAAKgnB,kBAAmByuB,EAAez1C,KAAKo1C,kBAAmBK,IAC3Fz1C,KAAK4zC,SAAS6B,GAAcvY,OAAS,CAE5C,CACH,MACF,QAAkC,CAC9B+e,IACIA,GAA2Bj8C,KAAK4zC,SAASoI,GAA2B9b,YAAYr9B,SAChFm5C,IACAC,EAA0B,GAE9B1gB,GAAc,EAAGv7B,KAAK4zC,SAAS/wC,OAAS,EAAGm5C,GAC3C,MAAMxuB,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAEpF,IAAIlY,EAAyBxI,GAAc,EAAG,GAA2Ba,GAAoBF,EAAWG,WAAWF,QAC9G2d,GAAea,GAAgBD,GAAcX,KAC5B,GAAdhW,EACAA,EAAc,EAEK,GAAdA,IACLA,EAAc,IAGtBvW,EAAW2d,gBAAgBpH,EAAgBiY,GAA6Bh8C,KAAKgnB,mBAAqBg1B,EAA4Bh8C,KAAKgnB,kBAAoBhnB,KAAKinB,kBAAmB+0B,GAA6Bh8C,KAAKgnB,kBAAoBhnB,KAAKinB,qBAGpO4zB,GAAehB,GAAiBW,GAAaV,IAAgC,GAAd/V,GAAuD,GAAdA,GAAuF,GAApCA,IAC7JvW,EAAWsH,SAAU,EACrBtH,EAAWuF,WAAa,EACxBvF,EAAWze,SAAW,GAEtBmtC,IACA1uB,EAAWoG,cAAgB,GAE3BtlB,IACAkf,EAAWmG,gBAAiB,GAG5BknB,GAAehB,IACfrsB,EAAWze,QAAU,EAGjBye,EAAW6D,OAAS/vB,EAAOyV,OAAOrS,WAAyB,aAAEF,QAE7DgpB,EAAWze,SAAW,MAGjC,CAAC,MACF,SAAyB,CACrB,MAAM2d,EAAuB0P,GAAoBF,EAAWG,WAAWF,OAAiB,EAAMC,GAAoBF,EAAWG,WAAWF,MACxIn8B,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAAyB/uB,OAASR,GAElFotB,GAAea,GAAgBD,GAAcX,IAC0C,GAApF/5C,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAAyB/uB,SAC9EltB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAAyB/uB,OAAM,EAG/F,CAAC,MACF,SACI,GAAIutB,GAAeZ,EAAa,CAC5B,MAAM4C,EAAwB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACjDhH,EAAuBrZ,GAAoBF,EAAWG,WAAWF,MACjE3O,EAAyBxtB,KAAK4zC,SAAS6B,GAAcvV,YAAY,GACvE1S,EAAWnsB,SAAWg6B,GAAM,EAAG/5B,EAAOC,UAAUsB,OAA+E,EAAvE45C,EAAYrgB,GAAoBF,EAAWG,WAAWF,QAI9G3O,EAAWqZ,sBAAsBiV,EAAqBrG,GAAc,GAAIpK,EAE3E,MAAM,GAAIuP,GAAaf,EAAa,CACjC,MAAM4C,EAAwB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACvD,IAAK,IAAIhH,EAAuB,EAAGA,EAAez1C,KAAKo1C,kBAAmBK,IACtE,IAAK,MAAMjoB,KAAcxtB,KAAK4zC,SAAS6B,GAAcvV,YAC7CuV,GAAgBz1C,KAAKgnB,kBACrBwG,EAAWqb,UAAYxN,GAAM,EAAG/5B,EAAOkK,WAAW3I,OAAQu5B,GAAoBF,EAAWG,WAAWF,OAEpG3O,EAAWnsB,SAAWg6B,GAAM,EAAG/5B,EAAOC,UAAUsB,OAA+E,EAAvE45C,EAAYrgB,GAAoBF,EAAWG,WAAWF,OAI7H,MAAM,GAAI0e,GAAehB,EAAa,CACnC,MAAM4C,EAAwB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACnDT,GAA6Bh8C,KAAKgnB,kBAClChnB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAAyBpT,UAAYxN,GAAM,EAAG/5B,EAAOkK,WAAW3I,OAAQu5B,GAAoBF,EAAWG,WAAWF,OAEvKn8B,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAAyB56C,SAAWg6B,GAAM,EAAG/5B,EAAOC,UAAUsB,OAA+E,EAAvE45C,EAAYrgB,GAAoBF,EAAWG,WAAWF,OAExL,MACG,GAAsF,GAAlFn8B,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAAyBhnC,KAC9EjV,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAAyBpT,UAAYxN,GAAM,EAAG/5B,EAAOkK,WAAW3I,OAAQu5B,GAAoBF,EAAWG,WAAWF,YAE3L,GAAI6d,EAAc,CACjB,MAAM0C,EAAetgB,GAAoBF,EAAWG,WAAWF,MACzDwgB,EAAkBvgB,GAAoBF,EAAWG,WAAWF,MAGjEn8B,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAAyB56C,SAAWg6B,GAAM,EAAG/5B,EAAOC,UAAUsB,OAD7F,GAAnB85C,EACwHD,EAAe,IAC7G,GAAnBC,EACiHD,EAAe,IAC7G,GAAnBC,EACiHD,EAAe,GAEfA,EAG5H,MACA18C,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAAyB56C,SAAWg6B,GAAM,EAAG/5B,EAAOC,UAAUsB,OAAQu5B,GAAoBF,EAAWG,WAAWF,OAI5J,MAoCF,SACI,GAAK4e,GAAclB,GAAiBc,GAAcb,GAAiBY,GAAcX,EAC7E,GAAIc,GAAehB,EAAa,CAC5B,MAAMzH,EAA2B,CAAC,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,GAE/CC,EAA6B,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,UAAW,UAAW,WAE1F,GAAIoI,GAAeZ,EAAa,CAC5B,MAAMpE,EAAuBrZ,GAAoBF,EAAWG,WAAWF,MACjE3O,EAAyBxtB,KAAK4zC,SAAS6B,GAAcvV,YAAY,GACjEkL,EAAiC0Q,EAAqBrG,GAAc,GACpEzN,EAAuB,CAAC,EAAG,EAAG,EAAG,GAAG3M,GAAM,EAAG+W,EAAevvC,OAAQu5B,GAAoBF,EAAWG,WAAWF,QACpHiP,EAAeE,aAAe8G,EAAepK,GAC7CoD,EAAexZ,gBAAkB,EACjCwZ,EAAevZ,eAAiBvwB,EAAO4W,UAAUxT,WAAW2tC,EAAiBrK,IAC7Exa,EAAWqZ,sBAAsBuE,EAAgBC,EACpD,MAAM,GAAIuP,GAAaf,EACpB,IAAK,IAAIpE,EAAuB,EAAGA,EAAez1C,KAAKo1C,kBAAmBK,IACtE,IAAK,IAAIlrC,EAAY,EAAGA,EAAIvK,KAAK4zC,SAAS6B,GAAcvV,YAAYr9B,OAAQ0H,IAAK,CAC7E,MAAMijB,EAAyBxtB,KAAK4zC,SAAS6B,GAAcvV,YAAY31B,GACjE6gC,EAAiC0Q,EAAqBrG,GAAclrC,GACpEy9B,EAAuB3M,GAAM,EAAG+W,EAAevvC,OAAQu5B,GAAoBF,EAAWG,WAAWF,MAAgB,GACnHsZ,EAAez1C,KAAKgnB,mBACpBokB,EAAeE,aAAe8G,EAAepK,GAC7CoD,EAAexZ,gBAAkB,EACjCwZ,EAAevZ,eAAiBvwB,EAAO4W,UAAUxT,WAAW2tC,EAAiBrK,MAE7EoD,EAAeE,aAAe,GAC9BF,EAAexZ,gBAAkB,EACjCwZ,EAAevZ,eAAiBvwB,EAAO4W,UAAUxT,WAAiB,MAEtE8oB,EAAWqZ,sBAAsBuE,EAAgBC,EACpD,KAEF,CACH,MAAMrD,EAAuB3M,GAAM,EAAG+W,EAAevvC,OAAQu5B,GAAoBF,EAAWG,WAAWF,OACjG3O,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAC9E7Q,EAAiC0Q,EAAqBE,GAA2BC,GACvF7Q,EAAeE,aAAe8G,EAAepK,GAC7CoD,EAAexZ,gBAAkB,EACjCwZ,EAAevZ,eAAiBvwB,EAAO4W,UAAUxT,WAAW2tC,EAAiBrK,IAC7Exa,EAAWqZ,sBAAsBuE,EAAgBC,EACpD,CACJ,KAAM,CACH,MAAM4G,EAA4B,GAC5BzkB,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAC9E7Q,EAAiC0Q,EAAqBE,GAA2BC,GACvF7Q,EAAeE,aAAejQ,GAAM,EAAG4W,EAAmB7V,GAAoBF,EAAWG,WAAWF,OACpG3O,EAAWqZ,sBAAsBuE,EAAgBC,EACpD,KACE,CACH,MAAM7d,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GACpF,IAAIW,EAAoBxgB,GAAoBF,EAAWG,WAAWF,MAElE,GAAI0d,GAA4B,GAAb+C,EAAgB,CAC/BpvB,EAAW8F,cAAe,GACtBwmB,GAAeC,GAAeC,KAC9B4C,EAAYxgB,GAAoBF,EAAWG,WAAWF,OAC1D,MAAM0gB,EAAoCD,EAC1CpvB,EAAW0D,SAASgV,kBAAoB7K,GAAM,EAAG/5B,EAAO2S,gBAAkB,EAAG4oC,GAC7E,IAAK,IAAItyC,EAAYijB,EAAW0D,SAAS+U,cAAcpjC,OAAQ0H,EAAIijB,EAAW0D,SAASgV,kBAAmB37B,IACtGijB,EAAW0D,SAAS+U,cAAc17B,GAAK,IAAIg6B,GAE/C,IAAK,IAAIh6B,EAAY,EAAGA,EAAIijB,EAAW0D,SAASgV,kBAAmB37B,IAAK,CACpE,MAAM24B,EAA4B1V,EAAW0D,SAAS+U,cAAc17B,GACpE24B,EAAMjuB,KAAOomB,GAAM,EAAC,EAAqBe,GAAoBF,EAAWG,WAAWF,OACnF+G,EAAMsB,KAAOnJ,GAAM,EAAG/5B,EAAOmS,gBAAiB2oB,GAAoBF,EAAWG,WAAWF,OACxF+G,EAAMuB,KAAOpJ,GAAM,EAAG/5B,EAAOwS,gBAAiBsoB,GAAoBF,EAAWG,WAAWF,MAC3F,CACD,IAAK,IAAI5xB,EAAYijB,EAAW0D,SAASgV,kBAAmB37B,EAAIsyC,EAA2BtyC,IACvF4xB,GAAa,EAKjB,GADA3O,EAAW0b,aAAa,GAAK1b,EAAW0D,SACnC4oB,IAAgBa,GAAgBZ,IAAgBW,GAAeV,EAAc,CAC9E,IAAIpD,EAAkCxa,GAAoBF,EAAWG,WAAWF,OAAiB,EAAMC,GAAoBF,EAAWG,WAAWF,MACjJ,IAAK,IAAI7L,EAAY,EAAGA,EAAIhvB,EAAO6S,iBAAmB,EAAGmc,IACrD,GAAIsmB,EAA0B,GAAKtmB,EAAI,CAEnC,MAAMwsB,EAA6C1gB,GAAoBF,EAAWG,WAAWF,MACvD,MAAlC3O,EAAW0b,aAAa5Y,EAAI,KAC5B9C,EAAW0b,aAAa5Y,EAAI,GAAK,IAAI0V,IACzCxY,EAAW0b,aAAa5Y,EAAI,GAAI4V,kBAAoB7K,GAAM,EAAG/5B,EAAO2S,gBAAkB,EAAG6oC,GACzF,IAAK,IAAIvyC,EAAYijB,EAAW0b,aAAa5Y,EAAI,GAAI2V,cAAcpjC,OAAQ0H,EAAIijB,EAAW0b,aAAa5Y,EAAI,GAAI4V,kBAAmB37B,IAC9HijB,EAAW0b,aAAa5Y,EAAI,GAAI2V,cAAc17B,GAAK,IAAIg6B,GAE3D,IAAK,IAAIh6B,EAAY,EAAGA,EAAIijB,EAAW0b,aAAa5Y,EAAI,GAAI4V,kBAAmB37B,IAAK,CAChF,MAAM24B,EAA4B1V,EAAW0b,aAAa5Y,EAAI,GAAI2V,cAAc17B,GAChF24B,EAAMjuB,KAAOomB,GAAM,EAAC,EAAqBe,GAAoBF,EAAWG,WAAWF,OACnF+G,EAAMsB,KAAOnJ,GAAM,EAAG/5B,EAAOmS,gBAAiB2oB,GAAoBF,EAAWG,WAAWF,OACxF+G,EAAMuB,KAAOpJ,GAAM,EAAG/5B,EAAOwS,gBAAiBsoB,GAAoBF,EAAWG,WAAWF,MAC3F,CACD,IAAK,IAAI5xB,EAAYijB,EAAW0b,aAAa5Y,EAAI,GAAI4V,kBAAmB37B,EAAIuyC,EAAoCvyC,IAC5G4xB,GAAa,CAEpB,CAER,CACJ,MAEG3O,EAAW8F,cAAe,EAC1B9F,EAAWsb,kBAAoBzN,GAAM,EAAG/5B,EAAO8S,qBAAsBgoB,GAAoBF,EAAWG,WAAWF,OAC/G3O,EAAWub,mBAAqB1N,GAAM,EAAG/5B,EAAO+S,sBAAuB+nB,GAAoBF,EAAWG,WAAWF,MAExH,CACH,MACF,SACI,GAAI6d,EACA,GAAIS,EAAa,CAEb,MAAMsC,EAA8B9gB,GAAkBC,EAAYC,GAClEA,GAAa,EACb,MAAM6gB,EAAwB9gB,EAAWmd,MAAMld,EAAWA,EAAY4gB,GACtE5gB,GAAa4gB,EAcb,MAAME,EAAwCxD,KAAKC,MAAMwD,KAAKF,IAC9D,IAAK,MAAMG,KAASF,EAAgB,CAChC,MAAMxH,EAAuB0H,EAAe,QACtC1F,EAA0B0F,EAAkB,WAC5CC,EAAuBD,EAAY,KACnC3vB,EAAyBxtB,KAAK4zC,SAAS6B,GAAcvV,YAAYuX,GACvEjqB,EAAWuH,4BAA8BqoB,EAAkC,4BAC3E5vB,EAAWwH,kBAAoBooB,EAAwB,kBACvD5vB,EAAWyH,gBAAkBmoB,EAAsB,gBACnD5vB,EAAW0H,iBAAmBkoB,EAAuB,iBACrD5vB,EAAW2H,sBAAwBioB,EAA4B,sBAC/D5vB,EAAW4H,oBAAsBgoB,EAA0B,mBAE9D,CACJ,KAAM,CAGH,MAAMtG,EAA0B1a,GAAoBF,EAAWG,WAAWF,MACpEpH,EAAuCsoB,QAA0B,EAAlBvG,GAC/C5hB,EAA2B4hB,GAAmB,EAC9CC,EAA6B3a,GAAoBF,EAAWG,WAAWF,MACvEhH,EAAiCkoB,QAA6B,EAArBtG,GAEzC/hB,EAA4BiH,GAAkBC,EAAYC,GAChEA,GAAa,EACb,MAAMlH,EAA0BgH,GAAkBC,EAAYC,GAC9DA,GAAa,EACb,MAAM/G,EAA8B6G,GAAkBC,EAAYC,GAClEA,GAAa,EACb,MAAM3O,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GACpFzuB,EAAWuH,4BAA8BA,EACzCvH,EAAWwH,kBAAoBA,EAC/BxH,EAAWyH,gBAAkBA,EAC7BzH,EAAW0H,iBAAmBA,EAC9B1H,EAAW2H,sBAAwBA,EACnC3H,EAAW4H,oBAAsBA,CAEpC,MAEA,GAAI2kB,IAAgBW,GAAcE,EACmC,iBAAlEr3C,SAAS+5C,IAAI3D,UAAUp2C,SAAS+5C,IAAIz6C,OAAS,IAAI64C,gBACxCV,IACDA,GAAmC,EACnC15C,EAAO+B,4BAA6B,EACpCmpB,EAAa4sB,cAAgB,CAAC,iBAC9Bt1C,EAAmB,KAG/B9D,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAAyB56C,SAAWg6B,GAAM,EAAG/5B,EAAOC,UAAUsB,OAAQu5B,GAAoBF,EAAWG,WAAWF,MAAgB,UAClL,GAAK4e,GAAclB,GAAkBC,GAAea,GAAgBD,GAAcX,EAAe,CACpG,MAAM7H,EAA+B,EAC/B1kB,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAC9E7Q,EAAiC0Q,EAAqBE,GAA2BC,GACvF7Q,EAAexZ,gBAAkByJ,GAAM,EAAG6W,EAAsB9V,GAAoBF,EAAWG,WAAWF,OAC1G3O,EAAWqZ,sBAAsBuE,EAAgBC,EAEpD,CAGH,MACF,SAAmC,CAC/B,MAAM7d,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAC9EsB,EAA8B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAC7I,GAAKxC,GAAclB,GAAiBc,GAAcb,GAAiBY,GAAcX,EAI7E,GAAmB,GAAfvsB,EAAWvY,KACX,IAAK,IAAI1K,EAAY,EAAGA,EAAIjJ,EAAO0Y,UAAWzP,IAAK,CAC/C,IAAIizC,EAAaphB,GAAoBF,EAAWG,WAAWF,OACvDqe,GAAaT,IAAkBA,IAAgBC,KAAewD,EAAKD,EAAkBC,IACzFhwB,EAAWqd,iBAAiBtgC,GAAKkpC,GAAK6F,EAAyBkE,GAAIh5C,KACtE,KACE,CAIH,MAAM4mC,EAAiC0Q,EAAqBE,GAA2BC,GACvF,IAAIuB,EAAaphB,GAAoBF,EAAWG,WAAWF,OACvDqe,GAAaT,IAAkBA,IAAgBC,KAAewD,EAAKD,EAAkBC,IACzFpS,EAAevZ,eAAiB4hB,GAAK6F,EAAyBkE,GAC9DhwB,EAAWqZ,sBAAsBuE,EAAgBC,EACpD,MAGD,IAAK,IAAI9gC,EAAY,EAAGA,EAAIjJ,EAAO0Y,UAAWzP,IAAK,CAC/C,IAAIizC,EAAaphB,GAAoBF,EAAWG,WAAWF,OACvDqe,GAAaT,IAAkBA,IAAgBC,KAAewD,EAAKD,EAAkBC,IACzFhwB,EAAWqd,iBAAiBtgC,GAAK8wB,GAAM,EAAG/5B,EAAO4W,UAAUrV,OAAQ26C,EACtE,CAER,CAAC,MACF,QAA6B,CACzB,MAAMhwB,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAQpF,GAPAzuB,EAAWriB,WAAakwB,GAAM,EAAG/5B,EAAO8J,kBAAmB,EAAkB,EAAGgxB,GAAoBF,EAAWG,WAAWF,OACtH0d,IAEArsB,EAAWriB,WAAaN,KAAKkB,MAAMlB,KAAKoB,IAAI,IAAM,EAAIuhB,EAAWriB,YAAc7J,EAAO6X,qBAAuB7X,EAAO8J,kBAInH2vC,GAAclB,GAAiBc,GAAcb,GAAiBY,GAAcX,EAAc,CAC3F,MAAMwD,EAA8B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACvInS,EAAiC0Q,EAAqBE,GAA2BC,GACvF,IAAIuB,EAAaphB,GAAoBF,EAAWG,WAAWF,OACvDqe,GAAaT,IAAkBA,IAAgBC,KAAewD,EAAKD,EAAkBC,IACzFpS,EAAelY,cAAgBugB,GAAK6F,EAAyBkE,GAC7DhwB,EAAWqZ,sBAAsBuE,EAAgBC,EACpD,CAED,GAAI2O,IAAiBU,EAAY,CACE16C,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GACzE/R,cAAgB7O,GAAM,EAAG,KAASe,GAAoBF,EAAWG,WAAWF,OAAiB,GAAKC,GAAoBF,EAAWG,WAAWF,MAC1J,CAEJ,CAAC,MACF,SAA2B,CACnC,MAAM3O,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GACpFzuB,EAAWuc,iBAAmB1O,GAAM,EAAG/5B,EAAO+X,oBAAsB,EAAG+iB,GAAoBF,EAAWG,WAAWF,OACjH3O,EAAWwc,eAAiB3O,GAAM,EAAG/5B,EAAOgY,kBAAoB,EAAG8iB,GAAoBF,EAAWG,WAAWF,OAC7G3O,EAAWyc,cAAgB5O,GAAM,EAAG/5B,EAAOiY,iBAAmB,EAAG6iB,GAAoBF,EAAWG,WAAWF,MAClG,CAAC,MACF,QACmCn8B,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GACzEvpB,cAAgB2I,GAAM,EAAG/5B,EAAOga,mBAAoB8gB,GAAoBF,EAAWG,WAAWF,OAC3G,MACF,SACI,GAAK4e,GAAclB,GAAkBC,GAAea,GAAgBD,GAAcX,EAAe,CAE7F,MAAM3O,EAAiB,CACnB,CAAEja,WAAY,YAAaC,cAAe,EAAK7c,cAAe,GAC9D,CAAE4c,WAAY,SAAUC,cAAe,EAAK7c,cAAe,GAC3D,CAAE4c,WAAY,SAAUC,cAAe,KAAO7c,cAAe,GAC7D,CAAE4c,WAAY,mBAAoBC,cAAe,KAAO7c,cAAe,GACvE,CAAE4c,WAAY,SAAUC,cAAe,IAAM7c,aAAc,GAC3D,CAAE4c,WAAY,SAAUC,cAAe,EAAK7c,aAAc,IAC1D,CAAE4c,WAAY,SAAUC,cAAe,MAAQ7c,aAAc,IAC7D,CAAE4c,WAAY,SAAUC,cAAe,IAAM7c,aAAc,IAC3D,CAAE4c,WAAY,mBAAoBC,cAAe,KAAO7c,cAAe,IAE3E,GAAIkmC,GAAeZ,EAAa,CAC5B,MAAMpE,EAAuBrZ,GAAoBF,EAAWG,WAAWF,MACjElL,EAAWma,EAAe/P,GAAM,EAAG+P,EAAevoC,OAAQu5B,GAAoBF,EAAWG,WAAWF,QACpG3O,EAAyBxtB,KAAK4zC,SAAS6B,GAAcvV,YAAY,GACvE1S,EAAW4b,OAASpG,GAAMqK,uBAAuBpc,EAASG,eAC1D5D,EAAW6b,QAAUrG,GAAMsK,sBAAsBrc,EAAS1c,cAC1DiZ,EAAW2D,WAAa7vB,EAAOoT,YAAYhQ,WAAWusB,EAASE,YAAY3sB,MACvEgpB,EAAW2D,YAAc7vB,EAAOoT,YAAYhQ,WAAmB,OAAEF,QAEjEgpB,EAAWze,SAAW,KAE7B,MAAM,GAAI6rC,GAAaf,EACpB,IAAK,IAAIpE,EAAuB,EAAGA,EAAez1C,KAAKo1C,kBAAmBK,IACtE,IAAK,MAAMjoB,KAAcxtB,KAAK4zC,SAAS6B,GAAcvV,YAAa,CAC9D,MAAMjP,EAAWma,EAAe/P,GAAM,EAAG+P,EAAevoC,OAAQu5B,GAAoBF,EAAWG,WAAWF,QAC1G3O,EAAW4b,OAASpG,GAAMqK,uBAAuBpc,EAASG,eAC1D5D,EAAW6b,QAAUrG,GAAMsK,sBAAsBrc,EAAS1c,cAC1DiZ,EAAW2D,WAAa7vB,EAAOoT,YAAYhQ,WAAWusB,EAASE,YAAY3sB,MACvEgpB,EAAW2D,YAAc7vB,EAAOoT,YAAYhQ,WAAmB,OAAEF,QAEjEgpB,EAAWze,SAAW,KAE7B,MAEF,GAAK2rC,IAAeX,IAAgBC,GAAiBH,EAAa,CACrE,MAAM5oB,EAAWma,EAAe/P,GAAM,EAAG+P,EAAevoC,OAAQu5B,GAAoBF,EAAWG,WAAWF,QACpG3O,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GACpFzuB,EAAW4b,OAASpG,GAAMqK,uBAAuBpc,EAASG,eAC1D5D,EAAW6b,QAAUrG,GAAMsK,sBAAsBrc,EAAS1c,cAC1DiZ,EAAW2D,WAAa7vB,EAAOoT,YAAYhQ,WAAWusB,EAASE,YAAY3sB,MACvEgpB,EAAW2D,YAAc7vB,EAAOoT,YAAYhQ,WAAmB,OAAEF,QAEjEgpB,EAAWze,SAAW,KAE7B,KAAM,CACH,MAAMkiB,EAAWma,EAAe/P,GAAM,EAAG+P,EAAevoC,OAAQu5B,GAAoBF,EAAWG,WAAWF,QACpG3O,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GACpFzuB,EAAW4b,OAASpG,GAAMqK,uBAAuBpc,EAASG,eAC1D5D,EAAW6b,QAAUrG,GAAMsK,sBAAsBrc,EAAS1c,cAC1DiZ,EAAW2D,WAAa7vB,EAAOoT,YAAYhQ,WAAWusB,EAASE,YAAY3sB,MAGvE43B,GAAoBF,EAAWG,WAAWF,MAAgB,IAE1D3O,EAAWsc,eAAgB,GAG/Btc,EAAWkG,sBAAsB0I,GAAoBF,EAAWG,WAAWF,OAEvE3O,EAAW2D,YAAc7vB,EAAOoT,YAAYhQ,WAAmB,OAAEF,OAASgpB,EAAWkG,uBAErFlG,EAAWze,SAAW,KAE7B,CACJ,KAAM,CACH,MAAMye,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GACpFzuB,EAAW4b,OAAS/N,GAAM,EAAG/5B,EAAOgT,YAAa8nB,GAAoBF,EAAWG,WAAWF,OAC3F3O,EAAW6b,QAAUhO,GAAM,EAAG/5B,EAAOiT,aAAa1R,OAAQu5B,GAAoBF,EAAWG,WAAWF,QAChG2d,GAAaC,GAAaC,KAC1BxsB,EAAWkG,sBAAsB0I,GAAoBF,EAAWG,WAAWF,MAClF,CACH,MACF,QACI,GAAK4e,GAAclB,GAAkBC,GAAea,GAAgBD,GAAcX,EAC9E,GAAIc,GAAehB,EACf,GAAIY,GAAeZ,EAAa,CAC5B,MAAM4D,EAA0B,CAAC,EAAG,EAAG,EAAG,GACpCC,EAA4B,CAAC,OAAQ,OAAQ,OAAQ,YACrDjI,EAAuBrZ,GAAoBF,EAAWG,WAAWF,MACjEhgB,EAAiBkf,GAAM,EAAGoiB,EAAc56C,OAAQu5B,GAAoBF,EAAWG,WAAWF,OAC1F3O,EAAyBxtB,KAAK4zC,SAAS6B,GAAcvV,YAAY,GACjEkL,EAAiC0Q,EAAqBrG,GAAc,GAC1EjoB,EAAWiE,QAAUgsB,EAActhC,GACEoL,MAAjC6jB,EAAevZ,gBAAiE,GAAlCuZ,EAAevZ,eAAe5c,OAE5Em2B,EAAevZ,eAAiBvwB,EAAO4W,UAAUxT,WAAWg5C,EAAgBvhC,IAC5EqR,EAAWqZ,sBAAsBuE,EAAgBC,IAEjD7d,EAAWiE,SAAWnwB,EAAO0T,SAAStQ,WAAiB,KAAEF,QAEzDgpB,EAAWze,SAAW,IAE7B,MAAM,GAAI6rC,GAAaf,EAAa,CACjC,MAAM4D,EAA0B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1CC,EAA4B,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,WAAY,YAC/E,IAAK,IAAIjI,EAAuB,EAAGA,EAAez1C,KAAKo1C,kBAAmBK,IACtE,IAAK,IAAIlrC,EAAY,EAAGA,EAAIvK,KAAK4zC,SAAS6B,GAAcvV,YAAYr9B,OAAQ0H,IAAK,CAC7E,MAAM4R,EAAiBkf,GAAM,EAAGoiB,EAAc56C,OAAQu5B,GAAoBF,EAAWG,WAAWF,OAC1F3O,EAAyBxtB,KAAK4zC,SAAS6B,GAAcvV,YAAY31B,GACjE6gC,EAAiC0Q,EAAqBrG,GAAclrC,GAC1EijB,EAAWiE,QAAUgsB,EAActhC,GACEoL,MAAjC6jB,EAAevZ,gBAAiE,GAAlCuZ,EAAevZ,eAAe5c,OAE5Em2B,EAAevZ,eAAiBvwB,EAAO4W,UAAUxT,WAAWg5C,EAAgBvhC,IAC5EqR,EAAWqZ,sBAAsBuE,EAAgBC,IAEjD7d,EAAWiE,SAAWnwB,EAAO0T,SAAStQ,WAAiB,KAAEF,QAEzDgpB,EAAWze,SAAW,MAEC,GAAtB49B,GAA6BmN,GAAea,GAAgBD,GAAcX,KAAmB/5C,KAAK01C,kBAAkBD,KAErHjoB,EAAWze,SAAW,EACtBye,EAAWgF,OAASma,EAE3B,CAER,KAAM,CACH,MAAM8Q,EAA0B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAC1CC,EAA4B,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,WAAY,YACzEvhC,EAAiBkf,GAAM,EAAGoiB,EAAc56C,OAAQu5B,GAAoBF,EAAWG,WAAWF,OAC1F3O,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAC9E7Q,EAAiC0Q,EAAqBE,GAA2BC,GACvFzuB,EAAWiE,QAAUgsB,EAActhC,GACEoL,MAAjC6jB,EAAevZ,gBAAiE,GAAlCuZ,EAAevZ,eAAe5c,OAE5Em2B,EAAevZ,eAAiBvwB,EAAO4W,UAAUxT,WAAWg5C,EAAgBvhC,IAC5EqR,EAAWqZ,sBAAsBuE,EAAgBC,IAEjD7d,EAAWiE,SAAWnwB,EAAO0T,SAAStQ,WAAiB,KAAEF,QAEzDgpB,EAAWze,SAAW,MAEA,GAAtB49B,GAA6BmN,GAAea,GAAgBD,GAAcX,KAE1EvsB,EAAWze,SAAW,EACtBye,EAAWgF,OAASma,EAE3B,KACE,CACH,MAAMnf,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAC9ExqB,EAAkB4J,GAAM,EAAG/5B,EAAO0T,SAASnS,OAAS,EAAGu5B,GAAoBF,EAAWG,WAAWF,OACvG3O,EAAWiE,QAAUA,EACjBjE,EAAWiE,SAAWnwB,EAAO0T,SAAStQ,WAAiB,KAAEF,QAEzDgpB,EAAWze,SAAW,KAGtB0iB,GAAWnwB,EAAO0T,SAASnS,QAC3B2qB,EAAWsG,aAAeuH,GAAM,EAAG/5B,EAAOub,WAAWnY,WAAW,iBAAiBqY,UAAY,EAAGqf,GAAoBF,EAAWG,WAAWF,OAAiB,GAC3J3O,EAAWwG,aAAeqH,GAAM,EAAG/5B,EAAOub,WAAWnY,WAAW,iBAAiBqY,UAAY,EAAGqf,GAAoBF,EAAWG,WAAWF,OAC1I3O,EAAWuG,aAAesH,GAAM,EAAG/5B,EAAOub,WAAWnY,WAAW,iBAAiBqY,UAAY,EAAGqf,GAAoBF,EAAWG,WAAWF,OAAiB,EAC3J3O,EAAWyG,YAAcoH,GAAM,EAAG/5B,EAAO6T,aAAatS,OAAQu5B,GAAoBF,EAAWG,WAAWF,OACxG3O,EAAWze,SAAW,MAItBye,EAAWsG,aAAexyB,EAAO0T,SAASwY,EAAWiE,SAAShkB,UAC9D+f,EAAWwG,aAAe,GAC1BxG,EAAWuG,aAAezyB,EAAO0T,SAASwY,EAAWiE,SAASvc,WAAa,EAC3EsY,EAAWyG,YAAc3yB,EAAO0T,SAASwY,EAAWiE,SAASxc,KAEpE,CAIP,MACF,QAEI,GAAK6kC,GAAea,GAAgBD,GAAcX,EAAc,CAC5D,MAAMvsB,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GACpFzuB,EAAWoG,cAAgByH,GAAM,EAAG/5B,EAAOub,WAAWnY,WAAW,aAAaqY,UAAY,EAAGqf,GAAoBF,EAAWG,WAAWF,OACvI3O,EAAWmG,iBAAiByI,GAAoBF,EAAWG,WAAWF,KACzE,CAIH,MACF,SAAyB,CACrB,GAAIse,GAAeZ,EAAa,CAC5B,MAAMpE,EAAuBrZ,GAAoBF,EAAWG,WAAWF,MACvEn8B,KAAK4zC,SAAS6B,GAAcvV,YAAY,GAAG5O,OAAS+J,GAAM,EAAG/5B,EAAOiU,QAAQ1S,OAAQu5B,GAAoBF,EAAWG,WAAWF,MACjI,MAAM,GAAIye,GAAaf,EACpB,IAAK,IAAIpE,EAAuB,EAAGA,EAAez1C,KAAKo1C,kBAAmBK,IACtE,IAAK,MAAMjoB,KAAcxtB,KAAK4zC,SAAS6B,GAAcvV,YAAa,CAC9D,MAAMyd,EAAwBvhB,GAAoBF,EAAWG,WAAWF,MACxE,IAAI7K,EAAiB+J,GAAM,EAAG/5B,EAAOiU,QAAQ1S,OAAQ86C,GAChC,GAAjBA,IAEArsB,EAAS,EACT9D,EAAW6D,MAAQ,GAEvB7D,EAAW8D,OAASA,CACvB,MAEF,GAAIupB,GAAehB,EAAa,CACnC,MAAM8D,EAAwBvhB,GAAoBF,EAAWG,WAAWF,MACxE,IAAI7K,EAAiB+J,GAAM,EAAG/5B,EAAOiU,QAAQ1S,OAAQ86C,GAChC,GAAjBA,IAEArsB,EAAS,EACTtxB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAAyB5qB,MAAQ,GAE1FrxB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAAyB3qB,OAASA,CAC1F,MACGtxB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAAyB3qB,OAAS+J,GAAM,EAAG/5B,EAAOiU,QAAQ1S,OAAS,EAAGu5B,GAAoBF,EAAWG,WAAWF,OAEzK,MAAM3O,EAAaxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAGxE,GAAIzuB,EAAW8D,QAAUhwB,EAAOiU,QAAQ1S,OAAQ,CAC5C2qB,EAAWic,aAAerN,GAAoBF,EAAWG,WAAWF,MAEpE,MAAMyhB,EAAuBxhB,GAAoBF,EAAWG,WAAWF,MACjEuN,EAAuBtN,GAAoBF,EAAWG,WAAWF,MAA8I,IAA5HC,GAAoBF,EAAWG,WAAWF,MAA2E,GAA1DC,GAAoBF,EAAWG,WAAWF,OAExL0hB,EAAuBzhB,GAAoBF,EAAWG,WAAWF,MACjEwN,EAAuBvN,GAAoBF,EAAWG,WAAWF,MAA8I,IAA5HC,GAAoBF,EAAWG,WAAWF,MAA2E,GAA1DC,GAAoBF,EAAWG,WAAWF,OAExL2hB,EAA2B1hB,GAAoBF,EAAWG,WAAWF,MACrEyN,EAA2BxN,GAAoBF,EAAWG,WAAWF,MAA2E,GAA1DC,GAAoBF,EAAWG,WAAWF,MAEhI4hB,EAAqB3hB,GAAoBF,EAAWG,WAAWF,MAC/D0N,EAAqBzN,GAAoBF,EAAWG,WAAWF,MAA2E,GAA1DC,GAAoBF,EAAWG,WAAWF,MAGhI3O,EAAWkc,aAAeA,EAAe,IACb,GAAxBkU,IAA2BpwB,EAAWkc,eAAiB,GAE3Dlc,EAAWmc,aAAeA,EAAe,IACb,GAAxBkU,IAA2BrwB,EAAWmc,eAAiB,GAE3Dnc,EAAWoc,iBAAmBA,EAAmB,IACjB,GAA5BkU,IAA+BtwB,EAAWoc,mBAAqB,GAEnEpc,EAAWqc,WAAaA,EAAa,IACX,GAAtBkU,IAAyBvwB,EAAWqc,aAAe,EAC1D,MACGrc,EAAWic,aAAenoC,EAAOiU,QAAQiY,EAAW8D,QAAQ9b,OAC5DgY,EAAWkc,aAAepoC,EAAOiU,QAAQiY,EAAW8D,QAAQ7b,OAC5D+X,EAAWmc,aAAeroC,EAAOiU,QAAQiY,EAAW8D,QAAQ5b,OAC5D8X,EAAWoc,iBAAmBtoC,EAAOiU,QAAQiY,EAAW8D,QAAQntB,WAChEqpB,EAAWqc,WAAavoC,EAAOiU,QAAQiY,EAAW8D,QAAQ3b,IAGjE,CAAC,MACF,QACI,GAAKolC,GAAclB,GAAkBC,GAAea,GAAgBD,GAAcX,EAAe,CAC7F,MAAMvsB,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GACpFzuB,EAAW6D,MAAQgK,GAAM,EAAG/5B,EAAOyV,OAAOlU,OAAQu5B,GAAoBF,EAAWG,WAAWF,OACxF3O,EAAW6D,OAAS/vB,EAAOyV,OAAOrS,WAAyB,aAAEF,QAE7DgpB,EAAWze,SAAW,KAE7B,CAGH,MACF,SAA0B,CACtB,MAAMye,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GACpF,GAAKlB,GAAclB,GAAkBC,GAAea,GAAgBD,GAAcX,EAAe,CAC7FvsB,EAAWze,QAAkE,KAAvDqtB,GAAoBF,EAAWG,WAAWF,MACtC,GAAtBwQ,GAA8BmN,GAAea,GAAgBD,GAAcX,EAGpErqC,EAAqB8d,EAAWze,WACvCye,EAAWgF,OAASma,GAFpBnf,EAAWze,UAAW,EAM1Bye,EAAWze,SAAW,EAElBye,EAAWiE,SAAWnwB,EAAO0T,SAAStQ,WAAiB,KAAEF,QAEzDgpB,EAAWze,SAAW,KAEtBye,EAAWgc,QAAUloC,EAAOmZ,eAE5B+S,EAAWze,SAAW,KAEtBye,EAAWsH,QACXtH,EAAWze,SAAW,EAEtBye,EAAWze,UAAW,EAI1B,MAAMq8B,EAAiC0Q,EAAqBE,GAA2BC,GACvFzuB,EAAWqZ,sBAAsBuE,EAAgBC,EACpD,KAAM,CAKH,GAFA7d,EAAWze,QAAWqtB,GAAoBF,EAAWG,WAAWF,OAAiB,EAAMC,GAAoBF,EAAWG,WAAWF,MAE7H/sB,EAAyBoe,EAAWze,SAAU,CAC9C,IAAI6tC,EAAoBxgB,GAAoBF,EAAWG,WAAWF,MAClE,GAAI0d,GAA4B,GAAb+C,EAAgB,CAC/BpvB,EAAW8G,gBAAiB,GACxBwlB,GAAeC,GAAeC,KAC9B4C,EAAYxgB,GAAoBF,EAAWG,WAAWF,OAC1D3O,EAAW+E,WAAW2T,kBAAoB7K,GAAM,EAAG/5B,EAAO2S,gBAAkB,EAAG2oC,GAC/E,IAAK,IAAIryC,EAAYijB,EAAW+E,WAAW0T,cAAcpjC,OAAQ0H,EAAIijB,EAAW+E,WAAW2T,kBAAmB37B,IAC1GijB,EAAW+E,WAAW0T,cAAc17B,GAAK,IAAIg6B,GAEjD,IAAK,IAAIh6B,EAAY,EAAGA,EAAIijB,EAAW+E,WAAW2T,kBAAmB37B,IAAK,CACtE,MAAM24B,EAA4B1V,EAAW+E,WAAW0T,cAAc17B,GACtE24B,EAAMjuB,KAAOomB,GAAM,EAAC,EAAqBe,GAAoBF,EAAWG,WAAWF,OACnF+G,EAAMsB,KAAOnJ,GAAM,EAAG/5B,EAAOmS,gBAAiB2oB,GAAoBF,EAAWG,WAAWF,OACxF+G,EAAMuB,KAAOpJ,GAAM,EAAG/5B,EAAOwS,gBAAiBsoB,GAAoBF,EAAWG,WAAWF,MAC3F,CACD,IAAK,IAAI5xB,EAAYijB,EAAW+E,WAAW2T,kBAAmB37B,EAAIqyC,EAAWryC,IACzE4xB,GAAa,EAKjB,GADA3O,EAAW2b,eAAe,GAAK3b,EAAW+E,WACrCunB,IAAgBa,GAAU,GAAkB,EAAoB,CACjE,IAAI/D,EAAkCxa,GAAoBF,EAAWG,WAAWF,OAAiB,EAAMC,GAAoBF,EAAWG,WAAWF,MACjJ,IAAK,IAAI7L,EAAY,EAAGA,EAAIhvB,EAAO6S,iBAAmB,EAAGmc,IACrD,GAAIsmB,EAA0B,GAAKtmB,EAAI,CAEnC,MAAMwsB,EAA6C1gB,GAAoBF,EAAWG,WAAWF,MACrD,MAApC3O,EAAW2b,eAAe7Y,EAAI,KAC9B9C,EAAW2b,eAAe7Y,EAAI,GAAK,IAAI0V,IAC3CxY,EAAW2b,eAAe7Y,EAAI,GAAI4V,kBAAoB7K,GAAM,EAAG/5B,EAAO2S,gBAAkB,EAAG6oC,GAC3F,IAAK,IAAIvyC,EAAYijB,EAAW2b,eAAe7Y,EAAI,GAAI2V,cAAcpjC,OAAQ0H,EAAIijB,EAAW2b,eAAe7Y,EAAI,GAAI4V,kBAAmB37B,IAClIijB,EAAW2b,eAAe7Y,EAAI,GAAI2V,cAAc17B,GAAK,IAAIg6B,GAE7D,IAAK,IAAIh6B,EAAY,EAAGA,EAAIijB,EAAW2b,eAAe7Y,EAAI,GAAI4V,kBAAmB37B,IAAK,CAClF,MAAM24B,EAA4B1V,EAAW2b,eAAe7Y,EAAI,GAAI2V,cAAc17B,GAClF24B,EAAMjuB,KAAOomB,GAAM,EAAC,EAAqBe,GAAoBF,EAAWG,WAAWF,OACnF+G,EAAMsB,KAAOnJ,GAAM,EAAG/5B,EAAOmS,gBAAiB2oB,GAAoBF,EAAWG,WAAWF,OACxF+G,EAAMuB,KAAOpJ,GAAM,EAAG/5B,EAAOwS,gBAAiBsoB,GAAoBF,EAAWG,WAAWF,MAC3F,CACD,IAAK,IAAI5xB,EAAYijB,EAAW2b,eAAe7Y,EAAI,GAAI4V,kBAAmB37B,EAAIuyC,EAAoCvyC,IAC9G4xB,GAAa,CAEpB,CAER,CACJ,MACG3O,EAAW8G,gBAAiB,EAC5B9G,EAAW+E,WAAW8N,QACtB7S,EAAWwb,oBAAsB3N,GAAM,EAAG/5B,EAAO8S,qBAAsBgoB,GAAoBF,EAAWG,WAAWF,OACjH3O,EAAWyb,qBAAuB5N,GAAM,EAAG/5B,EAAO+S,sBAAuB+nB,GAAoBF,EAAWG,WAAWF,MAG1H,CACGrtB,EAAyB0e,EAAWze,WACpCye,EAAW2D,WAAakK,GAAM,EAAG/5B,EAAOoT,YAAY7R,OAAQu5B,GAAoBF,EAAWG,WAAWF,QAEtGntB,EAAoBwe,EAAWze,WAC/Bye,EAAW6D,MAAQgK,GAAM,EAAG/5B,EAAOyV,OAAOlU,OAAQu5B,GAAoBF,EAAWG,WAAWF,OAExF3O,EAAW6D,OAAS/vB,EAAOyV,OAAOrS,WAAqB,SAAEF,QAAUs1C,GAAaC,GAAaC,KAC7FxsB,EAAWoG,cAAgBwI,GAAoBF,EAAWG,WAAWF,MACrE3O,EAAWmG,iBAAkByI,GAAoBF,EAAWG,WAAWF,QAG3EltB,EAAyBue,EAAWze,WACpCye,EAAW+b,WAAalO,GAAM,EAAG/5B,EAAOiZ,gBAAiB6hB,GAAoBF,EAAWG,WAAWF,QAEnGjtB,EAAqBse,EAAWze,WAC5B8qC,GAEArsB,EAAWgc,OAASnO,GAAM/5B,EAAOqZ,UAAWrZ,EAAOoZ,UAAY,EAAG0hB,GAAoBF,EAAWG,WAAWF,OAC5G3O,EAAWgc,OAAS3+B,KAAKkB,OAAOyhB,EAAWgc,OAAS,IAAM3+B,KAAKC,IAAI0iB,EAAWgc,OAAS,GAAK,GAAK,EAAIloC,EAAOmZ,eAE5G+S,EAAWgc,OAASnO,GAAM/5B,EAAOqZ,UAAWrZ,EAAOoZ,UAAY,GAAI0hB,GAAoBF,EAAWG,WAAWF,OAAiB,GAAKC,GAAoBF,EAAWG,WAAWF,QAGjLhtB,EAAsBqe,EAAWze,WACjCye,EAAWiE,QAAU4J,GAAM,EAAG/5B,EAAO0T,SAASnS,OAAS,EAAGu5B,GAAoBF,EAAWG,WAAWF,OAGhG3O,EAAWiE,SAAWnwB,EAAO0T,SAASnS,SAAWi3C,GAAeC,GAAeC,IAC/ExsB,EAAWsG,aAAeuH,GAAM,EAAG/5B,EAAOub,WAAWnY,WAAW,iBAAiBqY,UAAY,EAAGqf,GAAoBF,EAAWG,WAAWF,OAAiB,GAC3J3O,EAAWwG,aAAeqH,GAAM,EAAG/5B,EAAOub,WAAWnY,WAAW,iBAAiBqY,UAAY,EAAGqf,GAAoBF,EAAWG,WAAWF,OAC1I3O,EAAWuG,aAAesH,GAAM,EAAG/5B,EAAOub,WAAWnY,WAAW,iBAAiBqY,UAAY,EAAGqf,GAAoBF,EAAWG,WAAWF,OAC1I3O,EAAWyG,YAAcoH,GAAM,EAAG/5B,EAAO6T,aAAatS,OAAQu5B,GAAoBF,EAAWG,WAAWF,SAIxG3O,EAAWsG,aAAexyB,EAAO0T,SAASwY,EAAWiE,SAAShkB,UAC9D+f,EAAWwG,aAAe,GAC1BxG,EAAWuG,aAAezyB,EAAO0T,SAASwY,EAAWiE,SAASvc,WAAa,EAC3EsY,EAAWyG,YAAc3yB,EAAO0T,SAASwY,EAAWiE,SAASxc,OAGjE5F,EAAyBme,EAAWze,WACpCye,EAAWuF,WAAasI,GAAM,EAAG/5B,EAAO+Z,gBAAiB+gB,GAAoBF,EAAWG,WAAWF,QAC9F2d,IAAgBa,GAAeZ,GAAeC,KAC/CxsB,EAAWsH,UAAUsH,GAAoBF,EAAWG,WAAWF,QAEnE7sB,EAAyBke,EAAWze,WACpCye,EAAW2c,eAAiB9O,GAAM,EAAG/5B,EAAOka,oBAAqB4gB,GAAoBF,EAAWG,WAAWF,OAC3G3O,EAAWsF,uBAAyBuI,GAAM,EAAG/5B,EAAOoa,4BAA6B0gB,GAAoBF,EAAWG,WAAWF,QAE3H5sB,EAAsBie,EAAWze,WAG7Bye,EAAW0G,IAAMmH,GAAM,EAAG/5B,EAAO4U,OAAS,EAF1C2jC,EAE6ChvC,KAAKkB,MAAMqwB,GAAoBF,EAAWG,WAAWF,OAAkB76B,EAAa,OAAI,KAGvF86B,GAAoBF,EAAWG,WAAWF,OAAiB,GAAKC,GAAoBF,EAAWG,WAAWF,QAIvJ2d,IAAgBU,GAAcT,GAAeC,KAC9CxsB,EAAW2G,SAAWiI,GAAoBF,EAAWG,WAAWF,QAEpE3sB,EAAqBge,EAAWze,WAG5Bye,EAAWwF,OAFX6mB,EAEsH,EAAlGxe,GAAM,EAAI/5B,EAAO8U,YAAc,EAAK,EAAGgmB,GAAoBF,EAAWG,WAAWF,OAGjFd,GAAM,EAAG/5B,EAAO8U,YAAagmB,GAAoBF,EAAWG,WAAWF,QAG/F1sB,EAAmB+d,EAAWze,WAC9Bye,EAAWkH,YAAc2G,GAAM,EAAG/5B,EAAOuP,iBAAkBurB,GAAoBF,EAAWG,WAAWF,OACrG3O,EAAW4c,UAAY/O,GAAM,EAAG/5B,EAAOqP,eAAgByrB,GAAoBF,EAAWG,WAAWF,QAEjGzsB,EAAqB8d,EAAWze,WAE5Bye,EAAWgF,OAAS6I,GAAM,EAAG/5B,EAAO4P,YADpC2oC,EACiDhvC,KAAKkB,MAAMqwB,GAAoBF,EAAWG,WAAWF,MAAgB76B,EAAO4P,YAAc,GAE1FkrB,GAAoBF,EAAWG,WAAWF,OAGtG,CAED3O,EAAWze,SAAW,IACzB,CAAC,MACF,SACI,GAAI0rC,GAAeZ,EAAa,CAC5B,MAAMpE,EAAuBrZ,GAAoBF,EAAWG,WAAWF,MACxCn8B,KAAK4zC,SAAS6B,GAAcvV,YAAY,GAC5D7M,OAASxoB,KAAKkB,MAAMsvB,IAAO/5B,EAAOyU,YAAc,EAAG,EAA8D,GAA1DqmB,GAAoBF,EAAWG,WAAWF,OAC/G,MAAM,GAAIye,GAAaf,EACpB,IAAK,IAAIpE,EAAuB,EAAGA,EAAez1C,KAAKo1C,kBAAmBK,IACtE,IAAK,MAAMjoB,KAAcxtB,KAAK4zC,SAAS6B,GAAcvV,YACjD1S,EAAW6F,OAASxoB,KAAKkB,MAAMsvB,IAAO/5B,EAAOyU,YAAc,EAAG,EAA8D,GAA1DqmB,GAAoBF,EAAWG,WAAWF,aAGjH,GAAI0e,GAAehB,EAAa,CACJ75C,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GACzE5oB,OAASxoB,KAAKkB,MAAMsvB,IAAO/5B,EAAOyU,YAAc,EAAG,EAA8D,GAA1DqmB,GAAoBF,EAAWG,WAAWF,OAC/G,MAAM,GAAI0d,EAAa,CAEW75C,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GACzE5oB,OAASxoB,KAAKkB,MAAMsvB,IAAO/5B,EAAOyU,YAAc,EAAG,EAA8D,IAA1DqmB,GAAoBF,EAAWG,WAAWF,MAAuB,GACtI,KAAM,CAC4Bn8B,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAEzE5oB,OAASxoB,KAAKkB,MAAMsvB,IAAO/5B,EAAOyU,YAAc,EAAGzU,EAAOyU,YAAc,EAAI,GAAKqmB,GAAoBF,EAAWG,WAAWF,OAAiB,EAAMC,GAAoBF,EAAWG,WAAWF,OAAkB76B,EAAOyU,YAAc,GACjP,CACH,MACF,QACI,GAAIglC,GAAclB,EAAa,CAEI75C,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GACzE/nB,IAAMmH,GAAM,EAAG/5B,EAAO4U,OAAS,EAAGkmB,GAAoBF,EAAWG,WAAWF,OAAkB76B,EAAa,OAAI,GAC7H,MAAM,GAAKw4C,GAAea,GAAgBD,GAAcX,EAAc,CACnE,MAAMvsB,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GACpFzuB,EAAW0G,IAAMmH,GAAM,EAAG/5B,EAAO4U,OAAS,GAAIkmB,GAAoBF,EAAWG,WAAWF,OAAiB,GAAKC,GAAoBF,EAAWG,WAAWF,QAEpJ2d,IAAgBW,GAAeV,GAAeC,KAC9CxsB,EAAW2G,SAAWiI,GAAoBF,EAAWG,WAAWF,MAEvE,CAGH,MACF,QAAyB,CACrB,MAAM3O,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,IAE/EnC,GAAea,GAAgBD,GAAcX,KAE9CvsB,EAAWgc,OAASnO,GAAM/5B,EAAOqZ,UAAWrZ,EAAOoZ,UAAY,EAAgI,IAA3H0hB,GAAoBF,EAAWG,WAAWF,OAAiB,GAAKC,GAAoBF,EAAWG,WAAWF,QAC9K3O,EAAWze,SAAW,IAI7B,CAAC,MACF,QAAiC,CAC7B,IAAIye,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAElF,IAAK,IAAI3rB,EAAY,EAAGA,EAAI,GAAIA,IAC5B9C,EAAW6E,eAAe/B,GACpB+K,IAAO,GAAI,GAAIe,GAAoBF,EAAWG,WAAWF,MAAgB,IAGnF,IAAI7xB,EAAc,EAClB,IAAK,IAAIC,EAAY,EAAGA,EAAIijB,EAAW6E,eAAexvB,OAAQ0H,IAC1DD,GAAOkjB,EAAW6E,eAAe9nB,GAErC,MAAMC,EAAkBF,EAAMkjB,EAAW6E,eAAexvB,OAGxD,IAAImI,EAAqB,EACrBkgC,EAAmB,EACvB,IAAK,IAAI3gC,EAAY,EAAGA,EAAIijB,EAAW6E,eAAexvB,OAAQ0H,IAC1DS,GAAckgC,EACdA,EAAW1d,EAAW6E,eAAe9nB,GAAKC,EAC1CgjB,EAAW4G,uBAAuB7pB,GAAKS,EAI3CwiB,EAAW4G,uBAAuB,IAAM,CAE3C,CAAC,MACF,QAAkC,CAC9B,IAAI4pB,EAAoB5hB,GAAoBF,EAAWG,WAAWF,MAGjD,IAAb6hB,EACAh+C,KAAKi+C,0BAILj+C,KAAKi0C,iBAAoB+J,EAAY,GAAKA,EAAY,GAAM,GAAKA,EAAY,IAAM,GACnFA,EAAY5hB,GAAoBF,EAAWG,WAAWF,MACtDn8B,KAAKk0C,WAAc8J,EAAY,GAAKA,EAAY,GAAMA,EAAY,EAClEh+C,KAAK6zC,WAAazX,GAAoBF,EAAWG,WAAWF,MAC5Dn8B,KAAK8zC,UAAuE,IAA1D1X,GAAoBF,EAAWG,WAAWF,MAAyB,IACrFn8B,KAAK+zC,qBAAuB3X,GAAoBF,EAAWG,WAAWF,MAAgB,GACtFn8B,KAAKg0C,eAAiB5X,GAAoBF,EAAWG,WAAWF,MAAgB,GAChFn8B,KAAKm0C,aAAe/X,GAAoBF,EAAWG,WAAWF,OAAiB,GAAKC,GAAoBF,EAAWG,WAAWF,OAAiB,GAEtJ,CAAC,MACF,QACI,IAAK,IAAIjb,EAAkB,EAAGA,EAAUlhB,KAAKo1C,kBAAmBl0B,IAAW,CAEvE,IAAIg9B,EAIAA,GAHAxD,GAAeX,GAAgBC,GAGT5d,GAAoBF,EAAWG,WAAWF,OAAiB,GAAKC,GAAoBF,EAAWG,WAAWF,MAF5GC,GAAoBF,EAAWG,WAAWF,MAGlEn8B,KAAK4zC,SAAS1yB,GAAShd,KAAOk4C,mBAAmBlgB,EAAWyd,UAAUxd,EAAWA,EAAY+hB,IAE7F/hB,GAAa+hB,CAChB,CACH,MACF,QAA4B,CACxB,MAAM1wB,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GACpF,GAAmB,GAAfzuB,EAAWvY,KACXuY,EAAWsE,UAAYuJ,GAAM,EAAG/5B,EAAOiW,WAAW1U,OAAQu5B,GAAoBF,EAAWG,WAAWF,YAKpG,GAFA3O,EAAW6c,aAAehP,GAAM,EAAG/5B,EAAOqW,cAAc9U,OAAQu5B,GAAoBF,EAAWG,WAAWF,OAC1G3O,EAAW+c,gBAAgBjI,WAAW9U,EAAW6c,cACb,IAAhCnO,EAAWG,WAAWF,GAAiC,CACvD,IAAIgiB,EAAmB9iB,GAAM,EAAG/5B,EAAO+V,cAAgB,EAAE,EAAG+kB,GAAoBF,EAAWG,WAAWF,EAAY,KAClHA,IACA,IAAIiiB,EAA2B,GAC/B,GAAsC,KAAlCliB,EAAWG,WAAWF,EAAU,GAA2B,CAC3DA,IACA,IAAI7L,EAAY,EAEhB,IADA6L,IACuC,KAAhCD,EAAWG,WAAWF,IAAmC,CAC5DiiB,EAAa9tB,GAAK,GAClB,IAAIkM,EAAY,EAChB,KAAuC,IAAhCN,EAAWG,WAAWF,IACzBiiB,EAAa9tB,GAAGkM,GAAKnB,GAAM,EAAG/5B,EAAO+V,cAAgB,EAAG+kB,GAAoBF,EAAWG,WAAWF,KAClGK,IACAL,IAEJ7L,IACA6L,GACH,CACD3O,EAAW+c,gBAAgBxmC,IAAIo6C,EAAkBC,GACjDjiB,GACH,CACJ,CAEL,GAAK4e,GAAclB,GAAiBc,GAAcb,GAAiBY,GAAcX,EAAc,CAE3F,MAAM3O,EAAiC0Q,EAAqBE,GAA2BC,GACvFzuB,EAAWqZ,sBAAsBuE,EAAgBC,EACpD,CACJ,CAAC,MACF,QAA+B,CAC3B,MAAM7d,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GACpF,GAAmB,GAAfzuB,EAAWvY,KACXuY,EAAWuE,aAAesJ,GAAM,EAAG/5B,EAAO8W,UAAUvV,OAAQu5B,GAAoBF,EAAWG,WAAWF,WAErG,CACD3O,EAAW8c,gBAAkBjP,GAAM,EAAG/5B,EAAOgX,aAAazV,OAAQu5B,GAAoBF,EAAWG,WAAWF,OAC5G3O,EAAWgd,mBAAmBlI,WAAW9U,EAAW8c,iBACpD,IAAI8T,EAA2B,GAC/B,GAAoC,KAAhCliB,EAAWG,WAAWF,GAAmC,CACzD,IAAI7L,EAAY,EAEhB,IADA6L,IACuC,KAAhCD,EAAWG,WAAWF,IAAmC,CAC5DiiB,EAAa9tB,GAAK,GAClB,IAAIkM,EAAY,EAChB,KAAuC,IAAhCN,EAAWG,WAAWF,IACzBiiB,EAAa9tB,GAAGkM,GAAKnB,GAAM,EAAG/5B,EAAO+V,cAAgB,EAAG+kB,GAAoBF,EAAWG,WAAWF,KAClGK,IACAL,IAEJ7L,IACA6L,GACH,CACD3O,EAAWgd,mBAAmBzmC,IAAIq6C,GAClCjiB,GACH,CACJ,CAEJ,CAAC,MACF,QACIn8B,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAAyBjqB,kBAAoBqJ,GAAM,EAAG/5B,EAAOuW,qBAAuB,EAAGukB,GAAoBF,EAAWG,WAAWF,OACxL,MACF,QACI,GAAK4e,GAAclB,GAAiBc,GAAcb,GAAiBY,GAAcX,EAAc,CAC3F,MAAMwD,EAA8B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACvI/vB,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAC9E7Q,EAAiC0Q,EAAqBE,GAA2BC,GAEvF,IAAIuB,EAAYphB,GAAoBF,EAAWG,WAAWF,OACrDqe,GAAaT,IAAkBA,IAAgBC,KAAewD,EAAKD,EAAkBC,IAC1FpS,EAAe9Y,iBAAmBmhB,GAAK6F,EAAyBld,GAAoBohB,IACpFhwB,EAAWqZ,sBAAsBuE,EAAgBC,EACpD,CAGH,MACF,QAAsC,CAClC,MAAM7d,EAAaxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAC5D,GAAIxB,GAAeV,EAAa,CACpD,MAAMsE,EAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,GAExG,IAAK,IAAI7hB,EAAI,EAAGA,GAAwB,IAAnBhP,EAAWvY,KAAa,EAAI3T,EAAO+V,eAAgBmlB,IAC5ChP,EAAWyE,UAAUuK,GAAGtK,UAAYmsB,EAAYhjB,GAAM,EAAGgjB,EAAYx7C,OAAQu5B,GAAoBF,EAAWG,WAAWF,OAE9H,MACjB,GAAK4d,GAAgBC,EASD,IAAK,IAAIxd,EAAI,EAAGA,GAAwB,IAAnBhP,EAAWvY,KAAa,EAAI3T,EAAO+V,eAAgBmlB,IACpEhP,EAAWyE,UAAUuK,GAAGtK,UAAYmJ,GAAM,EAAG/5B,EAAOwW,oBAAoBjV,OAAQu5B,GAAoBF,EAAWG,WAAWF,WAV/G,CACvC,MAAMmiB,EAAiB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,EAAG,GAE3G,IAAK,IAAI9hB,EAAI,EAAGA,GAAwB,IAAnBhP,EAAWvY,KAAa,EAAI3T,EAAO+V,eAAgBmlB,IAC5ChP,EAAWyE,UAAUuK,GAAGtK,UAAYosB,EAAejjB,GAAM,EAAGijB,EAAez7C,OAAQu5B,GAAoBF,EAAWG,WAAWF,OAGzJ,CAMK,CAAC,MACF,QAAqC,CACjC,MAAM3O,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GACpF,IAAK,IAAIzf,EAAY,EAAGA,GAA4C,IAAvChP,EAAWvY,KAA+B,EAAI3T,EAAO+V,eAAgBmlB,IAC9FhP,EAAWyE,UAAUuK,GAAG/uB,UAAY4tB,GAAM,EAAG/5B,EAAOuW,qBAAuB,EAAGukB,GAAoBF,EAAWG,WAAWF,MAE/H,CAAC,MACF,QAA4B,CACxB,MAAMohB,EAA8B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACvI/vB,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GACpF,GAAKlB,GAAclB,GAAiBc,GAAcb,GAAiBY,GAAcX,EAAc,CAC3F,MAAM3O,EAAiC0Q,EAAqBE,GAA2BC,GACvF7Q,EAAeM,kBAAoB,GACnC,IAAK,IAAIlP,EAAY,EAAGA,GAA4C,IAAvChP,EAAWvY,KAA+B,EAAI3T,EAAO+V,eAAgBmlB,IAAK,CACnG,IAAIghB,EAAYphB,GAAoBF,EAAWG,WAAWF,OACrDqe,GAAaT,IAAkBA,IAAgBC,KAAewD,EAAKD,EAAkBC,IAC1FpS,EAAeM,kBAAkBlP,GAAKiX,GAAK6F,EAAyBkE,EACvE,CACDhwB,EAAWqZ,sBAAsBuE,EAAgBC,EACpD,KAAM,CACH,MAAM/B,EAAwBjO,GAAM,EAAG/5B,EAAOqa,iBAAmB,EAAGygB,GAAoBF,EAAWG,WAAWF,OAC9G,IAAK,IAAI5xB,EAAY,EAAGA,EAAI++B,EAAe/+B,IAAK,CAC5C,MAAM4nB,EAAiBkJ,GAAM,EAAG/5B,EAAOua,4BAA4BhZ,OAAQu5B,GAAoBF,EAAWG,WAAWF,OACrH,IAAI33B,EAAgB,EACpB,MAAM0X,EAAmB5a,EAAOua,4BAA4BsW,GAAQjW,SAChEA,EAAW,IACX1X,EAAQ62B,GAAM,EAAGnf,EAAUkgB,GAAoBF,EAAWG,WAAWF,QAEzE,IAAIqhB,EAAYphB,GAAoBF,EAAWG,WAAWF,OACrDqe,GAAaT,IAAkBA,IAAgBC,KAAewD,EAAKD,EAAkBC,IAC1F,MAAMprB,EAAmBiJ,GAAM,EAAG/5B,EAAO4W,UAAUrV,OAAQ26C,GAC3DhwB,EAAWue,YAAY5Z,EAAQ3tB,EAAO4tB,EACzC,CACJ,CACJ,CAAC,MACF,QAAgC,CAC5B,MAAM5E,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAEpF,GAAIxB,GAAeV,EACf,IAAK,IAAIvd,EAAY,EAAGA,EAAIl7B,EAAO+V,cAAemlB,IAAK,CACnD,MAAM+hB,EAAW,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACjCC,EAAcnjB,GAAM,EAAGkjB,EAAS17C,OAAQu5B,GAAoBF,EAAWG,WAAWF,OAC7E,GAAPqiB,EACAhxB,EAAWyE,UAAUuK,GAAGrxB,WAAa,EACvB,GAAPqzC,EACPhxB,EAAWyE,UAAUuK,GAAGrxB,WAAa,EACvB,GAAPqzC,IACPhxB,EAAWyE,UAAUuK,GAAGrxB,WAAa,GAEzCqiB,EAAWyE,UAAUuK,GAAG5H,SAAW2pB,EAASC,EAC/C,MAED,IAAK,IAAIhiB,EAAY,EAAGA,GAA4C,IAAvChP,EAAWvY,KAA+B,EAAI3T,EAAO+V,eAAgBmlB,IAAK,CACnG,GAAIsd,EAAa,CACb,MAAM2E,EAAU,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAChCjxB,EAAWyE,UAAUuK,GAAG5H,SAAW6pB,EAAQpjB,GAAM,EAAG/5B,EAAO+a,cAAcxZ,OAAQu5B,GAAoBF,EAAWG,WAAWF,OAC9H,MACG3O,EAAWyE,UAAUuK,GAAG5H,SAAWyG,GAAM,EAAG/5B,EAAO+a,cAAcxZ,OAAQu5B,GAAoBF,EAAWG,WAAWF,OAG/E,GAApC3O,EAAWyE,UAAUuK,GAAG5H,WACxBpH,EAAWyE,UAAUuK,GAAGrxB,WAAakwB,GAAM,EAAG/5B,EAAOqb,iBAAiB9Z,OAAQu5B,GAAoBF,EAAWG,WAAWF,OAE/H,CAGR,CAAC,MACF,QAA2B,CACvB,MAAM3O,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GACpF,GAAmB,GAAfzuB,EAAWvY,KAAiC,CAC5C,MAAMypC,EAAoB7zC,KAAKyS,KAAKhc,EAAOmX,sBAAwBnX,EAAOqX,yBAA2B,GAC/F29B,EAAuB,IAAInZ,GAAejB,EAAYC,EAAWA,EAAYuiB,GACnF,IAAK,IAAIn0C,EAAY,EAAGA,EAAIjJ,EAAOmX,sBAAuBlO,IACtDijB,EAAWyd,aAAahY,SAAS1oB,GAAK+rC,EAAK/Y,KAAKj8B,EAAOqX,0BAE3D6U,EAAWyd,aAAanI,sBACxB3G,GAAauiB,CAChB,KAAM,IAAmB,GAAflxB,EAAWvY,KAWlB,MAAM,IAAI9S,MAAM,yDAXkC,CAClD,MAAMu8C,EAAoB7zC,KAAKyS,KAAKhc,EAAO0Y,UAAY1Y,EAAOmX,sBAAwBnX,EAAOqX,yBAA2B,GAClH29B,EAAuB,IAAInZ,GAAejB,EAAYC,EAAWA,EAAYuiB,GACnF,IAAK,IAAIpuB,EAAY,EAAGA,EAAIhvB,EAAO0Y,UAAWsW,IAAK,CAC/C,IAAK,IAAI/lB,EAAY,EAAGA,EAAIjJ,EAAOmX,sBAAuBlO,IACtDijB,EAAWsd,qBAAqBxa,GAAG2C,SAAS1oB,GAAK+rC,EAAK/Y,KAAKj8B,EAAOqX,0BAEtE6U,EAAWsd,qBAAqBxa,GAAGwS,qBACtC,CACD3G,GAAauiB,CAChB,CAEA,CACJ,CAAC,MACF,QAA4B,CACxB,MAAMlxB,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GAC9EyC,EAAoB7zC,KAAKyS,KAAKhc,EAAOuX,uBAAyBvX,EAAO0X,0BAA4B,GACjGs9B,EAAuB,IAAInZ,GAAejB,EAAYC,EAAWA,EAAYuiB,GACnF,IAAK,IAAIn0C,EAAY,EAAGA,EAAIjJ,EAAOuX,uBAAwBtO,IACvDijB,EAAWod,cAAcnY,UAAUloB,GAAK+rC,EAAK/Y,KAAKj8B,EAAO0X,2BAE7DwU,EAAWod,cAAc9H,sBACzB3G,GAAauiB,CAChB,CAAC,MACF,QACI,GAAK5E,GAAea,GAAgBZ,GAAeW,EAAa,CAC5D,MAAMltB,EAAyBxtB,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GACpFzuB,EAAWsH,UAAWsH,GAAoBF,EAAWG,WAAWF,MAC5D3O,EAAWsH,UACXtH,EAAWuF,WAAa,EACxBvF,EAAWze,SAAW,EAE7B,MACG,GAAIirC,EAAc,CACiBh6C,KAAK4zC,SAASoI,GAA2B9b,YAAY+b,GACzE/R,cAAgB7O,GAAM,EAAG,GAAQe,GAAoBF,EAAWG,WAAWF,MACzF,CAGL,MACJ,QAAuB,CACnB,IAAIwiB,EACJ,GAAIlE,GAAeZ,EAAa,CAC5B,MAAMpE,EAAuBrZ,GAAoBF,EAAWG,WAAWF,MACjE6Z,EAAmB5Z,GAAoBF,EAAWG,WAAWF,MACnEwiB,EAAkB9zC,KAAKyS,KAAgB,GAAX04B,GAC5B,MAAMM,EAAuB,IAAInZ,GAAejB,EAAYC,EAAWA,EAAYwiB,GACnF,IAAK,IAAIp0C,EAAY,EAAGA,EAAIyrC,EAAUzrC,IAClCvK,KAAK4zC,SAAS6B,GAAclC,KAAKhpC,GAAK+rC,EAAK/Y,KAAK,GAAK,CAE5D,MAAM,GAAIod,GAAcd,EAAa,CAClC,IAAI5C,EAAqB,EACzB,KAAQ,GAAKA,EAAcj3C,KAAKi2C,oBAAoBgB,IACpD0H,EAAkB9zC,KAAKyS,KAAKtd,KAAKo1C,kBAAoBp1C,KAAKg2C,SAAWiB,EAAa,GAClF,MAAMX,EAAuB,IAAInZ,GAAejB,EAAYC,EAAWA,EAAYwiB,GACnF,IAAK,IAAIlJ,EAAuB,EAAGA,EAAez1C,KAAKo1C,kBAAmBK,IACtE,IAAK,IAAIlrC,EAAY,EAAGA,EAAIvK,KAAKg2C,SAAUzrC,IACvCvK,KAAK4zC,SAAS6B,GAAclC,KAAKhpC,GAAK+rC,EAAK/Y,KAAK0Z,GAAc,CAGzE,KAAM,CACH,IAAIA,EAAqB,EACzB,KAAQ,GAAKA,EAAcj3C,KAAKi2C,mBAAqB,GAAGgB,IACxD0H,EAAkB9zC,KAAKyS,KAAKtd,KAAKo1C,kBAAoBp1C,KAAKg2C,SAAWiB,EAAa,GAClF,MAAMX,EAAuB,IAAInZ,GAAejB,EAAYC,EAAWA,EAAYwiB,GACnF,IAAK,IAAIlJ,EAAuB,EAAGA,EAAez1C,KAAKo1C,kBAAmBK,IACtE,IAAK,IAAIlrC,EAAY,EAAGA,EAAIvK,KAAKg2C,SAAUzrC,IACvCvK,KAAK4zC,SAAS6B,GAAclC,KAAKhpC,GAAK+rC,EAAK/Y,KAAK0Z,EAG3D,CACD9a,GAAawiB,CAChB,CAAC,MACF,SAA2B,CACvB,IACIlJ,EADAmJ,EAA0B,EAE1BC,IAA2BnE,GAAcZ,GAAgBD,GACzDiF,EAAgCD,EAAe,EAAI,EACnDE,EAA6BF,EAAe,GAAK,EACrD,GAAIpE,GAAeZ,EACfpE,EAAerZ,GAAoBF,EAAWG,WAAWF,MAGzDA,IAEAyiB,EAAkBxiB,GAAoBF,EAAWG,WAAWF,MAC5DyiB,IAAqC,EACrCA,GAAmBxiB,GAAoBF,EAAWG,WAAWF,UAC1D,CACHsZ,EAAe,EACf,IAAIuJ,EAAgCzjB,GAAc,EAAG,EAAGa,GAAoBF,EAAWG,WAAWF,OAClG,KAAO6iB,EAAwB,GAC3BJ,IAAqC,EACrCA,GAAmBxiB,GAAoBF,EAAWG,WAAWF,MAC7D6iB,GAEP,CAED,MAAM1I,EAAuB,IAAInZ,GAAejB,EAAYC,EAAWA,EAAYyiB,GACnFziB,GAAayiB,EAEb,MAAMzH,EAA0B1D,GAAK2D,cAAc91C,EAAOwU,aAC1D,IAAImpC,GAA6B,EAC7BC,GAAgC,EAChCC,GAA2B,EAE/B,OAAa,CACT,MAAMj+B,EAAmBlhB,KAAK4zC,SAAS6B,GACjChU,EAA0BzhC,KAAK01C,kBAAkBD,GACjDlV,EAAwBvgC,KAAK21C,gBAAgBF,GAE7C4B,EAAmCr3C,KAAKw1C,4BAA4BC,GACpE6B,EAAoC7D,GAAK2D,cAAcC,EAA2B/1C,EAAOmQ,oBAEzF8lC,EAAoC9D,GAAK2D,cAAcl2B,EAAQgf,YAAYr9B,OAAS,GAG1F,GAAI09B,EAAc,CACd,IAAI6e,EAAoBzE,GAAcb,GAAiBY,GAAcX,EAGrE,MAAMvC,EAAuC,EAAYD,EAA4B9D,GAAK2D,cAAcp3C,KAAKs1C,8BAAgC,GAE7I,IAAK,IAAImC,EAA0B,EAAGA,EAAkBv2B,EAAQgf,YAAYr9B,OAAQ40C,IAAmB,CAEnG,IAAIjqB,EAAyBtM,EAAQgf,YAAYuX,GAEjD,IAAK,IAAIhX,EAAc,EAAGA,EAAMn/B,EAAO4Y,SAAUumB,IAAO,CAMpD,IAAIkX,EAAiBrB,EAAK/Y,KAAK,GAE/B,OAAQoa,GACJ,KAAK,EACDnqB,EAAW7L,YAAY8e,GAAOpF,GAAM,EAAGr7B,KAAKgnB,kBAAoBhnB,KAAKinB,kBAAoB,EAAGqvB,EAAK/Y,KAAK,IACtG/P,EAAWud,eAAetK,GAAOpF,GAAM,EAAGr7B,KAAK4zC,SAASpmB,EAAW7L,YAAY8e,IAAMP,YAAYr9B,OAAS,EAAGyzC,EAAK/Y,KAAKia,IACvH,MACJ,KAAK,EAEDhqB,EAAW7L,YAAY8e,GAAOzgC,KAAKgnB,kBAAoBqU,GAAM,EAAGr7B,KAAKinB,kBAAoB,EAAGqvB,EAAK/Y,KAAK,IACtG/P,EAAWud,eAAetK,GAAOpF,GAAM,EAAGr7B,KAAK4zC,SAASpmB,EAAW7L,YAAY8e,IAAMP,YAAYr9B,OAAS,EAAGyzC,EAAK/Y,KAAKga,IACvH,MACJ,KAAK,EACD/pB,EAAW7L,YAAY8e,IAAQ,EAC/B,MACJ,KAAK,EACDjT,EAAW7L,YAAY8e,IAAQ,EAavC,GARc,GAAVkX,IACAnqB,EAAW3Q,WAAW4jB,GAAO6V,EAAK/Y,KAAK,IAGtC6hB,GAAkE,aAAtD99C,EAAOub,WAAW2Q,EAAW3Q,WAAW4jB,IAAMv8B,MAA6E,eAAtD5C,EAAOub,WAAW2Q,EAAW3Q,WAAW4jB,IAAMv8B,OAChIspB,EAAWoT,eAAeH,GAAO6V,EAAK/Y,KAAK,IAG3C6hB,GAAW5xB,EAAW7L,YAAY8e,IAAQ,EAAG,CAC7C,IAAI4e,EAAyBjwC,EAAyBpP,KAAK4zC,SAASpmB,EAAW7L,YAAY8e,IAAMP,YAAY1S,EAAWud,eAAetK,IAAM1xB,SAG3G,GAA9Bye,EAAW3Q,WAAW4jB,IAKlBjT,EAAW3Q,WAAW4jB,GADtB4e,EAC6B/9C,EAAOub,WAAWnY,WAAW,iBAAiBF,MAG9ClD,EAAOub,WAAWnY,WAAW,eAAeF,MAG7EgpB,EAAWoT,eAAeH,GAAO,GAGE,GAA9BjT,EAAW3Q,WAAW4jB,KAGvBjT,EAAW3Q,WAAW4jB,GADtB4e,EAC6B/9C,EAAOub,WAAWnY,WAAW,kBAAkBF,MAG/ClD,EAAOub,WAAWnY,WAAW,gBAAgBF,MAG9EgpB,EAAWoT,eAAeH,GAAO,EAExC,MACQ2e,GAED5xB,EAAW3Q,WAAW4jB,IAAQn/B,EAAOub,WAAWnY,WAAW,eAAeF,QAC1Ey6C,EAAoBxJ,EACpByJ,EAAuBzH,EACvB0H,EAAkB1e,GAOtB2e,GAAyE,IAA9D99C,EAAOub,WAAW2Q,EAAW3Q,WAAW4jB,IAAMtjB,mBACzDnd,KAAK4zC,SAASpmB,EAAW7L,YAAY8e,IAAMP,YAAY1S,EAAWud,eAAetK,IAAM1xB,SAAW,GAAKzN,EAAOub,WAAW2Q,EAAW3Q,WAAW4jB,IAAMtjB,iBAE5J,CACJ,CACJ,CAGD,MAAMmiC,EAA+B,GACrC,IAAK,IAAIhvB,EAAY,EAAGA,EAAIpP,EAAQgf,YAAYr9B,OAAQytB,IAAK,CACzDgvB,EAAiBhvB,GAAK,GACtB,IAAK,IAAI/lB,EAAY,EAAGA,EAAIjJ,EAAO4Y,SAAU3P,IACzC+0C,EAAiBhvB,GAAGhvB,EAAO4Y,SAAW,EAAI3P,GAAK,EAAI,KAAQowC,GAAcb,GAAiBY,GAAYX,IAAiBxZ,GAAiBrf,EAAQgf,YAAY5P,GAAGzT,WAAWtS,IAAMjJ,EAAOub,WAAWnY,WAAmB,OAAEF,MAE9N,CACD,MAAMozC,EAAwBnW,GAAkBlB,EAAgB,EAAqB,GAAjBrf,EAAQgc,OAC5E,IAAI2a,EAAsBpW,GAAkBlB,EAAgB,EAAIqX,EAChE,MAAME,EAA0BvX,EAAe,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAMkB,EAAiB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAM,CAAC,EAAG,EAAG,GAAI,GAAI,IAAK,GAAI,IACpIsW,EAAsB,GAC5B,IAAK,IAAIxtC,EAAY,EAAGA,EAAIutC,EAAcj1C,OAAQ0H,IAC9CutC,EAAcvtC,IAAMqtC,EAExB,IAAK,IAAIrtC,EAAY,EAAGA,EAAIvK,KAAKi2C,mBAAoB1rC,IAAK,CACtD,MAAMg1C,EAAsBr+B,EAAQoyB,SAAS/oC,GAE7C,GAAKwwC,GAAclB,GAAiBc,GAAcb,GAAiBY,GAAcX,EAC7EwF,EAAWrf,YAAY,GAAK3E,GAAc,EAAGra,EAAQgf,YAAYr9B,OAAS,EAAGyzC,EAAK/Y,KAAKga,IACvFgI,EAAWrf,YAAYr9B,OAAS,OAEhC,GAAI7C,KAAKshC,mBAAoB,CACzB,MAAMI,EAA0BnG,GAAcj6B,EAAOmQ,mBAAoB4lC,EAA0Bf,EAAK/Y,KAAK+Z,GAA6Bh2C,EAAOmQ,oBACjJ,IAAK,IAAI6e,EAAY,EAAGA,EAAIoR,EAAiBpR,IACzCivB,EAAWrf,YAAY5P,GAAKiL,GAAc,EAAGra,EAAQgf,YAAYr9B,OAAS,EAAsB,GAAlB,EAAqByzC,EAAK/Y,KAAKga,IAEjHgI,EAAWrf,YAAYr9B,OAAS6+B,CACnC,MACG6d,EAAWrf,YAAY,GAAK,EAC5Bqf,EAAWrf,YAAYr9B,OAASvB,EAAOmQ,mBAI/C,KAAMooC,GAAeY,GAAgC,GAAhBnE,EAAK/Y,KAAK,IAAS,CACpDgiB,EAAWtf,MAAMp9B,OAAS,EAC1B,QACH,CAED,IAAIm1C,EAAkB,EACtB,MAAMwH,EAAmBD,EAAWtf,MACpC,IAAIwf,EAAoB,EAExB,KAAOzH,EAAUh4C,KAAK6hC,YAAcvgC,EAAOsQ,eAAiB2uB,GAAe,CAEvE,MAAMmf,EAAuC,GAAhBpJ,EAAK/Y,KAAK,GACvC,IAAIqC,GAAmB,EACnB8Y,EAAqB,EAOzB,GANIgH,EACAhH,EAAand,GAAc,EAAGwc,EAAal1C,OAAS,EAAGyzC,EAAK9Y,aAAa,EAAG,IAE5EoC,EAA0B,GAAhB0W,EAAK/Y,KAAK,GAGnBmiB,GAAgB9f,EAkBd,CACH,IAAI+f,EA0DAvf,EAWAvB,EApEJ,GAAI6gB,EACAC,EAAQ5H,EAAaW,GACrBX,EAAa5gB,OAAOuhB,EAAY,OAC7B,CAGH,GAFAiH,EAAQ,GAEHd,EASmB,GAAhBvI,EAAK/Y,KAAK,GACVoiB,EAAMtxC,WAAaioC,EAAK/Y,KAAK,GAAK,EAGlCoiB,EAAMtxC,WAAa,OAVvB,IADAsxC,EAAMtxC,WAAa,EACZsxC,EAAMtxC,WAAa,GAAqB,GAAhBioC,EAAK/Y,KAAK,IAASoiB,EAAMtxC,aAc5DsxC,EAAMC,SAAWtJ,EAAKxY,eAElB6hB,EAAME,YADNhG,EACmC,EAAfvD,EAAK/Y,KAAK,GACtBgD,EAGY+V,EAAK/Y,KAAK,GAFV+Y,EAAK/Y,KAAK4Z,GAKlCwI,EAAM3gB,KAAO,GACb2gB,EAAM98C,OAAS,EACf88C,EAAMG,UAAY,EAClB,IAAK,IAAIxvB,EAAY,EAAGA,EAAIqvB,EAAMC,SAAUtvB,IAAK,CAC7C,IAAIyvB,EAAc,GAClBA,EAAO9e,UAA4B,GAAhBqV,EAAK/Y,KAAK,GACzBwiB,EAAO9e,WAAW0e,EAAMG,YAC5BH,EAAM98C,QAAWg4C,GAAehB,EAC1BvD,EAAKzY,yBAA2Bv8B,EAAOsQ,aAAetQ,EAAOyQ,QAAQ/R,KAAKghC,QAAQhvB,aAClFskC,EAAK1Y,mBACXmiB,EAAOphB,KAAOghB,EAAM98C,OAEhBk9C,EAAO1pB,KADPwjB,EAC6B,EAAfvD,EAAK/Y,KAAK,GAChBgD,EAIM+V,EAAK/Y,KAAK,GAHV+Y,EAAK/Y,KAAK4Z,GAK5BwI,EAAM3gB,KAAKv0B,KAAKs1C,EACnB,CACJ,CACDhI,EAAaY,QAAQgH,GACjB5H,EAAal1C,OAAS,IAAIk1C,EAAalhB,MAGvC2oB,EAAS38C,QAAU48C,GACnBrf,EAAO,IAAIxB,GAAK,EAAGoZ,EAASA,EAAU2H,EAAM98C,OAAQ88C,EAAME,aAC1DL,EAASC,KAAerf,IAExBA,EAAOof,EAASC,KAChBrf,EAAKnF,MAAQ+c,EACb5X,EAAKlF,IAAM8c,EAAU2H,EAAM98C,OAC3Bu9B,EAAKpB,KAAK,GAAG3I,KAAOspB,EAAME,aAI9B,IAAIxxC,EAAqB,EACzB,MAAM+pC,EAAuB,GAC7B,IAAK,IAAI9nB,EAAY,EAAGA,EAAIqvB,EAAMtxC,WAAasxC,EAAMG,UAAWxvB,IAAK,CAEjE,GAD6C,GAAhBgmB,EAAK/Y,KAAK,GAehC,CACH,MAAMsb,EAAqBtd,GAAc,EAAGuc,EAAcj1C,OAAS,EAAGyzC,EAAK/Y,KAAKuhB,IAChFjgB,EAAQiZ,EAAce,GACtBf,EAAc3gB,OAAO0hB,EAAY,EACpC,KAlBiB,CAEdha,EAAQgZ,EACR,IAAImI,EAFqB1J,EAAKvY,oBAG9B,KAAOiiB,EAAe,GAAG,CAErB,IADAnhB,KACwC,GAAjCiZ,EAAc5gB,QAAQ2H,IAAcA,IAC3CmhB,GACH,CACD,KAAOA,EAAe,GAAG,CAErB,IADAnhB,KACwC,GAAjCiZ,EAAc5gB,QAAQ2H,IAAcA,IAC3CmhB,GACH,CACJ,CAMDlI,EAAca,QAAQ9Z,GAClBiZ,EAAcj1C,OAASk8C,GAAmBjH,EAAcjhB,MAExDvG,EAAIqvB,EAAMtxC,WACV+xB,EAAKrB,QAAQ1wB,KAAgBwwB,EAE7BuZ,EAAW3tC,KAAKo0B,GAIhBgZ,EADAvnB,GAAKqvB,EAAMtxC,WAAa,EACZ+xB,EAAKrB,QAAQ,GAEbF,CAEnB,CACDuB,EAAKrB,QAAQl8B,OAASwL,EACtB+pC,EAAWO,QAAQvY,EAAKrB,QAAQ,IAC5BwB,IACAH,EAAKpB,KAAK,GAAG3I,MAAQipB,EAAiBC,EAAWrf,YAAY,IAAIE,EAAKrB,QAAQ,KAElF,IAAI6gB,EAAmB,EACvB,IAAK,MAAMG,KAAUJ,EAAM3gB,KAAM,CACzB+gB,EAAO9e,WAAWmX,EAAW+C,QAEjC,MAAMvoB,EAAmBwlB,EAAW,GAAKhY,EAAKrB,QAAQ,GACtD,GAAIqB,EAAKpB,KAAKn8B,QAAU+8C,EAEhBxf,EAAKpB,KAAK4gB,KAAclhB,GAAY9L,EAAUmtB,EAAOphB,KADrD4B,EAC2Dwf,EAAO1pB,KAAOipB,EAAiBC,EAAWrf,YAAY,IAAIE,EAAKrB,QAAQ,IAEvEghB,EAAO1pB,UAEnE,CACH,MAAMqJ,EAAeU,EAAKpB,KAAK4gB,KAC/BlgB,EAAI9M,SAAWA,EACf8M,EAAIf,KAAOohB,EAAOphB,KAEde,EAAIrJ,KADJkK,EACWwf,EAAO1pB,KAAOipB,EAAiBC,EAAWrf,YAAY,IAAIE,EAAKrB,QAAQ,IAEvEghB,EAAO1pB,IAEzB,CACJ,CACD+J,EAAKpB,KAAKn8B,OAAS+8C,EAED,GAAdxf,EAAKnF,QAKGmF,EAAKnB,qBAJN8b,GAAclB,GAAiBc,GAAcb,GAAeY,GAAYX,IAGtEW,IAAeV,GAAiBH,IAGL34B,EAAQgf,YAAYqf,EAAWrf,YAAY,IAAI4J,cALlC,GAAhBwM,EAAK/Y,KAAK,IAU/Cya,EAAUzc,GAAc,EAAGv7B,KAAK6hC,YAAcvgC,EAAOsQ,aAAcwuB,EAAKlF,IAC3E,MAxKG,GAAIqF,EAAc,CACd,MAAM0f,EAAuC,GAAhB3J,EAAK/Y,KAAK,GACjC2iB,EAAqB5J,EAAK1Y,mBAC5BqiB,EACAjI,GAAWkI,EAGXlI,GAAWkI,CAElB,KAAM,CAIHlI,GAH4B6C,GAAehB,EACrCvD,EAAKzY,yBAA2Bv8B,EAAOsQ,aAAetQ,EAAOyQ,QAAQ/R,KAAKghC,QAAQhvB,aAClFskC,EAAK1Y,kBAGd,CA0JR,CACD4hB,EAAS38C,OAAS48C,CACrB,CAED,GAAIhF,GAAeZ,EACf,MAGA,GADApE,IACIA,GAAgBz1C,KAAKo1C,kBAAmB,KAEnD,CAGD,IAAM0E,GAAea,GAAcD,GAAcX,IAAiBoF,GAAmB,EACjF,IAAK,IAAI1J,EAAuB,EAAGA,EAAez1C,KAAK4zC,SAAS/wC,OAAQ4yC,IACpE,IAAK,IAAIgC,EAA0B,EAAGA,EAAkBz3C,KAAK4zC,SAAS6B,GAAcvV,YAAYr9B,OAAQ40C,IAAmB,CACvH,MAAMjqB,EAAyBxtB,KAAK4zC,SAAS6B,GAAcvV,YAAYuX,GAKvE,GAJI/nC,EAAqB8d,EAAWze,WAChCye,EAAWgF,OAASlxB,EAAO4P,YAAc,GAGzC+tC,GAAqBxJ,GAAgByJ,GAAwBzH,EAAiB,CAC9E,MAAM0I,EAAuBngD,KAAK4zC,SAAS6B,GAAclC,KAAK,GAC9D,GAAI4M,EAAe,EAAG,CAGlB,MAAMhK,EAAmBn2C,KAAK4zC,SAAS6B,GAAcnC,SAAS6M,EAAe,GAC7E,IAAIC,EAAqB,EACzB,IAAK,MAAMhgB,KAAQ+V,EAAQlW,MACnBG,EAAKrB,QAAQ,IAAMz9B,EAAO4Y,SAAW,EAAIilC,IACzCiB,EAAav1C,KAAKuC,IAAIgzC,EAAYhgB,EAAKnF,QAI3CmlB,EAAa,GACbjK,EAAQlW,MAAMx1B,KAAK,IAAIm0B,GAAKt9B,EAAO4Y,SAAW,EAAIilC,EAAiB,EAAGiB,EAAYzT,GAEzF,MAGG,GAAI3sC,KAAK4zC,SAAS6B,GAAcnC,SAASzwC,OAASvB,EAAOkQ,YAAa,CAClE,MAAM2kC,EAAmB,IAAInW,GAG7B,GAFAhgC,KAAK4zC,SAAS6B,GAAcnC,SAAS7oC,KAAK0rC,GAC1Cn2C,KAAK4zC,SAAS6B,GAAclC,KAAK,GAAKvzC,KAAK4zC,SAAS6B,GAAcnC,SAASzwC,OACvE7C,KAAK4zC,SAAS6B,GAAcnC,SAASzwC,OAAS7C,KAAKi2C,mBAAoB,CACvE,IAAK,IAAIoK,EAAc,EAAGA,EAAMrgD,KAAK4zC,SAAS/wC,OAAQw9C,IAC9CrgD,KAAK4zC,SAASyM,GAAK/M,SAASzwC,QAAU7C,KAAKi2C,oBAC3Cj2C,KAAK4zC,SAASyM,GAAK/M,SAAS7oC,KAAK,IAAIu1B,IAG7ChgC,KAAKi2C,oBACR,CACDE,EAAQjW,YAAYr9B,OAAS,EAC7BszC,EAAQjW,YAAY,GAAKgf,EACzB/I,EAAQlW,MAAMp9B,OAAS,EACvBszC,EAAQlW,MAAMx1B,KAAK,IAAIm0B,GAAKt9B,EAAO4Y,SAAW,EAAIilC,EAAiB,EAAG,EAAGxS,GAC5E,CAER,CACJ,CAGZ,CAAC,MACF,QACI,MAAM,IAAIxqC,MAAM,8BAAgCo2C,OAAOC,aAAauD,GAAW,cAAgB5f,EAAY,GAAK,IAAMD,EAAWyd,UAA2B,EAAGxd,IAInK76B,EAAO+B,6BACPi9C,OAAOC,SAAS3d,KAAO5iC,KAAKq2C,iBAC5BmK,YAAW,KAAQD,SAASE,QAAQ,GAAK,I,CAIzC,QAAOC,CAAahN,GACxB,IACI,OAAO2J,QAAQ,IAAIC,IAAI5J,GAC1B,CACD,MAAM98B,GACF,OAAO,CACV,C,CAIG,QAAOglC,CAA+Bh7C,EAAa46C,EAA4BC,EAA+B37C,EAAwC67C,GAC1J,MACM33C,EAAyC1C,EAAOC,UADzB,GACiDe,QACxE2B,EAA+B3C,EAAOK,gBAFf,GAE6CW,QAEpEq+C,EAA+BnF,EAAiB34C,OACtD24C,EAAiB/wC,KAAK7J,GAGtB,MAAMC,EAAwBS,EAAOC,UAAUsB,OAE/C,IAAI+9C,EAAoBhgD,EAEpBI,EAA2B,MAC3B6/C,GAA8B,EAC9BC,EAAwB,GACxBC,GAA6C,EAC7CC,EAAyC,KACzCC,EAAuC,KACvCC,EAA2C,KAC3CC,EAAwC,KACxCC,GAAuC,EAEvCC,GAA+B,EAC/BC,EAA4B1gD,EAAIs2B,QAAQ,KACxCqqB,GAA2B,EAC/B,GAA0B,IAAtBD,IACAC,EAAkB3gD,EAAIs2B,QAAQ,IAAKoqB,EAAoB,IAC9B,IAArBC,GAAwB,CACxB,MAAMC,EAAuB5gD,EAAIy4C,MAAMiI,EAAoB,EAAGC,GAAiBhhC,MAAM,KACrF,IAAK,MAAMkhC,KAAaD,EAAY,CAChC,MAAME,EAAqBD,EAAUE,OAAO,GACtCC,EAAqBH,EAAUpI,MAAM,EAAGoI,EAAU5+C,QACrC,MAAf6+C,EACA1gD,EAAmBq6B,GAAM,IAAM,MAAWG,GAAsBomB,EAAY,QACtD,MAAfF,EACPZ,EAAgBtlB,GAAsBomB,EAAY,IAC5B,MAAfF,EACPb,GAAqB,EACC,MAAfa,GACPV,EAA0BplB,GAAoBgmB,EAAY,MAC3B,MAA3BZ,IACAD,GAAoC,IAElB,MAAfW,GACPT,EAAwBrlB,GAAoBgmB,EAAY,MAC3B,MAAzBX,IACAF,GAAoC,IAElB,MAAfW,GACPR,EAA4BtlB,GAAoBgmB,EAAY,MAC3B,MAA7BV,IACAH,GAAoC,IAElB,MAAfW,GACPP,EAAyBvlB,GAAoBgmB,EAAY,MAC3B,MAA1BT,IAGAA,EAAyB9lB,GAAM,EAAG,EAAO8lB,GACzCJ,GAAoC,IAElB,MAAfW,IACPN,GAA8B,EAC9BL,GAAoC,EAE3C,CACDH,EAAYhgD,EAAIy4C,MAAMkI,EAAkB,EAAG3gD,EAAIiC,QAC/Cw+C,GAAsB,CACzB,CAGL,IAAIQ,EAAwB,KAC5B,IAAIpO,GAAKiN,EAAaE,GAKlB,OADA19C,MAAMtC,EAAM,wBACL,EAGX,GAPIihD,EAAY,IAAIvE,IAAIsD,GAOpBjF,IACK0F,GAAoC,MAAbQ,EAAmB,CAQ3C,SAASC,IACLlB,EAAYhgD,EAAIy4C,MAAM,EAAGz4C,EAAIs2B,QAAQ,MACrC2qB,EAAY,IAAIvE,IAAIsD,GACpB5/C,EAAmBq6B,GAAM,IAAM,MAAWG,GAAsB56B,EAAIy4C,MAAMz4C,EAAIs2B,QAAQ,KAAO,GAAI,O,CAKrG,SAAS6qB,IACLnB,EAAYhgD,EAAIy4C,MAAM,EAAGz4C,EAAIs2B,QAAQ,MACrC2qB,EAAY,IAAIvE,IAAIsD,GACpBE,EAAgBtlB,GAAsB56B,EAAIy4C,MAAMz4C,EAAIs2B,QAAQ,KAAO,GAAI,G,EAlBlD,GAArBt2B,EAAIs2B,QAAQ,OAEZ0pB,EAAYhgD,EAAIs6C,WAAW,IAAK,IAChC2G,EAAY,IAAIvE,IAAIsD,GACpBC,GAAqB,IAkBA,GAArBjgD,EAAIs2B,QAAQ,OAAmC,GAArBt2B,EAAIs2B,QAAQ,KAClCt2B,EAAIs2B,QAAQ,KAAOt2B,EAAIs2B,QAAQ,MAC/B6qB,IACAD,MAGAA,IACAC,OAIqB,GAArBnhD,EAAIs2B,QAAQ,MACZ4qB,KAEqB,GAArBlhD,EAAIs2B,QAAQ,MACZ6qB,IAGX,CAGL,GAAiB,MAAbF,EAAmB,CAEnB,IAAIG,EAAsBpB,EAC1B,MAAMqB,EAAyB,GACN,QAArBjhD,GAA4BihD,EAAax3C,KAAK,IAAMzJ,GAClC,KAAlB8/C,GAAsBmB,EAAax3C,KAAK,IAAMq2C,GAC9CD,GAAoBoB,EAAax3C,KAAK,KACtCs2C,IAC+B,MAA3BC,GAAiCiB,EAAax3C,KAAK,IAAMu2C,GAChC,MAAzBC,GAA+BgB,EAAax3C,KAAK,IAAMw2C,GAC1B,MAA7BC,GAAmCe,EAAax3C,KAAK,IAAMy2C,GACjC,MAA1BC,GAAgCc,EAAax3C,KAAK,IAAM02C,GACxDC,GAA6Ba,EAAax3C,KAAK,MAEnDw3C,EAAap/C,OAAS,IACtBm/C,EAAsB,IAAMC,EAAarjC,KAAK,KAAO,IAAMgiC,GAE/DpF,EAAiBmF,GAAwBqB,EAQzC,MAAM99C,EAAek4C,mBAAmByF,EAAUK,SAASthC,QAAQ,eAAgB,KAK7Ezc,EAAqB,EAC3B7C,EAAOC,UAAUV,GAAiB,CAC9BqD,KAAMA,EACNC,WAAYA,EACZg+C,iBAAiB,EACjB99C,aAAcw8C,EACduB,QAAStB,EACT3/C,WAAYH,EACZsB,QAAS0B,EACTQ,MAAO3D,GAEXS,EAAOG,aAAaZ,GAAiB,CACjCqD,KAAMA,EACNC,WAAYA,EACZg+C,iBAAiB,EACjB99C,aAAcw8C,EACduB,QAAStB,EACT3/C,WAAYH,EACZsB,QAAS2B,EACTO,MAAO3D,GAEXS,EAAOK,gBAAgBd,GAAiB,CACpCqD,KAAMA,EACNC,WAAYA,EACZg+C,iBAAiB,EACjB99C,aAAcw8C,EACduB,QAAStB,EACT3/C,WAAYH,EACZsB,QAAS2B,EACTO,MAAO3D,GAEX,MAAMwhD,EAA8C,CAChDptC,KAAQ,OACRic,SAAY,GACZniB,QAAW,GACXoiB,WAAc,SACdC,cAAiB,EACjB7c,cAAiB,EACjB8c,MAAS,UACThnB,KAAQnG,EACRotB,OAAU,OACVpZ,UAAa,IAEb6oC,IACAsB,EAAwD,6BAAI,EAC5DA,EAA8C,kBAA+B,MAA3BrB,EAAkCA,EAA0B,EAC9GqB,EAA4C,gBAA6B,MAAzBpB,EAAgCA,EAAwB,EACxGoB,EAA6C,iBAA8B,MAA1BlB,EAAiCA,EAAyB,EAC3GkB,EAAkD,sBAAIjB,EACtDiB,EAAgD,oBAAiC,MAA7BnB,EAAoCA,EAA4B,GAExH,MAAMoB,EAA6B,CAC/B99C,MAAO,EACPN,KAAMA,EACNkpB,YAAa,GACb6D,SAAUoxB,GAGd,GADA5G,EAAoBhxC,KAAK63C,IACpBhhD,EAAO+B,2BAA4B,CASpC1C,EAAmBigD,EAAW//C,EAAewhD,EARjB,CACxBttB,4BAA+BgsB,EAC/B/rB,kBAAqBgsB,EACrB/rB,gBAAmBgsB,EACnB/rB,iBAAoBisB,EACpBhsB,sBAAyBisB,EACzBhsB,oBAAuB8rB,GAE8DlgD,EAC5F,CACDlB,EAAmBG,YAAYY,GAAc,EAC7Cf,EAAmBI,SAASW,GAAiB+/C,EAC7C9gD,EAAmBK,cACtB,CAED,OAAO,C,CAGH,QAAOi7C,GACX95C,EAAOC,UAAYmN,EAAUpN,EAAOC,UAAU83C,MAAM,EAAG/3C,EAAO+R,qCAC9D/R,EAAOG,aAAeiN,EAAUpN,EAAOG,aAAa43C,MAAM,EAAG/3C,EAAO+R,qCACpE/R,EAAOK,gBAAkB+M,EAAUpN,EAAOK,gBAAgB03C,MAAM,EAAG/3C,EAAO+R,oC,CAGtE,QAAOmmC,GACXhtB,EAAa4sB,cAAgB,KAE7B3F,GAAK2H,IAELt7C,EAAmBG,YAAc,GACjCH,EAAmBI,SAAW,GAC9BJ,EAAmBK,aAAe,EAClCL,EAAmBM,cAAgB,EACnCM,EAAiBoC,cAAc,IAAIzC,EAC/BP,EAAmBK,aACnBL,EAAmBM,e,CAIpB,YAAAkgC,CAAaiiB,GAAuB,EAAMC,EAAoB,EAAGC,GAAuB,GAC3F,MAAMC,EAAyB,GAC/B,IAAK,IAAIjN,EAAuB,EAAGA,EAAez1C,KAAKo1C,kBAAmBK,IAAgB,CACtF,MAAMv0B,EAAmBlhB,KAAK4zC,SAAS6B,GACjCkN,EAA4B,GAC5BlhB,EAA0BzhC,KAAK01C,kBAAkBD,GACjDlV,EAAwBvgC,KAAK21C,gBAAgBF,GACnD,IAAK,MAAMjoB,KAActM,EAAQgf,YAC7ByiB,EAAgBl4C,KAAK+iB,EAAW8S,gBAGpC,MAAMsiB,EAAyB,GAC/B,IAAK,MAAMzM,KAAWj1B,EAAQoyB,SAC1BsP,EAAan4C,KAAK0rC,EAAQ7V,aAAatgC,KAAMkhB,EAASqf,IAG1D,MAAMsiB,EAA0B,GAChC,GAAIN,EAAa,IAAK,IAAIh4C,EAAY,EAAGA,EAAIvK,KAAK81C,UAAWvrC,IACzDs4C,EAAcp4C,KAAKyW,EAAQqyB,KAAKhpC,IAEpC,IAAK,IAAIu4C,EAAY,EAAGA,EAAIN,EAAWM,IAAK,IAAK,IAAIv4C,EAAYvK,KAAK81C,UAAWvrC,EAAIvK,KAAK81C,UAAY91C,KAAK+1C,WAAYxrC,IACnHs4C,EAAcp4C,KAAKyW,EAAQqyB,KAAKhpC,IAEpC,GAAIk4C,EAAa,IAAK,IAAIl4C,EAAYvK,KAAK81C,UAAY91C,KAAK+1C,WAAYxrC,EAAIvK,KAAKg2C,SAAUzrC,IACvFs4C,EAAcp4C,KAAKyW,EAAQqyB,KAAKhpC,IAGpC,MAAMw4C,EAAqB,CACvB9tC,KAAQsrB,EAAe,MAASkB,EAAiB,OAAS,QAC1Dv9B,KAAQgd,EAAQhd,KAChBg8B,YAAeyiB,EACfrP,SAAYsP,EACZI,SAAYH,GAEXphB,IAEDshB,EAA+B,gBAAI7hC,EAAQgc,OAAS,GAExDwlB,EAAaj4C,KAAKs4C,EACrB,CAED,MAAMl0C,EAAc,CAChB3K,KAAQlE,KAAKk2C,MACb+M,OAAUxP,GAAKyP,EACfzyB,QAAWgjB,GAAK+C,EAChBX,MAASv0C,EAAO0O,OAAOhQ,KAAK61C,OAAO3xC,KACnCi/C,YAAenjD,KAAK2zC,YACpBxgC,IAAO7R,EAAO6O,KAAKnQ,KAAKmT,KAAKjP,KAC7Bk/C,UAAapjD,KAAKk9B,OAClBmmB,UAAarjD,KAAK81C,UAClBwN,SAAYtjD,KAAK+1C,WACjBlU,YAAe7hC,KAAK6hC,YACpB0hB,aAAgBjiD,EAAOyQ,QAAQ/R,KAAKghC,QAAQhvB,aAC5CwxC,eAAkBxjD,KAAK40C,MACvBpiB,OAAUxyB,KAAKwyB,OACf2hB,WAAcn0C,KAAKm0C,WACnBJ,qBAAwB/zC,KAAK+zC,qBAC7BC,eAAkBh0C,KAAKg0C,eACvBH,WAAc7zC,KAAK6zC,WACnBC,UAAa9zC,KAAK8zC,UAClBI,WAAcl0C,KAAKk0C,WACnBD,iBAAoBj0C,KAAKi0C,iBAGzBsB,mBAAsBv1C,KAAKu1C,mBAC3BjU,mBAAsBthC,KAAKshC,mBAC3BsS,SAAY8O,GAOhB,OAJkC,MAA9Bl2B,EAAa4sB,eAAyB5sB,EAAa4sB,cAAcv2C,OAAS,IAC1EgM,EAAsB,cAAI2d,EAAa4sB,eAGpCvqC,C,CAGJ,cAAA0yB,CAAekiB,GAElB,GADAzjD,KAAKm1C,eAAc,IACdsO,EAAY,OAiBjB,GAZ0Bl8B,MAAtBk8B,EAAiB,OACjBzjD,KAAKk2C,MAAQuN,EAAiB,MAWCl8B,MAA/Bk8B,EAA0B,cAAgB,CAC1C,MAAMrK,EAA0BqK,EAA0B,cAC1D,GAAkC,MAA9Bj3B,EAAa4sB,eAAyB5sB,EAAa4sB,cAAcx6B,KAAK,OAASw6B,EAAcx6B,KAAK,MAAO,CAKzGtd,EAAO+B,4BAA6B,EAEpCowC,GAAK2H,IAEL,IAAIC,GAAiC,EACjCC,GAAqC,EACrCC,GAAwC,EAC5C,MAAMC,EAA6B,GAC7BC,EAAgC,GACtC,IAAK,MAAM76C,KAAOw4C,EACd,GAA0B,kBAAtBx4C,EAAI86C,cACCL,IACDA,GAAwB,EACxBG,EAAiB/wC,KAAK7J,GACtBkD,EAAmB,SAGtB,GAA0B,sBAAtBlD,EAAI86C,cACJJ,IACDA,GAA4B,EAC5BE,EAAiB/wC,KAAK7J,GACtBkD,EAAmB,SAGtB,GAA0B,yBAAtBlD,EAAI86C,cACJH,IACDA,GAA+B,EAC/BC,EAAiB/wC,KAAK7J,GACtBkD,EAAmB,QAItB,CAKD,MAAM63C,GAA0B,EAChClI,GAAKmI,EAA+Bh7C,EAAK46C,EAAkBC,EAAqB37C,EAAoB67C,EACvG,CAKL,GAHIH,EAAiB34C,OAAS,IAC1B2pB,EAAa4sB,cAAgBoC,GAE7BC,EAAoB54C,OAAS,EAAG,CAChC,MAAMg5C,EAAkDntC,EAAU+sC,GAClEjvB,EAAaK,iBAAiBL,EAAaK,iBAAiBhqB,QAAU,CAClEqB,KAAM,wBACN4oB,QAAS+uB,EACTr3C,MAAOgoB,EAAaK,iBAAiBhqB,OAE5C,CACJ,CACJ,KAAM,CAIH,IAAI6gD,GAAmC,EACvC,GAA8Bn8B,MAA1Bk8B,EAAqB,SACrB,IAAK,IAAIhO,EAAuB,EAAGA,EAAegO,EAAqB,SAAE5gD,OAAQ4yC,IAAgB,CAC7F,MAAMsN,EAAqBU,EAAqB,SAAEhO,GAClD,GAA8B,UAA1BsN,EAAoB,MAIpBvgD,MAAM2b,QAAQ4kC,EAA2B,aAAI,CAC7C,MAAMY,EAA2BZ,EAA2B,YAC5D,IAAK,IAAIx4C,EAAY,EAAGA,EAAIo5C,EAAkB9gD,OAAQ0H,IAAK,CACvD,MAAMyhC,EAAwB2X,EAAkBp5C,GAChD,GAAiC,SAA7ByhC,EAAuB,KAGvB,SAEJ,GAAgC,MAA5BA,EAAuB,KAGvB,SAEJ,MAAM4X,EAAmB5X,EAAuB,KAE1C6X,EAAkB,CACpB,oBACA,qBACA,sBACA,mBACA,yBACA,uBACA,yBACA,4BACA,gCACA,qBACA,2BACA,uBACA,qBACA,+BACA,qBACA,6BACA,8BACA,0BACA,gCACA,+BACA,oBACA,6BACA,4BACA,6BACA,2BACA,yBACA,yBACA,2BACA,uBACA,yBACA,uBACA,yBACA,2BACA,6BACA,6BACA,2BACA,0BACA,uCACA,6BACA,gCACA,+BACA,0BACA,qBACA,0BACA,yBACA,wBACA,0BACA,mCACA,wCACA,kCACA,wCACA,kCACA,2BACA,4BACA,4BACA,4BACA,2BACA,4BACA,wCACA,yCACA,+BACA,8BACA,qCACA,0CACA,mCACA,uCACA,oCACA,4BACA,kCACA,4BAGEC,EAAqB,CACvB,oBACA,qBACA,sBACA,mBACA,yBACA,uBACA,yBACA,4BACA,gCACA,qBACA,2BACA,uBACA,qBACA,+BACA,qBACA,6BACA,8BACA,0BACA,gCACA,+BACA,oBACA,6BACA,4BACA,6BACA,2BACA,yBACA,yBACA,2BACA,uBACA,yBACA,uBACA,yBACA,2BACA,6BACA,6BACA,2BACA,0BACA,uCACA,6BACA,gCACA,+BACA,0BACA,qBACA,0BACA,yBACA,wBACA,0BACA,mCACA,wCACA,kCACA,wCACA,kCACA,2BACA,4BACA,4BACA,4BACA,2BACA,4BACA,wCACA,yCACA,+BACA,8BACA,qCACA,0CACA,mCACA,uCACA,oCACA,4BACA,kCACA,4BAGEC,EAAyB,CAC3B,OACA,QACA,SACA,MACA,YACA,UACA,YACA,eACA,mBACA,QACA,cACA,UACA,QACA,kBACA,QACA,gBACA,iBACA,aACA,mBACA,kBACA,OACA,gBACA,eACA,gBACA,cACA,YACA,YACA,cACA,UACA,YACA,UACA,YACA,eAEAF,EAAMG,SAASJ,GACfF,GAA0B,EACnBI,EAASE,SAASJ,IACzBF,GAA0B,EAG1B1X,EAAuB,KAAI6X,EAAMC,EAAS5V,WAAUt3B,GAAKA,IAAMgtC,MACxDG,EAAaC,SAASJ,KACZ,YAAbA,GAAuC,UAAbA,IAO1BF,GAA0B,EAG1B1X,EAAuB,KAAI6X,EAAME,EAAa7V,WAAUt3B,GAAKA,IAAMgtC,MAG9E,CACJ,CACJ,CAEDF,GACApiD,EAAO+B,4BAA6B,EAEpCowC,GAAK2H,IAELt3C,EAAmB,GACnB0oB,EAAa4sB,cAAgB,CAAC,kBAII,MAA9B5sB,EAAa4sB,eAAyB5sB,EAAa4sB,cAAcv2C,OAAS,IAG1EvB,EAAO+B,4BAA6B,EACpCowC,GAAK+F,IAGhB,CAGD,GADAx5C,KAAK61C,MAAQ,EACctuB,MAAvBk8B,EAAkB,MAAgB,CAClC,MAAMQ,EAAoC,CACtC,YAAa,kBACb,YAAa,kBACbC,OAAU,WAERC,EAA2D58B,MAAtC08B,EAAcR,EAAkB,OAAmBQ,EAAcR,EAAkB,OAAKA,EAAkB,MAC/H5N,EAAgBv0C,EAAO0O,OAAOk+B,WAAU2H,GAASA,EAAM3xC,MAAQigD,IAErE,IADc,GAAVtO,IAAa71C,KAAK61C,MAAQA,GAC1B71C,KAAK61C,OAASv0C,EAAO0O,OAAmB,WAAU,OAAExL,OACnB+iB,MAA7Bk8B,EAAwB,YACxB,IAAK,IAAIl5C,KAAKk5C,EAAwB,YAAEtzC,OACpCnQ,KAAK2zC,YAAYppC,GAAKk5C,EAAwB,YAAEl5C,EAI/D,CAED,GAAyBgd,MAArBk8B,EAAgB,IAChB,GAAkC,iBAAtBA,EAAiB,IACzBzjD,KAAKmT,KAAQswC,EAAgB,IAAI,OAAU,GAAKniD,EAAO6O,KAAKtN,YACzD,GAAkC,iBAAtB4gD,EAAiB,IAAe,CAC/C,MAAMtwC,EAAcswC,EAAgB,IAGpC,GAAY,OAARtwC,EACAnT,KAAKmT,IAAM,EACXnT,KAAKk9B,OAAS,OACX,GAAY,sBAAR/pB,EACPnT,KAAKmT,IAAM,EACXnT,KAAKk9B,QAAU,OACZ,GAAY,OAAR/pB,EACPnT,KAAKmT,IAAM,EACXnT,KAAKk9B,QAAU,OACZ,GAAY,eAAR/pB,EACPnT,KAAKmT,IAAM,EACXnT,KAAKk9B,QAAU,MACZ,CACH,MAAMknB,EAAiBjxC,EAAIwuC,OAAO,GAAG0C,cAC/BC,EAAiBnxC,EAAIwuC,OAAO,GAAGjG,cAGrC,IAAIl3C,EAF4C,CAAE+/C,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,IAE7DT,GAC1C,MAAM1uC,EAF8C,CAAE,IAAK,EAAG,IAAK,EAAG6hB,GAAM,EAAG,KAAM,GAEpC+sB,GACpC/8B,MAAT/iB,IACc+iB,MAAV7R,IAAqBlR,GAASkR,GAC9BlR,EAAQ,IAAGA,GAAS,IACxBA,GAAgB,GAChBxE,KAAKmT,IAAM3O,EAElB,CACJ,CAG+B+iB,MAAhCk8B,EAA2B,iBAC3BzjD,KAAK40C,MAAQvZ,GAAM/5B,EAAOiP,SAAUjP,EAAOkP,SAAW,EAAkC,EAA/BizC,EAA2B,iBAGzDl8B,MAA3Bk8B,EAAsB,YACtBzjD,KAAKk9B,OAAS7B,GAAM/5B,EAAOmP,UAAWnP,EAAOoP,UAAY,EAA6B,EAA1B+yC,EAAsB,YAGtF,IAAI9W,EAA6B,EACLplB,MAAxBk8B,EAAmB,SACnB9W,EAAqBtR,GAAM,EAAG,GAA2B,EAAvBooB,EAAmB,SAGxBl8B,MAA7Bk8B,EAAwB,cACxBzjD,KAAK6hC,YAAch3B,KAAKiM,IAAIxV,EAAO+P,eAAgBxG,KAAKuC,IAAI9L,EAAOgQ,eAA4C,EAA5BmyC,EAAwB,eAG/G,IAAIjiB,EAA+B,EACDja,MAA9Bk8B,EAAyB,eACzBjiB,EAAqD,EAA7BiiB,EAAyB,cAAU,EAC3DzjD,KAAKghC,OAAS1/B,EAAOyQ,QAAQm8B,WAAUlN,GAAUA,EAAOhvB,cAAgBwvB,KACpD,GAAhBxhC,KAAKghC,SACLhhC,KAAKghC,OAAS,IAMUzZ,MAA5Bk8B,EAAuB,WACvBzjD,KAAKm0C,WAAatpC,KAAKiM,IAAI,EAAKjM,KAAKuC,IAAI,EAAKq2C,EAAuB,YAAK,IAE1EzjD,KAAKm0C,WAAa,EAGc5sB,MAAhCk8B,EAA2B,eAC3BzjD,KAAKg0C,eAAiBnpC,KAAKiM,IAAI,EAAKjM,KAAKuC,IAAI,EAAKq2C,EAA2B,gBAAK,IAGlFzjD,KAAKg0C,eAAiB,EAGgBzsB,MAAtCk8B,EAAiC,qBACjCzjD,KAAK+zC,qBAAuBlpC,KAAKiM,IAAI,EAAKjM,KAAKuC,IAAI,IAAKq2C,EAAiC,sBAAK,IAG9FzjD,KAAK+zC,qBAAuB,EAGDxsB,MAA3Bk8B,EAAsB,UACtBzjD,KAAK8zC,UAAYjpC,KAAKiM,IAAI,IAAQjM,KAAKuC,IAAI,IAASq2C,EAAsB,WAAK,IAG/EzjD,KAAK8zC,UAAY,IAGWvsB,MAA5Bk8B,EAAuB,WACvBzjD,KAAK6zC,WAAahpC,KAAKiM,IAAI,EAAKjM,KAAKuC,IAAI,GAAMq2C,EAAuB,YAAK,IAG3EzjD,KAAK6zC,WAAa,EAGUtsB,MAA5Bk8B,EAAuB,WACvBzjD,KAAKk0C,WAAarpC,KAAKiM,IAAI,EAAKjM,KAAKuC,IAAI,GAAMq2C,EAAuB,YAAK,IAG3EzjD,KAAKk0C,WAAa,EAGgB3sB,MAAlCk8B,EAA6B,iBAC7BzjD,KAAKi0C,iBAAmBppC,KAAKiM,IAAI,EAAKjM,KAAKuC,IAAI,MAAOq2C,EAA6B,kBAAK,IAGxFzjD,KAAKi0C,iBAAmB,EAG5B,IAAI6Q,EAAyB,EACzBC,EAAsB,EACtBC,EAAkB,EACtB,GAA8Bz9B,MAA1Bk8B,EAAqB,SACrB,IAAK,MAAMV,KAAiBU,EAAqB,SACzCV,EAA2B,cAAG+B,EAAiBj6C,KAAKiM,IAAIguC,EAAsD,EAAtC/B,EAA2B,YAAElgD,SACrGkgD,EAAwB,WAAGgC,EAAcl6C,KAAKiM,IAAIiuC,EAAgD,EAAnChC,EAAwB,SAAElgD,SACzFkgD,EAAwB,WAAGiC,EAAUn6C,KAAKiM,IAAIkuC,EAA4C,EAAnCjC,EAAwB,SAAElgD,SAIrD0kB,MAApCk8B,EAA+B,mBAC/BzjD,KAAKu1C,qBAAuBkO,EAA+B,mBAE3DzjD,KAAKu1C,oBAAqB,EAEUhuB,MAApCk8B,EAA+B,mBAC/BzjD,KAAKshC,qBAAuBmiB,EAA+B,mBAE3DzjD,KAAKshC,mBAAsBwjB,EAAiB,EAEhD9kD,KAAKi2C,mBAAqBprC,KAAKuC,IAAI23C,EAAazjD,EAAOkQ,aACvDxR,KAAKg2C,SAAWnrC,KAAKuC,IAAI43C,EAAS1jD,EAAOkQ,aAEV+V,MAA3Bk8B,EAAsB,YACtBzjD,KAAK81C,UAAYza,GAAM,EAAGr7B,KAAKg2C,SAAoC,EAA1ByN,EAAsB,YAErCl8B,MAA1Bk8B,EAAqB,WACrBzjD,KAAK+1C,WAAa1a,GAAM,EAAGr7B,KAAKg2C,SAAWh2C,KAAK81C,UAAY,EAA4B,EAAzB2N,EAAqB,WAGxF,MAAMwB,EAA8B,GAC9BC,EAA8B,GAC9BC,EAA4B,GAClC,GAA8B59B,MAA1Bk8B,EAAqB,SACrB,IAAK,IAAIhO,EAAuB,EAAGA,EAAegO,EAAqB,SAAE5gD,OAAQ4yC,IAAgB,CAC7F,IAAIsN,EAAqBU,EAAqB,SAAEhO,GAEhD,MAAMv0B,EAAmB,IAAImyB,GAE7B,IAAI5R,GAA0B,EAC1BlB,GAAwB,EA6B5B,GA5B6BhZ,MAAzBw7B,EAAoB,MACpBthB,EAA2C,QAAzBshB,EAAoB,KACtCxiB,EAAyC,OAAzBwiB,EAAoB,MAGpCthB,EAAkBgU,GAAgB,EAElChU,EACAyjB,EAAiBz6C,KAAKyW,GACfqf,EACP4kB,EAAe16C,KAAKyW,GAGpB+jC,EAAiBx6C,KAAKyW,GAGcqG,MAApCw7B,EAA+B,kBAC/B7hC,EAAQgc,OAAS7B,GAAM,EAAG/5B,EAAO2Y,aAAuD,GAAL,EAAnC8oC,EAA+B,kBAC3EthB,IAAgBvgB,EAAQgc,OAAS,IAGZ3V,MAAzBw7B,EAAoB,KACpB7hC,EAAQhd,KAAO6+C,EAAoB,KAGnC7hC,EAAQhd,KAAO,GAGf1B,MAAM2b,QAAQ4kC,EAA2B,aAAI,CAC7C,MAAMY,EAA2BZ,EAA2B,YAC5D,IAAK,IAAIx4C,EAAY,EAAGA,EAAIo5C,EAAkB9gD,UACtC0H,GAAKvK,KAAKs1C,+BADoC/qC,IAAK,CAEvD,MAAMijB,EAAyB,IAAIob,GAAWnH,EAAgBlB,GAC9Drf,EAAQgf,YAAY31B,GAAKijB,EACzBA,EAAW+T,eAAeoiB,EAAkBp5C,GAAIk3B,EAAgBlB,GAAc,GAAO,EAAOoM,EAC/F,CAEJ,CAED,IAAK,IAAIpiC,EAAY,EAAGA,EAAIvK,KAAKi2C,mBAAoB1rC,IAAK,CACtD,MAAM4rC,EAAmB,IAAInW,GAG7B,IAAIqB,EAFJngB,EAAQoyB,SAAS/oC,GAAK4rC,EAGlB4M,EAAwB,WAAG1hB,EAAgB0hB,EAAwB,SAAEx4C,IACpDgd,MAAjB8Z,GAEJ8U,EAAQ5U,eAAeF,EAAerhC,KAAMkhB,EAASsgB,EAAsBC,EAAgBlB,EAC9F,CACDrf,EAAQoyB,SAASzwC,OAAS7C,KAAKi2C,mBAE/B,IAAK,IAAI1rC,EAAY,EAAGA,EAAIvK,KAAKg2C,SAAUzrC,IACvC2W,EAAQqyB,KAAKhpC,GAAmCgd,MAA7Bw7B,EAAwB,SAAkBl4C,KAAKuC,IAAIpN,KAAKi2C,mBAAoB8M,EAAwB,SAAEx4C,KAAO,GAAK,EAEzI2W,EAAQqyB,KAAK1wC,OAAS7C,KAAKg2C,QAC9B,CAGDiP,EAAiBpiD,OAASvB,EAAOmY,uBAAsBwrC,EAAiBpiD,OAASvB,EAAOmY,sBACxFyrC,EAAiBriD,OAASvB,EAAOqY,uBAAsBurC,EAAiBriD,OAASvB,EAAOqY,sBACxFwrC,EAAetiD,OAASvB,EAAOuY,qBAAoBsrC,EAAetiD,OAASvB,EAAOuY,oBACtF7Z,KAAKgnB,kBAAoBi+B,EAAiBpiD,OAC1C7C,KAAKinB,kBAAoBi+B,EAAiBriD,OAC1C7C,KAAKq1C,gBAAkB8P,EAAetiD,OACtC7C,KAAK4zC,SAAS/wC,OAAS,EACvBL,MAAMy2C,UAAUxuC,KAAKguC,MAAMz4C,KAAK4zC,SAAUqR,GAC1CziD,MAAMy2C,UAAUxuC,KAAKguC,MAAMz4C,KAAK4zC,SAAUsR,GAC1C1iD,MAAMy2C,UAAUxuC,KAAKguC,MAAMz4C,KAAK4zC,SAAUuR,GAEtC7jD,EAAO+B,6BACPi9C,OAAOC,SAAS3d,KAAO5iC,KAAKq2C,iBAE5BmK,YAAW,KAAQD,SAASE,QAAQ,GAAK,I,CAI1C,UAAA2E,CAAW3P,EAAsBW,GACpC,GAAIA,EAAM,GAAKA,GAAOp2C,KAAKg2C,SAAU,OAAO,KAC5C,MAAMmK,EAAuBngD,KAAK4zC,SAAS6B,GAAclC,KAAK6C,GAC9D,OAAoB,GAAhB+J,EAA0B,KACvBngD,KAAK4zC,SAAS6B,GAAcnC,SAAS6M,EAAe,E,CAGxD,iBAAAkF,GACH,OAAOrlD,KAAK40C,K,CAGT,oBAAOwC,CAAckO,GACxB,OAAO,GAAKz6C,KAAKqB,MAAMrB,KAAKyS,KAAKgoC,EAAW,GAAK,E,CAG9C,sBAAArH,GACHj+C,KAAKi0C,iBAAmB,EACxBj0C,KAAKk0C,WAAa,EAClBl0C,KAAK8zC,UAAY,IACjB9zC,KAAK6zC,WAAa,EAClB7zC,KAAKg0C,eAAiB,EACtBh0C,KAAK+zC,qBAAuB,EAC5B/zC,KAAKm0C,WAAa,C,EApvHEV,GAAOyP,EAAW,WAClBzP,GAAqByG,EAAW,EAChCzG,GAAqBwG,EAAW,EAChCxG,GAAqB2G,EAAW,EAChC3G,GAAqB0G,EAAW,EAChC1G,GAAqB6G,EAAW,EAChC7G,GAAqB4G,EAAW,EAChC5G,GAAsB8G,EAAW,EACjC9G,GAAsB+C,EAAW,EAGjC/C,GAAQ8C,EAAG,IA6uHvC,MAAMgP,GAqBF,WAAAxlD,GApBOC,KAASwlD,UAAwB,KAWjCxlD,KAAQylD,SAAW,EACnBzlD,KAAa0lD,cAAW,EACxB1lD,KAAO2lD,QAAW,EAClB3lD,KAAY4lD,aAAW,EACvB5lD,KAAO6lD,QAAW,EAClB7lD,KAAY8lD,aAAW,EACvB9lD,KAAO+lD,QAAW,EAClB/lD,KAAYgmD,aAAW,EAG1BhmD,KAAKqgC,O,CAGF,KAAAA,GACHrgC,KAAKimD,YAAc,EACnBjmD,KAAKkmD,cAAgB,EACrBlmD,KAAKmmD,iBAAmB,EACxBnmD,KAAKomD,YAAc,EACnBpmD,KAAKqmD,eAAiB,EACtBrmD,KAAKsmD,sBAAwB,EAC7BtmD,KAAKumD,iBAAmB,EACxBvmD,KAAKwmD,iBAAmB,C,CAGrB,MAAAC,CAAO/V,EAAcgW,EAAkCC,EAAYC,EAAqBC,EAA+BC,EAA0BC,GACpJ,MAAMC,EAAwB,EAAMn8C,KAAK8C,GAAKrM,EAAO2Z,iCAAmCy1B,EAAMuW,iBACxFC,EAAuB,EAAMr8C,KAAK8C,GAAKrM,EAAO8Z,oBAAsBs1B,EAAMuW,iBAC1EE,GAA2Bt8C,KAAKoB,IAAI,IAAO66C,GAAoB,GAAO,GACtEM,GAAyBv8C,KAAKoB,IAAI,IAAO86C,GAAkB,GAAO,GAElER,EAA0BvmD,KAAKumD,gBAE/Bc,EAA0BV,EAAKW,YAAYV,GAC3CW,EAA0BZ,EAAKa,iBAAiBZ,GAChDa,EAAwBJ,EAAkBx8C,KAAKoB,IAAIs7C,EAAiBV,GAEpEa,EAA0C,EAAV78C,KAAK8C,GAAW05C,EAChDM,EAAwC,EAAV98C,KAAK8C,GAAW85C,EAE9CG,EAAsD,EAAxBF,EAC9BG,EAAkD,EAAtBF,EAE5BG,EAA8Bj9C,KAAKuC,IAAIvC,KAAK8C,GAAI+5C,EAAwBpmD,EAAO6Z,+BAAiCtQ,KAAKoB,IAAI+6C,EAAgBU,EAAuBpmD,EAAO4Z,kCACvK6sC,EAA4Bl9C,KAAKuC,IAAIvC,KAAK8C,GAAIg6C,EAAsBrmD,EAAO6Z,+BAAiCtQ,KAAKoB,IAAI+6C,EAAgBW,EAAqBrmD,EAAO4Z,kCAEjK8sC,EAAyBn9C,KAAKoB,IAAI,GAAKk7C,EAAkBD,EAAeQ,GACxEO,EAAuBp9C,KAAKoB,IAAI,GAAKm7C,EAAgBF,EAAeS,GACpEO,EAAyBr9C,KAAKoB,IAAI+7C,EAAgB1mD,EAAOia,iBACzD4sC,EAAuBt9C,KAAKoB,IAAIg8C,EAAc3mD,EAAOia,iBACrD6sC,EAA+Bv9C,KAAKoB,IAAI+7C,EAAgB,MACxDK,EAA6Bx9C,KAAKoB,IAAIg8C,EAAc,MAE1DjlB,GAAMslB,4BAA4BlwB,gCAAgC0vB,GAClEpX,EAAM6X,sBAAsBnvB,QAAQ4J,GAAMslB,4BAA6BV,GACvE,MAAMY,EAAwBxlB,GAAMslB,4BAA4B/wB,EAAE,GAC5DkxB,GAAkC/X,EAAM6X,sBAAsBruB,QAAU0tB,EAE9E5kB,GAAM0lB,0BAA0BtwB,gCAAgC2vB,GAChErX,EAAM6X,sBAAsBnvB,QAAQ4J,GAAM0lB,0BAA2Bb,GACrE,MAAMc,EAAsB3lB,GAAM0lB,0BAA0BnxB,EAAE,GACxDqxB,GAAgClY,EAAM6X,sBAAsBruB,QAAU2tB,EAE5E7kB,GAAMslB,4BAA4BrwB,kBAAkBivB,EAAcgB,GAClExX,EAAM6X,sBAAsBnvB,QAAQ4J,GAAMslB,4BAA6BV,GACvE,MAAMiB,EAAuB7lB,GAAMslB,4BAA4BhxB,EAAE,GAC3DwxB,EAAuB9lB,GAAMslB,4BAA4B/wB,EAAE,GAAK6wB,EAChEW,EAAuB/lB,GAAMslB,4BAA4B/wB,EAAE,GAAK6wB,EAChEY,GAAgCtY,EAAM6X,sBAAsBruB,QAAU0tB,EAE5E5kB,GAAM0lB,0BAA0BzwB,kBAAkBivB,EAAciB,GAChEzX,EAAM6X,sBAAsBnvB,QAAQ4J,GAAM0lB,0BAA2Bb,GACrE,MAAMoB,EAAqBjmB,GAAM0lB,0BAA0BpxB,EAAE,GACvD4xB,EAAqBlmB,GAAM0lB,0BAA0BnxB,EAAE,GAAK8wB,EAC5Dc,EAAqBnmB,GAAM0lB,0BAA0BnxB,EAAE,GAAK8wB,EAC5De,GAA8B1Y,EAAM6X,sBAAsBruB,QAAU2tB,EAEpEwB,EAA4B,EAAMhC,EAClCiC,EAA0B,EAAM7B,EAChC8B,EAA0B1+C,KAAKyS,KAAoD,EAA/CzS,KAAKiM,IAAIuyC,EAAmBC,IAChEE,EAAsBH,EAAoBZ,EAAyBO,EACnES,EAAyBH,EAAkBV,EAAuBQ,EAExEppD,KAAKumD,gBAAkBiD,EACvBxpD,KAAK0pD,kBAAoBD,EAAiBD,GAAe3C,EACzD7mD,KAAKylD,SAAW+C,EAChBxoD,KAAK2lD,QAAUkD,EACf7oD,KAAK6lD,QAAUiD,EACf9oD,KAAK+lD,QAAUgD,EACf/oD,KAAK0lD,eAAiBiD,EAAcH,GAAiB3B,EACrD7mD,KAAK4lD,cAAgBqD,EAAaJ,GAAgBhC,EAClD7mD,KAAK8lD,cAAgBoD,EAAaJ,GAAgBjC,EAClD7mD,KAAKgmD,cAAgBmD,EAAaJ,GAAgBlC,EAElD,MAAM8C,EAAwB9+C,KAAKC,IAAID,KAAK2C,KAAKg8C,EAAcjD,IAAoB,IAE7EqD,GAAoD,GAApB5pD,KAAKimD,YAAoB0D,EAC/D,GAAsB,MAAlB3pD,KAAKwlD,WAAqBxlD,KAAKwlD,UAAU3iD,QAAU0mD,EAAiB,CAGpE,MAAMM,EAA8Bh/C,KAAKyS,KAAK,EAAIozB,EAAMuW,iBAAmBre,GAAW8J,mBAAmB,KACnGoX,EAA6B,IAAIp/C,aAAas4B,GAAMC,kBAAkBp4B,KAAKiM,IAAI+yC,EAAqBN,KAC1G,IAAKK,GAAyC,MAAlB5pD,KAAKwlD,UAAmB,CAGhD,MAAMuE,EAA8B/pD,KAAKwlD,UAAU3iD,OAAS,GAAM,EAC5DmnD,EAAgChqD,KAAKimD,WAAajmD,KAAKwmD,iBAC7DxmD,KAAKimD,WAAajmD,KAAKwlD,UAAU3iD,OAAS7C,KAAKwmD,iBAC/C,IAAK,IAAIj8C,EAAY,EAAGA,EAAIvK,KAAKwlD,UAAU3iD,OAAQ0H,IAC/Cu/C,EAAav/C,GAAKvK,KAAKwlD,UAAWwE,EAAwBz/C,EAAKw/C,EAEtE,CACD/pD,KAAKwlD,UAAYsE,CACpB,CACD,MAAMtE,EAA0BxlD,KAAKwlD,UAC/ByE,EAA2BzE,EAAU3iD,OAAS,GAAM,EAE1D,GAAI+mD,EAAqB,CAIrB5pD,KAAKimD,WAAa,EAClBjmD,KAAKkmD,cAAgB,EACrBlmD,KAAKmmD,iBAAmB,EACxBnmD,KAAKomD,YAAc,EACnBpmD,KAAKqmD,eAAiB,EACtBrmD,KAAKsmD,sBAAwB,EAG7B,MAAM4D,GAA4BV,EAC5BW,EAAyBt/C,KAAK+b,MAAMsjC,EAAmBb,EAAoB,GAC3Ee,EAAsBv/C,KAAKyS,KAAK6sC,EAAqC,EAApBd,GACvDrpD,KAAKwmD,iBAAmB4D,EACxB,IAAK,IAAI7/C,EAAY4/C,EAAgB5/C,GAAK6/C,EAAa7/C,IACnDi7C,EAAUj7C,EAAI0/C,GAAmB,EAGrC,MAAMI,EAA4B3D,EAAgBr8C,KAC5CigD,EAA4BD,EAAYxnD,OAAS,EACjD0nD,EAA4BD,EAAoBjB,EAEhDmB,EAAuB3/C,KAAKuC,IAAwB,GAApBi8C,EAAkD,KAAzB3Y,EAAMuW,kBAC/DwD,EAAiC5/C,KAAKyS,KAAK4sC,GAC3CQ,EAAwBR,EAAmBb,EAAoBmB,EAC/DG,EAA8BD,EACpC,IAAIE,GAAwBH,EAAyBP,GAAoBK,EACrEM,EAA2B,EAC/B,IAAK,IAAItgD,EAAYkgD,EAAwBlgD,GAAKogD,EAAqBpgD,IAAK,CACxE,MAAMugD,EAAyC,EAAfF,EAC1BpmD,EAAgBsmD,EAAkBR,EACxC,IAAIS,EAA2BV,EAAY7lD,GAC3C,MAAMwmD,EAAqBJ,EAAeE,EAC1CC,IAAqBV,EAAY7lD,EAAQ,GAAKumD,GAAoBC,EAClE,MAAMC,GAAkBF,EAAmBF,GAAoBN,EAGzDW,EAFiBrgD,KAAKuC,IAAI,GAAM7C,EAAI2/C,GAAoBM,GACtC3/C,KAAKuC,IAAI,GAAMs9C,EAAgBngD,GAAKigD,GAEtDW,EAAqBD,EAAeA,GAAgB,EAAM,EAAMA,GACtE1F,EAAUj7C,EAAI0/C,IAAoBgB,EAASE,EAC3CN,EAAmBE,EACnBH,GAAgBL,CACnB,CACJ,C,EAIT,MAAMa,GA+BF,WAAArrD,GA9BOC,KAAgBqrD,iBAAW,EAC3BrrD,KAAcsrD,eAAW,EACzBtrD,KAAcurD,eAAW,EACzBvrD,KAAYwrD,aAAW,EACvBxrD,KAAAyrD,cAAwBnqD,EAAOwU,YAC/B9V,KAAA0rD,YAAsBpqD,EAAOwU,YAC7B9V,KAAA2rD,aAAuBrqD,EAAOwU,YAC9B9V,KAAA4rD,aAAuBtqD,EAAOwU,YAC7B9V,KAAA6rD,EAAyBvqD,EAAOwU,YACjC9V,KAAoB8rD,qBAAW,EAC/B9rD,KAAkB+rD,mBAAW,EAC7B/rD,KAAkBgsD,mBAAW,EAC7BhsD,KAAgBisD,iBAAW,EAC1BjsD,KAAAksD,EAA6B5qD,EAAOwU,YAErC9V,KAAcmsD,gBAAY,EAC1BnsD,KAAYosD,cAAY,EACxBpsD,KAAcqsD,gBAAY,EAC1BrsD,KAAYssD,cAAY,EACxBtsD,KAAmBusD,oBAAW,EAC9BvsD,KAAiBwsD,kBAAW,EAC5BxsD,KAAmBysD,oBAAW,EAC9BzsD,KAAiB0sD,kBAAW,EAEnB1sD,KAAc2sD,eAAa,GAC3B3sD,KAAY4sD,aAAa,GACxB5sD,KAAwB6sD,EAAa,GAC9C7sD,KAAsB8sD,GAAW,EAClC9sD,KAAoC+sD,qCAAW,EAKlD,IAAK,IAAIxiD,EAAY,EAAGA,EADZ,GACwBA,IAChCvK,KAAK2sD,eAAepiD,GAAK,EACzBvK,KAAK4sD,aAAariD,GAAK,EAG3BvK,KAAKqgC,O,CAGF,KAAAA,GACHrgC,KAAKsrD,eAAiB,EACtBtrD,KAAKwrD,aAAe,EACpBxrD,KAAK6rD,EAAiBvqD,EAAOwU,YAC7B9V,KAAK+rD,mBAAqB,EAC1B/rD,KAAKisD,iBAAmB,EACxBjsD,KAAKksD,EAAqB5qD,EAAOwU,YACjC9V,KAAK8sD,GAAyB,C,CAG3B,gBAAAE,CAAiBx/B,EAAwBy/B,EAAqBC,EAAuBC,EAAwBxG,GAChH,MAAMx1B,EAAyB3D,EAAW0lB,gBAC9B,MAARyT,IAAgBA,EAAKyG,aAAgBj8B,EAAWvc,WAAc+xC,EAAK0G,uBACnErtD,KAAK+rD,mBAAqB/rD,KAAKsrD,eAC/BtrD,KAAKisD,iBAAmBjsD,KAAKwrD,aAC7BxrD,KAAKksD,EAAqBlsD,KAAK6rD,EAC/B7rD,KAAKsrD,eAAiB,EACtBtrD,KAAKwrD,aAAe,GAEZ,MAAR7E,IACiB,MAAbA,EAAKvmB,KACLpgC,KAAK6rD,EAAiBlF,EAAKvmB,KAAKpB,KAAK2nB,EAAKvmB,KAAKpB,KAAKn8B,OAAS,GAAGwzB,KAEhEr2B,KAAK6rD,EAAiBvqD,EAAOwU,aAIrC,MAAMw3C,EAAsBJ,EAAgB,EACtC7B,EAA2BrrD,KAAKsrD,eAChCA,EAAyBD,EAAmB8B,EAC5C5B,EAAyBvrD,KAAKwrD,aAC9BA,EAAuBD,EAAiB,EACxCO,EAA+B9rD,KAAK+rD,mBACpCA,EAA6BD,EAAuBqB,EACpDnB,EAA6BhsD,KAAKisD,iBAClCA,EAA2BD,EAAqB,EAEhDuB,EAAuB,GAAOjsD,EAAOuQ,aAAevQ,EAAOsQ,cAC3D47C,EAAwBD,EAAeL,EACvCO,EAAsBF,EAAeD,EAE3C,IAAI7B,EAAwBzrD,KAAK6rD,EAC7BH,EAAsB1rD,KAAK6rD,EAC3BF,EAAuB3rD,KAAKksD,EAC5BN,EAAuB,EACvBO,GAA0B,EAC1BC,GAAwB,EACxBC,GAA0B,EAC1BC,GAAwB,EACxBC,EAA8B,EAC9BC,EAA4B,EAC5BC,EAA8B,EAC9BC,EAA4B,EAChC,GAAY,MAAR/F,GAA6B,MAAbA,EAAKvmB,OAAiBumB,EAAK+G,gBAAiB,CAC5D,MAAM3tB,EAAsB4mB,EAAKvmB,KAAKP,eAAeotB,GAC/CU,EAAoBhH,EAAKvmB,KAAKpB,KAAKe,EAAc,GACjD6tB,EAAkBjH,EAAKvmB,KAAKpB,KAAKe,GACjC8tB,GAAwBlH,EAAKvmB,KAAKnF,MAAQ0yB,EAAShvB,MAAQr9B,EAAOuQ,aAClEi8C,GAAsBnH,EAAKvmB,KAAKnF,MAAQ2yB,EAAOjvB,MAAQr9B,EAAOuQ,aAC9Dk8C,GAAsBb,EAAgBW,IAAiBC,EAAaD,GACpEG,GAAoBV,EAAcO,IAAiBC,EAAaD,GAItE,GAHApC,EAAgBkC,EAASt3B,MAAQu3B,EAAOv3B,KAAOs3B,EAASt3B,MAAQ03B,EAChErC,EAAciC,EAASt3B,MAAQu3B,EAAOv3B,KAAOs3B,EAASt3B,MAAQ23B,EAE1D78B,EAAWtc,OAAQ,CACnB,MAAMo5C,EAAwBtH,EAAKuH,cAAgB5sD,EAAOuQ,aACpDs8C,EAAsBxH,EAAKyH,YAAc9sD,EAAOuQ,aAEhDw8C,EAA8C,IADpBF,EAAcF,GAExCn5C,EAAqBjK,KAAKuC,IAAIihD,EAAmBl9B,EAAWrc,YAC7C,MAAjB6xC,EAAK2H,UAAqB3H,EAAK0G,uBAC3BH,EAAgBe,EAAgBn5C,IAChCq3C,GAAiB,EACjBI,EAAsB,IAAO,GAAOW,EAAgBe,GAAiBn5C,IAErEw4C,EAAcW,EAAgBn5C,IAC9Bs3C,GAAe,EACfI,EAAoB,IAAO,GAAOc,EAAcW,GAAiBn5C,KAGpD,MAAjB6xC,EAAK4H,UAAqB5H,EAAK6H,qBAC/B5C,EAAejF,EAAK4H,SAASvvB,KAAK,GAAG3I,KACjC83B,EAAcjB,EAAgBp4C,IAC9Bu3C,GAAiB,EACjBI,EAAsB,IAAO,GAAO0B,EAAcjB,GAAiBp4C,IAEnEq5C,EAAcb,EAAcx4C,IAC5Bw3C,GAAe,EACfI,EAAoB,IAAO,GAAOyB,EAAcb,GAAex4C,IAG1E,CACJ,CAED,IAAIi4C,EAA+C,EAC/C0B,GAAwB,EAC5B,IAAK,IAAIxb,EAAwB,EAAGA,GAAiBzlB,EAAW8b,cAAe2J,IAAiB,CAC5F,IAAIH,EACA4b,EACAt8B,EACJ,GAAI6gB,GAAiBzlB,EAAW8b,cAAe,CAC3C,GAAImlB,EAAoC,MAExC3b,EAAmBxxC,EAAOua,4BAA4BnX,WAAuB,WAC7EgqD,EAAc,EACdt8B,EAAW9wB,EAAO4W,UAAUxT,WAAW,YAC1C,KAAM,CACH,IAAImuC,EAAqCrlB,EAAWtV,UAAU+6B,GAC9DH,EAAmBxxC,EAAOua,4BAA4Bg3B,EAAiB1gB,QACvEu8B,EAAc7b,EAAiBruC,MAC/B4tB,EAAW9wB,EAAO4W,UAAU26B,EAAiBzgB,UACH,GAAtCA,EAASnd,OAA+Bw5C,GAAe,EAC9D,CACD,GAAsF,MAAjC3b,EAAiBh3B,aAAsB,CACxF,MAAMA,EAAuBg3B,EAAiBh3B,aAAe4yC,EAC7D,IAAIC,EAAwBvD,GAAiBwD,gBAAgBx8B,EAAUi5B,EAAkBmC,EAAe/B,GACpGoD,EAAsBzD,GAAiBwD,gBAAgBx8B,EAAUk5B,EAAgBmC,EAAa/B,GAElG,GAAIS,EAAgB,CAEhBwC,IADsBvD,GAAiBwD,gBAAgBx8B,EAAU05B,EAAsB0B,EAAe7B,GAC5EgD,GAAiBpC,CAC9C,CACD,GAAIH,EAAc,CAEdyC,IADsBzD,GAAiBwD,gBAAgBx8B,EAAU25B,EAAoB0B,EAAa9B,GAC1EkD,GAAerC,CAC1C,CACD,GAAIH,EAAgB,CAEhBsC,IADsBvD,GAAiBwD,gBAAgBx8B,EAAU,EAAKo7B,EAAe5B,GAC3D+C,GAAiBlC,CAC9C,CACD,GAAIH,EAAc,CAEduC,IADsBzD,GAAiBwD,gBAAgBx8B,EAAU,EAAKq7B,EAAa7B,GAC3DiD,GAAenC,CAC1C,CAMD,GAJA1sD,KAAK2sD,eAAe7wC,IAAiB6yC,EACrC3uD,KAAK4sD,aAAa9wC,IAAiB+yC,EACnC7uD,KAAK6sD,EAAyB7sD,KAAK8sD,MAA4BhxC,EAE3Dg3B,EAAiB72B,SAAU,CAC3B,MAAM6yC,EAAuF,MAAjCthC,EAAWuhC,mBAA8BvhC,EAAWuhC,mBAAqBvhC,EAAW+E,WAC5Iu8B,EAAe5oB,kBAAoBwoB,GAA6D,GAA9CI,EAAe7oB,cAAcyoB,GAAaz5C,OAC5F83C,EAAuCliD,KAAKiM,IAAIi2C,EAAsC3B,GAAiB4D,wCAAwC58B,IAEtJ,CACJ,CACJ,CAEDpyB,KAAKqrD,iBAAmBA,EACxBrrD,KAAKsrD,eAAiBA,EACtBtrD,KAAKurD,eAAiBA,EACtBvrD,KAAKwrD,aAAeA,EACpBxrD,KAAK8rD,qBAAuBA,EAC5B9rD,KAAK+rD,mBAAqBA,EAC1B/rD,KAAKgsD,mBAAqBA,EAC1BhsD,KAAKisD,iBAAmBA,EACxBjsD,KAAK2rD,aAAeA,EACpB3rD,KAAK4rD,aAAeA,EACpB5rD,KAAKyrD,cAAgBA,EACrBzrD,KAAK0rD,YAAcA,EACnB1rD,KAAKmsD,eAAiBA,EACtBnsD,KAAKosD,aAAeA,EACpBpsD,KAAKqsD,eAAiBA,EACtBrsD,KAAKssD,aAAeA,EACpBtsD,KAAKusD,oBAAsBA,EAC3BvsD,KAAKwsD,kBAAoBA,EACzBxsD,KAAKysD,oBAAsBA,EAC3BzsD,KAAK0sD,kBAAoBA,EACzB1sD,KAAK+sD,qCAAuCA,C,CAGzC,cAAAkC,GACH,IAAK,IAAIhc,EAAwB,EAAGA,EAAgBjzC,KAAK8sD,GAAwB7Z,IAAiB,CAC9F,MAAMn3B,EAAuB9b,KAAK6sD,EAAyB5Z,GAC3DjzC,KAAK2sD,eAAe7wC,GAAgB,EACpC9b,KAAK4sD,aAAa9wC,GAAgB,CACrC,CACD9b,KAAK8sD,GAAyB,C,CAG3B,sBAAO8B,CAAgBx8B,EAAoBuM,EAAcuwB,EAAeC,GAC3E,OAAQ/8B,EAASnd,MACb,KAA0B,EAAE,OAAO+tB,GAAMosB,qBAAqBD,GAC9D,OAAwB,OAAO,EAC/B,OAAyB,OAAO,GAAO,EAAMxwB,EAAOvM,EAASja,OAC7D,OAAyB,OAAO,EAAM,GAAO,EAAMwmB,EAAOvM,EAASja,OACnE,KAAyB,EAAE,MAAO,GAAyD,GAAnDtN,KAAK+C,IAAY,EAARshD,EAAcrkD,KAAK8C,GAAKykB,EAASja,OAClF,KAA0B,EAAE,MAAO,IAA0D,IAAnDtN,KAAK+C,IAAY,EAARshD,EAAcrkD,KAAK8C,GAAKykB,EAASja,OACpF,OAAyB,OAAOtN,KAAKiM,IAAI,EAAK,EAAa,GAAP6nB,GACpD,OAAyB,MAAM0wB,EAAiB,IAAOxkD,KAAKiB,KAAKsmB,EAASja,OAAQ,OAAOwmB,EAAO0wB,EAAS1wB,EAAO0wB,EAAS,GAAO,GAAO1wB,EAAO0wB,GAAUj9B,EAASja,OACjK,OAAyB,OAAOtN,KAAKoB,IAAI,GAAImmB,EAASja,MAAQwmB,GAC9D,OACI,IAAIpO,EAAO,GAAyC,GAAnC1lB,KAAK+C,IAAIshD,EAAQ98B,EAASja,OAG3C,OAFAoY,EAAO,GAAO,EAAMoO,GAAQvM,EAASja,MAASoY,GAAQ,IAAM6B,EAASja,SACrEoY,EAAOA,EAAO,EAAMA,EAAO,EACpBA,EACX,QAA0B,CACtB,IAAI++B,EAAO,EAAO3wB,GAAQ,GAAKvM,EAASja,OAExC,OADAm3C,EAAMA,EAAM,EAAMA,EAAM,EACjBA,CACV,CACD,QAAwB,CACpB,IAAIA,EAAO3wB,GAAQ,GAAKvM,EAASja,OAEjC,OADAm3C,EAAMA,EAAM,EAAMA,EAAM,EACjBA,CACV,CACD,QAAS,MAAM,IAAIntD,MAAM,wC,CAK1B,8CAAO6sD,CAAwC58B,GAKlD,OAAuC,GAAnCA,EAASnd,KAAmC,KAAO,KAAQmd,EAASja,MACjC,GAAnCia,EAASnd,KAAmC,EAAM,IAAOmd,EAASja,MAC/D,C,EAIf,MAAMo3C,GAiFF,WAAAxvD,GA/EgBC,KAAA++B,QAAoBv8B,MAAMlB,EAAO8V,aAAa,GAAGo4C,KAAK,GAC/DxvD,KAAUqO,WAAW,EACrBrO,KAASyvD,UAAW,EACpBzvD,KAAY0vD,aAAkB,KAC9B1vD,KAAIogC,KAAgB,KACpBpgC,KAAQsuD,SAAgB,KACxBtuD,KAAQuuD,SAAgB,KACxBvuD,KAAkB2vD,mBAAW,EAC7B3vD,KAAkB4vD,mBAAW,EAC7B5vD,KAAgB6vD,kBAAY,EAC5B7vD,KAAWotD,aAAY,EACvBptD,KAAY8vD,cAAY,EACxB9vD,KAAe0tD,iBAAY,EAC3B1tD,KAAoBqtD,sBAAY,EAChCrtD,KAAkBwuD,oBAAY,EAC9BxuD,KAAakuD,cAAW,EACxBluD,KAAWouD,YAAW,EACtBpuD,KAAkB+vD,mBAAW,EAC7B/vD,KAAoBgwD,qBAAW,EAC/BhwD,KAAYiwD,aAAW,EACvBjwD,KAAWkwD,YAAW,EACtBlwD,KAAkBmwD,mBAAW,EAC7BnwD,KAAgBowD,iBAAW,EAClBpwD,KAAMqwD,OAAa,GACnBrwD,KAAaqc,cAAmB,GAChCrc,KAAWsnD,YAAa,GAE7BtnD,KAAUswD,WAAa,GACvBtwD,KAAmBuwD,oBAAa,GAChCvwD,KAAiBwwD,kBAAa,GAC9BxwD,KAA2BywD,4BAAa,GAEnCzwD,KAAgBwnD,iBAAa,GACtCxnD,KAAUmE,WAAW,EACrBnE,KAAe0wD,gBAAW,EACjB1wD,KAAmB2wD,oBAAa,GAChC3wD,KAAwB4wD,yBAAa,GACrC5wD,KAAA6wD,qBAA6CruD,MAAMlB,EAAOgW,yBAAyBk4C,KAAK,MACjGxvD,KAAW8wD,YAAkB,KAC7B9wD,KAAe+wD,gBAAkB,KACjC/wD,KAAUmL,WAAW,EACrBnL,KAAegxD,gBAAW,EAC1BhxD,KAAakqC,cAAW,EACxBlqC,KAAgB+pC,iBAAW,EAC9B/pC,KAAqBixD,sBAAW,EAChCjxD,KAAqBkxD,sBAAa,GAClClxD,KAAaiqC,cAAW,EACxBjqC,KAAkBmxD,mBAAW,EAC7BnxD,KAAmBoxD,oBAAW,EAC9BpxD,KAAwBqxD,yBAAW,EACnCrxD,KAAiBsxD,kBAAwB,KACzCtxD,KAAkBuxD,oBAAY,EAC9BvxD,KAAsBwxD,uBAAkB,KAC5BxxD,KAAayxD,cAAmB,GAEhCzxD,KAAW0xD,YAA0B,GAC9C1xD,KAAe2xD,gBAAW,EAC1B3xD,KAAuB4xD,wBAAW,EAClC5xD,KAAuB6xD,wBAAW,EAElC7xD,KAA6B8xD,8BAAW,EAC/B9xD,KAAe+xD,gBAAa,GACrC/xD,KAAYgyD,aAAW,EACvBhyD,KAAaiyD,cAAW,EACxBjyD,KAAkBkyD,mBAAW,EAC7BlyD,KAAkBmyD,mBAAW,EAC7BnyD,KAAkBoyD,mBAAW,EAC7BpyD,KAAkBqyD,mBAAW,EAC7BryD,KAAgBsyD,iBAAW,EAC3BtyD,KAAcuyD,eAAW,EACzBvyD,KAAgBwyD,iBAAW,EAC3BxyD,KAAiByyD,kBAAW,EAC5BzyD,KAAe0yD,gBAAW,EAC1B1yD,KAAoB2yD,qBAAW,EAC/B3yD,KAAoB4yD,qBAAW,EAC/B5yD,KAAY6yD,cAAY,EAEf7yD,KAAA8yD,iBAAqC,IAAI1H,GAGrDprD,KAAKqgC,O,CAGF,KAAAA,GACHrgC,KAAKkwD,YAAc,EACnB,IAAK,IAAI3lD,EAAY,EAAGA,EAAIjJ,EAAOgW,wBAAyB/M,IACxDvK,KAAKqwD,OAAO9lD,GAAK,EAEbvK,KAAKswD,WAAW/lD,GAAK,EACrBvK,KAAKuwD,oBAAoBhmD,GAAK,EAC9BvK,KAAKwwD,kBAAkBjmD,GAAK,EAC5BvK,KAAKywD,4BAA4BlmD,GAAK,EAE1CvK,KAAKqc,cAAc9R,GAAKjJ,EAAO+a,cAAc,GAC7Crc,KAAK+xD,gBAAgBxnD,GAAK,EAC1BvK,KAAK6wD,qBAAqBtmD,GAAK,KAEnC,IAAK,IAAIA,EAAY,EAAGA,EAAIvK,KAAK2xD,gBAAiBpnD,IAC9CvK,KAAK0xD,YAAYnnD,GAAGwwB,cAExB/6B,KAAK2xD,gBAAkB,EACvB3xD,KAAK4xD,wBAA0B,EAC/B5xD,KAAK6xD,wBAA0B,EAC/B7xD,KAAKgwD,qBAAuB,EAC5BhwD,KAAKuxD,oBAAsB,EAC3B,IAAK,MAAMwB,KAAgB/yD,KAAKyxD,cAC5BsB,EAAa1yB,QAEjBrgC,KAAK8yD,iBAAiBzyB,QACtBrgC,KAAK8wD,YAAc,KACnB9wD,KAAK+wD,gBAAkB,KACvB/wD,KAAKwxD,uBAAyB,KAC9BxxD,KAAK0vD,aAAe,I,EAI5B,MAAMsD,GAqIF,WAAAjzD,GAlIOC,KAAKizD,OAAY,EACjBjzD,KAAQkzD,UAAY,EACpBlzD,KAAoBmzD,sBAAY,EAChCnzD,KAAkBozD,oBAAY,EAC9BpzD,KAAuBqzD,yBAAY,EACnCrzD,KAAoBszD,qBAAW,EAC/BtzD,KAAcuzD,eAAW,EAChBvzD,KAAAwzD,YAA2B,IAAIn+B,GAC/Br1B,KAAAyzD,eAA8B,IAAIp+B,GAClCr1B,KAAA0zD,cAA6B,IAAIr+B,GACjCr1B,KAAA2zD,eAA8B,IAAIt+B,GAE3Cr1B,KAAAiV,KAA2C,EAC3CjV,KAAW4zD,YAAoB,KAC/B5zD,KAAIqK,KAAwB,KAEpBrK,KAA2B+0B,6BAAG,EAC9B/0B,KAAiBg1B,kBAAG,EACpBh1B,KAAei1B,gBAAG,EAClBj1B,KAAgBk1B,iBAAG,EACnBl1B,KAAqBm1B,uBAAG,EACxBn1B,KAAmBo1B,oBAAG,EAE9Bp1B,KAAoB6zD,qBAAW,EAC/B7zD,KAAMsxB,OAAkB,KACxBtxB,KAAYypC,aAAW,EACvBzpC,KAAY0pC,aAAW,EACvB1pC,KAAY2pC,aAAW,EACvB3pC,KAAgB4pC,iBAAW,IAC3B5pC,KAAU6pC,WAAW,EACrB7pC,KAAKqxB,MAAiB,KACtBrxB,KAAO+O,QAAW,EAElB/O,KAAW8zD,YAAW,EACtB9zD,KAAO80B,SAAY,EAEnB90B,KAAc+zD,eAAW,EACzB/zD,KAAmBg0D,oBAAW,EAC9Bh0D,KAASi0D,UAAW,EACpBj0D,KAAck0D,eAAW,EACzBl0D,KAAcm0D,eAAW,EACzBn0D,KAAmBo0D,oBAAW,EAE9Bp0D,KAAU+yB,WAAW,EACrB/yB,KAAeq0D,gBAAW,EAC1Br0D,KAAes0D,gBAAW,EAC1Bt0D,KAAoBu0D,qBAAW,EAC/Bv0D,KAA0Bw0D,2BAAW,EACrCx0D,KAA0By0D,2BAAW,EACrCz0D,KAA0B00D,2BAAW,EACrC10D,KAAmB20D,oBAAW,EAC9B30D,KAAoB40D,qBAAW,EAE/B50D,KAAmB60D,oBAAW,EAC9B70D,KAAuB80D,wBAAW,EAClC90D,KAAe+0D,gBAAW,EAC1B/0D,KAAoBg1D,qBAAW,EAC/Bh1D,KAAyBi1D,0BAAW,EACpCj1D,KAAek1D,gBAAW,EAC1Bl1D,KAAoBm1D,qBAAW,EAC/Bn1D,KAAmBo1D,oBAAW,EAC9Bp1D,KAAwBq1D,yBAAW,EAE1Br1D,KAASs1D,UAA0B,GAC5Ct1D,KAAau1D,cAAW,EACxBv1D,KAAqBw1D,sBAAW,EAChCx1D,KAAqBy1D,sBAAW,EAEhCz1D,KAAgB01D,iBAAwB,KACxC11D,KAAe21D,gBAAW,EAC1B31D,KAAc41D,eAAW,EACzB51D,KAAc61D,eAAW,EACzB71D,KAAmB81D,oBAAW,EAC9B91D,KAAmB+1D,oBAAW,EAC9B/1D,KAAcg2D,eAAW,EACzBh2D,KAAci2D,eAAW,EACzBj2D,KAAmBk2D,oBAAW,EAC9Bl2D,KAAmBm2D,oBAAW,EAE9Bn2D,KAAgBo2D,iBAAwB,KACxCp2D,KAAgBq2D,iBAAwB,KACxCr2D,KAAoBs2D,sBAAY,EAChCt2D,KAAcu2D,eAAW,EACzBv2D,KAAWw2D,YAAW,EACtBx2D,KAAey2D,gBAAW,EAC1Bz2D,KAAoB02D,qBAAW,EAC/B12D,KAAkB22D,mBAAW,EAC7B32D,KAAuB42D,wBAAW,EAElC52D,KAAc62D,eAAwB,KACtC72D,KAAc82D,eAAwB,KACtC92D,KAAkB+2D,oBAAY,EAC9B/2D,KAAYg3D,aAAW,EACvBh3D,KAAoBi3D,qBAAW,EAC/Bj3D,KAAkBk3D,mBAAkB,KACpCl3D,KAAoBm3D,qBAAW,EAC/Bn3D,KAAyBo3D,0BAAW,EACpCp3D,KAAQq3D,SAAW,EACnBr3D,KAAas3D,cAAW,EACxBt3D,KAAWu3D,YAAW,EACtBv3D,KAAWw3D,YAAW,EACtBx3D,KAAWy3D,YAAW,EACtBz3D,KAAgB03D,iBAAW,EAC3B13D,KAAgB23D,iBAAW,EAC3B33D,KAAmB43D,oBAAW,EAC9B53D,KAAmB63D,oBAAW,EAE9B73D,KAAe83D,gBAAwB,KACvC93D,KAAoB+3D,sBAAY,EAChC/3D,KAAcg4D,eAAW,EACzBh4D,KAAUi4D,WAAW,EACrBj4D,KAAek4D,gBAAW,EAC1Bl4D,KAAam4D,cAAW,EACxBn4D,KAAao4D,cAAW,EACxBp4D,KAAaq4D,cAAW,EACxBr4D,KAAkBs4D,mBAAW,EAC7Bt4D,KAAkBu4D,mBAAW,EAC7Bv4D,KAAkBw4D,mBAAW,EAC7Bx4D,KAAkBy4D,mBAAW,EAC7Bz4D,KAAqB04D,sBAAW,EAChC14D,KAAqB24D,sBAAW,EAChC34D,KAAqB44D,sBAAW,EAChC54D,KAAqB64D,sBAAW,EAIvB74D,KAAAirC,aAAkC,IAAI9H,GACtCnjC,KAAA4qC,cAAoC,IAAI9G,GACxC9jC,KAAoB8qC,qBAAwB,GAGxD,IAAK,IAAIvgC,EAAY,EAAGA,EAAIjJ,EAAO0Y,UAAWzP,IAC1CvK,KAAK8qC,qBAAqBvgC,GAAK,IAAI44B,E,CAKpC,wBAAA21B,CAAyBpoB,EAAcljB,EAAwBurC,GAclE,GAbIxpD,EAAsBie,EAAWze,WACJ,MAAzB/O,KAAK01D,kBAA4B11D,KAAK01D,iBAAiB7yD,OAAS6tC,EAAMsoB,0BACtEh5D,KAAK01D,iBAAmB,IAAIhrD,aAAagmC,EAAMsoB,yBAGnDxpD,EAAqBge,EAAWze,YACH,MAAzB/O,KAAKo2D,kBAA4Bp2D,KAAKo2D,iBAAiBvzD,OAAS6tC,EAAMuoB,yBACtEj5D,KAAKo2D,iBAAmB,IAAI1rD,aAAagmC,EAAMuoB,yBAEtB,MAAzBj5D,KAAKq2D,kBAA4Br2D,KAAKq2D,iBAAiBxzD,OAAS6tC,EAAMuoB,yBACtEj5D,KAAKq2D,iBAAmB,IAAI3rD,aAAagmC,EAAMuoB,yBAGnDxpD,EAAmB+d,EAAWze,SAAU,CAExC,MAAMmqD,EAA6BruD,KAAKiM,IAAIxV,EAAOqP,gBAAkB,EAAI6c,EAAW4c,UAAY,GAE1F+uB,EAA4D,EAD1Bn2B,GAAMC,kBAAkBi2B,EAAqB53D,EAAOsP,mBAAqBmoD,GAGjH,GAA2B,MAAvB/4D,KAAK62D,gBAAiD,MAAvB72D,KAAK82D,eACpC92D,KAAK62D,eAAiB,IAAInsD,aAAayuD,GACvCn5D,KAAK82D,eAAiB,IAAIpsD,aAAayuD,QACpC,GAAIn5D,KAAK62D,eAAeh0D,OAASs2D,GAA2Bn5D,KAAK82D,eAAej0D,OAASs2D,EAAyB,CAIrH,MAAMC,EAA8B,IAAI1uD,aAAayuD,GAC/CE,EAA8B,IAAI3uD,aAAayuD,GAC/CG,EAAkBt5D,KAAK62D,eAAeh0D,OAAS,EAErD,IAAK,IAAI0H,EAAI,EAAGA,EAAIvK,KAAK62D,eAAeh0D,OAAQ0H,IAC5C6uD,EAAc7uD,GAAKvK,KAAK62D,eAAgB72D,KAAKg3D,aAAezsD,EAAK+uD,GACjED,EAAc9uD,GAAKvK,KAAK62D,eAAgB72D,KAAKg3D,aAAezsD,EAAK+uD,GAGrEt5D,KAAKg3D,aAAeh3D,KAAK62D,eAAeh0D,OACxC7C,KAAK62D,eAAiBuC,EACtBp5D,KAAK82D,eAAiBuC,CACzB,CACJ,CACG3pD,EAAqB8d,EAAWze,UAEJ,MAAxB/O,KAAK83D,kBACL93D,KAAK83D,gBAAkB,IAAIptD,aAAapJ,EAAO6P,uB,CAKpD,UAAAooD,GACHv5D,KAAK60D,oBAAsB,EAC3B70D,KAAK80D,wBAA0B,EAC/B90D,KAAK+0D,gBAAkB,EACvB,IAAK,IAAIxqD,EAAY,EAAGA,EAAIvK,KAAKu1D,cAAehrD,IAC5CvK,KAAKs1D,UAAU/qD,GAAGwwB,cAWtB,GATA/6B,KAAKu1D,cAAgB,EACrBv1D,KAAKw1D,sBAAwB,EAC7Bx1D,KAAKy1D,sBAAwB,EAC7Bz1D,KAAKw0D,2BAA6B,EAClCx0D,KAAKy0D,2BAA6B,EAClCz0D,KAAK00D,2BAA6B,EAClC10D,KAAK20D,oBAAsB,EAC3B30D,KAAK40D,qBAAuB,EAC5B50D,KAAK21D,gBAAkB,EACM,MAAzB31D,KAAK01D,iBAA0B,IAAK,IAAInrD,EAAY,EAAGA,EAAIvK,KAAK01D,iBAAiB7yD,OAAQ0H,IAAKvK,KAAK01D,iBAAiBnrD,GAAK,EAC7HvK,KAAKk3D,mBAAqB,KAC1Bl3D,KAAK03D,iBAAmB,EACxB13D,KAAK23D,iBAAmB,EACxB33D,KAAK43D,oBAAsB,EAC3B53D,KAAK63D,oBAAsB,EAC3B73D,KAAKs4D,mBAAqB,EAC1Bt4D,KAAKu4D,mBAAqB,EAC1Bv4D,KAAKw4D,mBAAqB,EAC1Bx4D,KAAKy4D,mBAAqB,EAC1Bz4D,KAAK04D,sBAAwB,EAC7B14D,KAAK24D,sBAAwB,EAC7B34D,KAAK44D,sBAAwB,EAC7B54D,KAAK64D,sBAAwB,EAE7B74D,KAAK8zD,YAAc,EACnB9zD,KAAK80B,SAAU,EAEf90B,KAAKizD,OAAQ,EACbjzD,KAAKozD,oBAAqB,EAC1BpzD,KAAKqzD,yBAA0B,EAC/BrzD,KAAKszD,qBAAuB,EAC5BtzD,KAAKuzD,eAAiB,C,CAGnB,eAAAiG,GAGH,GAFAx5D,KAAKu5D,aAEDv5D,KAAKs2D,qBAAsB,CAC3B,IAAK,IAAI/rD,EAAY,EAAGA,EAAIvK,KAAKo2D,iBAAkBvzD,OAAQ0H,IAAKvK,KAAKo2D,iBAAkB7rD,GAAK,EAC5F,IAAK,IAAIA,EAAY,EAAGA,EAAIvK,KAAKq2D,iBAAkBxzD,OAAQ0H,IAAKvK,KAAKq2D,iBAAkB9rD,GAAK,CAC/F,CACD,GAAIvK,KAAK+2D,mBAAoB,CACzB,IAAK,IAAIxsD,EAAY,EAAGA,EAAIvK,KAAK62D,eAAgBh0D,OAAQ0H,IAAKvK,KAAK62D,eAAgBtsD,GAAK,EACxF,IAAK,IAAIA,EAAY,EAAGA,EAAIvK,KAAK82D,eAAgBj0D,OAAQ0H,IAAKvK,KAAK82D,eAAgBvsD,GAAK,CAC3F,CACD,GAAIvK,KAAK+3D,qBACL,IAAK,IAAIxtD,EAAY,EAAGA,EAAIvK,KAAK83D,gBAAiBj1D,OAAQ0H,IAAKvK,KAAK83D,gBAAiBvtD,GAAK,EAG9FvK,KAAKw2D,YAAc,C,CAGhB,OAAAiD,CAAQ/oB,EAAcljB,EAAwBurC,EAAwBlS,EAA+BF,EAAmBlR,EAAsBgC,GACjJz3C,KAAKkzD,UAAW,EAEhBlzD,KAAKiV,KAAOuY,EAAWvY,KACvBjV,KAAK4zD,YAAc5wB,GAAM02B,2BAA2BlsC,GACpDxtB,KAAKsxB,OAAShwB,EAAOiU,QAAQiY,EAAW8D,QACxCtxB,KAAKqxB,MAAQ7D,EAAWye,WACxBjsC,KAAK6zD,qBAAuBvyD,EAAOkK,WAAWgiB,EAAWqb,WAAWv1B,gBACpEtT,KAAK+O,QAAUye,EAAWze,QAE1B/O,KAAK80B,QAAUtH,EAAWsH,QAC1B90B,KAAK8zD,YAAc,EAEnB9zD,KAAK84D,yBAAyBpoB,EAAOljB,EAAYurC,GAEjD,MAAM9R,EAA2BvW,EAAMuW,iBACvCjnD,KAAK25D,YAAYnsC,EAAYy5B,GAW7B,MAAM2S,EAA0BvqD,EAAyBrP,KAAK+O,SACxD8qD,EAA0BvqD,EAAyBtP,KAAK+O,SACxD+qD,EAAuBvqD,EAAsBvP,KAAK+O,SAClDgrD,EAAsBvqD,EAAqBxP,KAAK+O,SAChDirD,EAAoBvqD,EAAmBzP,KAAK+O,SAC5CkrD,EAAsBvqD,EAAqB1P,KAAK+O,SAEtD,GAAI6qD,EAAgB,CAChB,IAAIM,EAA6B1sC,EAAWuF,WACxConC,EAA2B3sC,EAAWuF,WAGtC2d,EAAM0pB,YAAY94D,EAAOub,WAAWnY,WAAuB,WAAEF,MAAOixC,EAAcgC,KAClFyiB,EAAqBxpB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAuB,WAAEF,MAAOixC,EAAcgC,GAAiB,GACxH0iB,EAAmBzpB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAuB,WAAEF,MAAOixC,EAAcgC,GAAiB,IAG1H,MAAM6iB,EAAwBzvD,KAAKuC,IAAI,EAAgE8sD,GAAsB54D,EAAO+Z,gBAAkB,IAChJk/C,EAAsB1vD,KAAKuC,IAAI,EAAgE+sD,GAAoB74D,EAAO+Z,gBAAkB,IAC5Im/C,EAA0B3vD,KAAKoB,IAAI,EAAM,MAASpB,KAAKoB,IAAI,GAAMquD,GAAyB,GAAO,GAAM,GACvGG,EAAwB5vD,KAAKoB,IAAI,EAAM,MAASpB,KAAKoB,IAAI,GAAMsuD,GAAuB,GAAO,GAAM,GACnGG,GAAgC,EAAM,EAAMJ,GAAyBh5D,EAAOuR,qBAC5E8nD,GAA8B,EAAM,EAAMJ,GAAuBj5D,EAAOuR,qBAC9E7S,KAAK+yB,WAAaynC,EAClBx6D,KAAKq0D,iBAAmBoG,EAAgBD,GAAmB3T,EAC3D7mD,KAAKs0D,gBAAkBoG,EACvB16D,KAAKu0D,sBAAwBoG,EAAqBD,GAAwB7T,CAC7E,CAED,GAAIgT,EAAgB,CAChB,IAAIe,EAA2BptC,EAAW2c,eACtC0wB,EAAyBrtC,EAAW2c,eAGpCuG,EAAM0pB,YAAY94D,EAAOub,WAAWnY,WAAW,cAAcF,MAAOixC,EAAcgC,KAClFmjB,EAAmBlqB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAW,cAAcF,MAAOixC,EAAcgC,GAAiB,GACtHojB,EAAiBnqB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAW,cAAcF,MAAOixC,EAAcgC,GAAiB,IAGxH,IAAIqjB,EAAmCttC,EAAWsF,uBAC9CioC,EAAiCvtC,EAAWsF,uBAG5C4d,EAAM0pB,YAAY94D,EAAOub,WAAWnY,WAAW,aAAaF,MAAOixC,EAAcgC,KACjFqjB,EAA2BpqB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAW,aAAaF,MAAOixC,EAAcgC,GAAiB,GAC7HsjB,EAAyBrqB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAW,aAAaF,MAAOixC,EAAcgC,GAAiB,IAG/H,MAAMpnC,EAAoB/O,EAAO6O,KAAKugC,EAAM5pB,KAAM3T,KAAK9C,UAAa/O,EAAOyY,iBAAmB22B,EAAM5pB,KAAMoW,OACpG89B,EAAoBpyB,GAAW8J,mBAAmBriC,EAAY,IAAMxF,KAAKoB,IAAI,GAAM3K,EAAOka,oBAAsB,EAAIo/C,GAAoBt5D,EAAOma,sBAC/Iw/C,EAAkBryB,GAAW8J,mBAAmBriC,EAAY,IAAMxF,KAAKoB,IAAI,GAAM3K,EAAOka,oBAAsB,EAAIq/C,GAAkBv5D,EAAOma,sBAC3I4rC,EAA0Bx8C,KAAKuC,IAAI,EAAK4tD,EAAY/T,GACpDQ,EAAwB58C,KAAKuC,IAAI,EAAK6tD,EAAUhU,GACtDjnD,KAAKg1D,qBAAuB3N,EAC5BrnD,KAAKi1D,0BAA4BpqD,KAAKoB,IAAIw7C,EAAgBJ,EAAiB,EAAMR,GAEjF,MAAMqU,EAAqB,EAAM55D,EAAOwR,qBAAuBjI,KAAKoB,IAAI,EAAK,EAAMpB,KAAKoB,IAAI,EAA2E,IAArE3K,EAAOoa,4BAA8B,EAAIo/C,KACrIK,EAAmB,EAAM75D,EAAOwR,qBAAuBjI,KAAKoB,IAAI,EAAK,EAAMpB,KAAKoB,IAAI,EAAyE,IAAnE3K,EAAOoa,4BAA8B,EAAIq/C,KACzI/6D,KAAKk1D,gBAAkBgG,EACvBl7D,KAAKm1D,qBAAuBtqD,KAAKoB,IAAIkvD,EAAWD,EAAY,EAAMrU,GAElE,MAAMuU,EAAyB,EAAM95D,EAAOwR,qBAAuBjI,KAAKoB,IAAI,IAAK3K,EAAOoa,4BAA8B,EAAIo/C,GACpHO,EAAuB,EAAM/5D,EAAOwR,qBAAuBjI,KAAKoB,IAAI,IAAK3K,EAAOoa,4BAA8B,EAAIq/C,GACxH/6D,KAAKo1D,oBAAsBgG,EAC3Bp7D,KAAKq1D,yBAA2BxqD,KAAKoB,IAAIovD,EAAeD,EAAgB,EAAMvU,EACjF,CAED,IAAIkN,EAAyB,EAC7B,GAAIvmC,EAAW8F,aAAc,CAEzB,MAAMgoC,EAAwC9tC,EAAW0D,SACvB,MAA9B1D,EAAW0b,aAAa,KACxB1b,EAAW0b,aAAa,GAAK,IAAIlD,IACrC,MAAMu1B,EAAsC/tC,EAAW0b,aAAa,GAGpE,IAkBIsyB,EAlBAC,EAA0BjuC,EAAWsb,kBACrC4yB,EAA0BluC,EAAWub,mBACrC4yB,EAAwBnuC,EAAWsb,kBACnC8yB,EAAwBpuC,EAAWub,mBAEnC8yB,GAAyB,EAe7B,GAbInrB,EAAM0pB,YAAY94D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAcgC,KACnFgkB,EAAkB/qB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAcgC,GAAiB,GACtHkkB,EAAgBjrB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAcgC,GAAiB,GACpHokB,GAAgB,GAEhBnrB,EAAM0pB,YAAY94D,EAAOub,WAAWnY,WAAW,gBAAgBF,MAAOixC,EAAcgC,KACpFikB,EAAkBhrB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAW,gBAAgBF,MAAOixC,EAAcgC,GAAiB,GACvHmkB,EAAgBlrB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAW,gBAAgBF,MAAOixC,EAAcgC,GAAiB,GACrHokB,GAAgB,GAKhBA,EAAe,CACfP,EAAsB9yB,8BAA8BizB,EAAiBC,GACrEH,EAAoB/yB,8BAA8BmzB,EAAeC,GAEjEJ,EAAaF,EAAsBr1B,cAAc,GACjD,IAAI61B,EAA+BP,EAAoBt1B,cAAc,GAErEu1B,EAAWj2B,eAAevC,GAAMslB,4BAA6BrB,EAAkB,EAAK,GACpF6U,EAASv2B,eAAevC,GAAM0lB,0BAA2BzB,EAAkB,EAAK,GAE5EjnD,KAAKs1D,UAAUzyD,OAAS,IAAG7C,KAAKs1D,UAAU,GAAK,IAAIl7B,IACvDp6B,KAAKs1D,UAAU,GAAGt6B,6BAA6BgI,GAAMslB,4BAA6BtlB,GAAM0lB,0BAA2B,EAAM7B,EAA4D,GAArC2U,EAAWvmD,KAE9J,MACGqmD,EAAsB9yB,8BAA8BizB,EAAiBC,GAAiB,GAEtFF,EAAaF,EAAsBr1B,cAAc,GAEjDu1B,EAAWj2B,eAAevC,GAAMslB,4BAA6BrB,EAAkB,EAAK,GAEhFjnD,KAAKs1D,UAAUzyD,OAAS,IAAG7C,KAAKs1D,UAAU,GAAK,IAAIl7B,IACvDp6B,KAAKs1D,UAAU,GAAGt6B,6BAA6BgI,GAAMslB,4BAA6BtlB,GAAMslB,4BAA6B,EAAMzB,EAA4D,GAArC2U,EAAWvmD,MAIjK8+C,GAAkByH,EAAW/1B,4BAE7BzlC,KAAKu1D,cAAgB,EACrBxB,EAAiBlpD,KAAKuC,IAAI,EAAK2mD,EAClC,KACI,CACD,MAAMgI,EAAmE,MAA/BvuC,EAAWwuC,iBAA4BxuC,EAAWwuC,iBAAmBxuC,EAAW0D,SAG1H,IAAK,IAAI3mB,EAAY,EAAGA,EAAIwxD,EAAiB71B,kBAAmB37B,IAAK,CAKjE,IAAIixD,EAAiCO,EAAiB91B,cAAc17B,GAChEuxD,EAA6D,MAA7BtuC,EAAWyuC,gBAAwE,MAA9CzuC,EAAWyuC,eAAeh2B,cAAc17B,GAAcijB,EAAWyuC,eAAeh2B,cAAc17B,GAAKwxD,EAAiB91B,cAAc17B,GAGvMixD,EAAWvmD,MAAQ6mD,EAAS7mD,OAC5BumD,EAAaM,GAGjBN,EAAWj2B,eAAevC,GAAMslB,4BAA6BrB,EAAoE,EAA6B,GAC9J6U,EAASv2B,eAAevC,GAAM0lB,0BAA2BzB,EAAoE,EAA6B,GACtJjnD,KAAKs1D,UAAUzyD,QAAU0H,IAAGvK,KAAKs1D,UAAU/qD,GAAK,IAAI6vB,IACxDp6B,KAAKs1D,UAAU/qD,GAAGywB,6BAA6BgI,GAAMslB,4BAA6BtlB,GAAM0lB,0BAA2B,EAAM7B,EAA4D,GAArC2U,EAAWvmD,MAC3J8+C,GAAkByH,EAAW/1B,2BAEhC,CACDzlC,KAAKu1D,cAAgBwG,EAAiB71B,kBACtC6tB,EAAiBlpD,KAAKuC,IAAI,EAAK2mD,EAClC,CAED,MAAMmI,EAA+Bl5B,GAAMm5B,6BAA6B3uC,EAAW6F,QACnFrzB,KAAKi0D,UAAYiI,EACjB,IAAIE,EAAuBF,EAG3B,GAAIxrB,EAAM0pB,YAAY94D,EAAOub,WAAWnY,WAAW,cAAcF,MAAOixC,EAAcgC,GAAkB,CAEpG,MAAM4kB,EAAmB3rB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAW,cAAcF,MAAOixC,EAAcgC,GAAiB,GACtH6kB,EAAiB5rB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAW,cAAcF,MAAOixC,EAAcgC,GAAiB,GAC1Hz3C,KAAKi0D,WAAeoI,GAAY,GAAOA,EAAW/6D,EAAOyU,YAAc,IAAMzU,EAAOyU,YAAc,GAAMitB,GAAMm5B,6BAA6BE,GAC3ID,GAAkBE,GAAU,GAAOA,EAASh7D,EAAOyU,YAAc,IAAMzU,EAAOyU,YAAc,GAAMitB,GAAMm5B,6BAA6BG,EACxI,CAGG5rB,EAAM0pB,YAAY94D,EAAOub,WAAWnY,WAAW,eAAeF,SAC9DxE,KAAKi0D,WAAcvjB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAW,eAAeF,WAAO+iB,OAAWA,GAAW,GAAU,IACxH60C,GAAiB1rB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAW,eAAeF,WAAO+iB,OAAWA,GAAW,GAAS,KAGzHvnB,KAAKk0D,gBAAkBkI,EAAep8D,KAAKi0D,WAAapN,EAExD,IAAI0V,EAA8BxI,EAC9ByI,EAA4BzI,EAC5B0I,EAA8B,EAC9BC,EAA4B,EAEhC,GAAI5C,EAAa,CAIb,IAAI6C,EAAsBnvC,EAAW0G,IACjC0oC,EAAoBpvC,EAAW0G,IAE/Bwc,EAAM0pB,YAAY94D,EAAOub,WAAWnY,WAAgB,IAAEF,MAAOixC,EAAcgC,KAC3EklB,EAAcjsB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAgB,IAAEF,MAAOixC,EAAcgC,GAAiB,GAC1GmlB,EAAYlsB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAgB,IAAEF,MAAOixC,EAAcgC,GAAiB,IAG5G,IAAIolB,EAAmBhyD,KAAKiM,KAAK,EAAKjM,KAAKuC,IAAI,GAAMuvD,EAAcr7D,EAAO2U,WAAa3U,EAAO2U,YAC1F6mD,EAAiBjyD,KAAKiM,KAAK,EAAKjM,KAAKuC,IAAI,GAAMwvD,EAAYt7D,EAAO2U,WAAa3U,EAAO2U,YAE1F,MAAM8mD,EAAmE,MAA5ClyD,KAAK+C,KAAK,EAAIivD,GAAYhyD,KAAK8C,GAAK,KAC3DqvD,EAAmE,MAA5CnyD,KAAK+C,KAAK,EAAIivD,GAAYhyD,KAAK8C,GAAK,KAC3DsvD,EAA+D,MAA1CpyD,KAAK+C,KAAK,EAAIkvD,GAAUjyD,KAAK8C,GAAK,KACvDuvD,EAA+D,MAA1CryD,KAAK+C,KAAK,EAAIkvD,GAAUjyD,KAAK8C,GAAK,KACvDwvD,EAA0BlW,EAAmB3lD,EAAO6U,mBAE1D,IAAIinD,EAA2B5vC,EAAW2G,SACtCkpC,EAAyB7vC,EAAW2G,SAEpCuc,EAAM0pB,YAAY94D,EAAOub,WAAWnY,WAAW,aAAaF,MAAOixC,EAAcgC,KACjF2lB,EAAmB1sB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAW,aAAaF,MAAOixC,EAAcgC,GAAiB,GACrH4lB,EAAiB3sB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAW,aAAaF,MAAOixC,EAAcgC,GAAiB,IAGvH,MAAM6lB,EAAqBT,EAAWO,EAAmBD,EAAkB,GACrEI,EAAmBT,EAASO,EAAiBF,EAAkB,GAC/DK,EAAsB3yD,KAAKiM,IAAI,EAAKwmD,GACpCG,EAAsB5yD,KAAKiM,IAAI,GAAMwmD,GACrCI,EAAoB7yD,KAAKiM,IAAI,EAAKymD,GAClCI,EAAoB9yD,KAAKiM,IAAI,GAAMymD,GAEzCv9D,KAAK41D,eAAiBmH,EACtB/8D,KAAK61D,eAAiBmH,EACtBh9D,KAAK81D,qBAAuBmH,EAAaF,GAAgBlW,EACzD7mD,KAAK+1D,qBAAuBmH,EAAaF,GAAgBnW,EACzD7mD,KAAKg2D,eAAiBh2D,KAAK21D,gBAAkB6H,EAAc9sB,EAAMsoB,uBACjEh5D,KAAKi2D,eAAiBj2D,KAAK21D,gBAAkB8H,EAAc/sB,EAAMsoB,uBACjEh5D,KAAKk2D,qBAAuBwH,EAAYF,GAAe3W,EACvD7mD,KAAKm2D,qBAAuBwH,EAAYF,GAAe5W,CAC1D,CAED,GAAIkT,EAAY,CAGZ,IAAI6D,EAAyBpwC,EAAWwF,OACpC6qC,EAAuBrwC,EAAWwF,OAElC0d,EAAM0pB,YAAY94D,EAAOub,WAAWnY,WAAmB,OAAEF,MAAOixC,EAAcgC,KAC9EmmB,EAAiBltB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAmB,OAAEF,MAAOixC,EAAcgC,GAAiB,GAChHomB,EAAentB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAmB,OAAEF,MAAOixC,EAAcgC,GAAiB,IAGlH,IAAIqmB,EAAsBjzD,KAAKuC,IAAI,EAA+BwwD,GAAkBt8D,EAAO8U,YAAc,IACrG2nD,EAAoBlzD,KAAKuC,IAAI,EAA+BywD,GAAgBv8D,EAAO8U,YAAc,IACrG0nD,EAA4B,GAAdA,EAAmD,GAA9BjzD,KAAKoB,IAAI6xD,EAAa,GACzDC,EAAwB,GAAZA,EAA+C,GAA5BlzD,KAAKoB,IAAI8xD,EAAW,GACnD,MAAMC,EAA0B,EAAMnzD,KAAKiB,KAAK,EAAMgyD,EAAcA,EAAc,GAC5EG,EAAwB,EAAMpzD,KAAKiB,KAAK,EAAMiyD,EAAYA,EAAY,GAC5E/9D,KAAKy2D,gBAAkBqH,EACvB99D,KAAK02D,sBAAwBqH,EAAYD,GAAejX,EACxD7mD,KAAK22D,mBAAqBqH,EAC1Bh+D,KAAK42D,yBAA2BqH,EAAwBD,GAA2BnX,CACtF,CAED,IAAIqX,EAAc,EACdC,EAAkC,EACtC,GAAInE,EAAU,CAGV,IAAIoE,EAA8B5wC,EAAWkH,YACzC2pC,EAA4B7wC,EAAWkH,YAEvCgc,EAAM0pB,YAAY94D,EAAOub,WAAWnY,WAAiB,KAAEF,MAAOixC,EAAcgC,KAC5E2mB,EAAsBvzD,KAAKiM,IAAK,EAAK45B,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAiB,KAAEF,MAAOixC,EAAcgC,GAAiB,IAClI4mB,EAAoBxzD,KAAKiM,IAAK,EAAK45B,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAiB,KAAEF,MAAOixC,EAAcgC,GAAiB,KAEpI,MAAM6mB,EAAqI,GAA7GzzD,KAAKuC,IAAI,EAAKvC,KAAKoB,IAAmCmyD,EAAsB98D,EAAOuP,iBAAkB,MAC7H0tD,EAAiI,GAA3G1zD,KAAKuC,IAAI,EAAKvC,KAAKoB,IAAmCoyD,EAAoB/8D,EAAOuP,iBAAkB,MAC/H7Q,KAAKq3D,SAAWiH,EAChBt+D,KAAKs3D,cAAgBzsD,KAAKiM,IAAI,GAAMynD,EAAcD,GAAiBzX,GACnEqX,EAAcrzD,KAAKiM,IAAIwnD,EAAeC,GAOtC,IAAIC,EAA4BhxC,EAAW4c,UACvCq0B,EAA0BjxC,EAAW4c,UACrCs0B,GAAuB,EAEvBhuB,EAAM0pB,YAAY94D,EAAOub,WAAWnY,WAAW,cAAcF,MAAOixC,EAAcgC,KAClF+mB,EAAoB9tB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAW,cAAcF,MAAOixC,EAAcgC,GAAiB,GACvHgnB,EAAkB/tB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAW,cAAcF,MAAOixC,EAAcgC,GAAiB,GACrHinB,GAAc,GAGlB,MAAMC,EAAkC9zD,KAAKkB,OAAOyyD,EAAoB,GAAKl9D,EAAOsP,mBAAqBmoD,GACnG6F,EAAgC/zD,KAAKkB,OAAO0yD,EAAkB,GAAKn9D,EAAOsP,mBAAqBmoD,GACtE,MAA3B/4D,KAAKk3D,oBAA+BwH,EAGpC1+D,KAAKi3D,qBAAuB0H,EAF5B3+D,KAAKi3D,qBAAuBj3D,KAAKk3D,mBAKrCl3D,KAAKk3D,mBAAqB0H,EAC1BT,EAAkF,IAAvDn+D,KAAKi3D,qBAAuBj3D,KAAKk3D,oBAA4BjQ,EAExFjnD,KAAKm3D,qBAAuB,EAC5Bn3D,KAAKo3D,0BAA4B,EAAMvQ,EAEvC,MAAMK,EAAuB,EAAMr8C,KAAK8C,GAAKrM,EAAOwP,YAAc4/B,EAAMuW,iBACxEjkB,GAAMslB,4BAA4BrwB,kBAAkBivB,EAAc5lD,EAAOyP,eACzE/Q,KAAKu3D,YAAcv0B,GAAMslB,4BAA4BhxB,EAAE,GACvDt3B,KAAKw3D,YAAcx0B,GAAMslB,4BAA4B/wB,EAAE,GACvDv3B,KAAKy3D,YAAcz0B,GAAMslB,4BAA4B/wB,EAAE,EAC1D,CAED,IAAIsnC,EAAgB,EACpB,GAAI5E,EAAY,CAIZ,IAAI6E,EAAyBtxC,EAAWgF,OACpCusC,EAAuBvxC,EAAWgF,OAGlCke,EAAM0pB,YAAY94D,EAAOub,WAAWnY,WAAmB,OAAEF,MAAOixC,EAAcgC,KAC9EqnB,EAAiBpuB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAmB,OAAEF,MAAOixC,EAAcgC,GAAiB,GAChHsnB,EAAeruB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAmB,OAAEF,MAAOixC,EAAcgC,GAAiB,IAG9G/G,EAAM0pB,YAAY94D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAcgC,KACnFqnB,IAAmBpuB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAW,eAAeF,WAAO+iB,OAAWA,GAAW,GAASjmB,EAAOub,WAAWnY,WAAW,eAAewY,mBAAqB5b,EAAO4P,YAC/L6tD,IAAiBruB,EAAM2pB,YAAY/4D,EAAOub,WAAWnY,WAAW,eAAeF,WAAO+iB,OAAWA,GAAW,GAAQjmB,EAAOub,WAAWnY,WAAW,eAAewY,mBAAqB5b,EAAO4P,aAGhM,MAAM8tD,EAAsH,KAAhGn0D,KAAKuC,IAAI,EAAKvC,KAAKoB,IAA8B6yD,EAAiBx9D,EAAO4P,YAAa,OAC5G+tD,EAAkH,KAA9Fp0D,KAAKuC,IAAI,EAAKvC,KAAKoB,IAA8B8yD,EAAez9D,EAAO4P,YAAa,OAE9GlR,KAAKi4D,WAAa+G,EAClBh/D,KAAKk4D,iBAAmB+G,EAAYD,GAAenY,EACnDgY,EAAgBh0D,KAAKiM,IAAIkoD,EAAaC,GAEtC,MAAM/X,EAAuB,EAAMr8C,KAAK8C,GAAKrM,EAAO0P,cAAgB0/B,EAAMuW,iBAC1EjkB,GAAMslB,4BAA4BrwB,kBAAkBivB,EAAc5lD,EAAO2P,iBACzEjR,KAAKm4D,cAAgBn1B,GAAMslB,4BAA4BhxB,EAAE,GACzDt3B,KAAKo4D,cAAgBp1B,GAAMslB,4BAA4B/wB,EAAE,GACzDv3B,KAAKq4D,cAAgBr1B,GAAMslB,4BAA4B/wB,EAAE,EAC5D,CAED,GAAIv3B,KAAKmzD,qBACLnzD,KAAKszD,qBAAuB,EAC5BtzD,KAAKuzD,eAAiB,EACtBvzD,KAAKozD,oBAAqB,OACvB,GAAKpzD,KAAKozD,mBA+CV,CAEHmJ,EAAsB,EACtBC,EAAoB,EACpBC,EAAsB,EACtBC,EAAoB,EAEpB,IAAIwC,EAA4B,EAC5BnF,IAAYmF,GAAqBxuB,EAAMuoB,uBACvCe,IAAUkF,GAAqBl/D,KAAK62D,eAAgBh0D,QACpDo3D,IAAYiF,GAAqB59D,EAAO6P,uBAE5CnR,KAAKuzD,gBAAkB1M,EACnB7mD,KAAKuzD,gBAAkB2L,IACvBl/D,KAAKqzD,yBAA0B,EAEtC,KA/DoC,CAKA,GAA7BrzD,KAAKszD,uBAGLiJ,EAAsB,GAFtBC,EAAoB,EAMxB,MAAM2C,EAA+B,EAAM,IACrCC,GAAwBv0D,KAAK2C,KAAK2xD,GACxC,IAAIE,EAAwB,EAM5B,GAJItF,IACAsF,GAAiB/9D,EAAOmV,gBAGxBujD,EAAU,CACV,MAAMsF,EAA+Bz0D,KAAKoB,IAAIiyD,EAAa,EAAMC,GAGjEkB,IAF0B,EAAMx0D,KAAK2C,KAAK8xD,GACFF,CAE3C,CAED,GAAInF,EAAY,CACZ,MAAMsF,EAAsC,EAAhBV,EACtBW,EAAqCl+D,EAAO6P,sBAAwB,EAAO81C,EAC3EqY,EAA+Bz0D,KAAKoB,IAAIszD,EAAa,EAAMC,GAGjEH,IAF0B,EAAMx0D,KAAK2C,KAAK8xD,GACAF,CAE7C,CAED,MACMK,EADwB1G,EAAiB9R,EACAoY,EACzCK,EAA8B1/D,KAAKszD,qBAAuBmM,EAC5DC,GAAuB,IACvBhD,EAAoB,GAGxB18D,KAAKszD,qBAAuBoM,EACxB1/D,KAAKszD,sBAAwB,IAC7BtzD,KAAKozD,oBAAqB,EAEjC,CAkBDpzD,KAAK+zD,eAAiBwI,EACtBv8D,KAAKg0D,qBAAuBwI,EAAoBD,GAAuB1V,EACvE7mD,KAAKm0D,eAAiBsI,EACtBz8D,KAAKo0D,qBAAuBsI,EAAoBD,GAAuB5V,C,CAGpE,WAAA8S,CAAYnsC,EAAwBy5B,GAEvC,GADAjnD,KAAK8zD,YAAc,EACA,GAAftmC,EAAWvY,KACXjV,KAAKqK,KAAQrK,KAAY,QAAIsB,EAAOG,aAAa+rB,EAAWnsB,UAAUiB,QAAUhB,EAAOC,UAAUisB,EAAWnsB,UAAUiB,QAElHtC,KAAK+0B,4BAA8BvH,EAAWuH,4BAC9C/0B,KAAKg1B,kBAAoBxH,EAAWwH,kBACpCh1B,KAAKi1B,gBAAkBzH,EAAWyH,gBAClCj1B,KAAKk1B,iBAAmB1H,EAAW0H,iBACnCl1B,KAAKm1B,sBAAwB3H,EAAW2H,sBACxCn1B,KAAKo1B,oBAAsB5H,EAAW4H,oBAGvCp1B,KAAKypC,aAAejc,EAAWic,aAClCzpC,KAAK0pC,aAAelc,EAAWkc,aAC/B1pC,KAAK2pC,aAAenc,EAAWmc,aAC/B3pC,KAAK4pC,iBAAmBpc,EAAWoc,iBACnC5pC,KAAK6pC,WAAarc,EAAWqc,gBAC1B,GAAmB,GAAfrc,EAAWvY,KAClBjV,KAAKqK,KAAQrK,KAAY,QAAIwtB,EAAW6E,eAAkB7E,EAAW4G,uBACrEp0B,KAAK8zD,YAAc,IACnB9zD,KAAKypC,aAAejc,EAAWic,aAC/BzpC,KAAK0pC,aAAelc,EAAWkc,aAC/B1pC,KAAK2pC,aAAenc,EAAWmc,aAC/B3pC,KAAK4pC,iBAAmBpc,EAAWoc,iBACnC5pC,KAAK6pC,WAAarc,EAAWqc,gBAC1B,GAAmB,GAAfrc,EAAWvY,KAClBjV,KAAKqK,KAAOgB,EAAYmiB,EAAWqb,UAAWv9B,GAA6BC,QACxE,GAAmB,GAAfiiB,EAAWvY,KAClBjV,KAAKqK,KAAOrK,KAAK4qC,cAAcvH,cAAc7V,EAAWod,cAAepd,EAAWvY,MAClFjV,KAAKypC,aAAejc,EAAWic,aAC/BzpC,KAAK0pC,aAAelc,EAAWkc,aAC/B1pC,KAAK2pC,aAAenc,EAAWmc,aAC/B3pC,KAAK4pC,iBAAmBpc,EAAWoc,iBACnC5pC,KAAK6pC,WAAarc,EAAWqc,gBAC1B,GAAmB,GAAfrc,EAAWvY,KAClBjV,KAAKqK,KAAOrK,KAAK4qC,cAAcvH,cAAc7V,EAAWod,cAAepd,EAAWvY,MAClFjV,KAAKypC,aAAejc,EAAWic,aAC/BzpC,KAAK0pC,aAAelc,EAAWkc,aAC/B1pC,KAAK2pC,aAAenc,EAAWmc,aAC/B3pC,KAAK4pC,iBAAmBpc,EAAWoc,iBACnC5pC,KAAK6pC,WAAarc,EAAWqc,gBAC1B,GAAmB,GAAfrc,EAAWvY,KAClBjV,KAAKqK,KAAOrK,KAAKirC,aAAa5H,cAAc7V,EAAWyd,aAAc,QAClE,GAAmB,GAAfzd,EAAWvY,KAAgC,CAClD,IAAK,IAAI1K,EAAY,EAAGA,EAAIjJ,EAAO0Y,UAAWzP,IAC1CvK,KAAK8qC,qBAAqBvgC,GAAG84B,cAAc7V,EAAWsd,qBAAqBvgC,GAAIyoD,GAAgB2M,GAA8Bp1D,IAEjIvK,KAAKqK,KAAO,IACf,MACGrK,KAAKqK,KAAO,I,CAIb,cAAAu1D,CAAe/gC,GAClB,GAAa,GAAT7+B,KAAKiV,KACL,OAAOjV,KAAK8qC,qBAAqBjM,GAAOx0B,KAExC,MAAM,IAAIlI,MAAM,8C,CAIjB,iCAAO09D,CAA2Br7D,GACrC,OAAOokC,GAAW8J,mBAAmBpxC,EAAOkX,kBAA4B,EAARhU,GAAa,K,CAGzE,SAAOm7D,CAA8Bn7D,GACzC,OAAO,GAAKqG,KAAK2C,KAAKwlD,GAAgB6M,2BAA2Br7D,G,EAIzE,MAAMs7D,GAAN,WAAA//D,GACoBC,KAAWkgC,YAAsB,GAC1ClgC,KAAKwzC,OAAY,EACjBxzC,KAAwB+/D,yBAAkB,I,QAGxC/8B,GAED,aAAAg9B,GACJ,MAAM3jB,EAAuBr8C,KAAK8mB,KAAMsuB,kBACxC,IAAK,IAAI7qC,EAAYvK,KAAK4zC,SAAS/wC,OAAQ0H,EAAI8xC,EAAc9xC,IACzDvK,KAAK4zC,SAASrpC,GAAK,IAAIu1D,GAE3B9/D,KAAK4zC,SAAS/wC,OAASw5C,EACvB,IAAK,IAAI9xC,EAAY,EAAGA,EAAI8xC,EAAc9xC,IAAK,CAC3C,MAAM2W,EAAmBlhB,KAAK8mB,KAAM8sB,SAASrpC,GACvC01D,EAA6BjgE,KAAK4zC,SAASrpC,GACjD,IAAK,IAAI+lB,EAAY2vC,EAAa//B,YAAYr9B,OAAQytB,EAAIpP,EAAQgf,YAAYr9B,OAAQytB,IAClF2vC,EAAa//B,YAAY5P,GAAK,IAAI0iC,GAItC,GAFAiN,EAAa//B,YAAYr9B,OAASqe,EAAQgf,YAAYr9B,OAElDo9D,EAAazsB,OAAStyB,EAAQsyB,QAC9BysB,EAAazsB,MAAQtyB,EAAQsyB,MACzBysB,EAAazsB,OACb,IAAK,MAAMkT,KAAmBuZ,EAAa//B,YACvCwmB,EAAgB8S,iBAI/B,C,CAGE,iBAAA0G,CAAkBp5C,GAGrB,GAAY,MAARA,EAAc,CACd9mB,KAAKggE,gBACL,MAAMjH,EAAyB/4D,KAAKmgE,oBACpC,IAAK,IAAI1qB,EAAuB,EAAGA,EAAe3uB,EAAKsuB,kBAAmBK,IACtE,IAAK,IAAIgC,EAA0B,EAAGA,EAAkB3wB,EAAK8sB,SAAS6B,GAAcvV,YAAYr9B,OAAQ40C,IAAmB,CACvH,MAAMjqB,EAAyB1G,EAAK8sB,SAAS6B,GAAcvV,YAAYuX,GACjEiP,EAAmC1mD,KAAK4zC,SAAS6B,GAAcvV,YAAYuX,GACjFzU,GAAM02B,2BAA2BlsC,GACjCA,EAAWid,QAAU,EACrBjd,EAAWkd,YAAc,EACzBld,EAAWmd,QAAU,EACrBnd,EAAWwuC,iBAAmBxuC,EAAW0D,SACzC1D,EAAWyuC,eAAiB,KAC5BzuC,EAAWuhC,mBAAqBvhC,EAAW+E,WAC3C/E,EAAW4yC,iBAAmB,KAC9B1Z,EAAgBiT,YAAYnsC,EAAYxtB,KAAKinD,kBAC7CP,EAAgBoS,yBAAyB94D,KAAMwtB,EAAYurC,EAC9D,CAGR,CACA,IAAIsH,EAAa,IAAI31D,aAAa,GACnC1K,KAAKsgE,eAAgB,EACrBtgE,KAAKugE,WAAWF,EAAYA,EAAY,GAAG,GAC3CrgE,KAAKsgE,eAAgB,C,CAIlB,sBAAAE,GAEH,GAAiB,MAAbxgE,KAAK8mB,MAAgB9mB,KAAK8mB,KAAKuuB,gBAAkB,EAAG,CAGpD,IAAIorB,EAAoC,GACpCC,EAA2C,GAC/C1gE,KAAK2gE,UAAY,GACjB3gE,KAAK4gE,cAAgB,GACrB5gE,KAAK6gE,aAAe,GACpB7gE,KAAK8gE,iBAAmB,GACxB,IAAK,IAAI5/C,EAAkB,EAAGA,EAAUlhB,KAAK8mB,KAAKE,kBAAoBhnB,KAAK8mB,KAAKG,kBAAmB/F,IAAW,CAC1Gw/C,EAAkBx/C,GAAW,GAC7BlhB,KAAK6gE,aAAa3/C,GAAW,GAC7BlhB,KAAK8gE,iBAAiB5/C,GAAW,GAEjC,IAAK,IAAIsM,EAAqB,EAAGA,EAAaxtB,KAAK8mB,KAAK8sB,SAAS1yB,GAASgf,YAAYr9B,OAAQ2qB,IAC1FxtB,KAAK6gE,aAAa3/C,GAASsM,GAAc,GACzCxtB,KAAK8gE,iBAAiB5/C,GAASsM,GAAc,GAC7CkzC,EAAkBx/C,GAASsM,GAAc,EAEhD,CAGD,IAAIy/B,EAAsBjtD,KAAK+gE,KAAOz/D,EAAOsQ,aAAe5R,KAAK8/B,KAGjE,IAAK,IAAI2V,EAAuBz1C,KAAK8mB,KAAKE,kBAAoBhnB,KAAK8mB,KAAKG,kBAAmBwuB,EAAez1C,KAAK8mB,KAAKsuB,kBAAmBK,IACnI,IAAMz1C,KAAK8mB,KAAK8sB,SAAS6B,GAAmB,MAAG,CAE3C,IAAIU,EAEJ,IAAK,IAAI6qB,EAAqBhhE,KAAKo2C,IAAK4qB,GAAc,EAAGA,IAGrD,GAFA7qB,EAAUn2C,KAAK8mB,KAAKs+B,WAAW3P,EAAcurB,GAE9B,MAAX7qB,EAAiB,CACjB,IAAI8qB,EAAwB9qB,EAAQjW,YAAY,GAC5C1S,EAAyBxtB,KAAK8mB,KAAK8sB,SAAS6B,GAAcvV,YAAY+gC,GACtEC,EAA2B,GAC3BC,EAA4B,GAE5BC,EAAsBJ,GAAchhE,KAAKo2C,IACvC6W,EACAjtD,KAAKqhE,eAAeL,GAE1B,IAAK,MAAM5gC,KAAQ+V,EAAQlW,MACvB,GAAIG,EAAKnF,MAAQmmC,IAAwE,MAAzDF,EAAe5/D,EAAO4Y,SAAW,EAAIkmB,EAAKrB,QAAQ,KAAeqB,EAAKlF,IAAMgmC,EAAe5/D,EAAO4Y,SAAW,EAAIkmB,EAAKrB,QAAQ,KAC1J,GAAIqB,EAAKlF,KAAOkmC,EACZF,EAAe5/D,EAAO4Y,SAAW,EAAIkmB,EAAKrB,QAAQ,IAAMqB,EAAKlF,IAC7DimC,EAAgB7/D,EAAO4Y,SAAW,EAAIkmB,EAAKrB,QAAQ,IAAMqB,EAAKpB,KAAKoB,EAAKpB,KAAKn8B,OAAS,GAAGwzB,SAExF,CACD6qC,EAAe5/D,EAAO4Y,SAAW,EAAIkmB,EAAKrB,QAAQ,IAAMqiC,EAExD,IAAK,IAAIE,EAAS,EAAGA,EAASlhC,EAAKpB,KAAKn8B,OAAQy+D,IAC5C,GAAIlhC,EAAKpB,KAAKsiC,GAAQ3iC,KAAOyB,EAAKnF,MAAQmmC,EAAY,CAClD,MAAMG,EAA2BnhC,EAAKpB,KAAKsiC,GAAQ3iC,KAAOyB,EAAKpB,KAAKsiC,EAAS,GAAG3iC,KAC1E6iC,EAA0BJ,EAAahhC,EAAKnF,MAAQmF,EAAKpB,KAAKsiC,EAAS,GAAG3iC,KAC1E8iC,EAAsBrhC,EAAKpB,KAAKsiC,GAAQjrC,KAAO+J,EAAKpB,KAAKsiC,EAAS,GAAGjrC,KAE3E8qC,EAAgB7/D,EAAO4Y,SAAW,EAAIkmB,EAAKrB,QAAQ,IAAMl0B,KAAKkB,MAAMq0B,EAAKpB,KAAKsiC,EAAS,GAAGjrC,KAAOorC,EAAcD,EAAkBD,GACjID,EAASlhC,EAAKpB,KAAKn8B,MACtB,CAER,CAKT,IAAK,IAAI49B,EAAc,EAAGA,EAAMn/B,EAAO4Y,SAAUumB,IAC7C,GAA2B,MAAvBygC,EAAezgC,GACf,GAAIn/B,EAAOub,WAAW2Q,EAAW3Q,WAAW4jB,IAAMxjB,SACI,MAA9CwjD,EAAejzC,EAAW3Q,WAAW4jB,KAAiBugC,EAAa1/D,EAAOsQ,aAAe5R,KAAK8mB,KAAK+a,YAAcq/B,EAAezgC,GAAQggC,EAAejzC,EAAW3Q,WAAW4jB,OAC7KzgC,KAAK0hE,YAAYP,EAAgB1gC,GAAM0gC,EAAgB1gC,GAAMA,EAAKjT,EAAW7L,YAAY8e,GAAMjT,EAAWud,eAAetK,GAAMjT,EAAW3Q,WAAW4jB,IACrJggC,EAAejzC,EAAW3Q,WAAW4jB,IAAQugC,EAAa1/D,EAAOsQ,aAAe5R,KAAK8mB,KAAK+a,YAAcq/B,EAAezgC,QAG1H,CAED,IAAIkhC,EAA4B,GAEhC,GAAIn0C,EAAWud,eAAetK,IAAQzgC,KAAK8mB,KAAK8sB,SAASpmB,EAAW7L,YAAY8e,IAAMP,YAAYr9B,OAC9F,IAAK,IAAI0H,EAAY,EAAGA,EAAIvK,KAAK8mB,KAAK8sB,SAASpmB,EAAW7L,YAAY8e,IAAMP,YAAYr9B,OAAQ0H,IAC5Fo3D,EAAgBl3D,KAAKF,QAIxB,GAAIijB,EAAWud,eAAetK,GAAOzgC,KAAK8mB,KAAK8sB,SAASpmB,EAAW7L,YAAY8e,IAAMP,YAAYr9B,OAAQ,CAC1G,MAAM++D,EAA6B5hE,KAAK8mB,KAAKs+B,WAAW53B,EAAW7L,YAAY8e,GAAMugC,GACnE,MAAdY,IACAD,EAAkBC,EAAW1hC,YACpC,MACGyhC,EAAgBl3D,KAAK+iB,EAAWud,eAAetK,IAEnD,IAAK,IAAIgX,EAA0B,EAAGA,EAAkBkqB,EAAgB9+D,OAAQ40C,IAAmB,CAG/F,MAAMoqB,EAAyBr0C,EAAW3Q,WAAW4jB,IAAQn/B,EAAOub,WAAWnY,WAAW,aAAaF,MACjGs9D,EAA2Bt0C,EAAW3Q,WAAW4jB,IAAQn/B,EAAOub,WAAWnY,WAAW,eAAeF,MAC3G,IAAIu9D,EAA0Bv0C,EAAW3Q,WAAW4jB,GAQpD,GAPIohC,EACAE,EAAkBzgE,EAAOub,WAAWha,OAAS2qB,EAAWoT,eAAeH,GAChEqhC,IAEPC,EAAkBzgE,EAAOub,WAAWha,OAAS,EAAK,EAAIvB,EAAO2S,gBAAmBuZ,EAAWoT,eAAeH,IAGL,MAArGigC,EAAkBlzC,EAAW7L,YAAY8e,IAAMkhC,EAAgBlqB,IAAkBsqB,IAC9Ef,EAAa1/D,EAAOsQ,aAAe5R,KAAK8mB,KAAK+a,YAAcq/B,EAAezgC,GAAOigC,EAAkBlzC,EAAW7L,YAAY8e,IAAMkhC,EAAgBlqB,IAAkBsqB,GAAmB,CAExL,GAAIF,EAAe,CACf,IAAIG,EAA4BhiE,KAAK8mB,KAAK8sB,SAASpmB,EAAW7L,YAAY8e,IAAMP,YAAYyhC,EAAgBlqB,IAC5G,GAAsC,GAAlCjqB,EAAWoT,eAAeH,GAC1BuhC,EAAchG,iBAAmBgG,EAAc94B,aAAai4B,EAAgB1gC,QACzE,CACH,IAAK,IAAIl2B,EAAY,EAAGA,EAAIjJ,EAAO6S,iBAAkB5J,IAC7Cy3D,EAAchG,kBAAoBgG,EAAc94B,aAAa3+B,KAC7Dy3D,EAAchG,iBAAmB,IAAIh2B,GACrCg8B,EAAchG,iBAAiBz6B,eAAeygC,EAAc94B,aAAa3+B,GAAI+1B,gBAC7E/1B,EAAIjJ,EAAO6S,kBAGftJ,KAAK+b,OAAO4G,EAAWoT,eAAeH,GAAO,GAAK,GAAKuhC,EAAchG,iBAAkB91B,oBACnF1Y,EAAWoT,eAAeH,GAAO,EACjCuhC,EAAchG,iBAAkB/1B,cAAcp7B,KAAK+b,OAAO4G,EAAWoT,eAAeH,GAAO,GAAK,IAAI+D,KAAO28B,EAAgB1gC,GAE3HuhC,EAAchG,iBAAkB/1B,cAAcp7B,KAAK+b,OAAO4G,EAAWoT,eAAeH,GAAO,GAAK,IAAIgE,KAAO08B,EAAgB1gC,GAEtI,CACDuhC,EAAc/F,eAAiB+F,EAAchG,gBAChD,MAAM,GAAI8F,EAAiB,CACxB,IAAIE,EAA4BhiE,KAAK8mB,KAAK8sB,SAASpmB,EAAW7L,YAAY8e,IAAMP,YAAYyhC,EAAgBlqB,IAC5G,GAAsC,GAAlCjqB,EAAWoT,eAAeH,GAC1BuhC,EAAcjT,mBAAqBiT,EAAc74B,eAAeg4B,EAAgB1gC,QAC7E,CACH,IAAK,IAAIl2B,EAAY,EAAGA,EAAIjJ,EAAO6S,iBAAkB5J,IAC7Cy3D,EAAcjT,oBAAsBiT,EAAc74B,eAAe5+B,KACjEy3D,EAAcjT,mBAAqB,IAAI/oB,GACvCg8B,EAAcjT,mBAAmBxtB,eAAeygC,EAAc74B,eAAe5+B,GAAI+1B,gBACjF/1B,EAAIjJ,EAAO6S,kBAGftJ,KAAK+b,OAAO4G,EAAWoT,eAAeH,GAAO,GAAK,GAAKuhC,EAAcjT,mBAAoB7oB,oBACrF1Y,EAAWoT,eAAeH,GAAO,EACjCuhC,EAAcjT,mBAAoB9oB,cAAcp7B,KAAK+b,OAAO4G,EAAWoT,eAAeH,GAAO,GAAK,IAAI+D,KAAO28B,EAAgB1gC,GAE7HuhC,EAAcjT,mBAAoB9oB,cAAcp7B,KAAK+b,OAAO4G,EAAWoT,eAAeH,GAAO,GAAK,IAAIgE,KAAO08B,EAAgB1gC,GAExI,CACDuhC,EAAc5B,iBAAmB4B,EAAcjT,kBAClD,MACI/uD,KAAK0hE,YAAYP,EAAgB1gC,GAAM0gC,EAAgB1gC,GAAMA,EAAKjT,EAAW7L,YAAY8e,GAAMkhC,EAAgBlqB,GAAkBsqB,GAEtIrB,EAAkBlzC,EAAW7L,YAAY8e,IAAMkhC,EAAgBlqB,IAAkBsqB,GAAmBf,EAAa1/D,EAAOsQ,aAAe5R,KAAK8mB,KAAK+a,YAAcq/B,EAAezgC,EACjL,CACJ,CACJ,CAGZ,CAER,CAER,C,CAME,0BAAAwhC,CAA2Bz0C,GAC9B,GAAiB,MAAbxtB,KAAK8mB,KAET,IAAK,IAAI2Z,EAAc,EAAGA,EAAMn/B,EAAO4Y,SAAUumB,IAAO,CAGpD,GAFAjT,EAAWwd,kBAAkBvK,IAAO,GAEA,GAAhCjT,EAAW7L,YAAY8e,GAAY,CACD,GAA9BjT,EAAW3Q,WAAW4jB,KACtBjT,EAAWwd,kBAAkBvK,IAAO,GACxC,QACH,CACD,MAAMvf,EAA0BlhB,KAAK8mB,KAAK8sB,SAASpmB,EAAW7L,YAAY8e,IAC1E,GAAe,MAAXvf,EAAiB,SACrB,IAAIghD,EAAkC,GAElCA,EADA10C,EAAWud,eAAetK,IAAQvf,EAAQgf,YAAYr9B,OAClCqe,EAAQgf,YAER,CAAChf,EAAQgf,YAAY1S,EAAWud,eAAetK,KAEvE,IAAK,IAAIl2B,EAAY,EAAGA,EAAI23D,EAAkBr/D,OAAQ0H,IAAK,CACvD,MAAMy3D,EAAmCE,EAAkB33D,GAC3D,GAAqB,MAAjBy3D,EAAuB,SAC3B,MAAMG,EAAc7gE,EAAOub,WAAW2Q,EAAW3Q,WAAW4jB,IAAMv8B,KAEwB,IAAnF5C,EAAOub,WAAW2Q,EAAW3Q,WAAW4jB,IAAMtjB,oBAA2C6kD,EAAcjzD,QAAW,GAAKzN,EAAOub,WAAW2Q,EAAW3Q,WAAW4jB,IAAMtjB,mBAEjJ,GAAlB6kD,EAAc/sD,MAAuE,IAA1C+sD,EAAc/sD,OAAyC,eAAPktD,GAA+B,eAAPA,GAA+B,eAAPA,GAA+B,eAAPA,GAA+B,eAAPA,IACzK,GAAlBH,EAAc/sD,MAAgD,IAAlB+sD,EAAc/sD,MAA4C,eAAPktD,GACvD,IAA1CH,EAAc/sD,OAAwC,eAAPktD,GAA+B,eAAPA,KAErEH,EAAc/1B,WAAWh1B,cAAuB,aAAPkrD,GAA6B,aAAPA,IAEhEH,EAAc1uC,cAAuB,aAAP6uC,IAC7BH,EAAc1uC,eAAwB,eAAP6uC,GAA+B,gBAAPA,IACjD,aAAPA,GAAsBt3D,KAAK+b,OAAO4G,EAAWoT,eAAeH,GAAO,GAAK,GAAKuhC,EAAc9wC,SAASgV,mBAEpG87B,EAAc1tC,gBAAyB,eAAP6tC,IAC/BH,EAAc1tC,iBAA0B,iBAAP6tC,GAAiC,kBAAPA,IACrD,eAAPA,GAAwBt3D,KAAK+b,OAAO4G,EAAWoT,eAAeH,GAAO,GAAK,GAAKuhC,EAAczvC,WAAW2T,oBAE5G1Y,EAAWwd,kBAAkBvK,IAAO,EACpCl2B,EAAI23D,EAAkBr/D,OAE7B,CAEJ,C,CAGG,6BAAOu/D,CAAuB30D,GAClC,OAAQ5C,KAAKoB,IAAI,GAAMwB,EAAY,IAAQ,GAAO,E,CAwEtD,WAAW40D,GACP,OAAOriE,KAAKsgE,a,CAGhB,aAAWgC,GACP,OAAOtiE,KAAKuiE,W,CAGhB,YAAWz4C,GACP,OAAO9pB,KAAKwiE,gB,CAGhB,YAAW14C,CAASlb,GAChB,GAAiB,MAAb5O,KAAK8mB,KAAc,CACnB9mB,KAAKwiE,iBAAmB33D,KAAKiM,IAAI,EAAGjM,KAAKuC,IAAIpN,KAAK8mB,KAAKkvB,SAAUpnC,IACjE,IAAI6zD,EAAoBziE,KAAKwiE,iBAC7BxiE,KAAKo2C,IAAMvrC,KAAK+b,MAAM67C,GACtBA,EAAYziE,KAAK8mB,KAAK+a,aAAe4gC,EAAYziE,KAAKo2C,KACtDp2C,KAAK+gE,KAAOl2D,KAAK+b,MAAM67C,GACvBA,EAAYnhE,EAAOsQ,cAAgB6wD,EAAYziE,KAAK+gE,MACpD/gE,KAAK8/B,KAAOj1B,KAAK+b,MAAM67C,GACvBA,EAAYnhE,EAAOuQ,cAAgB4wD,EAAYziE,KAAK8/B,MACpD9/B,KAAK+gC,KAAOl2B,KAAK+b,MAAM67C,GACvBziE,KAAK0iE,oBAAsB,EAC3B1iE,KAAK2iE,iBAAkB,EACvB3iE,KAAK4iE,QAAU,IAClB,C,CAGE,gBAAAC,GACH,GAAiB,MAAb7iE,KAAK8mB,KAAc,MAAM,IAAI3kB,MACjC,OAAOnC,KAAKmgE,oBAAsB7+D,EAAOuQ,aAAevQ,EAAOsQ,aAAe5R,KAAK8mB,KAAK+a,W,CAGrF,eAAAihC,GACH,OAAQ9iE,KAAK+gE,KAAOz/D,EAAOsQ,aAAe5R,KAAK8/B,MAAQx+B,EAAOuQ,aAAe7R,KAAK+gC,I,CAE/E,cAAAgiC,GACH,OAAQ/iE,KAAK+gE,KAAOz/D,EAAOsQ,aAAe5R,KAAK8/B,I,CAG3C,cAAAuhC,CAAejrB,GACnB,GAAiB,MAAbp2C,KAAK8mB,KAAc,OAAO,EAC9B,IAAIs6C,EAAqB9/D,EAAOsQ,aAAe5R,KAAK8mB,KAAK+a,YACzD,IAAK,IAAI3gB,EAAkBlhB,KAAK8mB,KAAKE,kBAAoBhnB,KAAK8mB,KAAKG,kBAAmB/F,EAAUlhB,KAAK8mB,KAAKsuB,kBAAmBl0B,IAAW,CACpI,IAAIi1B,EAA0Bn2C,KAAK8mB,KAAKs+B,WAAWlkC,EAASk1B,GAC5D,GAAe,MAAXD,EAAiB,CACjB,IAAI3oB,EAAyBxtB,KAAK8mB,KAAK8sB,SAAS1yB,GAASgf,YAAYiW,EAAQjW,YAAY,IACzF,IAAK,IAAIO,EAAc,EAAGA,EAAMn/B,EAAO4Y,SAAUumB,IAC7C,GAAIjT,EAAW3Q,WAAW4jB,IAAQn/B,EAAOub,WAAWnY,WAAW,YAAYF,MACvE,IAAK,MAAM47B,KAAQ+V,EAAQlW,MACnBG,EAAKrB,QAAQ,IAAOz9B,EAAO4Y,SAAW,EAAIumB,GAEtC2gC,EAAahhC,EAAKnF,QAClBmmC,EAAahhC,EAAKnF,MAKzC,CACJ,CACD,OAAOmmC,C,CAIJ,eAAA4B,CAAgBzgB,EAAsBE,EAAsBwgB,GAC/D,GAAiB,MAAbjjE,KAAK8mB,KACL,OAAQ,EAGZ,IAAIo8C,EAAmB3gB,EAAc,EAAIviD,KAAK8mB,KAAKgvB,UAC/CqtB,EAAiB1gB,EAAcziD,KAAK8mB,KAAKkvB,SAAYh2C,KAAK8mB,KAAKgvB,UAAY91C,KAAK8mB,KAAKivB,WACrFqtB,GAAwB,EACxBC,GAA0B,EAC1BC,EAAoBtjE,KAAK8mB,KAAK8tB,MAGlC,IAAK,IAAI1zB,EAAkBlhB,KAAK8mB,KAAKE,kBAAoBhnB,KAAK8mB,KAAKG,kBAAmB/F,EAAUlhB,KAAK8mB,KAAKsuB,kBAAmBl0B,IACzH,IAAK,IAAIk1B,EAAc8sB,EAAU9sB,EAAM+sB,EAAQ/sB,IAAO,CAClD,IAAID,EAA0Bn2C,KAAK8mB,KAAKs+B,WAAWlkC,EAASk1B,GAC5D,GAAe,MAAXD,EAAiB,CACjB,IAAI3oB,EAAyBxtB,KAAK8mB,KAAK8sB,SAAS1yB,GAASgf,YAAYiW,EAAQjW,YAAY,IACzF,IAAK,IAAIO,EAAc,EAAGA,EAAMn/B,EAAO4Y,SAAUumB,IACzCjT,EAAW3Q,WAAW4jB,IAAQn/B,EAAOub,WAAWnY,WAAkB,MAAEF,QACpE4+D,GAAe,GAEf51C,EAAW3Q,WAAW4jB,IAAQn/B,EAAOub,WAAWnY,WAAW,YAAYF,QACvE6+D,GAAiB,EAG5B,CACJ,CAIL,GAAIH,EAAW,EAAG,CACd,IAAIK,EAAgC,KAChCC,EAA2B,EAE/B,IAAK,IAAIptB,EAAc8sB,EAAW,EAAG9sB,GAAO,EAAGA,IAAO,CAClD,IAAK,IAAIl1B,EAAkBlhB,KAAK8mB,KAAKE,kBAAoBhnB,KAAK8mB,KAAKG,kBAAmB/F,EAAUlhB,KAAK8mB,KAAKsuB,kBAAmBl0B,IAAW,CACpI,IAAIi1B,EAAUn2C,KAAK8mB,KAAKs+B,WAAWlkC,EAASk1B,GAE5C,GAAe,MAAXD,EAAiB,CACjB,IAAI8qB,EAAwB9qB,EAAQjW,YAAY,GAC5C1S,EAAyBxtB,KAAK8mB,KAAK8sB,SAAS1yB,GAASgf,YAAY+gC,GAEjEG,EAAqBphE,KAAKqhE,eAAejrB,GAE7C,IAAK,MAAMhW,KAAQ+V,EAAQlW,MACvB,GAAIzS,EAAW3Q,WAAWvb,EAAO4Y,SAAW,EAAIkmB,EAAKrB,QAAQ,KAAOz9B,EAAOub,WAAWnY,WAAkB,MAAEF,OAClG47B,EAAKnF,MAAQmmC,IAAiC,MAAlBmC,GAA0BnjC,EAAKlF,IAAMqoC,GACjE,GAAInjC,EAAKlF,KAAOkmC,EACZmC,EAAiBnjC,EAAKlF,IACtBsoC,EAAmBpjC,EAAKpB,KAAKoB,EAAKpB,KAAKn8B,OAAS,GAAGwzB,SAElD,CACDktC,EAAiBnC,EAEjB,IAAK,IAAIE,EAAS,EAAGA,EAASlhC,EAAKpB,KAAKn8B,OAAQy+D,IAC5C,GAAIlhC,EAAKpB,KAAKsiC,GAAQ3iC,KAAOyB,EAAKnF,MAAQmmC,EAAY,CAClD,MAAMG,EAA2BnhC,EAAKpB,KAAKsiC,GAAQ3iC,KAAOyB,EAAKpB,KAAKsiC,EAAS,GAAG3iC,KAC1E6iC,EAA0BJ,EAAahhC,EAAKnF,MAAQmF,EAAKpB,KAAKsiC,EAAS,GAAG3iC,KAC1E8iC,EAAsBrhC,EAAKpB,KAAKsiC,GAAQjrC,KAAO+J,EAAKpB,KAAKsiC,EAAS,GAAGjrC,KAE3EmtC,EAAmB34D,KAAKkB,MAAMq0B,EAAKpB,KAAKsiC,EAAS,GAAGjrC,KAAOorC,EAAcD,EAAkBD,GAC3FD,EAASlhC,EAAKpB,KAAKn8B,MACtB,CAER,CAIhB,CACJ,CAGqB,MAAlB0gE,IACAD,EAAYE,EAAmBliE,EAAOub,WAAWnY,WAAkB,MAAEwY,kBACrEk5B,GAAO,EAEd,CACJ,CAED,GAAIgtB,GAAgBC,EAAgB,CAEhC,IAAIjtB,EAAc8sB,EACdO,GAAiB,EACjBtjE,EAAuB,EAE3B,MAAQsjE,GAAO,CAEX,IAAIrC,EAAqB9/D,EAAOsQ,aAAe5R,KAAK8mB,KAAK+a,YACrDorB,EAAsB,EAO1B,GALIoW,IACAjC,EAAaphE,KAAKqhE,eAAejrB,IAIjCgtB,EAAc,CACd,IAAIM,GAAoB,EACxB,IAAK,IAAIxiD,EAAkBlhB,KAAK8mB,KAAKE,kBAAoBhnB,KAAK8mB,KAAKG,kBAAmB/F,EAAUlhB,KAAK8mB,KAAKsuB,kBAAmBl0B,IACzH,GAAgB,GAAZwiD,EAAmB,CACnB,IAAIvtB,EAA0Bn2C,KAAK8mB,KAAKs+B,WAAWlkC,EAASk1B,GAC5D,GAAe,MAAXD,EAAiB,CACjB,IAAI3oB,EAAyBxtB,KAAK8mB,KAAK8sB,SAAS1yB,GAASgf,YAAYiW,EAAQjW,YAAY,IACzF,IAAK,IAAIO,EAAc,EAAGA,EAAMn/B,EAAO4Y,SAAUumB,IAC7C,GAAgB,GAAZijC,GAAqBl2C,EAAW3Q,WAAW4jB,IAAQn/B,EAAOub,WAAWnY,WAAkB,MAAEF,OACtF2xC,EAAQlW,MAAM0jC,MAAK/1C,GAAKA,EAAEmR,QAAQ,IAAOz9B,EAAO4Y,SAAW,EAAIumB,IAAO,CAEzEijC,GAAW,EAEXvtB,EAAQlW,MAAM2jC,MAAK,SAAUtsC,EAAGC,GAAK,OAAQD,EAAE2D,OAAS1D,EAAE0D,MAAS3D,EAAEyH,QAAQ,GAAKxH,EAAEwH,QAAQ,GAAKzH,EAAE2D,MAAQ1D,EAAE0D,KAAM,IACnH,IAAK,MAAMmF,KAAQ+V,EAAQlW,MACvB,GAAIG,EAAKrB,QAAQ,IAAOz9B,EAAO4Y,SAAW,EAAIumB,IAE1CtgC,GAAiB0K,KAAKuC,IAAIg0D,EAAanU,EAAa7sB,EAAKnF,MAAQgyB,GAAgB3rD,EAAOuQ,aAAe7R,KAAK6jE,6BAA6BP,GAErIljC,EAAKnF,MAAQmmC,GACb,IAAK,IAAIE,EAAiB,EAAGA,EAASlhC,EAAKpB,KAAKn8B,OAAQy+D,IAAU,CAE9D,GAAIlhC,EAAKpB,KAAKsiC,EAAS,GAAG3iC,KAAOyB,EAAKnF,OAASmmC,EAAY,CACvD,MAAM0C,EAAqBxiE,EAAOuQ,aAAehH,KAAKuC,IAAIg0D,GAAchhC,EAAKnF,MAAQmF,EAAKpB,KAAKsiC,EAAS,GAAG3iC,MAAOyB,EAAKpB,KAAKsiC,GAAQ3iC,KAAOyB,EAAKpB,KAAKsiC,EAAS,GAAG3iC,MAC3JolC,EAAuB3jC,EAAKpB,KAAKsiC,EAAS,GAAGjrC,KAAO/0B,EAAOub,WAAWnY,WAAkB,MAAEwY,kBAChG,IAAI8mD,EAAuB5jC,EAAKpB,KAAKsiC,GAAQjrC,KAAO/0B,EAAOub,WAAWnY,WAAkB,MAAEwY,kBACtFkjB,EAAKpB,KAAKsiC,GAAQ3iC,KAAOyB,EAAKnF,MAAQmmC,IAEtC4C,EAAe5jC,EAAKpB,KAAKsiC,EAAS,GAAGjrC,MAAQ+J,EAAKpB,KAAKsiC,GAAQjrC,KAAO+J,EAAKpB,KAAKsiC,EAAS,GAAGjrC,OAAS+qC,GAAchhC,EAAKnF,MAAQmF,EAAKpB,KAAKsiC,EAAS,GAAG3iC,QAAUyB,EAAKpB,KAAKsiC,GAAQ3iC,KAAOyB,EAAKpB,KAAKsiC,EAAS,GAAG3iC,MAAQr9B,EAAOub,WAAWnY,WAAkB,MAAEwY,mBAEjQ,IAAI+mD,EAAoB3iE,EAAOsQ,aAAetQ,EAAOuQ,aAAe,GAiBhE1R,GAfA6jE,GAAgBD,GAeE/jE,KAAKinD,iBAAmB6c,GAAcj5D,KAAKT,IAAI65D,EAAYD,EAAeF,GAAcj5D,KAAKT,IAAI65D,EAAYF,EAAeD,KAAgBG,GAAaF,EAAeC,IAM1KF,EAAa9jE,KAAK6jE,6BAA6BG,GAGnEV,EAAYU,CACf,CACD/W,EAAcpiD,KAAKuC,IAAIgzB,EAAKnF,MAAQmF,EAAKpB,KAAKsiC,GAAQ3iC,KAAMyiC,EAC/D,CAIhB,CAER,CACJ,CAER,CAGDjhE,IAAiBihE,EAAanU,GAAe3rD,EAAOuQ,aAAe7R,KAAK6jE,6BAA6BP,GAErGltB,IACY,GAAR6sB,GAAa7sB,GAAOp2C,KAAK8mB,KAAKgvB,UAAY91C,KAAK8mB,KAAKivB,aACpDK,EAAMp2C,KAAK8mB,KAAKgvB,UACZmtB,EAAO,GAAGA,KAEd7sB,GAAO+sB,IACPM,GAAQ,EAEf,CAED,OAAO54D,KAAKyS,KAAKnd,EACpB,CAGG,OAAOH,KAAK6iE,mBAAqB7iE,KAAKkkE,aAAa3hB,EAAaE,EAAawgB,E,CAI9E,YAAAiB,CAAa3hB,EAAsBE,EAAsB0hB,EAAuBnkE,KAAKokE,iBACxF,GAAiB,MAAbpkE,KAAK8mB,KAAc,MAAM,IAAI3kB,MACjC,IAAIoxC,EAAevzC,KAAK8mB,KAAKivB,YAAcouB,EAAe,GAG1D,OAFI5hB,IAAahP,GAAQvzC,KAAK8mB,KAAKgvB,WAC/B2M,IAAalP,GAAQvzC,KAAK8mB,KAAKkvB,UAAYh2C,KAAK8mB,KAAKgvB,UAAY91C,KAAK8mB,KAAKivB,aACxExC,C,CAGX,WAAAxzC,CAAY+mB,EAA6B,MAxUlC9mB,KAAgBinD,iBAAW,MAO3BjnD,KAAI8mB,KAAgB,KACpB9mB,KAAkBqkE,oBAAY,EAC9BrkE,KAAyBskE,2BAAY,EACrCtkE,KAAiBukE,kBAAW,EAC5BvkE,KAAgBwkE,kBAAY,EAC5BxkE,KAAgBykE,iBAAa,GAC7BzkE,KAAgB0kE,iBAAW,EAC3B1kE,KAAoB2kE,qBAAa,GACjC3kE,KAAeokE,iBAAY,EAC3BpkE,KAAMqzB,OAAW,EACjBrzB,KAAoB4kE,qBAAW,EAC/B5kE,KAAU6kE,YAAY,EACtB7kE,KAAe8kE,iBAAY,EAC3B9kE,KAAgB+kE,kBAAY,EAC5B/kE,KAAaglE,eAAY,EAExBhlE,KAAUilE,YAAY,EACtBjlE,KAAgBwiE,iBAAW,EAC3BxiE,KAAGo2C,IAAW,EACdp2C,KAAO4iE,QAAkB,KACzB5iE,KAAOklE,QAAkB,KACzBllE,KAAI+gE,KAAW,EACf/gE,KAAI8/B,KAAW,EACf9/B,KAAI+gC,KAAW,EAChB/gC,KAAe2iE,iBAAY,EAC3B3iE,KAAamlE,eAAY,EACzBnlE,KAAmB0iE,oBAAW,EAC7B1iE,KAAS2gE,UAAsB,GAC/B3gE,KAAY6gE,aAA0B,GACtC7gE,KAAa4gE,cAAsB,GACnC5gE,KAAgB8gE,iBAA0B,GAC1C9gE,KAAasgE,eAAY,EACzBtgE,KAAWuiE,aAAY,EACvBviE,KAAgBolE,iBAAW,EAC3BplE,KAAqCqlE,uCAAY,EAIjDrlE,KAAAslE,wBAA8C,IAAI/gC,GACnDvkC,KAAAuoD,sBAA2C,IAAIvvB,GAOrCh5B,KAAQ4zC,SAAmB,GAC3B5zC,KAAAulE,SAAwB,IAAIlwC,GAC5Br1B,KAAAwlE,sBAA4ChjE,MAAMlB,EAAO8V,cAAco4C,KAAK,MAErFxvD,KAAgBylE,kBAAY,EAC5BzlE,KAAyB0lE,2BAAY,EACrC1lE,KAAkB2lE,mBAAW,EAC7B3lE,KAAsB4lE,uBAAW,EACjC5lE,KAAe6lE,gBAAW,EAC1B7lE,KAAK8lE,MAAW,EAEhB9lE,KAA8B+lE,+BAAwB,KAEtD/lE,KAAQgmE,SAAe,KACvBhmE,KAAUimE,WAAe,KA8hBzBjmE,KAAAkmE,qBAAwBC,IAC5B,MAAMC,EAAeD,EAAqBC,aACpCC,EAA4BD,EAAa1jE,eAAe,GACxD4jE,EAA4BF,EAAa1jE,eAAe,GAM9D,IAJI1C,KAAKqlE,uCAA4D,GAAlBgB,EAAY,IAA+B,GAAlBC,EAAY,IAAqD,GAAxCD,EAAYD,EAAavjE,OAAS,IAAqD,GAAxCyjE,EAAYF,EAAavjE,OAAS,KAElL7C,KAAKqlE,uCAAwC,IAE5CrlE,KAAKqlE,sCAAuC,CAE7C,MAAMxiE,EAAiBujE,EAAavjE,OACpC,IAAK,IAAI0H,EAAY,EAAGA,EAAI1H,EAAQ0H,IAChC87D,EAAY97D,GAAK,EACjB+7D,EAAY/7D,GAAK,CAExB,EAEIvK,KAAKsgE,eAAiBiG,YAAYC,OAASxmE,KAAKolE,iBACjDplE,KAAKymE,mBAELzmE,KAAKugE,WAAW8F,EAAaC,EAAaF,EAAavjE,OAAQ7C,KAAKsgE,eAEhEtgE,KAAK6kE,aACD7kE,KAAK4kE,sBAAwB,GAC7BtuC,GAAOG,MAAM,qBAAsB4vC,EAAaC,GAChDtmE,KAAK4kE,qBAAuB,GAE5B5kE,KAAK4kE,wBAGhB,EAvTD5kE,KAAK0mE,0BACO,MAAR5/C,GAAc9mB,KAAK2mE,QAAQ7/C,E,CAG5B,OAAA6/C,CAAQ7/C,GACU,iBAAjB,EACA9mB,KAAK8mB,KAAO,IAAI2sB,GAAK3sB,GACdA,aAAgB2sB,KACvBzzC,KAAK8mB,KAAOA,GAEhB9mB,KAAK4iE,QAAU,I,CAGX,uBAAA8D,GACJ1mE,KAAKg5D,uBAAyBh2B,GAAMC,kBAAkBjjC,KAAKinD,iBAAmB3lD,EAAO6U,oBACrFnW,KAAK4mE,uBAAyB5mE,KAAKg5D,uBAAyB,EAC5Dh5D,KAAKi5D,sBAAwBj2B,GAAMC,kBAAkBjjC,KAAKinD,iBAAmB3lD,EAAOmV,gBACpFzW,KAAK6mE,sBAAwB7mE,KAAKi5D,sBAAwB,C,CAGtD,aAAA6N,GACJ,MAAMC,EAAqB/mE,KAAKskE,0BAA6BtkE,KAAKqkE,mBAAqB,KAAO,KAASrkE,KAAKqkE,mBAAqB,IAAM,KACvI,GAAqB,MAAjBrkE,KAAKgmE,UAAuC,MAAnBhmE,KAAKimE,YAAsBjmE,KAAKimE,WAAWc,YAAcA,EAAY,CACvE,MAAnB/mE,KAAKimE,YAAoBjmE,KAAKymE,kBAClC,MAAMO,EAAsBhnE,KAAKskE,0BAA6BtkE,KAAKqkE,mBAAqB,WAAa,WAAerkE,KAAKqkE,mBAAqB,cAAgB,WAC9JrkE,KAAKgmE,SAAWhmE,KAAKgmE,UAAY,IAAK1lB,OAAOp/C,cAAgBo/C,OAAO2mB,oBAAoB,CAAED,YAAaA,IACvGhnE,KAAKinD,iBAAmBjnD,KAAKgmE,SAAS7kE,WACtCnB,KAAKimE,WAAajmE,KAAKgmE,SAASkB,sBAAwBlnE,KAAKgmE,SAASkB,sBAAsBH,EAAY,EAAG,GAAK/mE,KAAKgmE,SAASmB,qBAAqBJ,EAAY,EAAG,GAClK/mE,KAAKimE,WAAWmB,eAAiBpnE,KAAKkmE,qBACtClmE,KAAKimE,WAAWoB,iBAAmB,WACnCrnE,KAAKimE,WAAWqB,sBAAwB,WACxCtnE,KAAKimE,WAAWsB,QAAQvnE,KAAKgmE,SAASwB,aAEtCxnE,KAAK0mE,yBACR,CACD1mE,KAAKgmE,SAASyB,Q,CAGV,eAAAhB,GACiB,MAAjBzmE,KAAKgmE,UAAuC,MAAnBhmE,KAAKimE,aAC9BjmE,KAAKimE,WAAWyB,WAAW1nE,KAAKgmE,SAASwB,aACzCxnE,KAAKimE,WAAa,KACdjmE,KAAKgmE,SAASjjE,OAAO/C,KAAKgmE,SAASjjE,QACvC/C,KAAKgmE,SAAW,K,CAIjB,iBAAA2B,GACH3nE,KAAK8mE,gBACL9mE,KAAKolE,iBAAmBmB,YAAYC,MAAQ,G,CAGzC,IAAAoB,GACC5nE,KAAKsgE,gBACRtgE,KAAKwgE,yBACNxgE,KAAKkgE,kBAAkBlgE,KAAK8mB,MAE5B9mB,KAAKsgE,eAAgB,EACrBtgE,KAAK8mE,gB,CAKF,KAAAe,GACH,GAAK7nE,KAAKsgE,gBACVtgE,KAAKsgE,eAAgB,EACrBtgE,KAAKuiE,aAAc,EACnBviE,KAAK2gE,UAAY,GACjB3gE,KAAK4gE,cAAgB,GACJ,MAAb5gE,KAAK8mB,MAAc,CACnB9mB,KAAK8mB,KAAKstB,YAAc,EACxBp0C,KAAK8mB,KAAKutB,aAAe,EACzB,IAAK,IAAIoB,EAAuB,EAAGA,EAAez1C,KAAK8mB,KAAKE,kBAAoBhnB,KAAK8mB,KAAKG,kBAAmBwuB,IACzGz1C,KAAK6gE,aAAaprB,GAAgB,GAClCz1C,KAAK8gE,iBAAiBrrB,GAAgB,EAE7C,C,CAGE,cAAAqyB,GACH9nE,KAAKqkE,oBAAqB,EAC1BrkE,KAAKuiE,aAAc,EACnBviE,KAAK4nE,M,CAGF,YAAAG,GAGH,GAFA/nE,KAAK8lE,MAAQ,EACb9lE,KAAKgoE,eACY,MAAbhoE,KAAK8mB,KACL,IAAK,MAAMm5C,KAAgBjgE,KAAK4zC,SAC5B,IAAK,MAAM8S,KAAmBuZ,EAAa//B,YACvCwmB,EAAgB8S,iB,CAMzB,WAAAkI,CAAYuG,EAAqBC,EAAmBznC,EAAagV,EAAsBgC,EAAyB0wB,GACnH,IAAI7sC,EAAc2sC,EAAc3mE,EAAOub,WAAWsrD,GAASjrD,kBACvDkrD,EAAkBF,EAAY5mE,EAAOub,WAAWsrD,GAASjrD,kBAwB7D,MAvBiD,gBAA7C5b,EAAOub,WAAWsrD,GAAS5qD,iBAC3B+d,EAAM,GAAKA,EACX8sC,EAAU,GAAKA,GAE8B,gBAA7C9mE,EAAOub,WAAWsrD,GAAS5qD,iBAC3B+d,EAAM,GAAKA,EACX8sC,EAAU,GAAKA,GAGf9mE,EAAOub,WAAWsrD,GAASlrD,QACI,MAA3Bjd,KAAK2gE,UAAUwH,IAAoBnoE,KAAK2gE,UAAUwH,IAAY7sC,GAAOt7B,KAAK4gE,cAAcuH,IAAYC,IACpGpoE,KAAK2gE,UAAUwH,GAAW7sC,EAC1Bt7B,KAAK4gE,cAAcuH,GAAWC,GAG+B,MAA7DpoE,KAAK6gE,aAAaprB,GAAcgC,GAAiB0wB,IAC9CnoE,KAAK6gE,aAAaprB,GAAcgC,GAAiB0wB,IAAY7sC,GAC7Dt7B,KAAK8gE,iBAAiBrrB,GAAcgC,GAAiB0wB,IAAYC,IACpEpoE,KAAK6gE,aAAaprB,GAAcgC,GAAiB0wB,GAAW7sC,EAC5Dt7B,KAAK8gE,iBAAiBrrB,GAAcgC,GAAiB0wB,GAAWC,GAIjE9sC,C,CAGJ,WAAA++B,CAAY8N,EAAiBjnD,EAAyBsM,EAA4B46C,GAErF,GADyB9mE,EAAOub,WAAWsrD,GAASlrD,SAEhD,GAA+B,MAA3Bjd,KAAK2gE,UAAUwH,IAAmD,MAA/BnoE,KAAK4gE,cAAcuH,GACtD,OAAOC,EAAUpoE,KAAK4gE,cAAcuH,GAAYnoE,KAAK2gE,UAAUwH,QAEhE,GAAe5gD,MAAXrG,GAAsCqG,MAAdiG,GACwB,MAAnDxtB,KAAK6gE,aAAa3/C,GAASsM,GAAY26C,IAA2E,MAAvDnoE,KAAK8gE,iBAAiB5/C,GAASsM,GAAY26C,GACtG,OAAOC,EAAUpoE,KAAK8gE,iBAAiB5/C,GAASsM,GAAY26C,GAAYnoE,KAAK6gE,aAAa3/C,GAASsM,GAAY26C,GAGvH,OAAQ,C,CAIL,cAAAE,CAAennD,EAAiBsM,GACnC,IAAK,IAAI26C,EAAkB,EAAGA,EAAU7mE,EAAOub,WAAWha,OAAQslE,IAC9D,GAAuB5gD,MAAlBvnB,KAAK2gE,WAAqD,MAA3B3gE,KAAK2gE,UAAUwH,IACtB5gD,MAArBvnB,KAAK6gE,cAA2Dt5C,MAA9BvnB,KAAK6gE,aAAa3/C,IAAmEqG,MAA1CvnB,KAAK6gE,aAAa3/C,GAASsM,IAA+E,MAAnDxtB,KAAK6gE,aAAa3/C,GAASsM,GAAY26C,GAC/K,OAAO,EAGf,OAAO,C,CAGJ,QAAAG,CAASH,EAAiBjnD,EAAkBsM,IAC3CxtB,KAAKo6D,YAAY+N,IAAwB5gD,MAAXrG,GAAsCqG,MAAdiG,GAA2BxtB,KAAKo6D,YAAY+N,EAASjnD,EAASsM,MACpHxtB,KAAK2gE,UAAUwH,GAAW,KAC1BnoE,KAAK4gE,cAAcuH,GAAW,KACf5gD,MAAXrG,GAAsCqG,MAAdiG,IACxBxtB,KAAK6gE,aAAa3/C,GAASsM,GAAY26C,GAAW,KAClDnoE,KAAK8gE,iBAAiB5/C,GAASsM,GAAY26C,GAAW,M,CAK3D,iBAAAI,CAAkBlpB,EAAwBmpB,EAAoBvH,GACjE,MAAMzzC,EAAyBxtB,KAAK8mB,KAAM8sB,SAAS40B,GAAYtoC,YAAY+gC,GAE3E,GAAI5hB,EAAe,CACf,GAAI7xB,EAAW8G,eACX,OAAO,EACX,GAAmC,MAA/B9G,EAAW4yC,iBACX,OAAO,CACd,KACI,CACD,GAAI5yC,EAAW8F,aACX,OAAO,EACX,GAAiC,MAA7B9F,EAAWyuC,eACX,OAAO,CACd,CACD,OAAO,C,CAGJ,WAAA7B,CAAY+N,EAAiBjnD,EAAkBsM,GAElD,OADyBlsB,EAAOub,WAAWsrD,GAASlrD,QAEtBsK,MAAlBvnB,KAAK2gE,WAAqD,MAA3B3gE,KAAK2gE,UAAUwH,GACpC5gD,MAAXrG,GAAsCqG,MAAdiG,GAAgDjG,MAArBvnB,KAAK6gE,cAA2D,MAA9B7gE,KAAK6gE,aAAa3/C,IAA8D,MAA1ClhB,KAAK6gE,aAAa3/C,GAASsM,IAClG,MAAnDxtB,KAAK6gE,aAAa3/C,GAASsM,GAAY26C,E,CAKhD,WAAAM,GACHzoE,KAAKo2C,IAAM,EACXp2C,KAAK+nE,eACL/nE,KAAK0oE,W,CAGF,OAAAC,CAAQvyB,GACXp2C,KAAKo2C,IAAMA,EACXp2C,KAAK+nE,eACL/nE,KAAKwiE,iBAAmBxiE,KAAKo2C,G,CAG1B,SAAAsyB,GACH1oE,KAAKwiE,iBAAmBxiE,KAAKo2C,IAC7Bp2C,KAAK+gE,KAAO,EACZ/gE,KAAK8/B,KAAO,EACZ9/B,KAAK+gC,KAAO,EACZ/gC,KAAK0iE,oBAAsB,C,CAGxB,YAAAkG,GACH,GAAK5oE,KAAK8mB,OACN9mB,KAAKo2C,IAAMp2C,KAAK8mB,KAAKgvB,WAAa91C,KAAKo2C,KAAOp2C,KAAK8mB,KAAKgvB,UAAY91C,KAAK8mB,KAAKivB,YAAY,CAC1F,MAAM8yB,EAAiB7oE,KAAKo2C,IAC5Bp2C,KAAKo2C,IAAMp2C,KAAK8mB,KAAKgvB,UACrB91C,KAAKwiE,kBAAoBxiE,KAAKo2C,IAAMyyB,EAEhC7oE,KAAKqiE,SACLriE,KAAKwgE,wBACZ,C,CAGE,WAAAsI,GACH,IAAK9oE,KAAK8mB,KAAM,OAChB9mB,KAAK4iE,QAAU5iE,KAAKo2C,IACpB,MAAMyyB,EAAiB7oE,KAAKo2C,IAC5Bp2C,KAAKo2C,MACDp2C,KAAKo2C,KAAOp2C,KAAK8mB,KAAKkvB,WACtBh2C,KAAKo2C,IAAM,GAEfp2C,KAAKwiE,kBAAoBxiE,KAAKo2C,IAAMyyB,EAEhC7oE,KAAKqiE,SACLriE,KAAKwgE,wB,CAGN,WAAAuI,GACH,IAAK/oE,KAAK8mB,KAAM,OAChB9mB,KAAK4iE,QAAU,KACf,MAAMiG,EAAiB7oE,KAAKo2C,IAC5Bp2C,KAAKo2C,OACDp2C,KAAKo2C,IAAM,GAAKp2C,KAAKo2C,KAAOp2C,KAAK8mB,KAAKkvB,YACtCh2C,KAAKo2C,IAAMp2C,KAAK8mB,KAAKkvB,SAAW,GAEpCh2C,KAAKwiE,kBAAoBxiE,KAAKo2C,IAAMyyB,EAEhC7oE,KAAKqiE,SACLriE,KAAKwgE,wB,CAGL,UAAAwI,GACJ,IAAI9D,EAAkBllE,KAAKo2C,IAAM,EAQjC,OAPIp2C,KAAKuiE,YACD2C,GAAWllE,KAAK8mB,KAAMkvB,WACtBkvB,EAAUllE,KAAK8mB,KAAMkvB,SAAW,GAEL,GAAxBh2C,KAAKokE,iBAAwBc,GAAWllE,KAAK8mB,KAAMgvB,UAAY91C,KAAK8mB,KAAMivB,aACjFmvB,EAAUllE,KAAK8mB,KAAMgvB,WAElBovB,C,CAGJ,OAAA+D,GACH,IAAKjpE,KAAK8mB,KAAM,OAChB,MAAMiyC,EAAyB/4D,KAAKmgE,oBACpCngE,KAAKo2C,MACLp2C,KAAK+gE,KAAO,EACZ/gE,KAAK8/B,KAAO,EACZ9/B,KAAK+gC,KAAO,EACZ/gC,KAAK0iE,oBAAsB3J,EAC3B/4D,KAAK2iE,iBAAkB,EAGK,GAAxB3iE,KAAKokE,iBAAwBpkE,KAAKo2C,KAAOp2C,KAAK8mB,KAAKgvB,UAAY91C,KAAK8mB,KAAKivB,aACzE/1C,KAAKo2C,IAAMp2C,KAAK8mB,KAAKgvB,UACjB91C,KAAKokE,gBAAkB,GAAGpkE,KAAKokE,kB,CAuCpC,UAAA7D,CAAW8F,EAA2BC,EAA2B4C,EAA4BC,GAAoB,GACpH,GAAiB,MAAbnpE,KAAK8mB,KAAc,CACnB,IAAK,IAAIvc,EAAY,EAAGA,EAAI2+D,EAAoB3+D,IAC5C87D,EAAY97D,GAAK,EACjB+7D,EAAY/7D,GAAK,EAGrB,YADAvK,KAAKymE,iBAER,CAED,MAAM3/C,EAAa9mB,KAAK8mB,KACxB9mB,KAAK8mB,KAAKstB,YAAc,EACxBp0C,KAAK8mB,KAAKutB,aAAe,EAEzB,IAAI0kB,EAAyB/4D,KAAKmgE,oBAC9BsD,GAAiB,GAGjBzjE,KAAK0iE,qBAAuB,GAAK1iE,KAAK0iE,oBAAsB3J,KAC5D/4D,KAAK0iE,oBAAsB3J,EAC3B/4D,KAAK2iE,iBAAkB,GAEvBwG,IACInpE,KAAK+gE,MAAQj6C,EAAK+a,cAClB7hC,KAAK+gE,KAAO,EACZ/gE,KAAK8/B,KAAO,EACZ9/B,KAAK+gC,KAAO,EACZ/gC,KAAK0iE,oBAAsB3J,EAC3B/4D,KAAK2iE,iBAAkB,EAEvB3iE,KAAK4iE,QAAU5iE,KAAKo2C,IACpBp2C,KAAKo2C,IAAMp2C,KAAKgpE,aACZhpE,KAAKo2C,KAAOp2C,KAAK4iE,SAAW5iE,KAAKokE,gBAAkB,GAAGpkE,KAAKokE,mBAG/DpkE,KAAKo2C,KAAOtvB,EAAKkvB,WACjBh2C,KAAKo2C,IAAM,GACkB,GAAzBp2C,KAAKokE,kBACLX,GAAQ,EACRzjE,KAAK6nE,WAOjB7nE,KAAKggE,iBAEsC,MAAvChgE,KAAK+lE,gCAA0C/lE,KAAK+lE,+BAA+BljE,OAASqmE,KAC5FlpE,KAAK+lE,+BAAiC,IAAIr7D,aAAaw+D,IAI3D,MAAM71C,GAAkBrzB,KAAKqzB,OACvBwgB,EAAqB,EAAMhpC,KAAKoB,IAAI,GAAK,EAAMjM,KAAKinD,kBACpDnT,EAAoB,EAAMjpC,KAAKoB,IAAI,GAAK,IAASjM,KAAKinD,kBAC5D,IAAI6e,GAAiB9lE,KAAK8lE,MACtBsD,EAAc,GACdC,GAA2B,EAG3BC,EAAsB,EAC1B,KAAOA,EAAcJ,IAAuBzF,GAAO,CAE/CzjE,KAAKklE,QAAUllE,KAAKgpE,aAChBhpE,KAAKklE,SAAWp+C,EAAKkvB,WAAUh2C,KAAKklE,QAAU,MAElD,MAAMqE,EAA8BL,EAAqBI,EACnDE,EAA4B3+D,KAAKyS,KAAKtd,KAAK0iE,qBAC3C+G,EAAoB5+D,KAAKuC,IAAIo8D,EAAmBD,GAChDG,EAAiBJ,EAAcG,EAGrC,GAAIzpE,KAAKsgE,eAAiBtgE,KAAKglE,cAC3B,IAAK,IAAIvvB,EAAuB3uB,EAAKE,kBAAoBF,EAAKG,kBAAmBwuB,EAAe3uB,EAAKsuB,kBAAmBK,IAAgB,CACpI,MAAMv0B,EAAmB4F,EAAK8sB,SAAS6B,GACjCwqB,EAA6BjgE,KAAK4zC,SAAS6B,GAEjDz1C,KAAK2pE,4BAA4B7iD,EAAM2uB,EAAcsjB,EAAgBoQ,GAErE,IAAK,IAAI1xB,EAA0B,EAAGA,EAAkBv2B,EAAQgf,YAAYr9B,OAAQ40C,IAAmB,CACnG,MAAMiP,EAAmCuZ,EAAa//B,YAAYuX,GAElE,IAAK,IAAIltC,EAAY,EAAGA,EAAIm8C,EAAgB+M,eAAev9B,QAAS3rB,IAAK,CACrE,MAAMo8C,EAAaD,EAAgB+M,eAAetsC,IAAI5c,GACtDvK,KAAK4pE,YAAY9iD,EAAM2uB,EAAcsjB,EAAgBuQ,EAAaG,EAAW9iB,GAAM,GAAO,EAC7F,CACJ,CACJ,CAIL,GAAI3mD,KAAKilE,WAAT,CAGI,IAAI4E,EAAaT,EAAYplB,SAAShkD,KAAKo2C,KAC3C,GAAIyzB,GAAcP,GAAeD,EAC7B,QAC4B,GAA5BA,IACAA,EAA0BC,GAEzBO,GACDT,EAAY3+D,KAAKzK,KAAKo2C,KAE1Bp2C,KAAKilE,YAAa,EAClBjlE,KAAKipE,SAGR,KAhBD,CAkBA,IAAK,IAAIxzB,EAAuB,EAAGA,EAAe3uB,EAAKE,kBAAoBF,EAAKG,kBAAmBwuB,IAAgB,CAC/G,MAAMv0B,EAAmB4F,EAAK8sB,SAAS6B,GACjCwqB,EAA6BjgE,KAAK4zC,SAAS6B,GAE7Cz1C,KAAK2iE,kBACL3iE,KAAK2pE,4BAA4B7iD,EAAM2uB,EAAcsjB,EAAgBoQ,IAAanpE,KAAK+kE,kBACvF/kE,KAAK8pE,wBAAwBhjD,EAAM2uB,EAAcsjB,IAErD,IAAK,IAAIthB,EAA0B,EAAGA,EAAkBv2B,EAAQgf,YAAYr9B,OAAQ40C,IAAmB,CACnG,MAAMjqB,EAAyBtM,EAAQgf,YAAYuX,GAC7CiP,EAAmCuZ,EAAa//B,YAAYuX,GAElE,GAAIz3C,KAAK2iE,gBAAiB,CACtB,IAAIoH,EAAsCrjB,EAAgB8M,YAAYt9B,QAAUwwB,EAAgBiN,eAAez9B,QAE/G,IAAK,IAAI3rB,EAAY,EAAGA,EAAIm8C,EAAgBgN,cAAcx9B,QAAS3rB,IAAK,CACpE,MAAMo8C,EAAaD,EAAgBgN,cAAcvsC,IAAI5c,GACrD,GAAIo8C,EAAKoJ,oBAAsBllD,KAAKC,IAAI0iB,EAAW4lB,mBAAoB,CACnEpzC,KAAKgqE,iBAAiBtjB,EAAiBn8C,GACvCA,IACA,QACH,CACD,MAAM0/D,EAA8BF,GAA+BzoE,EAAO8Y,uBAC1Epa,KAAKkqE,YAAYpjD,EAAM2uB,EAAcsjB,EAAgBpS,GAAM,EAAMsjB,GACjEF,GACH,CAEGrjB,EAAgBuM,QACXvM,EAAgBwM,UACjBxM,EAAgB+S,QAAQz5D,KAAMwtB,EAAYurC,EAAgBluD,KAAKyS,KAAKy7C,GAAiB,KAAMtjB,EAAcgC,GAG7GiP,EAAgBwM,UAAW,EAGlC,CAED,IAAK,IAAI3oD,EAAY,EAAGA,EAAIm8C,EAAgB8M,YAAYt9B,QAAS3rB,IAAK,CAClE,MAAMo8C,EAAaD,EAAgB8M,YAAYrsC,IAAI5c,GACnDvK,KAAKmqE,SAAS10B,EAAc6zB,EAAaG,EAAW9iB,EACvD,CAED,IAAK,IAAIp8C,EAAY,EAAGA,EAAIm8C,EAAgBiN,eAAez9B,QAAS3rB,IAAK,CACrE,MAAMo8C,EAAaD,EAAgBiN,eAAexsC,IAAI5c,GACtDvK,KAAKmqE,SAAS10B,EAAc6zB,EAAaG,EAAW9iB,EACvD,CAED,IAAK,IAAIp8C,EAAY,EAAGA,EAAIm8C,EAAgBgN,cAAcx9B,QAAS3rB,IAAK,CACpE,MAAMo8C,EAAaD,EAAgBgN,cAAcvsC,IAAI5c,GACrDvK,KAAKmqE,SAAS10B,EAAc6zB,EAAaG,EAAW9iB,EACvD,CAEGD,EAAgBuM,OAChBjwB,GAAMonC,aAAapqE,KAAMqmE,EAAaC,EAAagD,EAAaG,EAAW/iB,GAK/E,MAAMgc,EAA8B1iE,KAAK0iE,oBACnC2H,EAAqB,EAAM,EAAwBtR,EACnDuR,EAAmB,GAAO5H,EAAsB+G,GAAa1Q,EAC7DwR,GAAwBvqE,KAAK+gE,KAAOz/D,EAAOsQ,aAAe5R,KAAK8/B,MAAQx+B,EAAOuQ,aAAe7R,KAAK+gC,KAClGypC,EAA4B,EAAiBlpE,EAAOuQ,aACpD44D,GAA2BF,EAAe,GAAKjpE,EAAOuQ,aACtD64D,EAAwBF,GAAqBC,EAAkBD,GAAqBH,EACpFM,EAAsBH,GAAqBC,EAAkBD,GAAqBF,EACxF,IAAIM,EAA0Bp9C,EAAWwG,aAEzCxG,EAAWid,QAAUjd,EAAWkd,YAE5B1qC,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAW,iBAAiBF,MAAOixC,EAAcgC,KACpFmzB,EAAkB5qE,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,iBAAiBF,MAAOixC,EAAcgC,IAGnF,GAAnBmzB,GACAp9C,EAAWid,QAAU,EACrBjd,EAAWkd,YAAc,GAGzBld,EAAWkd,aAAiC,GAAlBkgC,GAAyBD,EAAcD,EAExE,CACJ,CAED,GAAI1qE,KAAK8kE,iBAAmB9kE,KAAK+kE,iBAC7B,GAAiB,GAAb/kE,KAAK8/B,KAAW,CAChB,IAAK9/B,KAAKylE,iBAAkB,CACxB,MAAMoF,EAAoB/jD,EAAK+a,YAAc,GAAM/a,EAAK+a,YAAc,GAAK,GAAM7hC,KAAK+gE,MAAQj6C,EAAK+a,YAAc,EAC3GipC,EAAgC,GAAb9qE,KAAK+gE,KAAa,EAAI8J,EAAU,EAAI,EACvD9lC,EAA2B,GAAb/kC,KAAK+gE,KAAa,KAAO8J,EAAU,KAAO,IACxDp9D,EAAkC,GAAbzN,KAAK+gE,KAAa,IAAO8J,EAAU,IAAO,IAC/DE,EAA2B/qE,KAAKinD,iBAAmBliB,EACnDzL,EAAqC,EAAVzuB,KAAK8C,GAAWo9D,EACjD/qE,KAAK0lE,0BAA4B76D,KAAK+b,MAAMmkD,EAAmBD,GAC/D9qE,KAAK6lE,gBAAkB,EAAMh7D,KAAK+C,IAAI0rB,GACtCt5B,KAAK2lE,mBAAqBl4D,EAAY5C,KAAKgD,IAAIyrB,GAC/Ct5B,KAAK4lE,uBAAyB,EAE9B5lE,KAAKylE,kBAAmB,CAC3B,CACD,GAAIzlE,KAAK0lE,0BAA4B,EAAG,CACpC,MAAM92C,EAAoB/jB,KAAKuC,IAAIs8D,EAAQJ,EAActpE,KAAK0lE,2BAC9D1lE,KAAK0lE,2BAA6B92C,EAAY06C,EAC9C,IAAK,IAAI/+D,EAAY++D,EAAa/+D,EAAIqkB,EAAWrkB,IAAK,CAClD87D,EAAY97D,IAAMvK,KAAK2lE,mBACvBW,EAAY/7D,IAAMvK,KAAK2lE,mBACvB,MAAMqF,EAAwBhrE,KAAK6lE,gBAAkB7lE,KAAK2lE,mBAAqB3lE,KAAK4lE,uBACpF5lE,KAAK4lE,uBAAyB5lE,KAAK2lE,mBACnC3lE,KAAK2lE,mBAAqBqF,CAC7B,CACJ,CACJ,MACGhrE,KAAKylE,kBAAmB,EAKhC,IAAK,IAAIl7D,EAAY++D,EAAa/+D,EAAIm/D,EAAQn/D,IAAK,CAE/C,MAAM0gE,EAAU5E,EAAY97D,GAAKuc,EAAKqtB,WAAartB,EAAKqtB,WAClD+2B,EAAU5E,EAAY/7D,GAAKuc,EAAKqtB,WAAartB,EAAKqtB,WAClDg3B,EAAeF,EAAU,GAAOA,EAAUA,EAC1CG,EAAeF,EAAU,GAAOA,EAAUA,EAC1CpgE,EAAcqgE,EAAOC,EAAOD,EAAOC,EACzCprE,KAAK8mB,KAAKstB,YAAep0C,KAAK8mB,KAAKstB,YAActpC,EAAM9K,KAAK8mB,KAAKstB,YAActpC,EAE/E,MAAMugE,IAAwBvgE,EAAMgc,EAAKitB,yBAA4BjpC,EAAMgc,EAAKktB,gBAE1Es3B,IACe,GAAdD,KAA8D,IAAvCvgE,EAAM,EAAIgc,EAAKitB,sBAA8B,KAAQjtB,EAAKmtB,iBAAmB,MAAQ,EAAIntB,EAAKmtB,mBACnG,OAAF,GAAdo3B,MACc,GAAdA,IAAqB,OAASvgE,EAAM,EAAIgc,EAAKktB,gBAAkBltB,EAAKotB,YAAc,EAAIptB,EAAKktB,kBAEpG8xB,IAAWwF,EAAcxF,IAAUA,EAAQwF,EAAcx3B,EAAYD,GACrE,MAAM03B,EAAgBl4C,GAAUyyC,GAAS,EAAY,KAARA,EAAuB,GAARA,EAAc,KAC1EO,EAAY97D,GAAK0gE,EAAUM,EAC3BjF,EAAY/7D,GAAK2gE,EAAUK,EAE3BvrE,KAAK8mB,KAAKutB,aAAgBr0C,KAAK8mB,KAAKutB,aAAevpC,EAAMygE,EAAgBvrE,KAAK8mB,KAAKutB,aAAevpC,EAAMygE,CAC3G,CAMD,GAJAjC,GAAeG,EAEfzpE,KAAK2iE,iBAAkB,EACvB3iE,KAAK0iE,qBAAuB+G,EACxBzpE,KAAK0iE,qBAAuB,EAAG,CAC/B1iE,KAAK2iE,iBAAkB,EAIvB,IAAK,MAAM1C,KAAgBjgE,KAAK4zC,SAC5B,IAAK,MAAM8S,KAAmBuZ,EAAa//B,YAAa,CACpD,IAAK,IAAI31B,EAAY,EAAGA,EAAIm8C,EAAgBgN,cAAcx9B,QAAS3rB,IAAK,CACpE,MAAMo8C,EAAaD,EAAgBgN,cAAcvsC,IAAI5c,GACjDo8C,EAAKmJ,cACL9vD,KAAKgqE,iBAAiBtjB,EAAiBn8C,GACvCA,KAEAo8C,EAAKoJ,oBAEZ,CACGrJ,EAAgB2M,yBAChB3M,EAAgB6S,aAEpB7S,EAAgByM,sBAAuB,CAC1C,CAIL,IAAK,IAAIjyC,EAAkB,EAAGA,EAAUlhB,KAAK8mB,KAAKE,kBAAoBhnB,KAAK8mB,KAAKG,kBAAmB/F,IAC/F,IAAK,IAAI+/C,EAAwB,EAAGA,EAAgBjhE,KAAK8mB,KAAK8sB,SAAS1yB,GAASgf,YAAYr9B,OAAQo+D,IAAiB,CACjH,IAAIzzC,EAAyBxtB,KAAK8mB,KAAK8sB,SAAS1yB,GAASgf,YAAY+gC,GACjEuK,EAA2Bh+C,EAAWoG,cACtC5zB,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAW,aAAaF,MAAO0c,EAAS+/C,IAC3EuK,EAAmBxrE,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,aAAaF,MAAO0c,EAAS+/C,GAAe,GACzGv/C,OAAO+pD,UAAUD,GACjBh+C,EAAWmd,SAAWrpC,EAAOgU,cAAck2D,GAG3Ch+C,EAAWmd,UAAY,EAAK6gC,EAAmB,GAAMlqE,EAAOgU,cAAczK,KAAK+b,MAAM4kD,IAAsBA,EAAmB,EAAKlqE,EAAOgU,cAAczK,KAAKyS,KAAKkuD,KAItKh+C,EAAWmd,SAAWrpC,EAAOgU,cAAck2D,EAElD,CAIL,IAAK,IAAItqD,EAAkB,EAAGA,EAAUlhB,KAAK8mB,KAAKE,kBAAoBhnB,KAAK8mB,KAAKG,kBAAmB/F,IAC/F,IAAK,IAAI+/C,EAAwB,EAAGA,EAAgBjhE,KAAK8mB,KAAK8sB,SAAS1yB,GAASgf,YAAYr9B,OAAQo+D,IAAiB,CACjH,IAAIzzC,EAAyBxtB,KAAK8mB,KAAK8sB,SAAS1yB,GAASgf,YAAY+gC,GACpC,MAA7BzzC,EAAWyuC,eACXzuC,EAAWwuC,iBAAmBxuC,EAAWyuC,eAEzCzuC,EAAWwuC,iBAAmBxuC,EAAW0D,SAEV,MAA/B1D,EAAW4yC,iBACX5yC,EAAWuhC,mBAAqBvhC,EAAW4yC,iBAE3C5yC,EAAWuhC,mBAAqBvhC,EAAW+E,UAElD,CAGLvyB,KAAK+gC,OACL/gC,KAAK0iE,qBAAuB3J,EACxB/4D,KAAK+gC,MAAQz/B,EAAOuQ,eACpB7R,KAAK+gC,KAAO,EACZ/gC,KAAK8/B,OACL9/B,KAAKukE,oBAEDvkE,KAAK8/B,MAAQx+B,EAAOsQ,eACpB5R,KAAK8/B,KAAO,EAERqpC,IACAnpE,KAAK+gE,OACD/gE,KAAK+gE,MAAQj6C,EAAK+a,cAElB7hC,KAAK+gE,KAAO,EAER/gE,KAAK+kE,iBACL/kE,KAAK+kE,kBAAmB,GAExB/kE,KAAK4iE,QAAU5iE,KAAKo2C,IACpBp2C,KAAKo2C,IAAMp2C,KAAKgpE,aACZhpE,KAAKo2C,KAAOp2C,KAAK4iE,SAAW5iE,KAAKokE,gBAAkB,GAAGpkE,KAAKokE,kBAE3DpkE,KAAKo2C,KAAOtvB,EAAKkvB,WACjBh2C,KAAKo2C,IAAM,GACkB,GAAzBp2C,KAAKokE,kBACLX,GAAQ,EACRzjE,KAAK+nE,eACL/nE,KAAK6nE,cAQpC,CAGD,IAAK,IAAIM,EAAkB,EAAGA,EAAU7mE,EAAOub,WAAWha,OAAQslE,IACpC,MAAtBnoE,KAAK4gE,eAAwD,MAA/B5gE,KAAK4gE,cAAcuH,KACjDnoE,KAAK2gE,UAAUwH,GAAWnoE,KAAK4gE,cAAcuH,IAIjDnoE,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAkB,MAAEF,SACvDu0D,EAAiB/4D,KAAKmgE,oBACtBngE,KAAK0iE,oBAAsB73D,KAAKuC,IAAIpN,KAAK0iE,oBAAqB3J,IAKlE,IAAK,IAAI73C,EAAkB,EAAGA,EAAUlhB,KAAK8mB,KAAKE,kBAAmB9F,IACjE,IAAK,IAAIsM,KAAcxtB,KAAK8mB,KAAK8sB,SAAS1yB,GAASgf,YAC/C1S,EAAWkd,YAAeld,EAAWkd,aAAeppC,EAAO6T,aAAaqY,EAAWyG,aAAa5e,QAAU/T,EAAOuQ,aAAeknD,EAAiB/4D,KAAKinD,mBACtJz5B,EAAWmd,QAAWnd,EAAWmd,SAAW,KAAOrpC,EAAOwQ,kBAIlE,IAAK,IAAIq2D,EAAkB,EAAGA,EAAU7mE,EAAOub,WAAWha,OAAQslE,IAC9D,IAAK,IAAIjnD,EAAkB,EAAGA,EAAUlhB,KAAK8mB,KAAKE,kBAAoBhnB,KAAK8mB,KAAKG,kBAAmB/F,IAC/F,IAAK,IAAIsM,EAAqB,EAAGA,EAAaxtB,KAAK8mB,KAAKwuB,8BAA+B9nB,IACtD,MAAzBxtB,KAAK8gE,kBAA8D,MAAlC9gE,KAAK8gE,iBAAiB5/C,IAAkE,MAA9ClhB,KAAK8gE,iBAAiB5/C,GAASsM,IAA8E,MAAvDxtB,KAAK8gE,iBAAiB5/C,GAASsM,GAAY26C,KAC5KnoE,KAAK6gE,aAAa3/C,GAASsM,GAAY26C,GAAWnoE,KAAK8gE,iBAAiB5/C,GAASsM,GAAY26C,GA9Q5G,CAmRJ,GAGIzmD,OAAOgqD,SAAS5F,IAAUj7D,KAAKC,IAAIg7D,GAAS1qC,MAAS0qC,EAAQ,GAClE9lE,KAAK8lE,MAAQA,EAETqD,IAAanpE,KAAK+kE,mBAClB/kE,KAAKwiE,oBAAsBxiE,KAAK+gC,KAAO,EAAM/gC,KAAK0iE,oBAAsB3J,GAAkB,EAAM/4D,KAAK8/B,MAAQx+B,EAAOsQ,aAAe5R,KAAK+gE,MAAQj6C,EAAK+a,YAAc7hC,KAAKo2C,I,CAoBxK,QAAAu1B,CAAShlB,GACb3mD,KAAKulE,SAAS1vC,SAAS8wB,E,CAGnB,OAAAilB,GACJ,GAAI5rE,KAAKulE,SAASrvC,QAAU,EAAG,CAC3B,MAAMywB,EAAa3mD,KAAKulE,SAASxvC,UAEjC,OADA4wB,EAAKkJ,kBAAmB,EACjBlJ,CACV,CACD,OAAO,IAAI4I,E,CAGP,WAAAsc,CAAYnlB,EAAkCC,GAClDD,EAAgBgN,cAAc/9B,UAAUgxB,GACxCA,EAAKyG,aAAc,EACnBzG,EAAK+G,iBAAkB,C,CAGnB,gBAAAsc,CAAiBtjB,EAAkColB,GACvD9rE,KAAK2rE,SAASjlB,EAAgBgN,cAAcvsC,IAAI2kD,IAChDplB,EAAgBgN,cAAcv9B,OAAO21C,E,CAGlC,YAAA9D,GACH,IAAK,MAAM/H,KAAgBjgE,KAAK4zC,SAC5B,IAAK,MAAM8S,KAAmBuZ,EAAa//B,YAAa,CACpD,KAAOwmB,EAAgB8M,YAAYt9B,QAAU,GAAGl2B,KAAK2rE,SAASjlB,EAAgB8M,YAAYz9B,WAC1F,KAAO2wB,EAAgB+M,eAAev9B,QAAU,GAAGl2B,KAAK2rE,SAASjlB,EAAgB+M,eAAe19B,WAChG,KAAO2wB,EAAgBgN,cAAcx9B,QAAU,GAAGl2B,KAAK2rE,SAASjlB,EAAgBgN,cAAc39B,WAC9F,KAAO2wB,EAAgBiN,eAAez9B,QAAU,GAAGl2B,KAAK2rE,SAASjlB,EAAgBiN,eAAe59B,UACnG,C,CAID,uBAAA+zC,CAAwBhjD,EAAY2uB,EAAsBsjB,GAC9D,MAAM73C,EAAmB4F,EAAK8sB,SAAS6B,GACjCwqB,EAA6BjgE,KAAK4zC,SAAS6B,GAC3C1W,EAAoB/+B,KAAKykE,iBAE/B,IAAK,IAAIhtB,EAA0B,EAAGA,EAAkBv2B,EAAQgf,YAAYr9B,OAAQ40C,IAAmB,CACnG,MAAMiP,EAAmCuZ,EAAa//B,YAAYuX,GAC5Ds0B,EAAwBrlB,EAAgBiN,eAC9C,IAAIqY,EAAoB,EACxB,GAAIhsE,KAAKukE,kBAAoB,GAAK9uB,GAAgBz1C,KAAK0kE,kBAAoB3lC,EAAQl8B,OAAS,IAA4D,GAAvD7C,KAAK2kE,qBAAqBztC,QAAQugB,GAAwB,CACvJ,MAAMjqB,EAAyBtM,EAAQgf,YAAYuX,GAEnD,GAAIjqB,EAAWye,WAAW90B,WAAY,CAClC,IAAIwvC,EACAolB,EAAS71C,SAAW81C,GACpBrlB,EAAO3mD,KAAK4rE,UACZG,EAASl2C,SAAS8wB,KACVn5B,EAAW0lB,gBAAgBv+B,YAAc3U,KAAKwkE,kBACtDxkE,KAAK6rE,YAAYnlB,EAAiBqlB,EAAS5kD,IAAI6kD,IAC/CrlB,EAAO3mD,KAAK4rE,UACZG,EAAShoE,IAAIioE,EAAWrlB,IAExBA,EAAOolB,EAAS5kD,IAAI6kD,GAExBA,IAEA,IAAK,IAAIzhE,EAAY,EAAGA,EAAIw0B,EAAQl8B,OAAQ0H,IACxCo8C,EAAK5nB,QAAQx0B,GAAKw0B,EAAQx0B,GAE9Bo8C,EAAKt4C,WAAa0wB,EAAQl8B,OAC1B8jD,EAAK8I,UAAY,EACjB9I,EAAKlP,gBAAkBA,EACvBkP,EAAKvmB,KAAOumB,EAAK2H,SAAW3H,EAAK4H,SAAW,KAC5C5H,EAAKyG,YAAcptD,KAAKwkE,iBACxB7d,EAAK0G,sBAAuB,EAC5B1G,EAAK6H,oBAAqB,EAC1BxuD,KAAKkqE,YAAYpjD,EAAM2uB,EAAcsjB,EAAgBpS,GAAM,GAAO,EACrE,KAAM,CAGH3mD,KAAKisE,oCAAoCF,EAAUhtC,GAEnD,IAAK,IAAIx0B,EAAY,EAAGA,EAAIw0B,EAAQl8B,OAAQ0H,IAAK,CAG7C,IAAIo8C,EACyC,MAAzC3mD,KAAKwlE,sBAAsBwG,IAC3BrlB,EAAO3mD,KAAKwlE,sBAAsBwG,GAClChsE,KAAKwlE,sBAAsBwG,GAAa,KACjB,GAAnBrlB,EAAKt4C,YAAmBs4C,EAAK5nB,QAAQ,IAAMA,EAAQx0B,KACnDvK,KAAK6rE,YAAYnlB,EAAiBC,GAClCA,EAAO3mD,KAAK4rE,WAEhBG,EAASl2C,SAAS8wB,KAElBA,EAAO3mD,KAAK4rE,UACZG,EAASl2C,SAAS8wB,IAEtBqlB,IAEArlB,EAAK5nB,QAAQ,GAAKA,EAAQx0B,GAC1Bo8C,EAAKt4C,WAAa,EAClBs4C,EAAK8I,UAAY1wB,EAAQl8B,OACzB8jD,EAAKlP,gBAAkBA,EACvBkP,EAAKvmB,KAAOumB,EAAK2H,SAAW3H,EAAK4H,SAAW,KAC5C5H,EAAKyG,YAAcptD,KAAKwkE,iBACxB7d,EAAK0G,sBAAuB,EAC5B1G,EAAK6H,oBAAqB,EAC1BxuD,KAAKkqE,YAAYpjD,EAAM2uB,EAAcsjB,EAAgBpS,GAAM,GAAO,EACrE,CACJ,CACJ,CAED,KAAOolB,EAAS71C,QAAU81C,GACtBhsE,KAAK6rE,YAAYnlB,EAAiBqlB,EAASh2C,WAG/C/1B,KAAKksE,2BAA2BF,EAAWtlB,EAC9C,CAED1mD,KAAKwkE,kBAAmB,C,CAKpB,gDAAA2H,CAAiDrlD,EAAY5F,EAAkBi1B,EAAkBi2B,EAAuB30B,EAAyBtmB,EAAwBE,EAAc+O,EAAYisC,EAAiBC,GACxN,GAAIxlD,EAAKwa,qBAA4E,GAAtD8qC,EAAalsC,YAAYhJ,QAAQugB,GAAwB,CAGpF,GAAItB,EAAQjW,YAAYr9B,OAAS,GAAKupE,EAAalsC,YAAYr9B,OAAS,EAGpE,OAAO,KAIX,MAAM0pE,EAA8BrrD,EAAQgf,YAAYksC,EAAalsC,YAAY,IAEjF,GAAIosC,EAEA,OAAOC,EAAgBtgC,WAI3B,MAAMugC,EAA8BD,EAAgBr5B,gBACpD,OAAI/hB,EAAWpc,yBAA2By3D,EAAgBz3D,yBAA2By3D,EAAgB33D,QAAUsc,EAAWtc,OAC/G03D,EAAgBtgC,WAEhB,IAEd,CAEG,OAAQqgC,GAAiBn7C,EAAWpc,wBAA2Bsc,EAAQ,I,CAIxE,uCAAOo7C,CAAiCC,EAAiBC,GAC5D,GAAID,EAAU3tC,QAAQl8B,QAAU8pE,EAAW5tC,QAAQl8B,OAAQ,OAAO,EAClE,MAAM+pE,EAA4BF,EAAU1tC,KAAK0tC,EAAU1tC,KAAKn8B,OAAS,GAAG+vB,SAC5E,IAAK,MAAMiM,KAAS6tC,EAAU3tC,QAC1B,IAA8D,GAA1D4tC,EAAW5tC,QAAQ7H,QAAQ2H,EAAQ+tC,GAA0B,OAAO,EAE5E,OAAO,C,CAGH,mCAAAX,CAAoCF,EAAuBc,GAO/D,IAAK,IAAItiE,EAAY,EAAGA,EAAIwhE,EAAS71C,QAAS3rB,IAAK,CAC/C,MAAMo8C,EAAaolB,EAAS5kD,IAAI5c,GAC1Bs0B,EAAgB8nB,EAAK5nB,QAAQ,GAAK4nB,EAAKsJ,aAC7C,IAAK,IAAI3/B,EAAY,EAAGA,EAAIu8C,EAAYhqE,OAAQytB,IAC5C,GAAIu8C,EAAYv8C,IAAMuO,EAAO,CACzB7+B,KAAKwlE,sBAAsBl1C,GAAKq2B,EAChColB,EAAS51C,OAAO5rB,GAChBA,IACA,KACH,CAER,CAGD,KAAOwhE,EAAS71C,QAAU,GAAG,CACzB,MAAMywB,EAAaolB,EAASj2C,WAC5B,IAAK,IAAIxF,EAAY,EAAGA,EAAItwB,KAAKwlE,sBAAsB3iE,OAAQytB,IAC3D,GAAqC,MAAjCtwB,KAAKwlE,sBAAsBl1C,GAAY,CACvCtwB,KAAKwlE,sBAAsBl1C,GAAKq2B,EAChC,KACH,CAER,C,CAGG,2BAAAgjB,CAA4B7iD,EAAY2uB,EAAsBsjB,EAAwBoQ,GAC1F,MAAMjoD,EAAmB4F,EAAK8sB,SAAS6B,GACjCwqB,EAA6BjgE,KAAK4zC,SAAS6B,GAC3CU,EAA0BrvB,EAAKs+B,WAAW3P,EAAcz1C,KAAKo2C,KAC7D6W,EAAsBjtD,KAAK+iE,iBAC3B+J,EAAsB9sE,KAAK+gC,KAAOz/B,EAAOuQ,aAAeo7C,EAE9D,GAAIkc,GAAYriD,EAAK6uB,gBAAgBF,GAAe,CAIhD,IAAIxV,EAAyB,GACzB8sC,EAA6B,GAC7BC,EAA6B,GAC7BC,EAAoB3rE,EAAO4Y,SAC/B,KAAO+yD,KACHhtC,EAAMx1B,KAAK,MACXsiE,EAAUtiE,KAAK,MACfuiE,EAAUviE,KAAK,MAGnB,GAAe,MAAX0rC,IAAoBj1B,EAAQsyB,MAC5B,IAAK,IAAIjpC,EAAY,EAAGA,EAAI4rC,EAAQlW,MAAMp9B,OAAQ0H,IAC1C4rC,EAAQlW,MAAM11B,GAAG2wB,KAAO+xB,GAEsB,MAA1C8f,EAAU52B,EAAQlW,MAAM11B,GAAGw0B,QAAQ,KAAeoX,EAAQlW,MAAM11B,GAAG2wB,IAAO6xC,EAAU52B,EAAQlW,MAAM11B,GAAGw0B,QAAQ,IAAa9D,SAC1H8xC,EAAU52B,EAAQlW,MAAM11B,GAAGw0B,QAAQ,IAAMoX,EAAQlW,MAAM11B,IAGtD4rC,EAAQlW,MAAM11B,GAAG0wB,OAASgyB,GAAe9W,EAAQlW,MAAM11B,GAAG2wB,IAAM+xB,EACrEhtB,EAAMkW,EAAQlW,MAAM11B,GAAGw0B,QAAQ,IAAMoX,EAAQlW,MAAM11B,GAE9C4rC,EAAQlW,MAAM11B,GAAG0wB,MAAQgyB,IAEgB,MAA1C+f,EAAU72B,EAAQlW,MAAM11B,GAAGw0B,QAAQ,KAAeoX,EAAQlW,MAAM11B,GAAG0wB,MAAS+xC,EAAU72B,EAAQlW,MAAM11B,GAAGw0B,QAAQ,IAAa9D,SAC5H+xC,EAAU72B,EAAQlW,MAAM11B,GAAGw0B,QAAQ,IAAMoX,EAAQlW,MAAM11B,IAMvE,IAAI2iE,EAAuB,EAC3B,MAAMC,EAA8BrmD,EAAKwa,oBAAkC,MAAX6U,EAAoBA,EAASjW,YAAY,GAAK,EACxGwmB,EAAmCuZ,EAAa//B,YAAYitC,GAC5DpB,EAAwBrlB,EAAgB+M,eAC9C,IAAK,IAAIhzB,EAAc,EAAGA,EAAMn/B,EAAO4Y,SAAUumB,IAAO,CAOpD,GANkB,MAAdR,EAAMQ,KACgB,MAAlBssC,EAAUtsC,IAAiBssC,EAAUtsC,GAAcvF,KAAQ+E,EAAMQ,GAAcxF,QAAO8xC,EAAUtsC,GAAO,MACrF,MAAlBusC,EAAUvsC,IAAiBusC,EAAUvsC,GAAcxF,OAAUgF,EAAMQ,GAAcvF,MAAK8xC,EAAUvsC,GAAO,OAIlE,MAAzCw/B,EAAaF,0BAAoCE,EAAaF,0BAA4BoN,GAAsBlN,EAAaF,yBAA2BE,EAAa//B,YAAYr9B,OAAQ,CACzL,MAAMuqE,EAAyCnN,EAAa//B,YAAY+/B,EAAaF,0BAC/EsN,EAAuCpN,EAAa//B,YAAYitC,GACtE,KAAOC,EAAsB3Z,eAAev9B,QAAU,GAClDm3C,EAAoB5Z,eAAe99B,UAAUy3C,EAAsB3Z,eAAe19B,UAEzF,CAGD,GAFAkqC,EAAaF,yBAA2BoN,EAEtB,MAAdltC,EAAMQ,GAAc,CACpB,IAAI6sC,EAAyCP,EAAUtsC,GACnD8sC,EAAyCP,EAAUvsC,GAEnD4sB,GAAgC,EAChCmB,GAA8B,EAClC,MAAMpB,EAAwB9rD,EAAOuQ,aAAeouB,EAAMQ,GAAMxF,OAAS6xC,GAAgB9sE,KAAK2iE,gBAC9F,IAAIhc,EACJ,GAAIolB,EAAS71C,SAAWg3C,EACpBvmB,EAAO3mD,KAAK4rE,UACZG,EAASl2C,SAAS8wB,QACf,GAAIyG,GAA6C,MAA7BkgB,EAAoC,CAC3D,MAAME,EAAgBzB,EAAS5kD,IAAI+lD,GAC/BM,EAAQ1d,aACR9vD,KAAK2rE,SAAS6B,GAEdxtE,KAAK6rE,YAAYnlB,EAAiB8mB,GAEtC7mB,EAAO3mD,KAAK4rE,UACZG,EAAShoE,IAAImpE,EAAcvmB,EAC9B,MACGA,EAAOolB,EAAS5kD,IAAI+lD,GAExBA,IAEA,IAAK,IAAI3iE,EAAY,EAAGA,EAAI01B,EAAMQ,GAAM1B,QAAQl8B,OAAQ0H,IACpDo8C,EAAK5nB,QAAQx0B,GAAK01B,EAAMQ,GAAM1B,QAAQx0B,GAE1Co8C,EAAKt4C,WAAa4xB,EAAMQ,GAAM1B,QAAQl8B,OACtC8jD,EAAK8I,UAAY,EACjB9I,EAAKlP,gBAAkB01B,EACvBxmB,EAAKvmB,KAAOH,EAAMQ,GAClBkmB,EAAKuH,cAAgBjuB,EAAMQ,GAAMxF,MACjC0rB,EAAKyH,YAAcnuB,EAAMQ,GAAMvF,IAC/ByrB,EAAK2H,SAAWgf,EAChB3mB,EAAK4H,SAAWgf,EAChB5mB,EAAKgJ,mBAAqB,EAC1BhJ,EAAKiJ,mBAAqB,EAC1BjJ,EAAKyG,YAAcA,EACnBzG,EAAK+G,iBAAkB,EACvB/G,EAAK0G,qBAAuBA,EAC5B1G,EAAK6H,mBAAqBA,CAC7B,CACJ,CAED,KAAOud,EAAS71C,QAAUg3C,GAAc,CACpC,MAAMvmB,EAAaolB,EAASh2C,UACtB7U,EAAmB4F,EAAK8sB,SAAS6B,GACvC,GAAIkR,EAAKlP,gBAAkBv2B,EAAQgf,YAAYr9B,SAAW8jD,EAAKmJ,aAAc,CACzE,MAAMpJ,EAAmC1mD,KAAK4zC,SAAS6B,GAAcvV,YAAYymB,EAAKlP,iBACtFz3C,KAAK6rE,YAAYnlB,EAAiBC,EACrC,MACG3mD,KAAK2rE,SAAShlB,EAErB,CAEJ,MACI,IAAK7/B,EAAK6uB,gBAAgBF,GAAe,CAE1C,IAAIrV,EAAoB,KACpBkuB,EAAwB,KACxBC,EAAwB,KAE5B,GAAI4a,GAAuB,MAAXhzB,IAAoBj1B,EAAQsyB,SAAWxzC,KAAKuiE,aAAeviE,KAAK0kE,kBAAoBjvB,GAAe,CAC/G,IAAK,IAAIlrC,EAAY,EAAGA,EAAI4rC,EAAQlW,MAAMp9B,OAAQ0H,IAC9C,GAAI4rC,EAAQlW,MAAM11B,GAAG2wB,KAAO+xB,EACxBqB,EAAWnY,EAAQlW,MAAM11B,QACtB,GAAI4rC,EAAQlW,MAAM11B,GAAG0wB,OAASgyB,GAAe9W,EAAQlW,MAAM11B,GAAG2wB,IAAM+xB,EACvE7sB,EAAO+V,EAAQlW,MAAM11B,QAClB,GAAI4rC,EAAQlW,MAAM11B,GAAG0wB,MAAQgyB,EAAa,CAC7CsB,EAAWpY,EAAQlW,MAAM11B,GACzB,KACH,CAGO,MAAR61B,IACgB,MAAZkuB,GAAoBA,EAASpzB,KAAOkF,EAAKnF,QAAOqzB,EAAW,MAC/C,MAAZC,GAAoBA,EAAStzB,OAASmF,EAAKlF,MAAKqzB,EAAW,MAEtE,CAGD,GAAe,MAAXpY,KAAqBrvB,EAAKyuB,oBAAoD,GAA9Br0B,EAAQgf,YAAYr9B,QAAgBikB,EAAKwa,oBAAoD,GAA9B6U,EAAQjW,YAAYr9B,QAAe,CAClJ,MAAMsqE,EAA6BrmD,EAAKwa,mBAAqB6U,EAAQjW,YAAY,GAAK,EACtF,GAA6C,MAAzC+/B,EAAaF,0BAAoCE,EAAaF,0BAA4BoN,GAAsBlN,EAAaF,yBAA2BE,EAAa//B,YAAYr9B,OAAQ,CACzL,MAAMuqE,EAAyCnN,EAAa//B,YAAY+/B,EAAaF,0BAC/EsN,EAAuCpN,EAAa//B,YAAYitC,GACtE,KAAOC,EAAsB5Z,YAAYt9B,QAAU,GAC/Cm3C,EAAoB7Z,YAAY79B,UAAUy3C,EAAsB5Z,YAAYz9B,UAEnF,CACDkqC,EAAaF,yBAA2BoN,CAC3C,MACGlN,EAAaF,yBAA2B,KAG5C,IAAK,IAAItoB,EAA0B,EAAGA,EAAkBv2B,EAAQgf,YAAYr9B,OAAQ40C,IAAmB,CACnG,MAAMiP,EAAmCuZ,EAAa//B,YAAYuX,GAC5Ds0B,EAAwBrlB,EAAgB8M,YAC9C,IAAIwY,EAAoB,EACxB,GAAa,MAAR5rC,KAAmBtZ,EAAKwa,qBAAyE,GAAlD6U,EAASjW,YAAYhJ,QAAQugB,IAA0B,CACvG,MAAMjqB,EAAyBtM,EAAQgf,YAAYuX,GACnD,IAAI61B,EAAyChf,EACzCif,EAAyChf,EAE7C,MAAMkf,EAAsBnsE,EAAOsQ,aAAekV,EAAK+a,YACjD1Q,EAAyB3D,EAAW0lB,gBACpC7hB,EAAe7D,EAAWye,WAChC,IAAIohB,GAAgC,EAChCmB,GAA8B,EAC9Bkf,EAA0B,EAC1BC,EAA0B,EAC9B,GAAkB,GAAdvtC,EAAKnF,MAAY,CAEjB,IAAI2yC,EAA+C,MAAhB5tE,KAAK4iE,QAAmB,KAAO97C,EAAKs+B,WAAW3P,EAAcz1C,KAAK4iE,SACrG,GAAmB,MAAfgL,EAAqB,CACrB,MAAMC,EAAyBD,EAAY3tC,MAAMp9B,QAAU,EAAK,KAAO+qE,EAAY3tC,MAAM2tC,EAAY3tC,MAAMp9B,OAAS,GACpH,GAAgB,MAAZgrE,GAAoBA,EAAS3yC,KAAOuyC,EAAa,CACjD,MAAMK,EAAwC1tC,EAAKnB,sBAAwB+D,GAAMypC,iCAAiCoB,EAAUztC,GACtH2tC,EAA4C/tE,KAAKmsE,iDAAiDrlD,EAAM5F,EAASi1B,EAAUy3B,EAAan2B,EAAiBtmB,EAAYE,EAAO+O,EAAMytC,EAAUC,GAC/J,MAA/BC,IACAT,EAA4BO,EAC5BH,EAAkBK,EAA4B52D,WAAa,EAAIm2D,EAA0BvuC,QAAQl8B,OACjGwqD,EAAuBygB,EAE9B,CACJ,CACJ,MAAuC,MAA7BR,IACPI,EAAkBr8C,EAAMla,WAAa,EAAIm2D,EAA0BvuC,QAAQl8B,QAE/E,GAAIu9B,EAAKlF,KAAOuyC,EAAa,CAGzB,IAAIO,EAA+C,MAAhBhuE,KAAKklE,QAAmB,KAAOp+C,EAAKs+B,WAAW3P,EAAcz1C,KAAKklE,SACrG,GAAmB,MAAf8I,EAAqB,CACrB,MAAMtB,EAA0BsB,EAAY/tC,MAAMp9B,QAAU,EAAK,KAAOmrE,EAAY/tC,MAAM,GAC1F,GAAiB,MAAbysC,GAAwC,GAAnBA,EAAUzxC,MAAY,CAC3C,MAAMgzC,EAA4CvB,EAAUztC,sBAAwB+D,GAAMypC,iCAAiCrsC,EAAMssC,GAC3HqB,EAA4C/tE,KAAKmsE,iDAAiDrlD,EAAM5F,EAASi1B,EAAU63B,EAAav2B,EAAiBtmB,EAAYE,EAAO+O,EAAMssC,EAAWuB,GAChK,MAA/BF,IACAR,EAA4Bb,EAC5BiB,EAAkBI,EAA4B52D,WAAa,EAAIo2D,EAA0BxuC,QAAQl8B,OACjG2rD,EAAqByf,EAE5B,CACJ,CACJ,MAAuC,MAA7BV,IACPI,EAAkBt8C,EAAMla,WAAa,EAAIo2D,EAA0BxuC,QAAQl8B,QAG/E,GAAIwuB,EAAMla,WAAY,CAClB,MAAMi2C,EAAwB9rD,EAAOuQ,aAAeuuB,EAAKnF,OAAS6xC,EAClE,IAAInmB,EACJ,GAAIolB,EAAS71C,SAAW81C,EACpBrlB,EAAO3mD,KAAK4rE,UACZG,EAASl2C,SAAS8wB,QACf,IAAIyG,IAAmBj8B,EAAWxc,YAAc6Y,EAAWkG,qBAAyB25B,IAAsD,MAA7BigB,EAUhH3mB,EAAOolB,EAAS5kD,IAAI6kD,OAVgI,CACpJ,MAAMwB,EAAgBzB,EAAS5kD,IAAI6kD,GAC/BwB,EAAQ1d,aACR9vD,KAAK2rE,SAAS6B,GAEdxtE,KAAK6rE,YAAYnlB,EAAiB8mB,GAEtC7mB,EAAO3mD,KAAK4rE,UACZG,EAAShoE,IAAIioE,EAAWrlB,EAC3B,CAGDqlB,IAEA,IAAK,IAAIzhE,EAAY,EAAGA,EAAI61B,EAAKrB,QAAQl8B,OAAQ0H,IAC7Co8C,EAAK5nB,QAAQx0B,GAAK61B,EAAKrB,QAAQx0B,GAEnCo8C,EAAKt4C,WAAa+xB,EAAKrB,QAAQl8B,OAC/B8jD,EAAK8I,UAAY,EACjB9I,EAAKlP,gBAAkBA,EACvBkP,EAAKvmB,KAAOA,EACZumB,EAAKuH,cAAgB9tB,EAAKnF,MAC1B0rB,EAAKyH,YAAchuB,EAAKlF,IACxByrB,EAAK2H,SAAWgf,EAChB3mB,EAAK4H,SAAWgf,EAChB5mB,EAAKgJ,mBAAqB,EAC1BhJ,EAAKiJ,mBAAqB,EAC1BjJ,EAAKyG,YAAcA,EACnBzG,EAAK+G,iBAAkB,EACvB/G,EAAK0G,qBAAuBA,EAC5B1G,EAAK6H,mBAAqBA,EAC1BxuD,KAAKkqE,YAAYpjD,EAAM2uB,EAAcsjB,EAAgBpS,GAAM,GAAO,EACrE,KAAM,CACH,MAAMx1B,EAAyB3D,EAAW0lB,iBAEpC/hB,EAAWxc,aAAewc,EAAWtc,QAA8B,GAApBwc,EAAMna,YAAoBm2C,IAA0B/rD,EAAOuQ,aAAeuuB,EAAKnF,OAAS6xC,GAA6C,MAA7BQ,GACzJttE,KAAKisE,oCAAoCF,EAAU3rC,EAAKrB,SAG5D,IAAImvC,EAA2B,EAC/B,IAAK,IAAI3jE,EAAY,EAAGA,EAAI61B,EAAKrB,QAAQl8B,OAAQ0H,IAAK,CAElD,IAAI4jE,EAAoCT,EAAkBnjE,EAAK+iE,EAA4B,KACvFc,EAAwBhuC,EACxBiuC,EAAoCV,EAAkBpjE,EAAKgjE,EAA4B,KACvFrf,EAAwBkgB,EAAgBnzC,MAAQizC,EAChDxgB,GAA2B,EAM/B,GAAIQ,EAAgBjB,EAAa,CAC7B,KAAI8e,EAAS71C,QAAU3rB,IAAM4mB,EAAWxc,YAAc04C,IAAgD,MAAvB8gB,GAS3E,MAPAE,EAAsBD,EACtBA,EAAkBD,EAClBA,EAAsB,KACtBjgB,EAAgBkgB,EAAgBnzC,MAAQizC,EACxCxgB,GAAkB,CAKzB,CAED,IAAIU,EAAsBggB,EAAgBlzC,KACrC/J,EAAWxc,YAAc04C,IAAgD,MAAvBghB,IACnDjgB,EAAcvjD,KAAKuC,IAAI9L,EAAOsQ,aAAe5R,KAAK8mB,KAAM+a,YAAausB,EAAc8f,KAEjF/8C,EAAWvc,WAAcy4C,IAAgD,MAAvB8gB,IACpDD,GAAoB78C,EAAMna,YAG9B,MAAMk2C,EAAwB9rD,EAAOuQ,aAAeq8C,GAAiB4e,EACrE,IAAInmB,EACJ,GAA6C,MAAzC3mD,KAAKwlE,sBAAsBwG,GAC3BrlB,EAAO3mD,KAAKwlE,sBAAsBwG,GAClChsE,KAAKwlE,sBAAsBwG,GAAa,KACxCD,EAASl2C,SAAS8wB,QACf,GAAIolB,EAAS71C,SAAW81C,EAC3BrlB,EAAO3mD,KAAK4rE,UACZG,EAASl2C,SAAS8wB,QACf,IAAIyG,IAAkBj8B,EAAWxc,YAAe04C,IAAgD,MAAvB8gB,EAU5ExnB,EAAOolB,EAAS5kD,IAAI6kD,OAVsF,CAC1G,MAAMwB,EAAgBzB,EAAS5kD,IAAI6kD,GAC/BwB,EAAQ1d,aACR9vD,KAAK2rE,SAAS6B,GAEdxtE,KAAK6rE,YAAYnlB,EAAiB8mB,GAEtC7mB,EAAO3mD,KAAK4rE,UACZG,EAAShoE,IAAIioE,EAAWrlB,EAC3B,CAGDqlB,IAEArlB,EAAK5nB,QAAQ,GAAKqvC,EAAgBrvC,QAAQx0B,GAC1Co8C,EAAKt4C,WAAa,EAClBs4C,EAAK8I,UAAY2e,EAAgBrvC,QAAQl8B,OACzC8jD,EAAKlP,gBAAkBA,EACvBkP,EAAKvmB,KAAOguC,EACZznB,EAAKuH,cAAgBA,EACrBvH,EAAKyH,YAAcA,EACnBzH,EAAK2H,SAAW6f,EAChBxnB,EAAK4H,SAAW8f,EAChB1nB,EAAKgJ,mBAAqBplD,EAC1Bo8C,EAAKiJ,mBAAqBrlD,EAC1Bo8C,EAAKyG,YAAcA,EACnBzG,EAAK+G,gBAAkBA,EACvB/G,EAAK0G,qBAAuBA,GAA+C,MAAvB8gB,EACpDxnB,EAAK6H,mBAAqBA,GAA6C,MAAvB6f,EAChDruE,KAAKkqE,YAAYpjD,EAAM2uB,EAAcsjB,EAAgBpS,GAAM,GAAO,EACrE,CACJ,CACJ,CAED,KAAOolB,EAAS71C,QAAU81C,GAAW,CACjC,MAAMrlB,EAAaolB,EAASh2C,UACtB7U,EAAmB4F,EAAK8sB,SAAS6B,GACvC,GAAIkR,EAAKlP,gBAAkBv2B,EAAQgf,YAAYr9B,SAAW8jD,EAAKmJ,aAAc,CACzE,MAAMpJ,EAAmCuZ,EAAa//B,YAAYymB,EAAKlP,iBACvEz3C,KAAK6rE,YAAYnlB,EAAiBC,EACrC,MACG3mD,KAAK2rE,SAAShlB,EAErB,CAED3mD,KAAKksE,2BAA2BF,EAAWtlB,EAC9C,CACJ,C,CAGG,0BAAAwlB,CAA2BF,EAAmBtlB,GAClD,IAAK,IAAIn8C,EAAYyhE,EAAWzhE,EAAIvK,KAAKwlE,sBAAsB3iE,OAAQ0H,IAAK,CACxE,MAAMijE,EAAuBxtE,KAAKwlE,sBAAsBj7D,GACzC,MAAXijE,IACIA,EAAQ1d,aACR9vD,KAAK2rE,SAAS6B,GAEdxtE,KAAK6rE,YAAYnlB,EAAiB8mB,GAEtCxtE,KAAKwlE,sBAAsBj7D,GAAK,KAEvC,C,CAIG,QAAA4/D,CAAS10B,EAAsB6zB,EAAqBG,EAAmB9iB,GAC3E,MACMD,EAD6B1mD,KAAK4zC,SAAS6B,GACKvV,YAAYymB,EAAKlP,iBAEpC,MAA/BiP,EAAgBkN,aAAqBlN,EAAgBkN,YAAa5zD,KAAMspE,EAAaG,EAAW9iB,EAAMD,GAC1GC,EAAKmM,iBAAiB7D,gB,CAIlB,WAAA2a,CAAY9iD,EAAY2uB,EAAsBsjB,EAAwBuQ,EAAqBziB,EAA+BF,EAAY2nB,EAAmBrE,GAC7J,MACMz8C,EADmB1G,EAAK8sB,SAAS6B,GACAvV,YAAYymB,EAAKlP,iBAExD,GAAiB,MAAbkP,EAAKvmB,KAAc,CACnB,MAAMmqC,EAAuBvqE,KAAK8iE,kBAC5B0H,EAA4B,EAAiBlpE,EAAOuQ,aACpD44D,GAA2BF,EAAe,GAAKjpE,EAAOuQ,aACtD6wD,EAA8B1iE,KAAK0iE,oBAGnCgI,EAAwBF,GAAqBC,EAAkBD,IAF1C,EAAM,EAAwBzR,GAGnD4R,EAAsBH,GAAqBC,EAAkBD,IAF1C,GAAO9H,EAAsB7b,GAAyBkS,GAGzE7L,EAAwB5rD,EAAOuQ,aAAe64D,EAC9Cpd,EAAsBhsD,EAAOuQ,aAAe84D,EAC5C5qC,EAAsB4mB,EAAKvmB,KAAKP,eAAe7/B,KAAK+iE,kBACpDpV,EAAoBhH,EAAKvmB,KAAKpB,KAAKe,EAAc,GACjD6tB,EAAkBjH,EAAKvmB,KAAKpB,KAAKe,GACjC8tB,GAAwBlH,EAAKvmB,KAAKnF,MAAQ0yB,EAAShvB,MAAQr9B,EAAOuQ,aAClEi8C,GAAsBnH,EAAKvmB,KAAKnF,MAAQ2yB,EAAOjvB,MAAQr9B,EAAOuQ,aAC9Dk8C,GAAsBb,EAAgBW,IAAiBC,EAAaD,GACpEG,GAAoBV,EAAcO,IAAiBC,EAAaD,GACtElH,EAAKxiD,WAAawpD,EAASt3B,MAAQu3B,EAAOv3B,KAAOs3B,EAASt3B,MAAQ03B,EAClEpH,EAAK+J,gBAAmB/C,EAASt3B,MAAQu3B,EAAOv3B,KAAOs3B,EAASt3B,MAAQ23B,EAAYrH,EAAKxiD,WAEzF6+B,GAAMurC,SAASvuE,KAAMspE,EAAaziB,EAAuBF,EAAMn5B,EAClE,C,CAGG,6BAAOghD,CAAuB/e,GAClC,OAAO,GAAyB,KAAjBA,EAAY,GAAY,E,CAGnC,WAAAya,CAAYpjD,EAAY2uB,EAAsBsjB,EAAwBpS,EAAY2nB,EAAmBrE,GACzG,MAAMpjB,EAAgCh8C,KAAKyS,KAAKy7C,GAC1C73C,EAAmB4F,EAAK8sB,SAAS6B,GACjCwqB,EAA6BjgE,KAAK4zC,SAAS6B,GAC3CjoB,EAAyBtM,EAAQgf,YAAYymB,EAAKlP,iBAClDiP,EAAmCuZ,EAAa//B,YAAYymB,EAAKlP,iBACvEiP,EAAgBuM,OAAQ,EACxBvM,EAAgByM,sBAAuB,EAClCzM,EAAgBwM,UACjBxM,EAAgB+S,QAAQz5D,KAAMwtB,EAAYurC,EAAgBlS,EAAuBF,EAAMlR,EAAckR,EAAKlP,iBAE9G,MAAMtmB,EAAyB3D,EAAW0lB,gBACpC7hB,EAAe7D,EAAWye,WAC1BwiC,EAA0Bp9C,EAAMla,WAAa,EAAM6rB,GAAMwrC,uBAAuB7nB,EAAK8I,WACrFhuB,EAA0B3a,EAAK4uB,kBAAkBD,GACjDi5B,EAAwBjtC,EAAiBngC,EAAOwY,cAAgB,EAChE60D,EAAyBrtE,EAAOuQ,aAAeknD,EAAiB/4D,KAAKinD,iBACrE2nB,EAAqB,EAAM5uE,KAAKinD,iBAChC4nB,EAAuB,EAAMvtE,EAAOsQ,aACpC24D,EAAuBvqE,KAAK8iE,kBAC5B4H,EAAwB,EAAiBppE,EAAOuQ,aAChD84D,GAAuBJ,EAAe,GAAOjpE,EAAOuQ,aACpDo7C,EAAsBjtD,KAAK+iE,iBAEjC,IAAI+L,EAA8B,EAClCnoB,EAAKmL,8BAAgC,EAOrC,IAAIid,EAA4B9E,EAC5B+E,EAAwB,EACxBC,EAAsB,EACtBC,EAA8B,EAC9BC,EAA4B,EAC5BC,EAA+BX,EAC/BY,EAA6BZ,EAE7Ba,EAAmC,GACnCj/D,EAAoB/O,EAAO6O,KAAK2W,EAAK3T,KAAK9C,UAAa/O,EAAOyY,iBAAmB+M,EAAKoW,OACtFqyC,EAAyB,EACzBC,EAAuB,GAC3B,GAAmB,GAAfhiD,EAAWvY,KACXs6D,EAAiBjuE,EAAOiR,uBACpBkvB,IACApxB,EAAY/O,EAAOkX,kBACnB+2D,GAAkB,GAEtBD,EAA2BhuE,EAAOkX,kBAClCg3D,EAAe,QACZ,GAAmB,GAAfhiD,EAAWvY,KAClB5E,EAAY/O,EAAOkX,kBACnB+2D,EAAiBjuE,EAAOkR,sBACxB88D,EAA2Bj/D,OACxB,GAAmB,GAAfmd,EAAWvY,KAElB5E,EAAYoxB,EAAiBngC,EAAOkK,WAAWgiB,EAAWqb,WAAWx4B,UAAYA,EAAY/O,EAAOkK,WAAWgiB,EAAWqb,WAAWx4B,UAAY,GAEjJk/D,EAAiBjuE,EAAOgR,oBACxBg9D,EAA2Bj/D,EAC3Bm/D,EAAeluE,EAAOkK,WAAWgiB,EAAWqb,WAAWt1B,OAAS,GAAO,QACpE,GAAmB,GAAfia,EAAWvY,MAA4C,IAAfuY,EAAWvY,KAC1Ds6D,EAAiBjuE,EAAO+Q,sBACrB,GAAmB,GAAfmb,EAAWvY,KACds6D,EAAiBjuE,EAAO8Q,mBAChC9Q,EAAOC,UAAUisB,EAAWnsB,UAAU8gD,gBACrC7gD,EAAOC,UAAUisB,EAAWnsB,UAAUgD,aACzCgM,GAA0I,GAArHxF,KAAK2C,KAAKlM,EAAOC,UAAUisB,EAAWnsB,UAAUiB,QAAQO,OAAOvB,EAAOC,UAAUisB,EAAWnsB,UAAUF,YAA7G,QAAoI,GAAKG,EAAOC,UAAUisB,EAAWnsB,UAAU+gD,SAI5L/xC,IAA2I,GAArHxF,KAAK2C,KAAKlM,EAAOC,UAAUisB,EAAWnsB,UAAUiB,QAAQO,OAAOvB,EAAOC,UAAUisB,EAAWnsB,UAAUF,YAA7G,QAAoI,GAAKG,EAAOC,UAAUisB,EAAWnsB,UAAU+gD,SAI1L9gD,EAAOC,UAAUisB,EAAWnsB,UAAU+C,YAAc9C,EAAOC,UAAUisB,EAAWnsB,UAAUgD,aAC7FgM,EAAYA,EAAY,GAAK/O,EAAOC,UAAUisB,EAAWnsB,UAAUiD,kBAE3DhD,EAAOC,UAAUisB,EAAWnsB,UAAU+C,WAAa9C,EAAOC,UAAUisB,EAAWnsB,UAAUgD,eAClGgM,GAAa,GAAK/O,EAAOC,UAAUisB,EAAWnsB,UAAUiD,wBAG1C,GAAmB,GAAfkpB,EAAWvY,KACtBs6D,EAAiBjuE,EAAO8Q,wBACrB,GAAmB,GAAfob,EAAWvY,KAClBs6D,EAAiBjuE,EAAOmR,6BACrB,GAAmB,GAAf+a,EAAWvY,KAClBs6D,EAAiBjuE,EAAOoR,uBACrB,GAAmB,IAAf8a,EAAWvY,KAC3Bs6D,EAAiBjuE,EAAOqR,4BACZ,GAAmB,GAAf6a,EAAWvY,KAClBs6D,EAAiBjuE,EAAOsR,+BACrB,IAAmB,GAAf4a,EAAWvY,KAMlB,MAAM,IAAI9S,MAAM,2CALhBotE,EAAiB,EACjBD,EAA2B,EAC3BE,EAAe,EACfn/D,EAAY,CAGf,CAED,GAAKs2C,EAAKyG,cAAgBj8B,EAAWxc,aAAegyC,EAAK0G,sBAAyB1G,EAAKkJ,iBAAkB,CACrGlJ,EAAKtmB,QAED,MAAMovC,EAAiBnuE,EAAOK,gBAAgB6rB,EAAWnsB,UAAUiB,QAAQO,OAAS,EAC9E6sE,EAAcliD,EAAW4H,oBAAsBq6C,EAK/CE,EAAa,iBACnB,IAAK,IAAIplE,EAAI,EAAGA,EAAIjJ,EAAOgW,wBAAyB/M,IAChDo8C,EAAK0J,OAAO9lD,GAAKijB,EAAW2H,sBAAwBtqB,KAAKiM,IAAI,EAAGjM,KAAKuC,IAAIuiE,EAAYD,IAAgB7kE,KAAKiM,IAAI,EAAG44D,GACjH/oB,EAAK2J,WAAW/lD,GAAKijB,EAAW2H,uBAAyB,EAAI,EAC7DwxB,EAAK4J,oBAAoBhmD,GAAK,EAC9Bo8C,EAAK6J,kBAAkBjmD,GAAK,EAC5Bo8C,EAAK8J,4BAA4BlmD,GAAK,CAIjD,CACDo8C,EAAKkJ,kBAAmB,EAExB,IAAK,IAAItlD,EAAY,EAAGA,EAAIjJ,EAAOgW,wBAAyB/M,IACxDo8C,EAAKW,YAAY/8C,GAAK,EACtBo8C,EAAKa,iBAAiBj9C,GAAK,EAC3Bo8C,EAAKgK,oBAAoBpmD,GAAK,EAC9Bo8C,EAAKiK,yBAAyBrmD,GAAK,EAEvCo8C,EAAKxiD,WAAa,EAClBwiD,EAAK+J,gBAAkB,EACvB,IAAK,IAAInmD,EAAY,EAAGA,EAAIjJ,EAAO+V,cAAe9M,IAC9Co8C,EAAKtqC,cAAc9R,GAAKy4B,GAAM4sC,gBAAgBpiD,EAAWyE,UAAU1nB,GAAGqqB,SAAUpH,EAAWyE,UAAU1nB,GAAGY,YAG5G,GAAImjE,EAAU,CACV,MAAMuB,EAAkClpB,EAAKoJ,mBACvC+f,EAAgCnpB,EAAKoJ,mBAAqB,EAChEif,EAAgBC,EAActoB,EAAKsJ,aACnC,MAAM17C,EAAuB1J,KAAKC,IAAI0iB,EAAW4lB,mBACjD87B,EAAsBlsC,GAAMosB,sBAAsB,EAAMygB,EAA0Bt7D,GAAgBjT,EAAOwU,aACzGq5D,EAAoBnsC,GAAMosB,sBAAsB,EAAM0gB,EAAwBv7D,GAAgBjT,EAAOwU,aAEjGm0D,IACAkF,EAAoB,GAGpBxoB,EAAKoJ,mBAAqB,GAAKx7C,IAAcw6D,GAAmB,EACvE,MAAM,GAAiB,MAAbpoB,EAAKvmB,KACZ8uC,EAAsBC,EAAoB,EAC1CxoB,EAAKsJ,aAAe,EACpBtJ,EAAKoJ,mBAAqB,EAC1BpJ,EAAKqJ,sBAAwBnJ,MAC1B,CACH,MAAMzmB,EAAaumB,EAAKvmB,KAClBmuB,EAAwB5H,EAAK4H,SAE7BL,EAAwBvH,EAAKuH,cAC7BE,EAAsBzH,EAAKyH,YAG3BruB,EAAsBK,EAAKP,eAAeotB,GAC1CU,EAAoBvtB,EAAKpB,KAAKe,EAAc,GAC5C6tB,EAAkBxtB,EAAKpB,KAAKe,GAC5BkuB,EAAwBC,EAAgB5sD,EAAOuQ,aAC/Cs8C,EAAsBC,EAAc9sD,EAAOuQ,aAC3Ck+D,GAAoB3vC,EAAKnF,MAAQ0yB,EAAShvB,MAAQr9B,EAAOuQ,aACzDm+D,GAAkB5vC,EAAKnF,MAAQ2yB,EAAOjvB,MAAQr9B,EAAOuQ,aAE3D80C,EAAKoJ,mBAAqB,EAE1B,MAAM7C,EAAwBD,EAAc3rD,EAAOuQ,aAAe7R,KAAK+gC,KACjEusB,EAAsBJ,EAAgB,EACtC+iB,EAAmC/iB,EAAgBe,EACnDiiB,EAAiC5iB,EAAcW,EAC/CkiB,EAAwBtlE,KAAKuC,IAAI,GAAM8/C,EAAgB6iB,IAAaC,EAASD,IAC7EK,EAAsBvlE,KAAKuC,IAAI,GAAMkgD,EAAcyiB,IAAaC,EAASD,IAO/E,GANAb,EAAsB,EACtBC,EAAoB,EACpBH,EAAgBrhB,EAAS/6B,UAAYg7B,EAAOh7B,SAAW+6B,EAAS/6B,UAAYu9C,EAC5ElB,EAActhB,EAAS/6B,UAAYg7B,EAAOh7B,SAAW+6B,EAAS/6B,UAAYw9C,EAC1EzpB,EAAKsJ,aAAegf,GAEd99C,EAAWxc,aAAegyC,EAAK6H,oBAAmC,MAAZD,EAAkB,CAC1E,MAAMh6C,GAAwBiZ,EAAW4lB,kBACzC,GAAI7+B,EAAe,EAAK,CAEpB,MAAM87D,EAA0BliB,EAAcF,EAC9CihB,GAAuBrkE,KAAKuC,IAAI,GAAMijE,EAAkBJ,GAA4B17D,GACpF46D,GAAqBtkE,KAAKuC,IAAI,GAAMijE,EAAkBH,GAA0B37D,GAC5E+4C,GAAeW,EAAgBoiB,IAAiBtB,GAAmB,EAC1E,CACJ,CAEJ,CAEDpoB,EAAKmJ,aAAeif,EAEpB,IACIvT,EACAM,EAFAwU,EAAgC9iD,EAAW+E,WAI/C,GAAI/E,EAAW8G,eAAgB,CAE3B,MAAMi8C,EAA0C/iD,EAAW+E,WACvB,MAAhC/E,EAAW2b,eAAe,KAC1B3b,EAAW2b,eAAe,GAAK,IAAInD,IACvC,MAAMwqC,EAAwChjD,EAAW2b,eAAe,GAGxE,IAAIsyB,EAA0BjuC,EAAWwb,oBACrC0yB,EAA0BluC,EAAWyb,qBACrC0yB,EAAwBnuC,EAAWwb,oBACnC4yB,EAAwBpuC,EAAWyb,qBACnC4yB,GAAyB,EAEzB77D,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAW,iBAAiBF,MAAOixC,EAAckR,EAAKlP,mBACzFgkB,EAAkBz7D,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,iBAAiBF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GAC5HkkB,EAAgB37D,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,iBAAiBF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GAC1HokB,GAAgB,GAEhB77D,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAW,kBAAkBF,MAAOixC,EAAckR,EAAKlP,mBAC1FikB,EAAkB17D,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,kBAAkBF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GAC7HmkB,EAAgB57D,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,kBAAkBF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GAC3HokB,GAAgB,GAGpB0U,EAAwB/nC,8BAA8BizB,EAAiBC,GAAkBG,GACzF2U,EAAsBhoC,8BAA8BmzB,EAAeC,GAAgBC,GAEnFL,EAAa+U,EAAwBtqC,cAAc,GACnD61B,EAAW0U,EAAsBvqC,cAAc,GAG/CzY,EAAW+E,WAAag+C,EACxB/iD,EAAWuhC,mBAAqBwhB,CACnC,CAGD,MAAMzd,EAAqCnM,EAAKmM,iBAChDA,EAAiB9F,iBAAiBx/B,EAAYy/B,EAAa3rD,EAAOuQ,aAAe64D,EAAe3R,EAAiB/4D,KAAKinD,iBAAkBN,GACxI,MAAMgG,EAA2BhG,EAAKmM,iBAAiBnG,eACjDC,EAAyBjG,EAAKmM,iBAAiBlG,aAGrD,GAFAp/B,EAAW+E,WAAa+9C,EAEP,MAAb3pB,EAAKvmB,MAAgBjP,EAAWtc,OAAQ,CAExC,MAAMy5C,EAAwB3H,EAAK2H,SAC7BC,EAAwB5H,EAAK4H,SACnC,GAAgB,MAAZD,EAAkB,CAClB,MAAMmiB,EAAuBniB,EAASvvB,QAAQ4nB,EAAKgJ,oBAAsBrB,EAAStvB,KAAKsvB,EAAStvB,KAAKn8B,OAAS,GAAG+vB,SAAW+zB,EAAK5nB,QAAQ,GAGzI,GAFI+zB,EAAiB3G,iBAAgB6iB,GAAiByB,EAAe3d,EAAiBvG,qBAClFuG,EAAiB1G,eAAc6iB,GAAewB,EAAe3d,EAAiBtG,oBAC7En7B,EAAMla,WAAY,CACnB,MAAMu5D,EAAwBpiB,EAASvvB,QAAQl8B,OAAS8jD,EAAK8I,UACzDqD,EAAiB3G,iBAAgBijB,EAAuBpsC,GAAMwrC,uBAAuB7nB,EAAK8I,UAAYihB,EAAgB5d,EAAiBvG,sBACvIuG,EAAiB1G,eAAcijB,EAAqBrsC,GAAMwrC,uBAAuB7nB,EAAK8I,UAAYihB,EAAgB5d,EAAiBtG,mBAC1I,CACJ,CACD,GAAgB,MAAZ+B,EAAkB,CAClB,MAAMkiB,EAAuBliB,EAASxvB,QAAQ4nB,EAAKiJ,qBAAuBjJ,EAAK5nB,QAAQ,GAAK4nB,EAAKvmB,KAAKpB,KAAK2nB,EAAKvmB,KAAKpB,KAAKn8B,OAAS,GAAG+vB,UAGtI,GAFIkgC,EAAiBzG,iBAAgB2iB,GAAiByB,EAAe3d,EAAiBrG,qBAClFqG,EAAiBxG,eAAc2iB,GAAewB,EAAe3d,EAAiBpG,oBAC7Er7B,EAAMla,WAAY,CACnB,MAAMu5D,EAAwBniB,EAASxvB,QAAQl8B,OAAS8jD,EAAK8I,UACzDqD,EAAiBzG,iBAAgB+iB,EAAuBpsC,GAAMwrC,uBAAuB7nB,EAAK8I,UAAYihB,EAAgB5d,EAAiBrG,sBACvIqG,EAAiBxG,eAAc+iB,EAAqBrsC,GAAMwrC,uBAAuB7nB,EAAK8I,UAAYihB,EAAgB5d,EAAiBpG,mBAC1I,CACJ,CACJ,CAED,GAAIz9C,EAAyBue,EAAWze,SAAU,CAC9C,IAAIw6B,EAAqBjoC,EAAO+Y,wBAAwBmT,EAAW+b,YAAcmlC,EAC7EiC,EAAgC,EAChCC,EAA8B,EAC9B5wE,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAckR,EAAKlP,mBACvFlO,EAAajoC,EAAO+Y,wBAAwB/Y,EAAO+Y,wBAAwBxX,OAAS,GACpF8tE,EAAyB3wE,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GAAWn2C,EAAuB,iBACnKsvE,EAAuB5wE,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GAAUn2C,EAAuB,kBAIpK0tE,GAAiBzlC,EAFaojB,EAAc,IAEEgkB,EAC9C1B,GAAe1lC,EAFaqjB,EAAY,IAEEgkB,CAC7C,CACD,GAAI1hE,EAAqBse,EAAWze,UAAY/O,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAckR,EAAKlP,iBAAkB,CACrJ,MAAMkX,EAAwBhC,EAAc,IACtCkC,EAAsBjC,EAAY,IACxC,IAAIikB,EAAyBrjD,EAAWgc,OACpCsnC,EAAuBtjD,EAAWgc,OAClCxpC,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAmB,OAAEF,MAAOixC,EAAckR,EAAKlP,mBAClFo5B,EAAiB7wE,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAmB,OAAEF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GAASn2C,EAAOmZ,aACpIq2D,EAAe9wE,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAmB,OAAEF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GAAQn2C,EAAOmZ,cAEjIza,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAckR,EAAKlP,mBACvFo5B,GAAkB,EAAI7wE,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GAC9Hq5B,GAAgB,EAAI9wE,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAckR,EAAKlP,iBAAiB,IAEhIu3B,GAAiBhsC,GAAMkJ,cAAc,EAAmByiB,GAAiBrtD,EAAOyY,iBAAgB,KAChGk1D,GAAejsC,GAAMkJ,cAAc,EAAiB2iB,GAAevtD,EAAOyY,iBAAgB,IAC7F,CAED,GAAI5K,EAAsBqe,EAAWze,SAAU,CAC3C,IAAImG,EACA67D,EACAC,EA+BAC,EACJ,GA9BIzjD,EAAWiE,SAAWnwB,EAAO0T,SAASnS,QACtCqS,EAAuC,EAA1BsY,EAAWuG,aAEpBvG,EAAWuG,cAAgBzyB,EAAOub,WAAWnY,WAAW,iBAAiBqY,YACzE7H,EAAawM,OAAOwvD,mBACxBH,EAAwBvjD,EAAWsG,aACnCk9C,EAAsBD,IAEtB77D,EAAa5T,EAAO0T,SAASwY,EAAWiE,SAASvc,WACjD67D,EAAwBzvE,EAAO0T,SAASwY,EAAWiE,SAAShkB,UAC5DujE,EAAsBD,GAGtB/wE,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAW,iBAAiBF,MAAOixC,EAAckR,EAAKlP,mBACzFviC,EAAgI,EAAnHlV,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,iBAAiBF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GACnHviC,GAAwE,EAA1D5T,EAAOub,WAAWnY,WAAW,iBAAiBqY,YAC5D7H,EAAawM,OAAOwvD,oBAIxBlxE,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAW,iBAAiBF,MAAOixC,EAAckR,EAAKlP,mBACzFs5B,EAAwB/wE,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,iBAAiBF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GAAS,GAC3Iu5B,EAAsBhxE,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,iBAAiBF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GAAQ,IAQpH,MAApBkP,EAAKmK,YACLmgB,EAAetqB,EAAKmK,gBACjB,CAIH,GADAmgB,EAAeF,EAFQ/tC,GAAMmuC,gBAAgB3jD,EAAYmhD,EAAiBnhD,EAAWid,SAC3CkiB,EAAc,IAEpDz3C,EAAa,EAAK,CAClB,MAAMk8D,EAAiCl8D,EAAa49C,EAAiBvH,eACrE0lB,GAAgBpmE,KAAKiM,IAAI,EAAKjM,KAAKuC,IAAI,EAAK,EAAMgkE,EAAyB,GAC9E,CACJ,CAED,IAAIC,EAAiBruC,GAAMmuC,gBAAgB3jD,EAAYmhD,EAAiBnhD,EAAWkd,aACnF,MAAM4mC,EAAkC1kB,EAAY,IACpD,GAAmB,GAAfp/B,EAAWvY,KAA4B,CACvC,IAAIs8D,EAAqBP,EAAsBK,EAASC,EACxD,GAAIp8D,EAAa,EAAK,CAClB,MAAMs8D,EAA+Bt8D,EAAa49C,EAAiBtH,aACnE+lB,GAAc1mE,KAAKiM,IAAI,EAAKjM,KAAKuC,IAAI,EAAK,EAAMokE,EAAuB,GAC1E,CAED7qB,EAAKmK,YAAcygB,EAEnBvC,GAAiBiC,EACjBhC,GAAesC,CAClB,CACJ,CAED,IAAMpgD,EAAWxc,aAAegyC,EAAK0G,sBAA0C,MAAjB1G,EAAK2H,SAAkB,CAEjF,MAAMl9B,EAAwB5D,EAAW2lB,mBACrC/hB,EAAgB,IAChB89C,GAAuBrkE,KAAKuC,IAAI,EAAK0lD,EAAiBzH,iBAAmBj6B,GACzE+9C,GAAqBtkE,KAAKuC,IAAI,EAAK0lD,EAAiBxH,eAAiBl6B,GAE5E,CAG4C,GAAzC5D,EAAWvY,MAAuD,MAArB0xC,EAAK+I,eAIlD/I,EAAK+I,aAAe/I,EAAK5nB,QAAQ,GAChB,MAAb4nB,EAAKvmB,OAAcumB,EAAK+I,cAAgB/I,EAAKvmB,KAAKlB,oBACtDynB,EAAK+I,aAAe7kD,KAAKiM,IAAI,EAAGjM,KAAKuC,IAAI9L,EAAO0Y,UAAY,EAAG2sC,EAAK+I,gBAGxE,IAAI+hB,EAA+B3e,EAAiB/F,qCACpD,GAAK39C,EAAyBoe,EAAWze,SAElC,CAEH,MAAM2iE,EAAoC/kB,EAAc,GAClDglB,EAAkC/kB,EAAY,GAGpD,GAAIp/B,EAAW8G,eAAgB,CAC3B,MAAMs9C,EAAgCjlB,EAAc,IAC9CklB,EAA8BjlB,EAAY,IAC1CklB,EAAgCnlB,EAAc,IAC9ColB,EAA8BnlB,EAAY,IAEhD4O,EAAYj2B,eAAevC,GAAMslB,4BAA6BtoD,KAAKinD,iBAAkByqB,EAA4BE,EAAuBE,GACxIhW,EAAUv2B,eAAevC,GAAM0lB,0BAA2B1oD,KAAKinD,iBAAkB0qB,EAA0BE,EAAqBE,GAE5HprB,EAAK+K,YAAY7uD,OAAS,IAAG8jD,EAAK+K,YAAY,GAAK,IAAIt3B,IAC3DusB,EAAK+K,YAAY,GAAG12B,6BAA6BgI,GAAMslB,4BAA6BtlB,GAAM0lB,0BAA2B,EAAM7B,EAA6D,GAAtC2U,EAAYvmD,MAC9Jw8D,GAAwBjW,EAAY/1B,4BAEpCkhB,EAAKgL,gBAAkB,CAC1B,KACI,CACD,MAAMqgB,EAAuE,MAAjCxkD,EAAWuhC,mBAA8BvhC,EAAWuhC,mBAAqBvhC,EAAW+E,WAEhI,IAAK,IAAIhoB,EAAY,EAAGA,EAAIynE,EAAmB9rC,kBAAmB37B,IAAK,CACnE,MAAMqnE,EAAgCjlB,EAAe,GAAuCpiD,GACtFsnE,EAA8BjlB,EAAa,GAAuCriD,GAClFunE,EAAgCnlB,EAAe,GAAuCpiD,GACtFwnE,EAA8BnlB,EAAa,GAAuCriD,GACxF,IAAIixD,EAAiCwW,EAAmB/rC,cAAc17B,GACtE,MAAMuxD,EAA+D,MAA/BtuC,EAAW4yC,kBAA4E,MAAhD5yC,EAAW4yC,iBAAiBn6B,cAAc17B,GAAcijB,EAAW4yC,iBAAiBn6B,cAAc17B,GAAKynE,EAAmB/rC,cAAc17B,GAGjNixD,EAAWvmD,MAAQ6mD,EAAS7mD,OAC5BumD,EAAaM,GAGjBN,EAAWj2B,eAAevC,GAAMslB,4BAA6BtoD,KAAKinD,iBAAkByqB,EAA4BE,EAAuBE,GACvIhW,EAASv2B,eAAevC,GAAM0lB,0BAA2B1oD,KAAKinD,iBAAkB0qB,EAA0BE,EAAqBE,GAC3HprB,EAAK+K,YAAY7uD,QAAU0H,IAAGo8C,EAAK+K,YAAYnnD,GAAK,IAAI6vB,IAC5DusB,EAAK+K,YAAYnnD,GAAGywB,6BAA6BgI,GAAMslB,4BAA6BtlB,GAAM0lB,0BAA2B,EAAM7B,EAA4D,GAArC2U,EAAWvmD,MAC7Jw8D,GAAwBjW,EAAW/1B,2BACtC,CACDkhB,EAAKgL,gBAAkBqgB,EAAmB9rC,iBAC7C,CACJ,MA9CGygB,EAAKgL,gBAAkB,EAgD3B,GAAmB,GAAfnkC,EAAWvY,KAAgC,CAC3C,MAAMg9D,EAAkCzkD,EAAW6e,mBAAmBsa,EAAK+I,cAE3E+hB,GAAwBrmB,GAAiB4D,wCAAwCijB,GAGjF,IAAIC,EAAqC9mB,GAAiBwD,gBAAgBqjB,EAAuBnf,EAAiBzH,iBAAkBwjB,EAAenE,EAAe5X,EAAiBrH,eAC/K0mB,EAAmC/mB,GAAiBwD,gBAAgBqjB,EAAuBnf,EAAiBxH,eAAgBujB,EAAelE,EAAa7X,EAAiBpH,aAG7K,GAAIoH,EAAiB3G,eAAgB,CAEjC+lB,IADsB9mB,GAAiBwD,gBAAgBqjB,EAAuBnf,EAAiBhH,qBAAsB+iB,EAAenE,EAAe5X,EAAiBnH,cAC7HumB,GAA8Bpf,EAAiBvG,mBACzF,CACD,GAAIuG,EAAiB1G,aAAc,CAE/B+lB,IADsB/mB,GAAiBwD,gBAAgBqjB,EAAuBnf,EAAiB/G,mBAAoB8iB,EAAelE,EAAa7X,EAAiBnH,cAC3HwmB,GAA4Brf,EAAiBtG,iBACrF,CACD,GAAIsG,EAAiBzG,eAAgB,CAEjC6lB,IADsB9mB,GAAiBwD,gBAAgBqjB,EAAuB,EAAKpD,EAAenE,EAAe5X,EAAiBlH,cAC3FsmB,GAA8Bpf,EAAiBrG,mBACzF,CACD,GAAIqG,EAAiBxG,aAAc,CAE/B6lB,IADsB/mB,GAAiBwD,gBAAgBqjB,EAAuB,EAAKpD,EAAelE,EAAa7X,EAAiBlH,cAC3FumB,GAA4Brf,EAAiBpG,iBACrF,CAED,MAAMxpB,EAA4BljC,KAAKslE,wBACvCpiC,EAAMjuB,KAAI,EACViuB,EAAMuB,KAAOF,GAAmBe,qCAAqC,IACrEpC,EAAMsB,KAAOD,GAAmBS,6BAA6B,KAE7D9B,EAAMqC,eAAevC,GAAMslB,4BAA6BtoD,KAAKinD,iBAAkBirB,GAA8B,EAAMA,GAA6B,GAChJhvC,EAAMqC,eAAevC,GAAM0lB,0BAA2B1oD,KAAKinD,iBAAkBkrB,GAA4B,EAAMA,GAA2B,GACtIxrB,EAAK+K,YAAY7uD,QAAU8jD,EAAKgL,kBAAiBhL,EAAK+K,YAAY/K,EAAKgL,iBAAmB,IAAIv3B,IAClGusB,EAAK+K,YAAY/K,EAAKgL,iBAAiB32B,6BAA6BgI,GAAMslB,4BAA6BtlB,GAAM0lB,0BAA2B,EAAM7B,GAAuB,GACrKF,EAAKgL,iBACR,CAID,GAFA8f,EAAuB5mE,KAAKuC,IAAI,EAAKqkE,GAElB,GAAfjkD,EAAWvY,MAA4C,IAAfuY,EAAWvY,KAA8B,CAGjF,IAAIm9D,EAA8B,EAC9BC,EAAiC,EAEjCC,EAA2B,EAC/B,MAAMr7D,EAAuBoa,EAAMpa,YACnC,GAAI0vC,EAAKt4C,WAAa,GAAK4I,EAAa,CACpC,MAAM1I,EAAmB1D,KAAK+b,MAAM4G,EAAWmd,QAAUrpC,EAAOwQ,kBAChEwgE,EAAmB3rB,EAAK5nB,QAAQ3wB,EAAsBu4C,EAAKt4C,WAAYmf,EAAWmG,eAAgBplB,IAAao4C,EAAK5nB,QAAQ,EAC/H,CAGD,MAAMvnB,EAA+D,IAAvCgW,EAAWvY,KAA+BuY,EAAW+c,gBAAgB/yB,aAAelW,EAAOiW,WAAWiW,EAAWsE,WAAWta,aAC1J,IAAK,IAAIjN,EAAY,EAAGA,GAA4C,IAAvCijB,EAAWvY,KAA8B,EAAI3T,EAAO+V,eAAgB9M,IAAK,CAElG,MAAMgoE,EAAyE,IAAvC/kD,EAAWvY,KAA+BuY,EAAW+c,gBAAgB9yB,kBAAkBlN,GAAG,EAAEjJ,EAAOiW,WAAWiW,EAAWsE,WAAWra,kBAAkBlN,GAAK,EAC7Ls0B,EAAgB8nB,EAAK5nB,QAAQ9nB,EAAc,EAAM1M,EAAIo8C,EAAKt4C,WAAc9D,EAAMgoE,EAAyB5rB,EAAKt4C,WAAckkE,EAAyB,GACnJ/sC,EAAWlkC,EAAOwW,oBAAoB0V,EAAWyE,UAAU1nB,GAAG2nB,WAAWna,KACzE6a,EAAWtxB,EAAOsW,wBAAwB26D,GAA0BD,EACpEE,EAAqBniE,GAAawuB,EAAQmwC,GAAiBN,EAAgB97C,EAC3E6/C,EAAmBpiE,GAAawuB,EAAQowC,GAAeP,EAAgB97C,EACvE8/C,EAAwB9pC,GAAW8J,mBAAmB8/B,GACtDG,EAAsB/pC,GAAW8J,mBAAmB+/B,GACpDz6D,EAAmB1W,EAAOwW,oBAAoB0V,EAAWyE,UAAU1nB,GAAG2nB,WAAWla,SACjF46D,EAA0BptC,EAAWktC,EAAgB16D,EACrD66D,EAAwBrtC,EAAWmtC,EAAc36D,EAGjD86D,EAA4BnmB,EAAe,EAA0CpiD,GACrFwoE,EAA0BnmB,EAAa,EAA0CriD,GACvF,IAAIywD,EACAC,EACqB,GAArB6X,GAA+C,GAAnBC,GAC5B/X,EAAYnwD,KAAKoB,IAAI,EAAKpB,KAAK2C,KAAKolE,EAAkBF,GAAiBI,GAAqBJ,EAC5FzX,EAAUpwD,KAAKoB,IAAI,EAAKpB,KAAK2C,KAAKqlE,EAAgBF,GAAeI,GAAmBJ,IAEpF3X,EAAY4X,EACZ3X,EAAU4X,GAEdlsB,EAAKW,YAAY/8C,GAAKywD,EAAY4T,EAClCjoB,EAAKa,iBAAiBj9C,GAAKM,KAAKoB,IAAIgvD,EAAUD,EAAW,EAAMnU,GAE/D,IAAImsB,EAAyBxlD,EAAWyE,UAAU1nB,GAAGkD,UACjDwlE,EAAuBzlD,EAAWyE,UAAU1nB,GAAGkD,UAC/ClD,EAAI,EACAvK,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAW,eAAeF,MAAQ+F,EAAGkrC,EAAckR,EAAKlP,mBAC3Fu7B,GAAkBhzE,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,eAAeF,MAAQ+F,EAAGkrC,EAAckR,EAAKlP,iBAAiB,GAAS,GACvIw7B,GAAgBjzE,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,eAAeF,MAAQ+F,EAAGkrC,EAAckR,EAAKlP,iBAAiB,GAAQ,IAGpIz3C,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAW,eAAeF,MAAQ+F,EAAE,EAAGkrC,EAAckR,EAAKlP,mBAC7Fu7B,GAAkBhzE,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,eAAeF,MAAQ+F,EAAE,EAAGkrC,EAAckR,EAAKlP,iBAAiB,GAAS,GACzIw7B,GAAgBjzE,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,eAAeF,MAAQ+F,EAAE,EAAGkrC,EAAckR,EAAKlP,iBAAiB,GAAQ,IAI9I,MAAMy7B,EAA8BlwC,GAAMo/B,uBAAuB4Q,GAC3DG,EAA4BnwC,GAAMo/B,uBAAuB6Q,GAI/D,IAAIG,EAH+BF,EAAsB5xE,EAAOwW,oBAAoB0V,EAAWyE,UAAU1nB,GAAG2nB,WAAWja,cAInHo7D,EAH6BF,EAAoB7xE,EAAOwW,oBAAoB0V,EAAWyE,UAAU1nB,GAAG2nB,WAAWja,cAMnH,GAAI1N,EAAIiN,EAAc,CAElB,IAAI87D,EAEAA,EADgC,MAAhC3sB,EAAKkK,qBAAqBtmD,GACHo8C,EAAKkK,qBAAqBtmD,GAE1BM,KAAKoB,IAAI,IAAOumE,EAAalD,GAA4BE,GAEpF,MAAM+D,EAA6B1oE,KAAKoB,IAAI,IAAOwmE,EAAWnD,GAA4BE,GAC1F7oB,EAAKkK,qBAAqBtmD,GAAKgpE,EAC/BH,GAAmBE,EACnBD,GAAiBE,EAEjBlB,GAA0Bc,CAC7B,MAEGC,GAA2C,IAAxB9xE,EAAO0M,eAC1BqlE,GAAyC,IAAxB/xE,EAAO0M,eAExBokE,GAAuB,EAAMvnE,KAAKuC,IAAI,EAAKogB,EAAWyE,UAAU1nB,GAAGkD,UAAY,IAWnF,GARA2lE,GAAmBzmB,EAAe,GAA0CpiD,GAC5E8oE,GAAiBzmB,EAAa,GAA0CriD,GAOpEvK,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAckR,EAAKlP,iBAAkB,CAEzG,MAAM4kB,EAAmBr8D,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GAC3H6kB,EAAiBt8D,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GAC/H27B,GAAqB/W,GAAY,GAAOA,EAAW/6D,EAAOyU,YAAc,IAAMzU,EAAOyU,YAAc,GAAMitB,GAAMm5B,6BAA6BE,GAC5IgX,GAAmB/W,GAAU,GAAOA,EAASh7D,EAAOyU,YAAc,IAAMzU,EAAOyU,YAAc,GAAMitB,GAAMm5B,6BAA6BG,EACzI,CAED3V,EAAKgK,oBAAoBpmD,GAAK6oE,EAC9BzsB,EAAKiK,yBAAyBrmD,IAAM8oE,EAAgBD,GAAmBvsB,CAE1E,CAEDurB,IAAwBvnE,KAAKoB,IAAI,EAAM,EAAM,IAAMuhB,EAAWwE,kBAAoB,IAAS,GAAO,EAClGogD,GAAuB,EAAMvnE,KAAKuC,IAAI,EAAKvC,KAAKiM,IAAI,EAAKu7D,EAAyB,GAAK,GACvFD,EAAsB,EAA4B,EAAtBA,EAC5B,MAAMgB,EAA0B7D,EAAiB6C,EAAsBX,EAAuBvC,EAAsBE,EAAuBziB,EAAc,GACnJ0mB,EAAwB9D,EAAiB6C,EAAsBX,EAAuBtC,EAAoBE,EAAqBziB,EAAY,GACjJjG,EAAKxiD,WAAaivE,EAClBzsB,EAAK+J,iBAAmB2iB,EAAgBD,GAAmBvsB,EAG3D,IAAI2sB,EAAoChmD,EAAWwE,kBAC/CyhD,EAAkCjmD,EAAWwE,kBAC7ChyB,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAckR,EAAKlP,mBACvF+7B,GAA6BxzE,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GAAS,GAC9Ig8B,GAA2BzzE,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GAAQ,IAG/I,IAAIi8B,EAAyD,GAAxBpyE,EAAO0M,eAAuBwlE,EAA4B,GAC/F,MAAMG,EAAuD,GAAxBryE,EAAO0M,eAAuBylE,EAA0B,GAE7F,IAAIG,EAAwBF,EAAyB/mB,EAAc,IAC/DknB,EAAsBF,EAAuB/mB,EAAY,IAC7DjG,EAAKqL,aAAe4hB,EACpBjtB,EAAKsL,eAAiB4hB,EAAcD,GAAiB/sB,CAGxD,KAAM,CACH,MAAMitB,EAAuBjpE,KAAKoB,IAAI,GAAMgjE,EAAcD,GAAiBN,EAAgB,IACrFqF,EAA8BlpE,KAAKoB,IAAI6nE,EAAc,EAAMjtB,GAEjE,IAAIhoB,EAAgB8nB,EAAK5nB,QAAQ,GACjC,GAAI4nB,EAAKt4C,WAAa,IAAMgjB,EAAMpa,aAAeoa,EAAMra,gBAAiB,CACpE,MAAMzI,EAAmB1D,KAAK+b,MAAM4G,EAAWmd,QAAUrpC,EAAOwQ,kBAChE,GAAIuf,EAAMra,eAAgB,CACtB,MAAMg9D,EAAyBrtB,EAAK5nB,QAAQ,EAAI3wB,EAAsBu4C,EAAKt4C,WAAa,EAAGmf,EAAWmG,eAAgBplB,IAAao4C,EAAK5nB,QAAQ,GAChJ+vC,EAAsBjkE,KAAKoB,IAAI,EAAK+nE,EAAiB,IACrDrtB,EAAKmL,8BAAgCjnD,KAAKoB,IAAI,GAAM+nE,EAAiBxE,EACxE,MACG3wC,EAAQ8nB,EAAK5nB,QAAQ3wB,EAAsBu4C,EAAKt4C,WAAYmf,EAAWmG,eAAgBplB,GAE9F,CAED,MAAM2pC,EAAqB7nC,GAAawuB,EAAQmwC,GAAiBN,EAC3DuF,EAAmB5jE,GAAawuB,EAAQowC,GAAeP,EAC7D,IAAI4E,EAGAA,EADgC,MAAhC3sB,EAAKkK,qBAAqB,GACHlK,EAAKkK,qBAAqB,GAE1BhmD,KAAKoB,IAAI,IAAOisC,EAAao3B,GAA4BE,GAEpF,MAAM+D,EAA6B1oE,KAAKoB,IAAI,IAAOgoE,EAAW3E,GAA4BE,GAC1F7oB,EAAKkK,qBAAqB,GAAK0iB,EAC/B,IAAIW,EAAiC3E,EAAiBkC,EAQtD,GANmB,GAAfjkD,EAAWvY,OACXi/D,GAA0B5yE,EAAOkK,WAAWgiB,EAAWqb,WAAW1kC,YAEnD,GAAfqpB,EAAWvY,OACXi/D,GAA0B5yE,EAAOC,UAAUisB,EAAWnsB,UAAU8C,YAEjD,GAAfqpB,EAAWvY,KAA4B,CACvC,MAAMk/D,EAAyBjpE,EAAmBsiB,EAAWriB,YAG7D,IAAIipE,EAA6BD,EAC7BE,EAA2BF,EAC3Bn0E,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAckR,EAAKlP,mBACvF28B,EAAsBp0E,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAckR,EAAKlP,iBAAiB,IAAoC,EAAzBn2C,EAAO8J,iBAChJipE,EAAoBr0E,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAckR,EAAKlP,iBAAiB,IAAmC,EAAzBn2C,EAAO8J,kBAGjJ,MAAMkpE,EAA0BF,EAAqBznB,EAAc,GAC7D4nB,EAAwBF,EAAmBznB,EAAY,GAC7DjG,EAAKx7C,WAAampE,EAClB3tB,EAAKqK,iBAAmBujB,EAAgBD,GAAmBztB,EAG3D,IAAI2tB,EAAgChnD,EAAW0c,cAC3ClqC,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAW,kBAAkBF,MAAOixC,EAAckR,EAAKlP,mBAC1F+8B,EAAwBx0E,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,kBAAkBF,MAAOixC,EAAckR,EAAKlP,iBAAiB,IAGvI,MAAMg9B,EAA6BD,EAAwB7nB,EAAc,IACzEhG,EAAKzc,cAAgBuqC,EAErB9tB,EAAKx7C,YAAew7C,EAAkB,cAAI,GAC7C,CACD,GAAmB,GAAfn5B,EAAWvY,KAAqC,CAEhD,IAAIy/D,EAA0BlnD,EAAWkF,cACrCiiD,EAAwBnnD,EAAWkF,cACnC1yB,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAoB,QAAEF,MAAOixC,EAAckR,EAAKlP,mBACnFi9B,EAAkB10E,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAoB,QAAEF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GACtHk9B,EAAgB30E,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAoB,QAAEF,MAAOixC,EAAckR,EAAKlP,iBAAiB,IAGxHkP,EAAKwJ,mBAAqBukB,EAC1B/tB,EAAKyJ,iBAAmBukB,EAGxBT,GAA0BrpE,KAAKoB,IAAI,EAAK,IAAO,EAAMyoE,GAAmBpzE,EAAOga,mBAAqB,IAEvG,CAED,MAAMs5D,EAAoBhsC,GAAW8J,mBAAmBwF,GACxD,GAAmB,GAAf1qB,EAAWvY,MAA8C,GAAfuY,EAAWvY,MAAoF,GAA3CuY,EAAWvY,MAAmD,GAAfuY,EAAWvY,KAAqC,CAG7L,MAAMw0B,EAAuBjc,EAAWic,aAClCC,EAAuBlc,EAAWkc,aAClCC,EAAuBnc,EAAWmc,aAKxCuqC,GAJiC1mD,EAAWoc,kBAGS,GAAfpc,EAAWvY,KAAuC,EAAIw0B,EAAe,GAE3G,MAAMorC,EAAsBloB,EAAc,GACpCmoB,EAAoBloB,EAAY,GAChCmoB,EAAuBlqE,KAAKoB,IAAI,GAAM09B,EAAeD,GAAgBmrC,EAAsB,IAC3FG,EAAqBnqE,KAAKoB,IAAI,GAAM09B,EAAeD,GAAgBorC,EAAoB,IACvFG,EAAuBpqE,KAAKoB,IAAI,GAAM09B,EAAeD,GAAgBmrC,EAAsB,IAAQ/F,EACnGoG,EAAqBrqE,KAAKoB,IAAI,GAAM09B,EAAcD,GAAgBorC,EAAoB,IAAQhG,EACpGnoB,EAAKW,YAAY,GAAKstB,EAAYhG,EAAamG,EAC/CpuB,EAAKW,YAAY,GAAKstB,EAAYhG,EAAaqG,EAC/CtuB,EAAKa,iBAAiB,GAAKusB,EAAsBlpE,KAAKoB,IAAI+oE,EAAaD,EAAc,EAAMluB,GAC3FF,EAAKa,iBAAiB,GAAKusB,EAAsBlpE,KAAKoB,IAAIipE,EAAaD,EAAc,EAAMpuB,EAC9F,MACGF,EAAKW,YAAY,GAAKstB,EAAYhG,EAClCjoB,EAAKa,iBAAiB,GAAKusB,EAEvC,IAAIoB,EAAkC,EACpCC,EAAgC,EACnC,GAAmB,IAAf5nD,EAAWvY,KAAiC,CAC/C,MAAMogE,EAAiC,EAAMxqE,KAAKiB,KAAKxK,EAAO8X,oBAC9D,IAAIk8D,EAAkC9nD,EAAWuc,iBAAmBzoC,EAAO+X,oBAC3Dk8D,EAAgC/nD,EAAWuc,iBAAmBzoC,EAAO+X,oBACrErZ,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAqB,SAAEF,MAAOixC,EAAckR,EAAKlP,mBACtF69B,EAA0BzqE,KAAKiM,IAAI,EAAK9W,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAqB,SAAEF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GAASn2C,EAAO+X,qBAC7Jk8D,EAAwB1qE,KAAKiM,IAAI,EAAK9W,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAqB,SAAEF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GAAQn2C,EAAO+X,sBAE5J,MAAMm8D,EAA8B,EAAM3qE,KAAKoB,IAAIpB,KAAKiM,IAAI,EAAK,EAAMw+D,EAA0B3oB,EAAc,KAA0C,IACnJ8oB,EAA8B,EAAM5qE,KAAKoB,IAAIpB,KAAKiM,IAAI,EAAK,EAAMy+D,EAAwB3oB,EAAY,KAA4C,IACjJ8oB,EAAmC7qE,KAAKoB,IAAI,EAAKpB,KAAK2C,KAAK6nE,GAA0BG,GACjGG,EAAmC9qE,KAAKoB,IAAI,EAAKpB,KAAK2C,KAAK6nE,GAA0BI,GAE3F,IAAIG,EAAwB/qE,KAAKiB,MAAM,EAAMjB,KAAKoB,IAAIypE,EAA0B,GAAO,IAAQp0E,EAAO8X,mBAAqB,IACvHy8D,EAAwBhrE,KAAKiB,MAAM,EAAMjB,KAAKoB,IAAI0pE,EAAwB,GAAO,IAAQr0E,EAAO8X,mBAAqB,IAEzHutC,EAAK5c,iBAAmB6rC,EACxBjvB,EAAKsK,uBAAyB4kB,EAAcD,GAAiB/uB,EAE7D,MAAMivB,GAA2D,GAA5BnvB,EAAK4K,mBAC1C,GAAIukB,EAAoB,CAWvB,IAAIC,EAAsB,EAC1B,IAAK,IAAIxrE,EAAY,EAAGA,EAAIjJ,EAAO8X,mBAAoB7O,IACtDo8C,EAAK0J,OAAO9lD,GAAKwrE,EACjBA,IAAgBlrE,KAAKT,IAAIS,KAAKe,UAG/B,MACMoqE,EADuB,GAAO10E,EAAO8X,mBAAqB,GAAOw8D,EAKvE,IAAI3qB,EAAiB,EACrB,IAAK,IAAI1gD,EAAY,EAAGA,EAAIjJ,EAAO8X,mBAAoB7O,IAAK,CAC3D,MAAMkD,EAA0B,GAALlD,EAAU,EAAMqrE,EACrCK,EAA0BtvB,EAAK0J,OAAO9lD,GAAKwrE,EACjDpvB,EAAK0J,OAAO9lD,GAAK0rE,EACjBhrB,IAAWgrB,EAAkB,IAAOxoE,CACpC,CAQD,IAAIyoE,EAA4B,EAC5BC,EAAmB,EACvB,IAAK,IAAI5rE,EAAYjJ,EAAO8X,mBAAqB,EAAG7O,GAAK,EAAGA,IAAK,CAChE,MAAM6rE,EAAmB,EAAMzvB,EAAK0J,OAAO9lD,GACrC8rE,EAAqBD,EAAWD,EACtC,GAAIlrB,EAAS,EAAK,CACjB,MAAMqrB,GAAkCrrB,EAAS+qB,EACjD,GAAIM,EAAyBD,EAAY,CACxCH,EAAoBC,EAAWG,EAC/B,KACA,CACD,CAEDrrB,GAAUorB,EAAaL,GADS,GAALzrE,EAAU,EAAMqrE,GAE3CO,EAAWC,CACX,CACD,IAAK,IAAI7rE,EAAY,EAAGA,EAAIjJ,EAAO8X,mBAAoB7O,IACtDo8C,EAAK0J,OAAO9lD,IAAM2rE,EAMnB,IAAK,IAAI3rE,EAAY,EAAGA,EAAIjJ,EAAO8X,mBAAqB,EAAG7O,IAAK,CAC/D,MAAMgsE,EAAuBhsE,EAAIM,KAAK+b,MAAM/b,KAAKe,UAAYtK,EAAO8X,mBAAqB7O,IACnFgmB,EAAeo2B,EAAK0J,OAAO9lD,GACjCo8C,EAAK0J,OAAO9lD,GAAKo8C,EAAK0J,OAAOkmB,GAC7B5vB,EAAK0J,OAAOkmB,GAAgBhmD,CAC5B,CACD,CAED,MAAMimD,EAA2BhpD,EAAWwc,eAAiB1oC,EAAOgY,kBACpE,IAAIm9D,EAA4B5rE,KAAKiM,IAAI,EAAK0/D,EAAmB7pB,EAAc,KAC3E+pB,EAA4B7rE,KAAKiM,IAAI,EAAK0/D,EAAmB5pB,EAAY,KAC7D5sD,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAmB,OAAEF,MAAOixC,EAAckR,EAAKlP,mBACpFg/B,EAAoB5rE,KAAKiM,IAAI,EAAK9W,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAmB,OAAEF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GAASn2C,EAAOgY,mBACrJo9D,EAAkB7rE,KAAKiM,IAAI,EAAK9W,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAmB,OAAEF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GAAQn2C,EAAOgY,oBAGhK,MAAMq9D,EAAsE,IAAvCF,EAAoBC,GACnDE,EAAuB/rE,KAAKoB,IAAI,EAAMpB,KAAKiB,KAAKjB,KAAKiM,IAAI,EAAK,EAAM6/D,IAAuB,MACjG,IAAK,IAAIpsE,EAAI,EAAGA,EAAIjJ,EAAO8X,mBAAoB7O,IAAK,CAEnD,MAAMmL,EAAuB,GAALnL,EAAU,EAAMM,KAAKoB,MAAO1B,EAAI,GAAM,GAAK,GAAM,OAAc,EAAJA,GAAS,KAAOjJ,EAAO8X,oBAAsB,GAAI,MAAkB,GAAL,EAAJ7O,GAAa,GAC1Jo8C,EAAKuK,sBAAsB3mD,GAAKM,KAAKoB,IAAI,EAAK2qE,EAAelhE,EAAS,GACtE,CAED,MAAMmhE,EAAoBrpD,EAAWyc,cAAgB3oC,EAAOiY,iBAC5D,IAAIu9D,EAAqBD,EAAYlqB,EAAc,IAC/CoqB,EAAqBF,EAAYjqB,EAAY,IACjC5sD,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAkB,MAAEF,MAAOixC,EAAckR,EAAKlP,mBACnFq/B,EAAajsE,KAAKiM,IAAI,EAAK9W,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAkB,MAAEF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GAASn2C,EAAOiY,kBAC7Iw9D,EAAWlsE,KAAKiM,IAAI,EAAK9W,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAkB,MAAEF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GAAQn2C,EAAOiY,mBAExJotC,EAAK1c,cAAgB6sC,EACrBnwB,EAAKwK,oBAAsB4lB,EAAWD,GAAcjwB,EAEpD,MAAMstB,EAAyBjpE,EAAmBsiB,EAAWriB,YAGjD,IAAIipE,EAA6BD,EAC7BE,EAA2BF,EAC3Bn0E,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAckR,EAAKlP,mBACzF28B,EAAqBvpE,KAAKiM,IAAI,EAAK9W,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAckR,EAAKlP,iBAAiB,IAAmC,EAAzBn2C,EAAO8J,kBAC5JipE,EAAmBxpE,KAAKiM,IAAI,EAAK9W,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAckR,EAAKlP,iBAAiB,IAAkC,EAAzBn2C,EAAO8J,mBAGvK,MAAMkpE,EAA0BF,EAAqBznB,EAAc,GAC7D4nB,EAA0BF,EAAmBznB,EAAY,GACnDjG,EAAKx7C,WAAampE,EAClB3tB,EAAKqK,iBAAmBujB,EAAgBD,GAAmBztB,EAG3D,IAAI2tB,EAAgChnD,EAAW0c,cAC3ClqC,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAW,kBAAkBF,MAAOixC,EAAckR,EAAKlP,mBAC1F+8B,EAAwBx0E,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,kBAAkBF,MAAOixC,EAAckR,EAAKlP,iBAAiB,IAGvI,MAAMg9B,EAA6BD,EAAwB7nB,EAAc,IACzEhG,EAAKzc,cAAgBuqC,EAErB9tB,EAAKx7C,YAAew7C,EAAkB,cAAI,IACtD,MAAMU,EAA0D,MAA/BV,EAAK6K,uBAAkC7K,EAAK6K,uBAAyBojB,EAAYhG,EAC5GnnB,EAAwBmtB,EAAYhG,EAAakF,EACvDntB,EAAK6K,uBAAyB/J,EAC9B,MAAMuvB,EAAmB1C,EAAkBjtB,EACrCoC,EAAiB8qB,EAAgB9sB,EACvCd,EAAKyK,oBAAsB4lB,EAC3BrwB,EAAK0K,0BAA4B5H,EAAiButB,GAAoBnwB,EACtE,MAAM0C,EAA0B1+C,KAAKyS,KAAKzS,KAAKiM,IAAIkgE,EAAkBvtB,IAAmB,EAExF,GAA8B,MAA1B9C,EAAK2K,mBAA6B3K,EAAK2K,kBAAkBzuD,QAAU0mD,EAAiB,CAGvF,MAAMM,EAA8Bh/C,KAAKyS,KAAK,GAAMtd,KAAKinD,iBAAmBre,GAAW8J,mBAAmB,KACpGoX,EAA6B,IAAIp/C,aAAas4B,GAAMC,kBAAkBp4B,KAAKiM,IAAI+yC,EAAqBN,KAC1G,IAAKusB,GAAgD,MAA1BnvB,EAAK2K,kBAA2B,CAG1D,MAAMvH,EAA8BpD,EAAK2K,kBAAkBzuD,OAAS,GAAM,EACpEmnD,EAAgCrD,EAAK4K,mBAC3C,IAAK,IAAIhnD,EAAY,EAAGA,EAAIo8C,EAAK2K,kBAAkBzuD,OAAQ0H,IAC1Du/C,EAAav/C,GAAKo8C,EAAK2K,kBAAmBtH,EAAwBz/C,EAAKw/C,EAExE,CACDpD,EAAK2K,kBAAoBxH,EACzBnD,EAAK4K,mBAAqB5K,EAAK2K,kBAAkBzuD,MACjD,MAAUizE,IACVnvB,EAAK2K,kBAAkB9B,KAAK,GAC5B7I,EAAK4K,mBAAqB5K,EAAK2K,kBAAkBzuD,QAGlD,MAAMo0E,EAA+B31E,EAAOoR,kBAAoBpR,EAAOqR,uBACvEwiE,IAA4B,GAAO8B,EAAuB,GAAOH,GAAcjsE,KAAKiB,KAAK,GAAOxK,EAAO8X,mBAAqB,GAAOw8D,EAAgBA,GACnJR,IAA0B,GAAO6B,EAAuB,GAAOF,GAAYlsE,KAAKiB,KAAK,GAAOxK,EAAO8X,mBAAqB,GAAOy8D,EAAcA,EAExI,CACG,IAAIzC,EAA0Bc,EAAyBhF,EAAsBE,EAAuBkE,EAAuB3mB,EAA+C,GAAGwoB,EACzK9B,EAAwBa,EAAyB/E,EAAoBE,EAAqBkE,EAAqB3mB,EAA6C,GAAGwoB,EAGnK,GAAIp1E,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAckR,EAAKlP,iBAAkB,CAEzG,MAAM4kB,EAAmBr8D,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GAC3H6kB,EAAiBt8D,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAW,eAAeF,MAAOixC,EAAckR,EAAKlP,iBAAiB,GAC/H27B,GAAqB/W,GAAY,GAAOA,EAAW/6D,EAAOyU,YAAc,IAAMzU,EAAOyU,YAAc,GAAMitB,GAAMm5B,6BAA6BE,GAC5IgX,GAAmB/W,GAAU,GAAOA,EAASh7D,EAAOyU,YAAc,IAAMzU,EAAOyU,YAAc,GAAMitB,GAAMm5B,6BAA6BG,EACzI,CAMD,GAJA3V,EAAKxiD,WAAaivE,EAClBzsB,EAAK+J,iBAAmB2iB,EAAgBD,GAAmBvsB,EAGxC,GAAfr5B,EAAWvY,KAAqC,CAChD,IAAI6xC,EACJ,GAA4B,MAAxBH,EAAKoK,gBACLjK,EAAmBH,EAAKoK,oBACrB,CACH,MAAMmmB,EAA+BvwB,EAAKmM,iBAAiBnG,eAAc,GACzE7F,EAAmB,EAAMj8C,KAAKuC,IAAI,EAAK8pE,EAAuBvwB,EAAKwJ,oBAAsB7uD,EAAOga,mBAAqB,GACxH,CACD,MAAM67D,EAA6BxwB,EAAKmM,iBAAiBlG,aAAY,GACrE,IAAI7F,EAAyB,EAAMl8C,KAAKuC,IAAI,EAAK+pE,EAAqBxwB,EAAKyJ,kBAAoB9uD,EAAOga,mBAAqB,IAC3HqrC,EAAKoK,gBAAkBhK,EAGvB,MAAMtd,EAAuBjc,EAAWic,aACxC,IAAK,IAAIl/B,EAAYo8C,EAAK8K,cAAc5uD,OAAQ0H,EAAIk/B,EAAcl/B,IAC9Do8C,EAAK8K,cAAclnD,GAAK,IAAIg7C,GAGhC,GAAIoB,EAAKyG,cAAgBj8B,EAAWvc,YAAc+xC,EAAK0G,qBACnD,IAAK,MAAM0F,KAAgBpM,EAAK8K,cAE5BsB,EAAa9M,YAAc,EAInC,IAAK,IAAI17C,EAAY,EAAGA,EAAIk/B,EAAcl/B,IACtCo8C,EAAK8K,cAAclnD,GAAGk8C,OAAOzmD,KAAM0mD,EAAiBC,EAAMp8C,EAAGs8C,EAAuBC,EAAkBC,EAE7G,CACJ,C,CAGE,sBAAOoqB,CAAgB3jD,EAAwB4pD,GAClD,IAAIj7D,EAAiB,EACrB,IAAK,MAAMk7D,KAAwB/1E,EAAO6T,aAAaqY,EAAWyG,aAAa7e,eAC3E+G,GAAUtR,KAAKgD,IAAc,EAAVhD,KAAK8C,GAAWypE,EAAiBC,GAExD,OAAOl7D,C,CAIJ,iCAAOu9C,CAA2BlsC,GACrC,GAAmB,GAAfA,EAAWvY,KAA2B,CACtC,MAAMqiE,EAAsB9pD,EAAWsE,UAAY,IAAMtE,EAAWuE,aACpE,GAA+CxK,MAA3Cyb,GAAMu0C,qBAAqBD,GAA2B,CACtD,MAAME,EAAwB,GAE9B,IAAK,MAAMC,KAAQz0C,GAAM00C,iBACrB,IAA2C,GAAvCD,EAAKvgD,QAAQ,sBAA6B,CAC1C,MAAMygD,EAAoB,GAC1B,IAAK,IAAIrnD,EAAY,EAAGA,EAAIhvB,EAAOiW,WAAWiW,EAAWsE,WAAWta,aAAc8Y,IAC9EqnD,EAAQltE,KAAK,WAAa6lB,EAAI,UAElCknD,EAAY/sE,KAAKgtE,EAAK72D,QAAQ,sBAAuB+2D,EAAQ/4D,KAAK,QACrE,MAAM,IAA4D,GAAxD64D,EAAKvgD,QAAQ,uCACpB,IAAK,IAAI5G,EAAYhvB,EAAO+V,cAAgB,EAAGiZ,GAAK,EAAGA,IACnD,IAAK,MAAMsnD,KAAgB50C,GAAM60C,uBAC7B,IAAuD,GAAnDD,EAAa1gD,QAAQ,0BAAiC,CACtD,IAAIra,EAAa,GACjB,IAAK,MAAMi7D,KAAmBx2E,EAAOiW,WAAWiW,EAAWsE,WAAWpa,YAAY4Y,GAC9EzT,GAAc,eAAiBi7D,EAAkB,GAAK,SAG1D,MAAMC,EAAyCz2E,EAAO8W,UAAUoV,EAAWuE,cAAc1Z,QAAQiY,GACjG,GAAIynD,EAAgBl1E,OAAS,EAAG,CAC5Bga,GAAc,sBACd,MAAMzE,EAAsB,GAC5B,IAAK,MAAM0/D,KAAmBC,EAC1B3/D,EAAU3N,KAAK,YAAcqtE,EAAkB,GAAK,UAExDj7D,GAAczE,EAAUwG,KAAK,OAAS,GACzC,CACD44D,EAAY/sE,KAAKmtE,EAAah3D,QAAQ,MAAO0P,EAAI,IAAI1P,QAAQ,yBAA0B/D,GAC1F,MACG26D,EAAY/sE,KAAKmtE,EAAah3D,QAAQ,MAAO0P,EAAI,UAI1D,IAA0B,GAAtBmnD,EAAKvgD,QAAQ,KACpB,IAAK,IAAI5G,EAAY,EAAGA,EAAIhvB,EAAO+V,cAAeiZ,IAC9CknD,EAAY/sE,KAAKgtE,EAAK72D,QAAQ,MAAO0P,EAAI,UAG7CknD,EAAY/sE,KAAKgtE,GAMzBz0C,GAAMu0C,qBAAqBD,GAAe,IAAIU,SAAS,QAAS,cAAe,wBAAyB,OAAQ,kBAAmBR,EAAY54D,KAAK,MACvJ,CACD,OAAOokB,GAAMu0C,qBAAqBD,EACrC,CAAM,GAAmB,GAAf9pD,EAAWvY,KAEd,OAAIuY,EAAWuH,4BACJiO,GAAMi1C,kBAGdj1C,GAAMk1C,UACV,GAAmB,GAAf1qD,EAAWvY,KAClB,OAAO+tB,GAAMk1C,UACV,GAAmB,GAAf1qD,EAAWvY,KAClB,OAAO+tB,GAAMm1C,eACV,GAAmB,GAAf3qD,EAAWvY,KAClB,OAAO+tB,GAAMo1C,gBACV,GAAmB,IAAf5qD,EAAWvY,KAC3B,OAAO+tB,GAAMq1C,cACD,GAAmB,GAAf7qD,EAAWvY,KAClB,OAAO+tB,GAAMs1C,kBACV,GAAmB,GAAf9qD,EAAWvY,KAClB,OAAO+tB,GAAMu1C,WACV,GAAmB,GAAf/qD,EAAWvY,KAClB,OAAO+tB,GAAMw1C,cACV,GAAmB,GAAfhrD,EAAWvY,KAClB,OAAO+tB,GAAMy1C,aACV,GAAmB,GAAfjrD,EAAWvY,KAClB,OAAO+tB,GAAMurC,SACV,GAAmB,IAAf/gD,EAAWvY,KAA8B,CAChD,MAAMqiE,EAAsB9pD,EAAW+c,gBAAgBrmC,KAAO,IAAMspB,EAAWgd,mBAAmBtmC,KAClG,GAAgDqjB,MAA5Cyb,GAAM01C,sBAAsBpB,GAA2B,CACvD,MAAME,EAAwB,GAE9B,IAAK,MAAMC,KAAQz0C,GAAM00C,iBACrB,IAA2C,GAAvCD,EAAKvgD,QAAQ,sBAA6B,CAC1C,MAAMygD,EAAoB,GAC1B,IAAK,IAAIrnD,EAAY,EAAGA,EAAI9C,EAAW+c,gBAAgB/yB,aAAc8Y,IACjEqnD,EAAQltE,KAAK,WAAa6lB,EAAI,UAElCknD,EAAY/sE,KAAKgtE,EAAK72D,QAAQ,sBAAuB+2D,EAAQ/4D,KAAK,QACrE,MAAM,IAA4D,GAAxD64D,EAAKvgD,QAAQ,uCACpB,IAAK,IAAI5G,EAAYhvB,EAAO+V,cAAc,EAAI,EAAGiZ,GAAK,EAAGA,IACrD,IAAK,MAAMsnD,KAAgB50C,GAAM60C,uBAC7B,IAAuD,GAAnDD,EAAa1gD,QAAQ,0BAAiC,CACtD,IAAIra,EAAa,GACjB,IAAK,MAAMi7D,KAAmBtqD,EAAW+c,gBAAgB7yB,YAAY4Y,GACjEzT,GAAc,eAAiBi7D,EAAkB,GAAK,SAG1D,MAAMC,EAAyCvqD,EAAWgd,mBAAmBnyB,QAAQiY,GACrF,GAAIynD,EAAgBl1E,OAAS,EAAG,CAC5Bga,GAAc,sBACd,MAAMzE,EAAsB,GAC5B,IAAK,MAAM0/D,KAAmBC,EAC1B3/D,EAAU3N,KAAK,YAAcqtE,EAAkB,GAAK,UAExDj7D,GAAczE,EAAUwG,KAAK,OAAS,GACzC,CACD44D,EAAY/sE,KAAKmtE,EAAah3D,QAAQ,MAAO0P,EAAI,IAAI1P,QAAQ,yBAA0B/D,GAC1F,MACG26D,EAAY/sE,KAAKmtE,EAAah3D,QAAQ,MAAO0P,EAAI,UAI1D,IAA0B,GAAtBmnD,EAAKvgD,QAAQ,KACpB,IAAK,IAAI5G,EAAI,EAAGA,EAAIhvB,EAAO+V,cAAc,EAAGiZ,IACxCknD,EAAY/sE,KAAKgtE,EAAK72D,QAAQ,MAAO0P,EAAI,UAG7CknD,EAAY/sE,KAAKgtE,GAMzBz0C,GAAM01C,sBAAsBpB,GAAe,IAAIU,SAAS,QAAS,cAAe,wBAAyB,OAAQ,kBAAmBR,EAAY54D,KAAK,MACxJ,CACD,OAAOokB,GAAM01C,sBAAsBpB,EACtC,CACG,MAAM,IAAIn1E,MAAM,iCAAmCqrB,EAAWvY,K,CAIlE,WAAO0jE,CAAK/hE,EAAW2gB,GACnB,OAAQ3gB,EAAI2gB,EAAIA,GAAKA,C,CAEzB,wBAAO0gD,CAAkBvnC,EAAc44B,EAAqBziB,EAA+BF,EAAYD,GAMnG,MAAM5xB,EAAoBzlB,EAAyBq3C,EAAgB33C,UAAY23C,EAAgB5xB,QAEzF8jD,EAAqBloC,EAAMq1B,+BAC3B17D,EAAqBq8C,EAAgBr8C,KACrCypD,EAAsBpN,EAAgBoN,YACtClnD,EAAsBkoB,GAAmC,GAAxB4xB,EAAgBzxC,KAAa5K,EAAKxH,OAASwH,EAAKxH,OAAS,EAChG,IAAIoyB,EAA0BpqB,KAAKiM,IAAI,EAAGjM,KAAKuC,IAAIR,EAAY85C,EAAgBzxB,kBAC3ED,EAA4BnqB,KAAKiM,IAAI,EAAGjM,KAAKuC,IAAI6nB,EAAkB,EAAGyxB,EAAgB1xB,oBAOtF6jD,EAA6B5jD,EAAkBD,EACxD6jD,EAAqB,IACZ7jD,EAAoB,EACpBC,EAAkBroB,EAClBisE,EAAqBjsE,GAEzB,MAAMsoB,EAA2BwxB,EAAgBxxB,iBAC3CC,EAAiCuxB,EAAgBvxB,sBACjD0U,EAAqB8c,EAAKmL,8BAAgCpL,EAAgB7c,WAC5C,GAAhC6c,EAAgBjd,cAAsBid,EAAgBr1B,MAAOra,iBAC7D2vC,EAAK0J,OAAO,GAAK1J,EAAK0J,OAAO,IACjC,IAAIyoB,EAAsBnyB,EAAKW,YAAY,GAAK16C,EAC5CmsE,EAAsBpyB,EAAKW,YAAY,GAAK16C,EAC5CosE,EAAqBryB,EAAK2J,WAAW,GACrC2oB,EAAqBtyB,EAAK2J,WAAW,GACrC4oB,EAA8BvyB,EAAK4J,oBAAoB,GACvD4oB,EAA8BxyB,EAAK4J,oBAAoB,GAClC,IAArBr7B,GAA+C,IAArBA,GAA+C,IAArBA,IAK/CC,GAID6jD,GAAc,EACdC,GAAc,IAJdD,EAAa,EACbC,EAAa,IAMI,IAArB/jD,GAA+C,IAArBA,IAK1BgkD,EAAsB,EACtBC,EAAsB,GAE1B,IAAIC,EAAoBzyB,EAAK8J,4BAA4B,GACrD4oB,EAAoB1yB,EAAK8J,4BAA4B,GACzD,MAAM6oB,EAAuC,IACvCC,GAA4B5yB,EAAKa,iBAAiB,GAClDgyB,GAA4B7yB,EAAKa,iBAAiB,GACxD,IAAIrjD,GAAsBwiD,EAAKxiD,WAC/B,MAAMusD,GAA2B/J,EAAK+J,gBACtC,IAAI+oB,EAAiBz2C,GAAM21C,KAAKhyB,EAAK0J,OAAO,GAAI,GAAKzjD,EACjD8sE,EAAiB12C,GAAM21C,KAAKhyB,EAAK0J,OAAO,GAAI,GAAKzjD,EACjD+sE,EAA4B,EAC5BC,EAA4B,EAChC,IAAK9kD,EAAS,CACV,MAAM+kD,EAAYhvE,KAAK+b,MAAM6yD,GACvBK,EAAYjvE,KAAK+b,MAAM8yD,GACvBK,EAAS/2C,GAAM21C,KAAKkB,EAAWjtE,GAChCotE,EAASh3C,GAAM21C,KAAKmB,EAAWltE,GAC9BqtE,EAAcR,EAASI,EACvBK,EAAcR,EAASI,EAC7BH,GAAqBtvE,EAAK0vE,GAC1BH,GAAqBvvE,EAAK2vE,GAC1BL,IAAsBtvE,EAAK24B,GAAM21C,KAAKoB,EAAS,EAAGntE,IAAe+sE,GAAqBM,EACtFL,IAAsBvvE,EAAK24B,GAAM21C,KAAKqB,EAAS,EAAGptE,IAAegtE,GAAqBM,CAC1F,CACA,MAAMC,EAAUxzB,EAAK+K,YACf0oB,EAA6C,EAAvBzzB,EAAKgL,gBACjC,IAAI0oB,GAA+B1zB,EAAKiL,wBACpC0oB,GAA+B3zB,EAAKkL,wBACxC,MAAM0oB,EAAyBv3C,GAAMu3C,aAC/B3rD,EAAoB06C,EAAcziB,EACxC,IAAI2zB,EAAoB7zB,EAAK6J,kBAAkB,GAC3CiqB,EAAoB9zB,EAAK6J,kBAAkB,GAC/C,IAAK,IAAIkqB,EAAsBpR,EAAaoR,EAAc9rD,EAAW8rD,IAAe,CAC5ExB,EAAsB,GAAKA,EAAsBI,GACjDJ,IAEAC,EAAsB,GAAKA,EAAsBG,GACjDH,IAEL,IAAIwB,EAAkB,EACrBlB,GAAUX,EAAcE,EACxBU,GAAUX,EAAcE,EACC,IAArB/jD,GAEmB,IAAf8jD,EACIS,EAAS7sE,IACLssE,GAAuB,IACvBE,EAAYoB,EACZtB,KAEJyB,EAAU,IAES,IAAhB3B,GACHS,EAAS,IACLP,GAAuB,IACvBE,EAAYoB,EACZtB,KAEJyB,EAAU,GAGC,IAAf1B,EACIS,EAAS9sE,IACLusE,GAAuB,IACvBE,EAAYoB,EACZtB,KAEJwB,EAAU,IAES,IAAhB3B,GACHU,EAAS,IACLP,GAAuB,IACvBE,EAAYoB,EACZtB,KAEJwB,EAAU,IAGU,IAArBzlD,GAEY,IAAf8jD,EACIS,EAASxkD,IACLikD,GAAuB,IACvBE,EAAYoB,EACZtB,KAEJyB,EAAU,IAES,IAAhB3B,GACHS,EAASzkD,IACLkkD,GAAuB,IACvBE,EAAYoB,EACZtB,KAEJyB,EAAU,GAGC,IAAf1B,EACIS,EAASzkD,IACLkkD,GAAuB,IACvBE,EAAYoB,EACZtB,KAEJwB,EAAU,IAES,IAAhB3B,GACHU,EAAS1kD,IACLmkD,GAAuB,IACvBE,EAAYoB,EACZtB,KAEJwB,EAAU,IAGU,IAArBzlD,GAEY,IAAf8jD,EACIS,EAASxkD,IACTwkD,EAASzkD,EAAoBgO,GAAM21C,KAAKc,EAASxkD,EAAiB4jD,GAElE8B,EAAU,IAES,IAAhB3B,GACHS,EAASzkD,IACTykD,EAASxkD,EAAkB+N,GAAM21C,KAAK3jD,EAAoBykD,EAAQZ,GAElE8B,EAAU,GAGC,IAAf1B,EACIS,EAASzkD,IACTykD,EAAS1kD,EAAoBgO,GAAM21C,KAAKe,EAASzkD,EAAiB4jD,GAElE8B,EAAU,IAES,IAAhB1B,GACHS,EAAS1kD,IACT0kD,EAASzkD,EAAkB+N,GAAM21C,KAAK3jD,EAAoB0kD,EAAQb,GAElE8B,EAAU,IAGU,IAArBzlD,IAEY,IAAf8jD,EACIS,EAASxkD,IACTwkD,EAASxkD,EAAkB+N,GAAM21C,KAAKc,EAASxkD,EAAiB4jD,GAEhEG,GAAc,EACf2B,EAAU,IAEU,IAAhB3B,GACHS,EAASzkD,IACTykD,EAASzkD,EAAoBgO,GAAM21C,KAAK3jD,EAAoBykD,EAAQZ,GAEpEG,EAAa,EACd2B,EAAU,GAGE,IAAf1B,EACIS,EAASzkD,IACTykD,EAASzkD,EAAkB+N,GAAM21C,KAAKe,EAASzkD,EAAiB4jD,GAEhEI,GAAc,EACd0B,EAAU,IAES,IAAhB1B,GACHS,EAAS1kD,IACT0kD,EAAS1kD,EAAoBgO,GAAM21C,KAAK3jD,EAAoB0kD,EAAQb,GAEpEI,EAAa,EACb0B,EAAU,IAItB,IAAIC,EAAQ,EACRC,EAAQ,EACRC,EAAc,EAClB,GAAIhmD,EAAS,CACT8lD,EAAQvwE,EAAK24B,GAAM21C,KAAK9tE,KAAK+b,MAAM6yD,GAAS7sE,IAC5CiuE,EAAQxwE,EAAK24B,GAAM21C,KAAK9tE,KAAK+b,MAAM8yD,GAAS9sE,IAC5C4tE,EAAYI,EACZH,EAAYI,EACZ,MAAME,EAA0B7B,EAAsB,GAAMI,EAA+BzuE,KAAKuC,IAAI8rE,EAAqBI,IAAiCA,EAAgC,EACpL0B,EAA0B7B,EAAsB,GAAMG,EAA+BzuE,KAAKuC,IAAI+rE,EAAqBG,IAAiCA,EAAgC,EAC1LwB,EAAc,EAEVA,GADA5B,EAAsB,EACPE,EAAY2B,EAEZH,EAGfE,GADA3B,EAAsB,EACPE,EAAY2B,EAEZH,CAEtB,KACI,CACD,MAAMhB,EAAYhvE,KAAK+b,MAAM6yD,GACvBK,EAAYjvE,KAAK+b,MAAM8yD,GACvBK,EAAS/2C,GAAM21C,KAAKkB,EAAWjtE,GAC/BotE,EAASh3C,GAAM21C,KAAKmB,EAAWltE,GACrC,IAAIquE,EAAoB5wE,EAAK0vE,GACzBmB,EAAoB7wE,EAAK2vE,GAC7B,MAAMC,EAAcR,EAASI,EACvBK,EAAcR,EAASI,EAG7B,GAFAmB,IAAsB5wE,EAAK24B,GAAM21C,KAAKoB,EAAS,EAAGntE,IAAequE,GAAqBhB,EACtFiB,IAAsB7wE,EAAK24B,GAAM21C,KAAKqB,EAAS,EAAGptE,IAAesuE,GAAqBhB,GAC3D,IAArBhlD,GAAgD,IAAtBF,GAA2BC,IAAoBroB,IAA2B,IAAZ+tE,EAAe,CACzG,IAAIQ,EAAO,EACPC,EAAO,EACX,MAAMC,EAAUxwE,KAAKiM,IAAI,EAAG2iE,EAASX,EAAcE,GAC7CsC,EAAUzwE,KAAKiM,IAAI,EAAG4iE,EAASX,EAAcE,GAC7CY,EAAYhvE,KAAK+b,MAAMy0D,GACvBvB,EAAYjvE,KAAK+b,MAAM00D,GACvBvB,EAAS/2C,GAAM21C,KAAKkB,EAAWjtE,GAC/BotE,EAASh3C,GAAM21C,KAAKmB,EAAWltE,GACrCuuE,EAAO9wE,EAAK0vE,GACZqB,EAAO/wE,EAAK2vE,GACZmB,IAAS9wE,EAAK24B,GAAM21C,KAAKoB,EAAS,EAAGntE,IAAeuuE,IAASE,EAAUxB,GAAab,EACpFoC,IAAS/wE,EAAK24B,GAAM21C,KAAKqB,EAAS,EAAGptE,IAAewuE,IAASE,EAAUxB,GAAab,EACpFU,EAAoBwB,EACpBvB,EAAoBwB,CACpC,CACoC,IAArBlmD,GAAsC,IAAZylD,GAC1BC,EAAQJ,EACRK,EAAQJ,IAERG,GAASK,EAAoBtB,IAAsBb,EAAcE,GACjE6B,GAASK,EAAoBtB,IAAsBb,EAAcE,IAErEuB,EAAYI,EACZH,EAAYI,EACxBlB,EAAoBsB,EACpBrB,EAAoBsB,EACP,MAAMH,EAAkB7B,EAAsB,GAAMI,EAA+BzuE,KAAKuC,IAAI8rE,EAAqBI,IAAiCA,EAAgC,EAC5K0B,EAAkB7B,EAAsB,GAAMG,EAA+BzuE,KAAKuC,IAAI+rE,EAAqBG,IAAiCA,EAAgC,EAE9KwB,GADA5B,EAAsB,EACPE,EAAY2B,EAEZH,EAGfE,GADA3B,EAAsB,EACPE,EAAY2B,EAEZH,EAAQhxC,CAE9B,CACD,MAAMohB,EAASsvB,EAAaO,EAAchnB,EAAaumB,EAAqBC,EAAqBF,EAAaD,GAC9GG,EAAsBD,EACtBA,EAAsBS,EAAchnB,EACpCglB,GAAeS,EACfR,GAAeS,EACf,MAAM+B,EAAStwB,EAAS9mD,EACxBA,GAAcusD,EACdkoB,EAAK8B,IAAgBa,CACxB,CACD50B,EAAK0J,OAAO,GAAKopB,EAAS7sE,EAC1B+5C,EAAK0J,OAAO,GAAKqpB,EAAS9sE,EAC1B+5C,EAAKW,YAAY,GAAKwxB,EAAclsE,EACpC+5C,EAAKW,YAAY,GAAKyxB,EAAcnsE,EACpC+5C,EAAK2J,WAAW,GAAK0oB,EACrBryB,EAAK2J,WAAW,GAAK2oB,EACrBtyB,EAAK4J,oBAAoB,GAAK2oB,EAC9BvyB,EAAK4J,oBAAoB,GAAK4oB,EAC9BxyB,EAAK6J,kBAAkB,GAAKgqB,EAC5B7zB,EAAK6J,kBAAkB,GAAKiqB,EAC5B9zB,EAAK8J,4BAA4B,GAAK2oB,EACtCzyB,EAAK8J,4BAA4B,GAAK4oB,EACtC1yB,EAAKxiD,WAAaA,EAClBusC,EAAM8qC,gBAAgBrB,GACtBxzB,EAAKiL,wBAA0ByoB,EAC/B1zB,EAAKkL,wBAA0ByoB,C,CAG/B,gBAAOpC,CAAUxnC,EAAc44B,EAAqBziB,EAA+BF,EAAYD,GACnG,MAAM5xB,EAAoBzlB,EAAyBq3C,EAAgB33C,UAAY23C,EAAgB5xB,QACzF8jD,EAAqBloC,EAAMq1B,+BAC3B17D,EAAqBq8C,EAAgBr8C,KACrCypD,EAAcpN,EAAgBoN,YAE9BlnD,EAAckoB,GAAmC,GAAxB4xB,EAAgBzxC,KAAa5K,EAAKxH,OAASwH,EAAKxH,OAAS,EAGlFgnC,EAAqB8c,EAAKmL,8BAAgCpL,EAAgB7c,WAC5C,GAAhC6c,EAAgBjd,cAAsBid,EAAgBr1B,MAAOra,iBAAgB2vC,EAAK0J,OAAO,GAAK1J,EAAK0J,OAAO,IAC9G,IAAIyoB,EAAsBnyB,EAAKW,YAAY,GAAK16C,EAC5CmsE,EAAsBpyB,EAAKW,YAAY,GAAK16C,EAChD,MAAM2sE,GAA4B5yB,EAAKa,iBAAiB,GAClDgyB,GAA4B7yB,EAAKa,iBAAiB,GACxD,IAAIrjD,GAAsBwiD,EAAKxiD,WAC/B,MAAMusD,GAA2B/J,EAAK+J,gBACtC,IAAI+oB,EAAkB9yB,EAAK0J,OAAO,GAAK,EAAKzjD,EACxC8sE,EAAkB/yB,EAAK0J,OAAO,GAAK,EAAKzjD,EAE5C,MAAMutE,EAAiCxzB,EAAK+K,YACtC0oB,EAA6C,EAAvBzzB,EAAKgL,gBACjC,IAAI0oB,GAA+B1zB,EAAKiL,wBACpC0oB,GAA+B3zB,EAAKkL,wBACxC,MAAM0oB,EAAyBv3C,GAAMu3C,aACrC,IAAIZ,EAA4B,EAC5BC,EAA4B,EAEhC,IAAK9kD,EAAS,CACV,MAAM+kD,EAA6B,EAATJ,EACpBK,EAA6B,EAATJ,EACpBK,EAAiBF,EAAYjtE,EAC7BotE,EAAiBF,EAAYltE,EAC7BqtE,EAAsBR,EAASI,EAC/BK,EAAsBR,EAASI,EACrCH,GAAqBtvE,EAAK0vE,GAC1BH,GAAqBvvE,EAAK2vE,GAC1BL,IAAsBtvE,EAAK0vE,EAAS,GAAKJ,GAAqBM,EAC9DL,IAAsBvvE,EAAK2vE,EAAS,GAAKJ,GAAqBM,CACjE,CAED,MAAMtrD,EAAoB06C,EAAcziB,EACxC,IAAK,IAAI6zB,EAAsBpR,EAAaoR,EAAc9rD,EAAW8rD,IAAe,CAKhF,IAAIE,EACAC,EACAC,EAEJ,GAPArB,GAAUX,EACVY,GAAUX,EAMNjkD,EACA8lD,EAAQvwE,GAAM,EAAIovE,GAAU7sE,GAC5BiuE,EAAQxwE,GAAM,EAAIqvE,GAAU9sE,GAC5BkuE,EAAcF,EAAQC,MACnB,CACH,MAAMhB,EAA6B,EAATJ,EACpBK,EAA6B,EAATJ,EACpBK,EAAiBF,EAAYjtE,EAC7BotE,EAAiBF,EAAYltE,EACnC,IAAIquE,EAA4B5wE,EAAK0vE,GACjCmB,EAA4B7wE,EAAK2vE,GACrC,MAAMC,EAAsBR,EAASI,EAC/BK,EAAsBR,EAASI,EACrCmB,IAAsB5wE,EAAK0vE,EAAS,GAAKkB,GAAqBhB,EAC9DiB,IAAsB7wE,EAAK2vE,EAAS,GAAKkB,GAAqBhB,EAC9DU,GAASK,EAAoBtB,GAAqBb,EAClD+B,GAASK,EAAoBtB,GAAqBb,EAClDY,EAAoBsB,EACpBrB,EAAoBsB,EACpBJ,EAAcF,EAAQC,EAAQhxC,CACjC,CAED,MAAMohB,EAAiBsvB,EAAaO,EAAchnB,EAAaumB,EAAqBC,EAAqBF,EAAaD,GAEtHG,EAAsBD,EACtBA,EAAsBS,EAAchnB,EAEpCglB,GAAeS,EACfR,GAAeS,EAEf,MAAM+B,EAAiBtwB,EAAS9mD,EAEhCA,GAAcusD,EAEdkoB,EAAK8B,IAAgBa,CACxB,CAED50B,EAAK0J,OAAO,GAAKopB,EAAS7sE,EAC1B+5C,EAAK0J,OAAO,GAAKqpB,EAAS9sE,EAC1B+5C,EAAKW,YAAY,GAAKwxB,EAAclsE,EACpC+5C,EAAKW,YAAY,GAAKyxB,EAAcnsE,EACpC+5C,EAAKxiD,WAAaA,EAElBusC,EAAM8qC,gBAAgBrB,GACtBxzB,EAAKiL,wBAA0ByoB,EAC/B1zB,EAAKkL,wBAA0ByoB,C,CAG3B,qBAAOnC,CAAeznC,EAAc44B,EAAqBziB,EAA+BF,EAAYD,GACxG,MAAMkyB,EAAqBloC,EAAMq1B,+BAC3B17D,EAAqBq8C,EAAgBr8C,KACrCuC,EAAqBvC,EAAKxH,OAAS,EAEnCgnC,EAAqB8c,EAAKmL,8BAAgCpL,EAAgB7c,WAC5C,GAAhC6c,EAAgBjd,cAAsBid,EAAgBr1B,MAAOra,iBAAgB2vC,EAAK0J,OAAO,GAAK1J,EAAK0J,OAAO,IAC9G,IAAIyoB,EAAsBnyB,EAAKW,YAAY,GAAK16C,EAC5CmsE,EAAsBpyB,EAAKW,YAAY,GAAK16C,EAChD,MAAM2sE,GAA4B5yB,EAAKa,iBAAiB,GAClDgyB,GAA4B7yB,EAAKa,iBAAiB,GACxD,IAAIrjD,GAAsBwiD,EAAKxiD,WAC/B,MAAMusD,GAA2B/J,EAAK+J,gBACtC,IAAI+oB,EAAkB9yB,EAAK0J,OAAO,GAAK,EAAKzjD,EACxC8sE,EAAkB/yB,EAAK0J,OAAO,GAAK,EAAKzjD,EAE5C,MAAMutE,EAAiCxzB,EAAK+K,YACtC0oB,EAA6C,EAAvBzzB,EAAKgL,gBACjC,IAAI0oB,GAA+B1zB,EAAKiL,wBACpC0oB,GAA+B3zB,EAAKkL,wBACxC,MAAM0oB,EAAyBv3C,GAAMu3C,aAE/BV,EAA6B,EAATJ,EACpBK,EAA6B,EAATJ,EACpBK,EAAiBF,EAAYjtE,EAC7BotE,EAAiBF,EAAYltE,EAC7BqtE,EAAsBR,EAASI,EAC/BK,EAAsBR,EAASI,EACrC,IAAIH,GAA6BtvE,EAAK0vE,GAClCH,GAA6BvvE,EAAK2vE,GACtCL,IAAsBtvE,EAAK0vE,EAAS,GAAKJ,GAAqBM,EAC9DL,IAAsBvvE,EAAK2vE,EAAS,GAAKJ,GAAqBM,EAE9D,MAAMtrD,EAAoB06C,EAAcziB,EACxC,IAAK,IAAI6zB,EAAsBpR,EAAaoR,EAAc9rD,EAAW8rD,IAAe,CAEhFjB,GAAUX,EACVY,GAAUX,EAEV,MAAMc,EAA6B,EAATJ,EACpBK,EAA6B,EAATJ,EACpBK,EAAiBF,EAAYjtE,EAC7BotE,EAAiBF,EAAYltE,EACnC,IAAIquE,EAA4B5wE,EAAK0vE,GACjCmB,EAA4B7wE,EAAK2vE,GACrC,MAAMC,EAAsBR,EAASI,EAC/BK,EAAsBR,EAASI,EACrCmB,IAAsB5wE,EAAK0vE,EAAS,GAAKkB,GAAqBhB,EAC9DiB,IAAsB7wE,EAAK2vE,EAAS,GAAKkB,GAAqBhB,EAC9D,MAAMU,GAAiBK,EAAoBtB,GAAqBb,EAC1D+B,GAAiBK,EAAoBtB,GAAqBb,EAChEY,EAAoBsB,EACpBrB,EAAoBsB,EAEpB,MAAMJ,EAAsBF,EAAQC,EAAQhxC,EACtCohB,EAAiBsvB,EAAaO,EAAaT,EAAqBC,EAAqBF,EAAaD,GACxGG,EAAsBD,EACtBA,EAAsBS,EAEtBhC,GAAeS,EACfR,GAAeS,EAEf,MAAM+B,EAAiBtwB,EAAS9mD,EAChCA,GAAcusD,EAEdkoB,EAAK8B,IAAgBa,CACxB,CAED50B,EAAK0J,OAAO,GAAKopB,EAAS7sE,EAC1B+5C,EAAK0J,OAAO,GAAKqpB,EAAS9sE,EAC1B+5C,EAAKW,YAAY,GAAKwxB,EAAclsE,EACpC+5C,EAAKW,YAAY,GAAKyxB,EAAcnsE,EACpC+5C,EAAKxiD,WAAaA,EAElBusC,EAAM8qC,gBAAgBrB,GACtBxzB,EAAKiL,wBAA0ByoB,EAC/B1zB,EAAKkL,wBAA0ByoB,C,CAG3B,wBAAOhC,CAAkB5nC,EAAc44B,EAAqBziB,EAA+BF,EAAYD,GAU3G,MAAM+0B,EAAqB/0B,EAAgBjd,aAC3C,IAAIiyC,EAAiC14C,GAAM24C,0BAA0BF,GACrE,GAA4Bl0D,MAAxBm0D,EAAmC,CACnC,IAAIE,EAA6B,GAEjCA,GAAsB,4yGA6DtB,MAAMC,EAAuB,GAC7B,IAAK,IAAIC,EAAgB,EAAGA,EAAQL,EAAYK,IAC5CD,EAAWpxE,KAAK,wBAA0BqxE,GAAkB,GAATA,EAAa,gBAAkB,KAGtFF,GAAsBC,EAAWj9D,KAAK,OAEtCg9D,GAAsB,u/DAwCtBA,EAAqBA,EAAmBh7D,QAAQ,cAAc62D,IAC1D,MAAMsE,EAAQ,GACd,IAAK,IAAID,EAAgB,EAAGA,EAAQL,EAAYK,IAC5CC,EAAMtxE,KAAKgtE,EAAK72D,QAAQ,MAAO23B,OAAOujC,KAE1C,OAAOC,EAAMn9D,KAAK,KAAK,IAI3B88D,EAAuB,IAAI1D,SAAS,QAAS,cAAe,YAAa,OAAQ,kBAAmB4D,GACpG54C,GAAM24C,0BAA0BF,GAAcC,CACjD,CAEDA,EAAqBhrC,EAAO44B,EAAaziB,EAAuBF,EAAMD,E,CAGlE,mBAAO0jB,CAAa15B,EAAc21B,EAA2BC,EAA2BgD,EAAqBG,EAAmB/iB,GAIpI,MAAMkT,EAA0BvqD,EAAyBq3C,EAAgB33C,SACnE8qD,EAA0BvqD,EAAyBo3C,EAAgB33C,SACnEitE,EAAwBt1B,EAAgB6O,cAAgB,EACxDuE,EAAuBvqD,EAAsBm3C,EAAgB33C,SAC7DgrD,EAAsBvqD,EAAqBk3C,EAAgB33C,SAC3DirD,EAAoBvqD,EAAmBi3C,EAAgB33C,SACvDkrD,EAAsBvqD,EAAqBg3C,EAAgB33C,SACjE,IAAIktE,EAAoB,EAAOriB,IAAgBqiB,GAAwB,GACvEA,IAAyB,EAAOpiB,IAAgBoiB,GAAwB,GACxEA,IAAyB,EAAOD,IAAcC,GAAwB,GACtEA,IAAyB,EAAOniB,IAAamiB,GAAwB,GACrEA,IAAyB,EAAOliB,IAAYkiB,GAAwB,GACpEA,IAAyB,EAAOjiB,IAAUiiB,GAAwB,GAClEA,IAAyB,EAAOhiB,IAAYgiB,GAAwB,GAEpE,IAAIC,EAA4Bl5C,GAAMm5C,qBAAqBF,GAC3D,GAAuB10D,MAAnB20D,EAA8B,CAC9B,IAAIE,EAAwB,GAE5B,MAAMC,EAAsBtiB,GAAcE,GAAcD,EAExDoiB,GAAiB,iQAObC,IACAD,GAAiB,wJAMjBxiB,IAaAwiB,GAAiB,gxEA6BjBviB,IACAuiB,GAAiB,urBAajBJ,IACAI,GAAiB,8UAUrBA,GAAiB,uJAKbtiB,IACAsiB,GAAiB,+yBAejBriB,IACAqiB,GAAiB,q5HA4CjBpiB,IACAoiB,GAAiB,+xCAyBjBniB,IACAmiB,GAAiB,wsCAuBrBA,GAAiB,2RAObxiB,IACAwiB,GAAiB,8vDAoBjBviB,IACAuiB,GAAiB,60CA4BjBJ,IACAI,GAAiB,0QASrBA,GAAiB,sGAMbA,GADAtiB,EACiB,kkCAmBA,iFAMjBC,IACAqiB,GAAiB,6pFAyCjBpiB,IACAoiB,GAAiB,u5CA0BjBniB,IACAmiB,GAAiB,utFAuCrBA,GAAiB,+KAMbC,IACAD,GAAiB,kEAKrBA,GAAiB,6QASbC,IACAD,GAAiB,wEAKjBxiB,IACAwiB,GAAiB,orCAkBjBviB,IACAuiB,GAAiB,4kBAajBJ,IACAI,GAAiB,ioBAejBtiB,IACAsiB,GAAiB,4YAUjBriB,IACAqiB,GAAiB,0aAUjBpiB,IACAoiB,GAAiB,gkCAkBjBniB,IACAmiB,GAAiB,ggEA4BrBF,EAAkB,IAAIlE,SAAS,QAAS,cAAe,cAAe,cAAe,YAAa,kBAAmBoE,GACrHp5C,GAAMm5C,qBAAqBF,GAAaC,CAC3C,CAEDA,EAAgBxrC,EAAO21B,EAAaC,EAAagD,EAAaG,EAAW/iB,E,CAGrE,sBAAO0xB,CAAgB1nC,EAAc44B,EAAqBziB,EAA+BF,EAAYn5B,GACzG,MAAMorD,EAAqBloC,EAAMq1B,+BAEjC,IAAIsQ,EAAqB1vB,EAAKW,YAAY,GAC1C,MAAMC,GAA2BZ,EAAKa,iBAAiB,GACvD,IAAIrjD,GAAsBwiD,EAAKxiD,WAC/B,MAAMusD,GAA2B/J,EAAK+J,gBACtC,IAAI4rB,EAAiB31B,EAAK0J,OAAO,GAAK,EAElCllD,EAAqBw7C,EAAKx7C,WAC9B,MAAM6lD,EAA0BrK,EAAKqK,gBAE/BmpB,EAAiCxzB,EAAK+K,YACtC0oB,EAA6C,EAAvBzzB,EAAKgL,gBACjC,IAAI0oB,GAA+B1zB,EAAKiL,wBACpC0oB,GAA+B3zB,EAAKkL,wBACxC,MAAM0oB,EAAyBv3C,GAAMu3C,aAE/B3rD,EAAoB06C,EAAcziB,EACxC,IAAK,IAAI6zB,EAAsBpR,EAAaoR,EAAc9rD,EAAW8rD,IAAe,CAEhF,MAAM6B,EAAoBD,EAAQ,EAC5BE,GAAqBF,EAAQnxE,GAAc,EAEjD,IAAIsxE,EAAoBD,EAAYD,EAGpC,IAAK/uD,EAAWsH,QAAS,CACrB,GAAIynD,EAAYlG,EAEZoG,GAAmC,KAD/BC,EAAIH,EAAYlG,GACFqG,EAAIA,EAAIA,EAAI,QAC3B,GAAIH,EAAY,EAAMlG,EAAY,CAErCoG,GAAmC,KAD/BC,GAAKH,EAAY,GAAOlG,GACVqG,EAAIA,EAAIA,EAAI,EACjC,CACD,GAAIF,EAAYnG,EAEZoG,GAAmC,KAD/BC,EAAIF,EAAYnG,GACFqG,EAAIA,EAAIA,EAAI,QAC3B,GAAIF,EAAY,EAAMnG,EAAY,CACrC,IAAIqG,EACJD,GAAmC,KAD/BC,GAAKF,EAAY,GAAOnG,GACVqG,EAAIA,EAAIA,EAAI,EACjC,CACJ,CAED,MAAM5B,EAAsB2B,EACtBxxB,EAAiBsvB,EAAaO,EAAaT,EAAqBC,EAAqBF,EAAaD,GACxGG,EAAsBD,EACtBA,EAAsBS,EAEtBwB,GAASjG,EACTA,GAAc9uB,EACdp8C,GAAc6lD,EAEd,MAAMuqB,EAAiBtwB,EAAS9mD,EAChCA,GAAcusD,EAEdkoB,EAAK8B,IAAgBa,CACxB,CAED50B,EAAK0J,OAAO,GAAKisB,EACjB31B,EAAKW,YAAY,GAAK+uB,EACtB1vB,EAAKxiD,WAAaA,EAClBwiD,EAAKx7C,WAAaA,EAElBulC,EAAM8qC,gBAAgBrB,GACtBxzB,EAAKiL,wBAA0ByoB,EAC/B1zB,EAAKkL,wBAA0ByoB,C,CAG1B,oBAAOjC,CAAc3nC,EAAc44B,EAAqBG,EAAmB9iB,EAAYD,GAClG,MAAMkyB,EAAqBloC,EAAMq1B,+BAC3B0V,EAA+C,EAA1Bn6E,EAAO8X,mBAElC,IAAIi9D,EAAqB1vB,EAAKW,YAAY,GAC1C,MAAMC,GAA2BZ,EAAKa,iBAAiB,GACvD,IAAIrjD,GAAsBwiD,EAAKxiD,WAC/B,MAAMusD,GAA2B/J,EAAK+J,gBACtC,IAAIL,EAAmB1J,EAAK0J,OAExBssB,GAAoBh2B,EAAK5c,iBAC7B,MAAM6yC,GAAyBj2B,EAAKsK,sBAC9B4rB,EAA0Bl2B,EAAKuK,sBACrC,IAAIvR,GAAiBgH,EAAK1c,cAC1B,MAAM6yC,GAAsBn2B,EAAKwK,mBACjC,IAAI3H,GAAuB7C,EAAKyK,oBAChC,MAAM1H,GAA4B/C,EAAK0K,yBACjC7L,EAA0BmB,EAAK2K,kBAC/BrH,EAA2BzE,EAAU3iD,OAAS,GAAM,EAC1D,IAAIojD,EAA6C,EAAxBU,EAAK4K,mBAC9BtL,GAAcA,EAAagE,GAAmBzE,EAAU3iD,OAExD,MAAMs3E,EAAiCxzB,EAAK+K,YACtC0oB,EAA2C,EAArBzzB,EAAKgL,gBACjC,IAAI0oB,GAA+B1zB,EAAKiL,wBACpC0oB,GAA+B3zB,EAAKkL,wBACxC,MAAM0oB,EAAyBv3C,GAAMu3C,aAE/B3rD,EAAoB06C,EAAcG,EACxC,IAAK,IAAIiR,EAAsBpR,EAAaoR,EAAc9rD,EAAW8rD,IAAe,CAGnF,IAAI4B,GAAiBjsB,EAAO,GAAKgmB,GAAc,EAC3C0G,EAAyBT,EAAQ,IAAO,GAAOb,EAAa,GAAOkB,GAGvE,GAAIL,EAAQjG,EAEX0G,GAAgC,KAD5BL,EAAYJ,EAAQjG,GACHqG,EAAEA,EAAEA,EAAE,QACrB,GAAIJ,EAAQ,EAAMjG,EAAY,CACpC,IAAIqG,EACJK,GAAgC,KAD5BL,GAAaJ,EAAQ,GAAOjG,GACXqG,EAAEA,EAAEA,EAAE,EAC3B,CAEDrsB,EAAO,GAAKisB,EAEZ,IAAK,IAAI/xE,EAAY,EAAGA,EAAIkxE,EAAYlxE,IAAK,CAC5C,MAAMyyE,EAA4B3G,EAAawG,EAActyE,GAG7D,IAAI+xE,GAAiBjsB,EAAO9lD,GAAKyyE,GAAqB,EAItD,GAHAD,GAAkBT,EAAQK,EAGtBL,EAAQU,EAAmB,CAC9B,MAAMN,EAAYJ,EAAQU,EAC1BD,GAAgC,IAAbL,EAAEA,EAAEA,EAAEA,EAAE,GAAWC,CACtC,MAAM,GAAIL,EAAQ,EAAMU,EAAmB,CAC3C,MAAMN,GAAaJ,EAAQ,GAAOU,EAClCD,GAAgC,IAAbL,EAAEA,EAAEA,EAAEA,EAAE,GAAWC,CACtC,CAEDtsB,EAAO9lD,GAAK+xE,CACZ,CAED92B,EAAUS,EAAagE,GAAmB8yB,EAC1C,MAAME,EAA0Bh3B,EAAauD,EACvC0zB,EAAuC,EAAlBD,EACrBE,EAAqBD,EAAa,EAClCE,EAAqBH,EAAkBC,EACvCG,EAA0B73B,EAAU03B,EAAajzB,GAGvDhE,IAEA,MAAM60B,EAAsBiC,GAHAM,GADI73B,EAAU23B,EAAalzB,GACUozB,GAAmBD,GAGzBz9B,EACrDsL,EAAiBsvB,EAAaO,EAAaT,EAAqBC,EAAqBF,EAAaD,GACxGG,EAAsBD,EACtBA,EAAsBS,EAEtBzE,GAAc9uB,EACdo1B,GAAYC,EACZj9B,GAASm9B,EACTtzB,GAAeE,EAEf,MAAM6xB,EAAiBtwB,EAAS9mD,EAChCA,GAAcusD,EAEdkoB,EAAK8B,IAAgBa,CACrB,CAED50B,EAAKW,YAAY,GAAK+uB,EACtB1vB,EAAKxiD,WAAaA,EAClBwiD,EAAK5c,iBAAmB4yC,EACxBh2B,EAAK1c,cAAgB0V,EACrBgH,EAAKyK,oBAAsB5H,EAC3B7C,EAAK4K,mBAAqBtL,EAE1BvV,EAAM8qC,gBAAgBrB,GACtBxzB,EAAKiL,wBAA0ByoB,EAC/B1zB,EAAKkL,wBAA0ByoB,C,CAoErB,iBAAO/B,CAAW7nC,EAAc44B,EAAqBG,EAAmB9iB,EAAYD,GACxF,MAAMkyB,EAAqBloC,EAAMq1B,+BAC3B17D,EAAqBq8C,EAAgBr8C,KAC3C,IAAIgsE,GAAsB1vB,EAAKW,YAAY,GAC3C,MAAMC,GAA2BZ,EAAKa,iBAAiB,GACvD,IAAIrjD,GAAsBwiD,EAAKxiD,WAC/B,MAAMusD,GAA2B/J,EAAK+J,gBACtC,IAAI4rB,EAAiB31B,EAAK0J,OAAO,GAAK,EAAK/uD,EAAOmK,gBAC5B,GAAlBk7C,EAAK0J,OAAO,KAEZisB,EAAQzxE,KAAKe,SAAWtK,EAAOmK,iBAEnC,MAAM6xE,EAAoBh8E,EAAOmK,gBAAkB,EACnD,IAAIykD,GAAuBvJ,EAAKuJ,YAEhC,MAAMiqB,EAAiCxzB,EAAK+K,YACtC0oB,EAA6C,EAAvBzzB,EAAKgL,gBACjC,IAAI0oB,GAA+B1zB,EAAKiL,wBACpC0oB,GAA+B3zB,EAAKkL,wBACxC,MAAM0oB,EAAyBv3C,GAAMu3C,aAI/BgD,EAA8B1yE,KAAKuC,IAAI,EAAKipE,EAAa3vB,EAAgBmN,sBAEzEjlC,EAAoB06C,EAAcG,EACxC,IAAK,IAAIiR,EAAsBpR,EAAaoR,EAAc9rD,EAAW8rD,IAAe,CAGhFxqB,IAF2B7lD,EAAKiyE,EAAQgB,GAEXptB,GAAeqtB,EAE5C,MAAMzC,EAAsB5qB,EACtBjF,EAAiBsvB,EAAaO,EAAaT,EAAqBC,EAAqBF,EAAaD,GACxGG,EAAsBD,EACtBA,EAAsBS,EAEtBwB,GAASjG,EACTA,GAAc9uB,EAEd,MAAMg0B,EAAiBtwB,EAAS9mD,EAChCA,GAAcusD,EAEdkoB,EAAK8B,IAAgBa,CACxB,CAED50B,EAAK0J,OAAO,GAAKisB,EAAQh7E,EAAOmK,gBAChCk7C,EAAKW,YAAY,GAAK+uB,EACtB1vB,EAAKxiD,WAAaA,EAClBwiD,EAAKuJ,YAAcA,EAEnBxf,EAAM8qC,gBAAgBrB,GACtBxzB,EAAKiL,wBAA0ByoB,EAC/B1zB,EAAKkL,wBAA0ByoB,C,CAG3B,oBAAO9B,CAAc9nC,EAAc44B,EAAqBG,EAAmB9iB,EAAYD,GAC3F,MAAMkyB,EAAqBloC,EAAMq1B,+BAC3B17D,EAAqBq8C,EAAgBr8C,KAE3C,IAAIgsE,EADiB,IACI1vB,EAAKW,YAAY,GAC1C,MAAMC,GAA2BZ,EAAKa,iBAAiB,GACvD,IAAIrjD,GAAsBwiD,EAAKxiD,WAC/B,MAAMusD,GAA2B/J,EAAK+J,gBACtC,IAAIR,GAAuBvJ,EAAKuJ,YAEhC,MAAMiqB,EAAiCxzB,EAAK+K,YACtC0oB,EAA6C,EAAvBzzB,EAAKgL,gBACjC,IAAI0oB,GAA+B1zB,EAAKiL,wBACpC0oB,GAA+B3zB,EAAKkL,wBACxC,MAAM0oB,EAAyBv3C,GAAMu3C,aAErC,IAAI+B,EAAiB31B,EAAK0J,OAAO,GAAK,EAAK/uD,EAAOiX,oBAE5B,GAAlBouC,EAAK0J,OAAO,KAASisB,EAAQt5C,GAAMw6C,uBAAuBnzE,EAAM/I,EAAOiX,qBAAuB89D,GAClG,MAAMiH,EAAoBh8E,EAAOiX,oBAAsB,EAIjDglE,EAA8B1yE,KAAKuC,IAAI,EAAKipE,GAE5CznD,EAAoB06C,EAAcG,EACxC,IAAK,IAAIiR,EAAsBpR,EAAaoR,EAAc9rD,EAAW8rD,IAAe,CAChF,MAAM+C,EAA2B,EAARnB,EACnB93E,EAAgBi5E,EAAWH,EACjC,IAAII,EAAqBrzE,EAAK7F,GAC9B,MAAMwmD,EAAqBsxB,EAAQmB,EACnCC,IAAerzE,EAAK7F,EAAQ,GAAKk5E,GAAc1yB,EAE/CkF,IAAgBwtB,EAAaxtB,GAAeqtB,EAG5C,MAAMzC,EAAsB5qB,EACtBjF,EAAiBsvB,EAAaO,EAAaT,EAAqBC,EAAqBF,EAAaD,GACxGG,EAAsBD,EACtBA,EAAsBS,EAEtBwB,GAASjG,EACTA,GAAc9uB,EAEd,MAAMg0B,EAAiBtwB,EAAS9mD,EAChCA,GAAcusD,EAEdkoB,EAAK8B,IAAgBa,CACxB,CAED50B,EAAK0J,OAAO,GAAKisB,EAAQh7E,EAAOiX,oBAChCouC,EAAKW,YAAY,GAAK+uB,EAhDD,IAiDrB1vB,EAAKxiD,WAAaA,EAClBwiD,EAAKuJ,YAAcA,EAEnBxf,EAAM8qC,gBAAgBrB,GACtBxzB,EAAKiL,wBAA0ByoB,EAC/B1zB,EAAKkL,wBAA0ByoB,C,CAG3B,mBAAO7B,CAAa/nC,EAAc44B,EAAqBG,EAAmB9iB,EAAYD,GAC1F,MAAMkyB,EAAqBloC,EAAMq1B,+BACjC,IAAI17D,EAAqBq8C,EAAgBkZ,eAAejZ,EAAK+I,cAC7D,MAAMiuB,EAAyB3qB,GAAgB6M,2BAA2BlZ,EAAK+I,cAC/E,IAAI2mB,EAAqB1vB,EAAKW,YAAY,GAAKq2B,EAC/C,MAAMp2B,GAA2BZ,EAAKa,iBAAiB,GACvD,IAAIrjD,GAAsBwiD,EAAKxiD,WAC/B,MAAMusD,GAA2B/J,EAAK+J,gBAEhCypB,EAAiCxzB,EAAK+K,YACtC0oB,EAA6C,EAAvBzzB,EAAKgL,gBACjC,IAAI0oB,GAA+B1zB,EAAKiL,wBACpC0oB,GAA+B3zB,EAAKkL,wBACxC,MAAM0oB,EAAyBv3C,GAAMu3C,aAErC,IAAI+B,EAAiB31B,EAAK0J,OAAO,GAAK,EAAK/uD,EAAOiX,oBAE5B,GAAlBouC,EAAK0J,OAAO,KAASisB,EAAQt5C,GAAMw6C,uBAAuBnzE,EAAM/I,EAAOiX,qBAAuB89D,GAClG,MAAMiH,EAAoBh8E,EAAOiX,oBAAsB,EAEjDqW,EAAoB06C,EAAcG,EACxC,IAAK,IAAIiR,EAAsBpR,EAAaoR,EAAc9rD,EAAW8rD,IAAe,CAChF,MAAM+C,EAA2B,EAARnB,EACnB93E,EAAgBi5E,EAAWH,EACjC,IAAIptB,EAAsB7lD,EAAK7F,GAC/B,MAAMwmD,EAAqBsxB,EAAQmB,EACnCvtB,IAAgB7lD,EAAK7F,EAAQ,GAAK0rD,GAAelF,EAEjD,MAAM8vB,EAAsB5qB,EACtBjF,EAAiBsvB,EAAaO,EAAaT,EAAqBC,EAAqBF,EAAaD,GACxGG,EAAsBD,EACtBA,EAAsBS,EAEtBwB,GAASjG,EACTA,GAAc9uB,EAEd,MAAMg0B,EAAiBtwB,EAAS9mD,EAChCA,GAAcusD,EAEdkoB,EAAK8B,IAAgBa,CACxB,CAED50B,EAAK0J,OAAO,GAAKisB,EAAQh7E,EAAOiX,oBAChCouC,EAAKW,YAAY,GAAK+uB,EAAasH,EACnCh3B,EAAKxiD,WAAaA,EAElBusC,EAAM8qC,gBAAgBrB,GACtBxzB,EAAKiL,wBAA0ByoB,EAC/B1zB,EAAKkL,wBAA0ByoB,C,CAG3B,eAAO/L,CAAS79B,EAAcktC,EAA2B/2B,EAA+BF,EAAYn5B,GAGxG,IAAKkjB,EAAM5pB,KAAM,OAEjB,IAAI2Z,EAAcn/B,EAAO4Y,SAAW,EAAIysC,EAAK5nB,QAAQ,GAGrD,GAAIvR,EAAWwd,kBAAkBvK,GAAM,OAEvC,IAAI0nC,EAAkB36C,EAAW3Q,WAAW4jB,GAGxCkhC,EAA4B,GAChC,GAAIrgE,EAAOub,WAAW2Q,EAAW3Q,WAAW4jB,IAAMxjB,QAE9C0kD,EAAgBl3D,KAAK,QAGrB,GAAI+iB,EAAWud,eAAetK,IAAQiQ,EAAM5pB,KAAK8sB,SAASpmB,EAAW7L,YAAY8e,IAAMP,YAAYr9B,OAC/F,IAAK,IAAI0H,EAAY,EAAGA,EAAImmC,EAAM5pB,KAAK8sB,SAASpmB,EAAW7L,YAAY8e,IAAMP,YAAYr9B,OAAQ0H,IAC7Fo3D,EAAgBl3D,KAAKF,QAIpBijB,EAAWud,eAAetK,GAAOiQ,EAAM5pB,KAAK8sB,SAASpmB,EAAW7L,YAAY8e,IAAMP,YAAYr9B,OAC9B,MAAjE6tC,EAAM5pB,KAAKs+B,WAAW53B,EAAW7L,YAAY8e,GAAMiQ,EAAM0F,OACzDurB,EAAkBjxB,EAAM5pB,KAAKs+B,WAAW53B,EAAW7L,YAAY8e,GAAMiQ,EAAM0F,KAAMlW,aAErFyhC,EAAgBl3D,KAAK+iB,EAAWud,eAAetK,IAIvD,IAAK,IAAIgX,EAA0B,EAAGA,EAAkBkqB,EAAgB9+D,OAAQ40C,IAK5E,GAHA/G,EAAMgxB,YAAY/a,EAAKxiD,WAAYwiD,EAAKxiD,WAAawiD,EAAK+J,gBAAiBjwB,EAAKjT,EAAW7L,YAAY8e,GAAMkhC,EAAgBlqB,GAAkB0wB,GAG3IA,GAAW7mE,EAAOub,WAAWnY,WAAW,aAAaF,OAAuB,GAAdksC,EAAM3P,MAAa4lB,EAAKuH,eAAiBxd,EAAMqwB,KAAOz/D,EAAOsQ,aAAe8+B,EAAM5Q,KAChJ4Q,EAAM5pB,KAAK8sB,SAASpmB,EAAW7L,YAAY8e,IAAMP,YAAYyhC,EAAgBlqB,IAAkB9M,QAAU,OAGxG,GAAIw9B,GAAW7mE,EAAOub,WAAWnY,WAAW,YAAYF,MACzDksC,EAAMu0B,YAAa,OAGlB,GAAIkD,GAAW7mE,EAAOub,WAAWnY,WAAW,aAAaF,MAAO,CACjE,MAAMw9D,EAAgBtxB,EAAM5pB,KAAK8sB,SAASpmB,EAAW7L,YAAY8e,IAAMP,YAAYyhC,EAAgBlqB,IAEnG,IAAKuqB,EAAc1uC,aAAc,CAE7B,IAAIuqD,EAA6C,EAAjCrwD,EAAWoT,eAAeH,GAE1C,GAAiB,GAAbo9C,EAAgB,CAEhB,IAAIvc,EAAiB,EACrB,MAAMrU,EAAsBvc,EAAMoyB,kBAAoBxhE,EAAOuQ,aAC7D,KAAO80C,EAAKvmB,KAAMnF,MAAQ0rB,EAAKvmB,KAAMpB,KAAKsiC,GAAQ3iC,MAAQsuB,GAAaqU,IAGvE,IAAIwc,GAAyB7wB,EAActG,EAAKvmB,KAAMnF,MAAS4rB,GAAyBnW,EAAMyvB,oBAAsB7+D,EAAOuQ,cAAiBvQ,EAAOuQ,aAAgB80C,EAAKvmB,KAAMpB,KAAKsiC,EAAS,GAAG3iC,OAASgoB,EAAKvmB,KAAMpB,KAAKsiC,GAAQ3iC,KAAOgoB,EAAKvmB,KAAMpB,KAAKsiC,EAAS,GAAG3iC,MAG/L,MAAhEqjC,EAAc94B,aAAayd,EAAKvmB,KAAMpB,KAAKsiC,EAAS,GAAGjrC,OAA6E,MAA5D2rC,EAAc94B,aAAayd,EAAKvmB,KAAMpB,KAAKsiC,GAAQjrC,MAC3H2rC,EAAc/F,eAAiBj2B,GAAeU,YAAYs7B,EAAc94B,aAAayd,EAAKvmB,KAAMpB,KAAKsiC,EAAS,GAAGjrC,MAAQ2rC,EAAc94B,aAAayd,EAAKvmB,KAAMpB,KAAKsiC,GAAQjrC,MAAQynD,GAGpL9b,EAAc/F,eAAiB+F,EAAc9wC,QAGpD,KACI,CAED,IAAK,IAAI3mB,EAAY,EAAGA,EAAIjJ,EAAO6S,iBAAkB5J,IAC7Cy3D,EAAc/F,gBAAkB+F,EAAc94B,aAAa3+B,IAAsC,MAAhCy3D,EAAc/F,iBAC/E+F,EAAc/F,eAAiB,IAAIj2B,GACnCg8B,EAAc/F,eAAe16B,eAAeygC,EAAc94B,aAAa3+B,GAAI+1B,iBAG/C,MAAhC0hC,EAAc/F,iBACd+F,EAAc/F,eAAiB,IAAIj2B,GACnCg8B,EAAc/F,eAAe16B,eAAeygC,EAAc9wC,SAASoP,iBAGnE0hC,EAAc/F,eAAe/1B,kBAAoBr7B,KAAK+b,OAAOi3D,EAAY,GAAK,KAC1EA,EAAY,EACZ7b,EAAc/F,eAAeh2B,cAAcp7B,KAAK+b,OAAOi3D,EAAY,GAAK,IAAIr5C,KAAOmiB,EAAKxiD,WAAawiD,EAAK+J,gBAE1GsR,EAAc/F,eAAeh2B,cAAcp7B,KAAK+b,OAAOi3D,EAAY,GAAK,IAAIp5C,KAAOkiB,EAAKxiD,WAAawiD,EAAK+J,gBAGrH,CACJ,CACJ,MAEI,GAAIyX,GAAW7mE,EAAOub,WAAWnY,WAAW,eAAeF,MAAO,CACnE,MAAMw9D,EAAgBtxB,EAAM5pB,KAAK8sB,SAASpmB,EAAW7L,YAAY8e,IAAMP,YAAYyhC,EAAgBlqB,IAEnG,IAAKuqB,EAAc1tC,eAAgB,CAC/B,IAAIupD,EAA6C,EAAjCrwD,EAAWoT,eAAeH,GAE1C,GAAiB,GAAbo9C,EAAgB,CAEhB,IAAIvc,EAAiB,EACrB,MAAMrU,EAAsBvc,EAAMoyB,kBAAoBxhE,EAAOuQ,aAC7D,KAAO80C,EAAKvmB,KAAMnF,MAAQ0rB,EAAKvmB,KAAMpB,KAAKsiC,GAAQ3iC,MAAQsuB,GAAaqU,IAGvE,IAAIwc,GAAyB7wB,EAActG,EAAKvmB,KAAMnF,MAAS4rB,GAAyBnW,EAAMyvB,oBAAsB7+D,EAAOuQ,cAAiBvQ,EAAOuQ,aAAgB80C,EAAKvmB,KAAMpB,KAAKsiC,EAAS,GAAG3iC,OAASgoB,EAAKvmB,KAAMpB,KAAKsiC,GAAQ3iC,KAAOgoB,EAAKvmB,KAAMpB,KAAKsiC,EAAS,GAAG3iC,MAG7L,MAAlEqjC,EAAc74B,eAAewd,EAAKvmB,KAAMpB,KAAKsiC,EAAS,GAAGjrC,OAA+E,MAA9D2rC,EAAc74B,eAAewd,EAAKvmB,KAAMpB,KAAKsiC,GAAQjrC,MAC/H2rC,EAAc5B,iBAAmBp6B,GAAeU,YAAYs7B,EAAc74B,eAAewd,EAAKvmB,KAAMpB,KAAKsiC,EAAS,GAAGjrC,MAAQ2rC,EAAc74B,eAAewd,EAAKvmB,KAAMpB,KAAKsiC,GAAQjrC,MAAQynD,GAG1L9b,EAAc5B,iBAAmB4B,EAAczvC,UAGtD,KACI,CAGD,IAAK,IAAIhoB,EAAY,EAAGA,EAAIjJ,EAAO6S,iBAAkB5J,IAC7Cy3D,EAAc5B,kBAAoB4B,EAAc74B,eAAe5+B,IAAwC,MAAlCy3D,EAAc5B,mBACnF4B,EAAc5B,iBAAmB,IAAIp6B,GACrCg8B,EAAc5B,iBAAiB7+B,eAAeygC,EAAc74B,eAAe5+B,GAAI+1B,iBAGjD,MAAlC0hC,EAAc5B,mBACd4B,EAAc5B,iBAAmB,IAAIp6B,GACrCg8B,EAAc5B,iBAAiB7+B,eAAeygC,EAAczvC,WAAW+N,iBAGvE0hC,EAAc5B,iBAAiBl6B,kBAAoBr7B,KAAK+b,OAAOi3D,EAAY,GAAK,KAC5EA,EAAY,EACZ7b,EAAc5B,iBAAiBn6B,cAAcp7B,KAAK+b,OAAOi3D,EAAY,GAAK,IAAIr5C,KAAOmiB,EAAKxiD,WAAawiD,EAAK+J,gBAE5GsR,EAAc5B,iBAAiBn6B,cAAcp7B,KAAK+b,OAAOi3D,EAAY,GAAK,IAAIp5C,KAAOkiB,EAAKxiD,WAAawiD,EAAK+J,gBAGvH,CACJ,CACJ,C,CAID,6BAAO8sB,CAAuBnzE,EAAoBuC,GACtD,IAAI0vE,EAAgBzxE,KAAKe,SAAWgB,EACpC,MAAM0wE,EAAoB1wE,EAAa,EAIvC,IAAImxE,EAAoBzB,EAAQgB,EAC5BpyC,EAAmB7gC,EAAK0zE,GAE5B,IAAK,IAAIC,EAA4B,IAAKA,EAAoB,EAAGA,IAAqB,CAClF,MAAMC,EAAqBF,EAFR,GAE8BT,EAC3CY,EAAmB7zE,EAAK4zE,GAC9B,GAAI/yC,EAAWgzC,GAAY,EAAK,CAE5B,IAAK,IAAI3zE,EAAY,EAAGA,EANT,GAMqBA,IAAK,CACrC,MAAM4zE,EAA0BJ,EAAY,EAAKT,EAC3Cc,EAAwB/zE,EAAK8zE,GACnC,GAAIjzC,EAAWkzC,GAAiB,EAAK,CAEjC,MAAMpI,EAAgBoI,EAAgBlzC,EACtCoxC,EAAQyB,EACJlzE,KAAKC,IAAIkrE,GAAS,OAClBsG,IAAUpxC,EAAW8qC,GAEzBsG,EAAQzxE,KAAKiM,IAAI,EAAGwlE,GAAS1vE,EAC7B,KACH,CACGmxE,EAAYI,EACZjzC,EAAWkzC,CAElB,CACD,KACH,CACGL,EAAYE,EACZ/yC,EAAWgzC,CAElB,CAED,OAAO5B,C,CAGJ,mCAAOngB,CAA6BkiB,GACvC,OAAQA,IAAqB/8E,EAAOyU,YAAc,EAAO,EAAMlL,KAAKoB,IAAI,EAAG3K,EAAO0U,eAAiBqoE,E,CAEhG,mCAAOC,CAA6BC,GACvC,OAAQA,GAAc,GAAQj9E,EAAOyU,YAAc,EAAIlL,KAAKuC,IAAI9L,EAAOyU,YAAclL,KAAKT,IAAIm0E,GAAc1zE,KAAKsnC,IAAO7wC,EAAO0U,e,CAE5H,2BAAOo5C,CAAqB/4B,GAC/B,OAAOxrB,KAAKoB,IAAIpB,KAAKiM,IAAI,EAAKuf,GAAQ/0B,EAAOwU,YAAa,I,CAEvD,2BAAO0oE,CAAqBD,GAC/B,OAAO1zE,KAAKoB,IAAIpB,KAAKiM,IAAI,EAAKynE,GAAa,EAAI,KAAOj9E,EAAOwU,W,CAG1D,6BAAOq2B,CAAuBg8B,GACjC,MAAO,OAAU,IAAOA,EAAU,IAAOA,EAAUA,E,CAEhD,6BAAO96B,CAAuBoxC,GACjC,OAAOpjD,GAAM,EAAG/5B,EAAOgT,YAAazJ,KAAKkB,QAAQ,IAAOlB,KAAKiB,KAAK,MAAS,GAAM2yE,EAAU,QAAW,I,CAEnG,4BAAOryC,CAAsB+7B,GAChC,OAAO7mE,EAAOiT,aAAa4zD,E,CAExB,4BAAO76B,CAAsBoxC,GAChC,IAAIC,EAAgBr9E,EAAOiT,aAAa,GACxC,GAAImqE,GAASC,EAAO,OAAO,EAC3B,IAAK,IAAIp0E,EAAY,EAAGA,EAAIjJ,EAAOiT,aAAa1R,OAAQ0H,IAAK,CACzD,IAAIq0E,EAAgBt9E,EAAOiT,aAAahK,GACxC,GAAIm0E,GAASE,EAAO,OAAQF,GAASC,EAAQC,GAAS,EAAKr0E,EAAI,EAAIA,EACnEo0E,EAAQC,CACX,CACD,OAAOt9E,EAAOiT,aAAa1R,OAAS,C,CAGjC,oBAAOqpC,CAAc1C,GAGxB,OAAOA,EAASloC,EAAOmZ,Y,CAEpB,oBAAOszB,CAAc8wC,GAGxB,OAAOA,EAAQv9E,EAAOmZ,Y,CAGnB,sBAAOm1D,CAAgBh7C,EAAkBzpB,GAC5C,OAAgB,GAAZypB,EACOtzB,EAAO+a,cAAcuY,GAGrBtzB,EAAOqb,iBAAiBxR,E,CAI/B,iBAAAg1D,GACJ,GAAiB,MAAbngE,KAAK8mB,KAAc,OAAO,EAC9B,IAAI08B,EAAyBxjD,KAAK8mB,KAAKu+B,oBAIvC,OAHIrlD,KAAKo6D,YAAY94D,EAAOub,WAAWnY,WAAkB,MAAEF,SACvDg/C,EAAiBxjD,KAAKq6D,YAAY/4D,EAAOub,WAAWnY,WAAkB,MAAEF,QAErExE,KAAK6jE,6BAA6BrgB,E,CAGrC,4BAAAqgB,CAA6BrgB,GACjC,MAAMs7B,EAAyBt7B,EAAiB,GAC1Cu7B,EAAyBz9E,EAAOsQ,aAAektE,EAC/CE,EAAwB19E,EAAOuQ,aAAektE,EACpD,OAAO/+E,KAAKinD,iBAAmB+3B,C,CAG5B,wBAAO/7C,CAAkBrsB,GAC5B,OAAO,GAAM,GAAK/L,KAAKqB,MAAMrB,KAAKyS,KAAK1G,GAAK,E,CAGxC,eAAA4kE,CAAgBrB,GACpB,IAAI95C,GAAiB,EACrB,IAAK,MAAMhH,KAAU8gD,EAAS,CAC1B,MAAMv/C,EAAkB/vB,KAAKC,IAAIuuB,EAAOuB,SAClCC,EAAkBhwB,KAAKC,IAAIuuB,EAAOwB,SAExC,KAAMD,EAAU,KAAUC,EAAU,KAAM,CACtCwF,GAAQ,EACR,KACH,CACGzF,EAAUQ,KAAS/B,EAAOuB,QAAU,GACpCC,EAAUO,KAAS/B,EAAOwB,QAAU,EAC3C,CACD,GAAIwF,EACA,IAAK,MAAMhH,KAAU8gD,EACjB9gD,EAAOuB,QAAU,EACjBvB,EAAOwB,QAAU,C,CAKtB,wBAAOokD,CAAkBz5B,EAAyB05B,EAAmBC,GACxE,OAAa,CAET,MAAM36E,IADN06E,EACkCC,EAC5Bl0B,EAAiBpgD,KAAKC,IAAI06C,EAAUhhD,IAC1C,GAAIkd,OAAOgqD,SAASzgB,KAAsB,GAAVA,GAAiBA,GAAU7vB,IAAU,MACrEoqB,EAAUhhD,GAAS,CACtB,C,CAGE,mBAAO+1E,CAAatvB,EAAgBm0B,EAAgBC,EAAgBjF,EAAqBD,GAC5F,IAAK,IAAI5vE,EAAY,EAAGA,EAAI6vE,EAAa7vE,IAAK,CAC1C,MAAM8uB,EAA8B8gD,EAAQ5vE,GACtCqwB,EAAkBvB,EAAOuB,QACzBC,EAAkBxB,EAAOwB,QACzBR,EAAahB,EAAOgB,GACpBC,EAAajB,EAAOiB,GACpB/tB,EAAa8sB,EAAO9sB,GACpBC,EAAa6sB,EAAO7sB,GACpBC,EAAa4sB,EAAO5sB,GAC1Bw+C,EAAS1+C,EAAK0+C,EAASz+C,EAAK4yE,EAAS3yE,EAAK4yE,EAAShlD,EAAKO,EAAUN,EAAKO,EACvExB,EAAOgB,GAAKA,EAAKhB,EAAOkB,QACxBlB,EAAOiB,GAAKA,EAAKjB,EAAOmB,QACpBnB,EAAOyB,oCACPzB,EAAO9sB,GAAKA,EAAK8sB,EAAOoB,QACxBpB,EAAO7sB,GAAKA,EAAK6sB,EAAOqB,QACxBrB,EAAO5sB,GAAKA,EAAK4sB,EAAOsB,UAExBtB,EAAO9sB,GAAKA,EAAK8sB,EAAOoB,QACxBpB,EAAO7sB,GAAKA,EAAK6sB,EAAOqB,QACxBrB,EAAO5sB,GAAKA,EAAK4sB,EAAOsB,SAE5BtB,EAAOwB,QAAUD,EACjBvB,EAAOuB,QAAUqwB,EAEjBo0B,EAASxkD,EACTukD,EAASxkD,CACZ,CACD,OAAOqwB,C,EAriJYjoB,GAAAslB,4BAAkD,IAAIjxB,GACtD2L,GAAA0lB,0BAAgD,IAAIrxB,GAInD2L,GAAoBu0C,qBAAyB,GAC7Cv0C,GAAqB01C,sBAAyB,GAC9C11C,GAAAm5C,qBAAmC35E,MAAM,KAAQgtD,UAAKjoC,GACtDyb,GAAyB24C,0BAAen5E,MAAM,GAAGgtD,UAAKjoC,GAu/H/Dyb,GAAA00C,kBAA8B,wWAKiBp2E,EAAO0M,eAAiB,4DAClC1M,EAAO0M,eAAiB,0qDAsCvC1M,EAAO0M,eAAiB,wDACd1M,EAAO0M,eAAiB,0WAStEuS,MAAM,MAEQyiB,GAAA60C,wBAAoC,4LAGDv2E,EAAOwZ,aAAe,6TAIvEyF,MAAM,MC/gYV,MAAM+W,EAACA,GAACgoD,OAAEA,GAAMC,IAAEA,GAAGC,GAAEA,GAAEC,MAAEA,GAAKC,OAAEA,IAAUngE,GACtCogE,IAACA,GAAGC,OAAEA,GAAMC,KAAEA,GAAIC,KAAEA,IAAQlgE,EAE5BmgE,GAAoB,4FAA4Fr/D,KAAK4L,UAAUC,WAErIhpB,SAASG,KAAKC,YAAY4b,EAAKJ,MAAM,CAAClK,KAAM,YAAa,0BAE/C4L,EAAYkJ,iCACPlJ,EAAY+I,0QAcjB/I,EAAYwJ,uJAQPxJ,EAAYyJ,mCACjBzJ,EAAYkJ,6IAMPlJ,EAAY0J,wTAeZ1J,EAAYkJ,utBAiBZlJ,EAAYkJ,4yBAeNlJ,EAAY+I,2OAUlB/I,EAAYyJ,uJAMZzJ,EAAYkJ,sOAMZlJ,EAAY0J,2IAMZ1J,EAAYyJ,wIAGZzJ,EAAY0J,iKAOZ1J,EAAYkJ,wJAOZlJ,EAAYyJ,yJAIZzJ,EAAY0J,uIAMZ1J,EAAYkJ,8CAI5B,MAAMi2D,GAA4BC,GAAgB,cAClDp/D,EAAYuG,SAAwB,OAAf44D,GAAsB,eAAiBA,IAE5D,IAGIE,GAHAC,GAA0B,KAC1BC,IAA+B,WAAhBv1E,KAAKe,WAA2B,GAAGy0E,SAAS,IAC3DC,IAAgC,EAEhCC,IAAuB,EACvBC,GAAwB,EACxBC,GAAiC,EACjCC,GAA+B,EAEnC,MAAMhwC,GAAe,IAAI1N,GACnB29C,GAAiC,I,MC9JnC,WAAA5gF,CAA4B2/E,EAAoC7pC,EAAgB,GAApD71C,KAAM0/E,OAANA,EAAoC1/E,KAAK61C,MAALA,EAC5D71C,KAAK4gF,GAAqB,SAASC,EAA2BC,GAC1D,GAAGA,EAAa,CACZ,IAAIC,EAAMrB,EAAOsB,WAAW,MAE5BD,EAAIE,UAAYpgE,EAAYW,YAAY,uBACxCu/D,EAAIG,SAAS,EAAG,EAAGxB,EAAOyB,MAAOzB,EAAO0B,QAExCL,EAAIE,UAAiE,KAArDpgE,EAAYW,YAAY,yBAAkCX,EAAYW,YAAY,yBAA2BX,EAAYW,YAAY,kBACrJ,IAAK,IAAIjX,EAAYs2E,EAAYh+E,OAAS,EAAG0H,GAAKs2E,EAAYh+E,OAAS,EAAK68E,EAAOyB,MAAMtrC,EAAQtrC,IAAK,CAClG,IAAIqM,EAAIrM,GAAKs2E,EAAYh+E,OAAS,GAAM68E,EAAOyB,MAAMtrC,EACjDwrC,EAAMR,EAAYt2E,IAAMm1E,EAAO0B,OAAOvrC,EAAQ,GAAM6pC,EAAO0B,OAAOvrC,EAAQ,EAG9E,GADAkrC,EAAIG,UAAUtqE,EAAI,GAAGi/B,GAAQwrC,EAAK,GAAGxrC,EAAO,EAAEA,EAAO,IAAIA,GAChD,GAALj/B,EAAQ,KACf,CACDmqE,EAAIE,UAAiE,KAArDpgE,EAAYW,YAAY,yBAAkCX,EAAYW,YAAY,yBAA2BX,EAAYW,YAAY,oBACrJ,IAAK,IAAIjX,EAAYu2E,EAAYj+E,OAAS,EAAG0H,GAAKu2E,EAAYj+E,OAAS,EAAK68E,EAAOyB,MAAMtrC,EAAQtrC,IAAK,CAClG,IAAIqM,EAAIrM,GAAKu2E,EAAYj+E,OAAS,GAAM68E,EAAOyB,MAAMtrC,EACjDyrC,EAAMR,EAAYv2E,IAAMm1E,EAAO0B,OAAOvrC,EAAQ,GAAM6pC,EAAO0B,OAAOvrC,EAAQ,EAG9E,GADAkrC,EAAIG,UAAUtqE,EAAI,GAAGi/B,GAAQyrC,EAAK,GAAGzrC,EAAO,EAAEA,EAAO,IAAIA,GAChD,GAALj/B,EAAQ,KACf,CACJ,CACL,EACA0f,GAAOQ,OAAO,qBAAsB92B,KAAK4gF,G,GDoIYlB,GAAO,CAAEyB,MAAOpB,GAAU,IAAI,IAAKqB,OAAQrB,GAAS,GAAG,GAAI5gE,MAAO,oBAAoB0B,EAAYyJ,wCAA0C81D,GAAI,mBAAqBL,GAAS,EAAE,GACpK,SAAvCE,GAAgB,sBAEjDU,GAAYjB,OAAOvgE,MAAMoiE,QAAU,OACnC7wC,GAAMm0B,YAAa,GAEpB,IAAI2c,GAAgChC,GAAG,CAAErgE,MAAO,qEAAuE,IAClHsiE,GAA8BnqD,GAAE,CAACnF,OAAQ,OAAQhT,MAAO,kBAAmB,UAC3EuiE,GAA8BpqD,GAAE,CAACqqD,KAAM,qBAAsBxiE,MAAO,kBAAmB,cACvFyiE,GAA+BtqD,GAAE,CAACqqD,KAAM,qBAAsBxiE,MAAO,kBAAmB,WACxF0iE,GAAoCvqD,GAAE,CAACnF,OAAQ,OAAQhT,MAAO,kBAAmB,gBAElF2iE,IAA4B,EAC/B,MAAMC,GAAgCzC,GAAO,CAACngE,MAAO,iDAC/C6iE,GAAsCzC,GAAI,CAACpgE,MAAO,wHACxD4iE,IAEME,GAA2BnC,GAAK,CAACoC,EAAG,0KACpCC,GAAgC7C,GAAO,CAACppC,MAAO,OAAQ/2B,MAAO,8FAA+FwgE,GAAI,CAACwB,MAAO,GAAIC,OAAQ,GAAIgB,QAAS,aACxMH,KAGMI,GAA4B1C,GAAI,CAACxgE,MAAO,4DAA6DijE,QAAS,aACnHtC,GAAK,CAACtwB,KAAM3uC,EAAYyJ,mBAAoB43D,EAAG,4FAE3CI,GAAiC7C,GAAM,CAAEvpC,MAAO,SAAUjhC,KAAM,QAASrG,MAAO,GAAIxB,IAAK,EAAG0J,IAAK,GAAIyrE,KAAM,EAAGpjE,MAAO,kDAEpHqjE,GAA0B7C,GAAI,CAACwB,MAAO,GAAIC,OAAQ,GAAIgB,QAAS,aACpExC,GAAO,CAAC6C,GAAI,IAAKC,GAAI,IAAKC,EAAG,MAAO,eAAgB,IAAKC,OAAQ,eAAgBpzB,KAAM,SACvFswB,GAAK,CAAC8C,OAAQ,eAAgB,eAAgB,IAAKV,EAAG,wCAAyC1yB,KAAM,UAEhGqzB,GAAgCvD,GAAO,CAACppC,MAAO,OAAQ/2B,MAAO,8FACpEqjE,IAGMM,GAA0BnD,GAAI,CAACxgE,MAAO,iEACtC2K,GAA2By1D,GAAI,CAACpgE,MAAO,8EAA8E0B,EAAYiJ,oCACjIi5D,GAAoCxD,GAAI,CAACpgE,MAAO,oEAAqE2jE,GAAUh5D,IAC/Hk5D,GAAyCzD,GAAI,CAACpgE,MAAO,sHAAuH4jE,IAE7KE,GAAiCrjE,EAAIigE,KAAK,CAAE,iBAAkB,OAAQsB,MAAO,MAAOC,OAAQ,MAAOxqE,EAAG,KAAMC,EAAG,MAAO24C,KAAM3uC,EAAYyJ,qBACxI44D,GAA+BtjE,EAAIigE,KAAK,CAAE,iBAAkB,OAAQuB,OAAQ,MAAOD,MAAO,KAAMvqE,EAAG,KAAMC,EAAG,MAAO24C,KAAM,wBACzHnb,GAA+Bz0B,EAAIigE,KAAK,CAAE,iBAAkB,OAAQsB,MAAO,MAAOC,OAAQ,MAAOxqE,EAAG,KAAMC,EAAG,MAAO24C,KAAM3uC,EAAY0J,gBACtI44D,GAAwBvjE,EAAIwjE,KAAK,CAAE,aAAc,OAAQ1tE,OAAQ,QACjE2tE,GAAwBzjE,EAAIwjE,KAAK,CAAE,aAAc,SAAU1tE,OAAQ,QACnE4tE,GAAwB1jE,EAAIwjE,KAAK,CAAE,aAAc,MAAO1tE,OAAQ,SAChE6tE,GAA+B3jE,EAAI4jE,eAAe,CAAEpD,GAAI,cAAeqD,cAAe,kBAAoBN,GAAOE,GAAOC,IACxHI,GAAuB9jE,EAAI8jE,KAAK,GAAIH,IACpCI,GAAoC/jE,EAAI+/D,IAAI,CAAExgE,MAAO,sDAAuDgiE,MAAO,QAASC,OAAQ,OAAQwC,oBAAqB,QACtKF,GACAT,GACAC,GACA7uC,IAyBD,SAASwvC,GAAgB1wE,EAAavE,GACrC,IACC6a,aAAaq6D,QAAQ3wE,EAAKvE,EAC1B,CAAC,MAAO3L,GAER,CACF,CACA,SAASg9E,GAAgB9sE,GACxB,IACC,OAAOsW,aAAaC,QAAQvW,EAC5B,CAAC,MAAOlQ,GAER,OAAO,IACP,CACF,CAEA,SAAS8gF,GAASC,EAAoBC,GACrCvzC,GAAMi2B,QAAQqd,GACdtzC,GAAM+3B,cACN,MAAMyb,EAA4BxzC,GAAM5pB,KAAMuvB,iBAC9CorC,GAASE,KAAO,OAASuC,CAO1B,CAEA,SAASC,KACR,IAAIC,EAAiB7jC,SAAS3d,KAC9B,GAAIu9C,IAAYiE,GAAoB,IAAVA,EAA1B,CAEAjE,GAAWiE,EAEa,KAApBA,EAAOziC,OAAO,KACjByiC,EAASA,EAAOzqC,UAAU,IAI3BkoC,GAAeF,KAAOphC,SAASohC,KAE/B,IAAK,MAAM0C,KAAaD,EAAO7jE,MAAM,KAAM,CAC1C,IAAI+jE,EAAsBD,EAAUntD,QAAQ,KAC5C,IAAoB,GAAhBotD,EAAmB,CACtB,IAAIC,EAAoBF,EAAU1qC,UAAU,EAAG2qC,GAC3C11E,EAAgBy1E,EAAU1qC,UAAU2qC,EAAc,GACtD,OAAQC,GACP,IAAK,OACJR,GAASn1E,GACL8hC,GAAM5pB,OACT06D,GAAUh6D,YAAckpB,GAAM5pB,KAAKovB,OAEpC,MAID,IAAK,OACJxF,GAAM0zB,gBAA4B,KAATx1D,EAAgB,GAAK,EAC9C41E,KAGF,MACAT,GAASK,EAEV,CAEDK,IApCwC,CAqCzC,CA3FAlhF,SAASmhF,KAAK/gF,YAAYq/E,IAC1Bz/E,SAASmhF,KAAK/gF,YACZ47E,GAAI,CAACpgE,MAAO,yGACZ6iE,GACAG,GACAE,GACAC,GACAO,GACAc,GACAhD,GAAYjB,OACZ8B,GACAC,GACAC,GACAE,GACAC,KAmFF,IAAI8C,GAA0E,KAC9E,SAASC,KACR,IAAKl0C,GAAM2xB,QAEV,YADAwiB,cAAcF,IAIf,MAAMG,EAAgC7E,GAAgB,YAChC,MAAlB6E,GAA0BA,GAAkB1E,KAC/C2E,KACAC,KACAH,cAAcF,IAEhB,CAEA,SAASM,KACJv0C,GAAM2xB,UACT6d,GAAmBgF,sBAAsBD,IACzCD,KAEAG,MAEG7E,IAAwB5vC,GAAM2xB,SACjC+iB,IAGF,CAEA,SAASD,KACR,GAAkB,MAAdz0C,GAAM5pB,KAGT,OAFAutB,GAAa11B,aAAa,IAAK,WAC/BukE,GAAavkE,aAAa,QAAS,MAoBrC,IAAuB0mE,EAAyBC,EAjB/C7E,KACIA,IAA0B,IAC7BC,IAAwB,KAErBhwC,GAAM5pB,KAAKutB,aAAeqsC,KAC7BA,GAAuBhwC,GAAM5pB,KAAKutB,aAClCosC,GAAyB,IAWJ4E,EARR30C,GAAM5pB,KAAKutB,aAQsBixC,EARR5E,GASvCwC,GAAavkE,aAAa,QAAS,GAAK9T,KAAKuC,IAAI,IAAuB,IAAlBi4E,IACtDhxC,GAAa11B,aAAa,IAAK,IAAM,EAAI9T,KAAKuC,IAAI,IAAsB,IAAjBk4E,KARlD50C,GAAM2xB,UACVhuB,GAAa11B,aAAa,IAAK,MAC/BukE,GAAavkE,aAAa,QAAS,MAErC,CAOA,SAASomE,KACU,MAAdr0C,GAAM5pB,OACe,MAApBo5D,IAA0BqF,qBAAqBrF,IACnDA,GAAmB,KACfxvC,GAAM2xB,SACT3xB,GAAMm3B,QACNsd,OAEAz0C,GAAMk3B,OACNic,GAAgB,WAAYzD,IAC5B6E,KACAJ,cAAcF,IACdA,GAAmCa,YAAYZ,GAA4B,OAG7EQ,IACD,CA2BA,SAASK,GAAoB5hF,GACvBi+E,KACLj+E,EAAM6hF,iBACNC,GAAqB9hF,EAAM+hF,SAAW/hF,EAAMgiF,OAC7C,CAOA,SAASC,GAAoBjiF,GAC5B8hF,GAAqB9hF,EAAMkiF,QAAQ,GAAGH,QACvC,CAEA,SAASD,GAAqBK,GAC7B,GAAIlE,IAAkC,MAAdpxC,GAAM5pB,KAAc,CAC3C,MAAMm/D,EAA2BjD,GAAuBkD,wBACxDx1C,GAAM5mB,SAAW4mB,GAAM5pB,KAAKkvB,UAAYgwC,EAASC,EAAaE,OAASF,EAAaG,MAAQH,EAAaE,MACzGz1C,GAAM8vB,yBACNwkB,IACA,CACF,CAEA,SAASqB,KACRvE,IAAmB,CACpB,CAEA,SAASwE,KACR,MAAMjzD,GAAkBivD,GAAa1zE,MACrC8hC,GAAMrd,OAASxoB,KAAKuC,IAAI,EAAKvC,KAAKoB,IAAIonB,EAAS,GAAM,KAAQxoB,KAAKoB,IAAI,GAAMonB,EAAS,IAAQ,GAC9F,CAEA,SAAS2xD,KACR,GAAkB,MAAdt0C,GAAM5pB,KAAc,CACvB,IAAI6f,EAAc+J,GAAM5mB,SAAW4mB,GAAM5pB,KAAKkvB,SAC9ClsB,GAAS3K,MAAMgnE,KAAQ3F,GAAgB75C,EAAO,KAE9C,MAAMs/C,EAA2BjD,GAAuBkD,wBACxDlD,GAAuBuD,WAAa5/C,GAAO65C,GAAgByF,EAAa9E,MACxE,CACF,CAEA,SAASsD,KAER,GADA3B,GAAS0D,UAAY,GACH,MAAd91C,GAAM5pB,KAAc,OAExB,MAAMm/D,EAA2BjD,GAAuBkD,wBAExD,IAAIO,EACAC,EACAC,EAEJ,GAAIpG,GAAa,CAChBkG,EAAiBR,EAAa7E,OAC9BsF,EAAgB77E,KAAKiM,IAAI,EAAGjM,KAAKuC,IAAI9L,EAAO2Y,aAAcpP,KAAKkB,MAAM06E,EAAc,MACnFE,EAAmC,GAAhBD,EAAqB,EACxC,MAAME,GAA0BH,EAAiB,GAAKE,EAChDE,EAA0Bh8E,KAAKiM,IAAI,EAAoB,EAAjB8vE,GAC5CpG,GAAgB31E,KAAKiM,IAAImvE,EAAa9E,MAAO0F,EAAkBn2C,GAAM5pB,KAAKkvB,SAAWtF,GAAM5pB,KAAK+a,YAChG,KAAM,CACN2+C,GAAgByF,EAAa9E,MAC7B,MAAM2F,EAA+Bj8E,KAAKiM,IAAI,EAAG0pE,IAAiB9vC,GAAM5pB,KAAKkvB,SAAWtF,GAAM5pB,KAAK+a,aAAe,GAClH4kD,EAAiB57E,KAAKuC,IAAI64E,EAAa7E,OAAQ0F,GAAwBxlF,EAAO6Y,SAAW,GAAK,GAC9FusE,EAAgB77E,KAAKiM,IAAI,EAAGjM,KAAKuC,IAAI9L,EAAO2Y,aAAcpP,KAAKkB,MAAM06E,GAAkB,GAAKK,MAC5FH,EAAmC,GAAhBD,EAAqB,CACxC,CAED3D,GAAkB5jE,MAAMgiE,MAAQX,GAAgB,KAChDuC,GAAkB5jE,MAAMiiE,OAASqF,EAAiB,KAClD3D,GAAS3jE,MAAMgiE,MAAQX,GAAgB,KACvCsC,GAAS3jE,MAAMiiE,OAASqF,EAAiB,KAEzC,MAAMM,EAAmBvG,GAAgB9vC,GAAM5pB,KAAKkvB,SAC9CgxC,EAAoBD,GAAYr2C,GAAM5pB,KAAK+a,YAAcvgC,EAAOsQ,cAE/Dq1E,GAA2BR,EAAe,GAAKE,EAC/CO,GAA4BT,EAAe,GAAKnlF,EAAO0Y,UAE9D,IAAK,IAAIo8B,EAAc,EAAGA,EAAM1F,GAAM5pB,KAAKkvB,SAAW,EAAGI,IAAO,CAC/D,MAAM+wC,EAAiB/wC,GAAO1F,GAAM5pB,KAAKgvB,WAAaM,GAAO1F,GAAM5pB,KAAKgvB,UAAYpF,GAAM5pB,KAAKivB,WAAcl1B,EAAYuJ,WAAavJ,EAAYyJ,mBACjJw4D,GAASn/E,YAAYk8E,GAAK,CAACjpE,EAAGw/B,EAAM2wC,EAAW,EAAGlwE,EAAG,EAAGsqE,MAAO,EAAGC,OAAQqF,EAAgBj3B,KAAM23B,IACjG,CAED,IAAK,IAAIjqD,EAAiB,EAAGA,GAAUwpD,EAAexpD,IACpD4lD,GAASn/E,YAAYk8E,GAAK,CAACjpE,EAAG,EAAGC,EAAY,GAATqmB,EAAc+pD,EAAiB9F,MAAOX,GAAeY,OAAQ6F,EAAkB,EAAGz3B,KAAM3uC,EAAY4J,MAAO28D,QAAS,OAG1J,IAAK,IAAIlmE,EAAkBwvB,GAAM5pB,KAAK8sB,SAAS/wC,OAAS,EAAI6tC,GAAM5pB,KAAKuuB,gBAAiBn0B,GAAW,EAAGA,IAAW,CAEhH,MAAMwQ,EAAmBgf,GAAM5pB,KAAK4uB,kBAAkBx0B,GAChDmmE,EAAsB31D,EAAUw1D,EAAkBD,EAElDK,EAAiC52C,GAAM5pB,KAAK8sB,SAAS1yB,GAASgc,OAG9DqqD,EAF0B18E,KAAKiM,IAAI,EAAGjM,KAAKuC,IAAI9L,EAAO2Y,aAAeysE,EAAe77E,KAAKyS,KAAKgqE,EAAyC,GAAhBZ,KAEnFW,EAAc,GAAKZ,EAA+B,GAAdY,EAAoB,GAElG,IAAK,IAAIjxC,EAAc,EAAGA,EAAM1F,GAAM5pB,KAAKkvB,SAAUI,IAAO,CAC3D,MAAMD,EAA0BzF,GAAM5pB,KAAKs+B,WAAWlkC,EAASk1B,GAC/D,GAAe,MAAXD,EAAiB,SACrB,MAAMqxC,EAAkBpxC,EAAM2wC,EAE9B,IAAK,IAAIx8E,EAAY,EAAGA,EAAI4rC,EAAQlW,MAAMp9B,OAAQ0H,IAAK,CACtD,MAAM61B,EAAa+V,EAAQlW,MAAM11B,GAEjC,IAAK,MAAMs0B,KAASuB,EAAKrB,QAAS,CACjC,MAAMmjD,EAAYuF,GAAS5oD,EAAOuB,EAAKnF,MAAOmF,EAAKpB,MAAOqoD,EAAc,GAAK,EAAGG,EAASD,EAASP,EAAWK,GACtGK,EAA8B5H,GAAK,CAACoC,EAAGA,EAAG1yB,KAAM3uC,EAAYkG,gBAAgB2pB,GAAM5pB,KAAM5F,GAASc,iBACpG0P,IAASg2D,EAAYvoE,MAAMioE,QAAU7uC,OAAO,KAChDuqC,GAASn/E,YAAY+jF,EACrB,CACD,CACD,CACD,CAED1C,IACD,CAEA,SAASyC,GAAS5oD,EAAe5D,EAAe+D,EAAiB2oD,EAAgBH,EAAiBD,EAAiBP,EAAmBK,GACrI,IAAInF,EAAY,KAAKsF,EAAUR,GAAa/rD,EAAQ+D,EAAK,GAAGL,SAAS4oD,EAAU1oD,EAAQwoD,EAAcM,GAAU3oD,EAAK,GAAG3I,KAAO/0B,EAAOwU,gBACrI,IAAK,IAAIvL,EAAY,EAAGA,EAAIy0B,EAAKn8B,OAAQ0H,IAAK,CAC7C,MAAMm1B,EAAeV,EAAKz0B,GAI1B23E,GAAK,KAHgBsF,EAAUR,GAAa/rD,EAAQyE,EAAIf,SACtC4oD,EAAUF,GAAexoD,EAAQa,EAAI9M,UAEpC+0D,GADQjoD,EAAIrJ,KAAO/0B,EAAOwU,eAE7C,CACD,IAAK,IAAIvL,EAAYy0B,EAAKn8B,OAAS,EAAG0H,GAAK,EAAGA,IAAK,CAClD,MAAMm1B,EAAeV,EAAKz0B,GAI1B23E,GAAK,KAHgBsF,EAAUR,GAAa/rD,EAAQyE,EAAIf,SACtC4oD,EAAUF,GAAexoD,EAAQa,EAAI9M,UAEpC+0D,GADQjoD,EAAIrJ,KAAO/0B,EAAOwU,eAE7C,CACD,OAAOosE,CACR,CAEA,SAASkD,KACJ10C,GAAM2xB,SACT0f,GAAW6F,UAAUzxD,OAAO,cAC5B4rD,GAAW6F,UAAUC,IAAI,eACzB9F,GAAW7rC,MAAQ,gBACnB6rC,GAAWv6D,YAAc,UAEzBu6D,GAAW6F,UAAUzxD,OAAO,eAC5B4rD,GAAW6F,UAAUC,IAAI,cACzB9F,GAAW7rC,MAAQ,eACnB6rC,GAAWv6D,YAAc,QAE1B84D,GAAuB5vC,GAAM2xB,OAC9B,CAEA,SAASmiB,KACRvC,GAAStjE,aAAa,QAAmC,GAA1B+xB,GAAM0zB,gBAAyBvjD,EAAYwJ,WAAaxJ,EAAYyJ,mBACpG,CAEA,SAASw9D,KACRtF,GAASrjE,MAAMgoE,MAAQ5G,GAAc1/D,EAAYwJ,WAAaxJ,EAAYyJ,kBAC3E,C,OAqDMy9D,MAAQC,MAEbtG,GAASviE,MAAMoiE,QAAU,OACzBK,GAAUziE,MAAMoiE,QAAU,SAG1BM,GAAe1iE,MAAMoiE,QAAU,OACzB,UAAWj1D,YAAYs1D,GAAUziE,MAAMoiE,QAAU,SAGvB,MAA7BtB,GAAgB,YACnBqC,GAAa1zE,MAAQqxE,GAAgB,WAEtCqG,KAEAhmC,OAAO18C,iBAAiB,UA1UxB,WACC6gF,IACD,IAyUAnkC,OAAO18C,iBAAiB,WAnExB,SAAsBC,GACrB,OAAQA,EAAMokF,SACb,KAAK,GACJv3C,GAAM5mB,SAAW,EACjB4mB,GAAM8vB,yBACN38D,EAAM6hF,iBACN,MACD,KAAK,GACJX,KACAr0C,GAAM8vB,yBACN38D,EAAM6hF,iBACN,MACD,KAAK,IACJh1C,GAAMq4B,cACNr4B,GAAM8vB,yBACNwkB,KACAnhF,EAAM6hF,iBACN,MACD,KAAK,IACJh1C,GAAMo4B,cACNp4B,GAAM8vB,yBACNwkB,KACAnhF,EAAM6hF,iBAGT,IA4CA5C,GAASl/E,iBAAiB,aA3O1B,SAA6BC,GAC5Bi+E,IAAmB,EACnB2D,GAAoB5hF,EACrB,IAyOAy8C,OAAO18C,iBAAiB,YAAa6hF,IACrCnlC,OAAO18C,iBAAiB,UAAWyiF,IACnCvD,GAASl/E,iBAAiB,cAnO1B,SAA6BC,GAC5Bi+E,IAAmB,EACnBgE,GAAoBjiF,EACrB,IAiOAi/E,GAASl/E,iBAAiB,YAAakiF,IACvChD,GAASl/E,iBAAiB,WAAYyiF,IACtCvD,GAASl/E,iBAAiB,cAAeyiF,IAEzCtE,GAAWn+E,iBAAiB,QAASmhF,IACrC5C,GAAWv+E,iBAAiB,SAxQ5B,YAC+B,GAA1B8sC,GAAM0zB,gBACT1zB,GAAM0zB,gBAAkB,EAExB1zB,GAAM0zB,iBAAmB,EAE1BogB,IACD,IAkQAlC,GAAa1+E,iBAAiB,SAhQ9B,WACCigF,GAAgB,SAAUvB,GAAa1zE,OACvC03E,IACD,IA8PAzD,GAAWj/E,iBAAiB,SA5P5B,WACC28E,IAAeA,GACfuH,KACArD,IACD,IAyPA/C,GAAS99E,iBAAiB,SAtD1B,WAEC,IAAIskF,EAGJ,GAFAA,EAAM57D,UAEF47D,EAAIC,WAAaD,EAAIC,UAAUC,UAIlC,YAHAF,EAAIC,UAAUC,UAAU7nC,SAASohC,MAAM3+E,OAAM,KAC5Cs9C,OAAO+nC,OAAO,qBAAsB9nC,SAASohC,KAAK,IAIpD,MAAM2G,EAAiC/kF,SAASC,cAAc,YAC9D8kF,EAAU9gE,YAAc+4B,SAASohC,KACjCp+E,SAASmhF,KAAK/gF,YAAY2kF,GAC1BA,EAAUC,SACV,MAAMC,EAAqBjlF,SAASklF,YAAY,QAChDH,EAAUnyD,SACLqyD,GAAWloC,OAAO+nC,OAAO,aAAc9nC,SAASohC,KACtD,IAqCAC,GAAUh+E,iBAAiB,SAnC3B,WACO0oB,UAAWo8D,MAAM,CAAE9nF,IAAK2/C,SAASohC,MACxC,IAkCArhC,OAAO18C,iBAAiB,aAAcugF,IAEtCA,KACAK,KACAsD,KACA1C,K"}